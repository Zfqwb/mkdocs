{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Java Docs nitto \u57fa\u7840\u9762\u8bd5\u9898 \u00b6 1-map\u96c6\u5408\u7684\u904d\u5386\u65b9\u5f0f \u00b6 2-1-HasMap\u7684\u7279\u6027 \u00b6 2-2-HasMap\u96c6\u5408\u7684\u6269\u5c55 \u00b6 3-1-Java\u865a\u62df\u673a\u4e2d\u7684\u5185\u5b58\u6a21\u578b \u00b6 3-2-\u7ebf\u7a0b\u5185\u5b58\u7a7a\u95f4\uff08\u6269\u5c55\uff09 \u00b6 4-\u7b80\u5355\u8bf4\u8bf4Java\u4e2d\u7684\u5f02\u5e38\u5904\u7406\u673a\u5236\u7684\u7b80\u5355\u539f\u7406\u548c\u5e94\u7528\u3002 \u00b6 5-\u521b\u5efa\u7ebf\u7a0b\u7684\u51e0\u79cd\u65b9\u5f0f\uff1f \u00b6 6-\u8c08\u8c08\u4f60\u5bf9\u5783\u573e\u56de\u6536\u673a\u5236\u7684\u4e86\u89e3\uff1f \u00b6 7-\u8bf4\u8bf4HashCode\uff08\uff09\u3001equals\uff08\uff09\u7684\u533a\u522b\uff1f \u00b6 8-String.StirngBuilder\uff0cStringBuffer\u4e09\u8005\u7684\u533a\u522b \u00b6 9-\u662f\u5426\u53ef\u4ee5\u4ece\u4e00\u4e2astatic\u65b9\u6cd5\u5185\u90e8\u53d1\u51fa\u5bf9\u975estatio\u65b9\u6cd5\u7684\u8c03\u7528 \u00b6 10-wait\u65b9\u6cd5\u548csleep\u65b9\u6cd5\u7684\u533a\u522b \u00b6 11-\u95ee\u9898\u6269\u5c55\u5e94\u7528\u573a\u666f \u00b6 12-Strings=new String\uff08xyz\uff09\uff1a\u521b\u5efa\u4e86\u51e0\u4e2aStringobject\uff1f\u662f\u5426\u53ef\u4ee5\u7ee7\u627fString\u7c7b\uff1f \u00b6 13-\u591a\u7ebf\u7a0b\u4e2d\u89e3\u51b3\u540c\u6b65\u95ee\u9898\u7684\u65b9\u5f0f \u00b6 14-Strings=Hello\uff1bs=s+world.\uff1a\u8fd9\u4e24\u884c\u4ee3\u7801\u6267\u884c\u540e\uff0c\u539f\u59cb\u7684String\u5bf9\u8c61\u4e2d\u7684\u5185\u5bb9\u5230\u5e95\u53d8\u4e86\u6ca1\u6709\uff1f \u00b6 15-HaslMap\u548cHashtable\u7684\u533a\u522b \u00b6 16-\u5355\u4f8b\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u61d2\u6c49\u5f0f\u548c\u997f\u6c49\u5f0f\u7684\u533a\u522b \u00b6 17-\u7c7b\u52a0\u8f7d\u673a\u5236\u6709\u4e86\u89e3\u5417 \u00b6 JavaWeb\u9762\u8bd5\u9898 \u00b6 1-cookie\u548csession\u7684\u533a\u522b\u4e0e\u8054\u7cfb \u00b6 2-\u5728HTTP\u8bf7\u6c42\u4e2d\uff0c\u4ec0\u4e48\u60c5\u51b5\u4e0b\u6211\u4eec\u4f1a\u9009\u62e9post\u65b9\u5f0f\u800c\u975eget\uff1f\u53cd\u4e4b\u4e5f\u662f\u5982\u4f55\u8003\u8651\u7684\uff1f \u00b6 3-JSP\u7684\u4e5d\u5927\u5185\u7f6e\u5bf9\u8c61\u53ca\u4f5c\u7528\u5206\u522b\u662f\u4ec0\u4e48\uff1f \u00b6 4-servlet\u7684\u751f\u547d\u5468\u671f\u53ca\u5e38\u7528\u65b9\u6cd5 \u00b6 5-\u8f6c\u53d1\u548c\u91cd\u5b9a\u5411\u7684\u533a\u522b \u00b6 6-ajax\u4e66\u5199\u65b9\u5f0f\u53ca\u5185\u90e8\u4e3b\u8981\u53c2\u6570\u90fd\u6709\u54ea\u4e9b \u00b6 7-Jquery\u5e38\u7528\u9009\u62e9\u5668\u90fd\u6709\u54ea\u4e9b \u00b6 8-JSP\u548cServlet\u7684\u4e4b\u95f4\u7684\u8054\u7cfb\u53ca\u533a\u522b \u00b6 9-ajax\u63d0\u4ea4\u8bf7\u6c42\u9ed8\u8ba4\u662f\u5f02\u6b65\u8fd8\u662f\u540c\u6b65\u600e\u4e48\u6539\u6210\u540c\u6b65\uff1f \u00b6 10-\u4f60\u7684\u9879\u76ee\u4e2d\u4f7f\u7528\u8fc7\u90a3\u4e9bJSTI\u6807\u7b7e\uff1f \u00b6 11-JSP\u5e38\u7528\u7684\u52a8\u4f5c\u6807\u7b7e\u53ca\u4f5c\u7528 \u00b6 12-JSP\u56db\u5927\u4f5c\u7528\u57df\u53ca\u8bf7\u6c42\u8303\u56f4 \u00b6 13-\u5982\u4f55\u9632\u6b62\u8868\u5355\u91cd\u590d\u63d0\u4ea4\u95ee\u9898 \u00b6 14-\u5206\u522b\u8bf4\u51fahttp\uff0chttps\uff0cftp\uff0ctalnet\u7684\u9ed8\u8ba4\u7aef\u53e3 \u00b6 15-\u5e38\u89c1\u7684http\u8fd4\u56de\u72b6\u6001\u7801\uff08200\uff0c301\uff0c302\uff0c400\uff09 \u00b6 16-TCP\u548cUDP\u533a\u522b\uff0c\u4f60\u5bf9HTTP\u534f\u8bae\u7684\u7406\u89e3 \u00b6 17-json\u6570\u636e\u7684\u683c\u5f0f\u662f\u4ec0\u4e48 \u00b6 \u6846\u67b6\u9762\u8bd5\u9898 \u00b6 1-Spring \u662f\u5982\u4f55\u7ba1\u7406\u4e8b\u52a1\u7684\uff0c\u4e8b\u52a1\u7ba1\u7406\u673a\u5236\uff1f\u4ee5\u53ca\u9694\u79bb\u7ea7\u522b \u00b6 2-Spring AOP\u7684\u5b9e\u73b0\u539f\u7406\uff1f \u00b6 3-IOC\u548cDT\u7684\u5173\u7cfb \u00b6 4-Spring \u4e2d\u7528\u5230\u4e86\u90a3\u4e9b\u8bbe\u8ba1\u6a21\u5f0f\uff1f \u00b6 5-Spring\u4e2dBean\u7684\u4f5c\u7528\u57df\u6709\u54ea\u4e9b\uff1f \u00b6 6-spring\u6846\u67b6\u5b9e\u73b0\u5b9e\u4f8b\u5316\u548c\u4f9d\u8d56\u6ce8\u5165\u7684\u65b9\u5f0f\u5206\u522b\u662f\u4ec0\u4e48\uff1f \u00b6 7-springMVC\u7684\u6267\u884c\u6d41\u7a0b \u00b6 8-spring\u548csprinVC\u4e2d\u7684\u5e38\u7528\u6ce8\u89e3 \u00b6 9-springfVC\u548cstruts2\u7684\u533a\u522b\u6709\u54ea\u4e9b \u00b6 10-springfVC\u4e2d\u7684\u524d\u7aef\u63a7\u5236\u5668\u548c\u5904\u7406\u5668\u6620\u5c04\u5668\u7684\u8bf4\u660e \u00b6 11-springVC\u5982\u4f55\u5b9e\u73b0\u8bf7\u6c42\u53c2\u6570\u7ed1\u5b9a\u7684 \u00b6 12-springMVC\u83b7\u53d6\u8868\u5355\u6570\u636e\u7684\u51e0\u79cd\u65b9\u5f0f \u00b6 13-ssm\u6574\u5408\u6d41\u7a0b\u8bf4\u660e \u00b6 14-mybatis\u548chibernate\u7684\u4f18\u7f3a\u70b9\u5206\u6790 \u00b6 15-mybatis\u4e2d#\u548c$\u4f20\u53c2\u7684\u533a\u522b \u00b6 16-mybatis\u4e2d\u7684\u52a8\u6001sql\u8bed\u53e5\u662f\u4ec0\u4e48\u610f\u601d\uff1f \u00b6 17-mybatis\u6620\u5c04\u914d\u7f6e\u6587\u4ef6\u7684\u7f16\u5199\u89c4\u8303 \u00b6 18-mybatis\u7684\u6267\u884c\u8fc7\u7a0b\u5206\u6790 \u00b6 19-\u8bf4\u8bf4\u4f60\u6bd4\u8f83\u719f\u6089\u7684\u8bbe\u8ba1\u6a21\u5f0f\u53ca\u5e94\u7528\u573a\u666f\uff1f \u00b6 20-\u4e24\u79cd\u52a8\u6001\u4ee3\u7406\u7684\u533a\u522b \u00b6 \u9879\u76ee\u9762\u8bd5\u9898 \u00b6 1-\u7535\u5546\u9879\u76ee\u4e2d\u6709\u6ca1\u6709\u7528\u5230\u591a\u7ebf\u7a0b\uff0c\u54ea\u4e9b\u5730\u65b9\u8981\u7528\u591a\u7ebf\u7a0b\uff1f \u00b6 2-\u65e5\u5fd7\u6587\u4ef6\u7684\u7ba1\u7406\uff0c\u4f60\u4eec\u662f\u600e\u4e48\u505a\u7684\uff1f \u00b6 3-\u4f60\u89c9\u5f97\u5206\u5e03\u5f0f\u5f00\u53d1\u7684\u7f3a\u70b9\u662f\u4ec0\u4e48\uff1f \u00b6 4-\u652f\u4ed8\u63a5\u53e3\u662f\u600e\u4e48\u505a\u7684\uff1f \u00b6 5-so1r\u600e\u4e48\u8bbe\u7f6e\u641c\u7d22\u7ed3\u679c\u6392\u540d\u9760\u524d\uff08\u5f97\u5206\uff09\uff1f \u00b6 6-active@\u5728\u9879\u76ee\u4e2d\u5982\u4f55\u5e94\u7528\u7684\uff1f \u00b6 7-activea\u5982\u679c\u6570\u636e\u63d0\u4ea4\u4e0d\u6210\u529f\u600e\u4e48\u529e\uff1f \u00b6 8-\u5355\u70b9\u767b\u5f55\u7cfb\u7edf\u662f\u600e\u4e48\u505a\u7684\uff1f \u00b6 9-dubbo\u670d\u52a1\u5f00\u53d1\u6d41\u7a0b\uff0c\u8fd0\u884c\u6d41\u7a0b\uff1f \u00b6 10-solr\u8ddf\u6570\u636e\u5e93\u7684\u533a\u522b\uff0c\u4f60\u6e05\u695a\u4e48\uff1f \u00b6 11-\u5e7f\u544a\u6570\u636e\u662f\u600e\u4e48\u7528redis\u7f13\u5b58\u7684\uff1f \u00b6 12-.\u9879\u76ee\u4e2d\u6743\u9650\u662f\u600e\u4e48\u505a\u7684\uff1f \u00b6 13-\u5982\u4f55\u5904\u7406activeQ\u6d88\u606f\u4e22\u5931\u7684\u95ee\u9898 \u00b6 14-token\u5728\u9879\u76ee\u4e2d\u7684\u5e94\u7528\uff1ftoken\u6821\u9a8c\u7684\u8fc7\u7a0b \u00b6 15-so1r\u548c\u6570\u636e\u5e93\u600e\u4e48\u4ea4\u4e92\u7684\uff1f \u00b6 16-redis\u7f13\u5b58\u4e0e\u6570\u636e\u5e93\u540c\u6b65\uff0c\u600e\u4e48\u505a\u7684\uff1f \u00b6 17-fastDFS\u7684\u6267\u884c\u6d41\u7a0b\uff0c\u4f60\u6e05\u695a\u4e48\uff1f \u00b6 18-zookeeper\u96c6\u7fa4\uff0c\u5168\u90e8\u90fd\u6302\u4e86\uff0c\u600e\u4e48\u529e\uff1f \u00b6 19-\u5982\u4f55\u89e3\u51b3\u8d2d\u7269\u8f66\u5185\u5b58\u5927\u5c0f\u7684\u95ee\u9898\uff1f \u00b6 20-springboot\u548cspringoloud\u7684\u5173\u7cfb \u00b6 21-SpringDataJpa\u5982\u4f55\u4f7f\u7528 \u00b6","title":"Home"},{"location":"#_1","text":"","title":"\u57fa\u7840\u9762\u8bd5\u9898"},{"location":"#1-map","text":"","title":"1-map\u96c6\u5408\u7684\u904d\u5386\u65b9\u5f0f"},{"location":"#2-1-hasmap","text":"","title":"2-1-HasMap\u7684\u7279\u6027"},{"location":"#2-2-hasmap","text":"","title":"2-2-HasMap\u96c6\u5408\u7684\u6269\u5c55"},{"location":"#3-1-java","text":"","title":"3-1-Java\u865a\u62df\u673a\u4e2d\u7684\u5185\u5b58\u6a21\u578b"},{"location":"#3-2-","text":"","title":"3-2-\u7ebf\u7a0b\u5185\u5b58\u7a7a\u95f4\uff08\u6269\u5c55\uff09"},{"location":"#4-java","text":"","title":"4-\u7b80\u5355\u8bf4\u8bf4Java\u4e2d\u7684\u5f02\u5e38\u5904\u7406\u673a\u5236\u7684\u7b80\u5355\u539f\u7406\u548c\u5e94\u7528\u3002"},{"location":"#5-","text":"","title":"5-\u521b\u5efa\u7ebf\u7a0b\u7684\u51e0\u79cd\u65b9\u5f0f\uff1f"},{"location":"#6-","text":"","title":"6-\u8c08\u8c08\u4f60\u5bf9\u5783\u573e\u56de\u6536\u673a\u5236\u7684\u4e86\u89e3\uff1f"},{"location":"#7-hashcodeequals","text":"","title":"7-\u8bf4\u8bf4HashCode\uff08\uff09\u3001equals\uff08\uff09\u7684\u533a\u522b\uff1f"},{"location":"#8-stringstirngbuilderstringbuffer","text":"","title":"8-String.StirngBuilder\uff0cStringBuffer\u4e09\u8005\u7684\u533a\u522b"},{"location":"#9-staticstatio","text":"","title":"9-\u662f\u5426\u53ef\u4ee5\u4ece\u4e00\u4e2astatic\u65b9\u6cd5\u5185\u90e8\u53d1\u51fa\u5bf9\u975estatio\u65b9\u6cd5\u7684\u8c03\u7528"},{"location":"#10-waitsleep","text":"","title":"10-wait\u65b9\u6cd5\u548csleep\u65b9\u6cd5\u7684\u533a\u522b"},{"location":"#11-","text":"","title":"11-\u95ee\u9898\u6269\u5c55\u5e94\u7528\u573a\u666f"},{"location":"#12-stringsnew_stringxyzstringobjectstring","text":"","title":"12-Strings=new String\uff08xyz\uff09\uff1a\u521b\u5efa\u4e86\u51e0\u4e2aStringobject\uff1f\u662f\u5426\u53ef\u4ee5\u7ee7\u627fString\u7c7b\uff1f"},{"location":"#13-","text":"","title":"13-\u591a\u7ebf\u7a0b\u4e2d\u89e3\u51b3\u540c\u6b65\u95ee\u9898\u7684\u65b9\u5f0f"},{"location":"#14-stringshellossworldstring","text":"","title":"14-Strings=Hello\uff1bs=s+world.\uff1a\u8fd9\u4e24\u884c\u4ee3\u7801\u6267\u884c\u540e\uff0c\u539f\u59cb\u7684String\u5bf9\u8c61\u4e2d\u7684\u5185\u5bb9\u5230\u5e95\u53d8\u4e86\u6ca1\u6709\uff1f"},{"location":"#15-haslmaphashtable","text":"","title":"15-HaslMap\u548cHashtable\u7684\u533a\u522b"},{"location":"#16-","text":"","title":"16-\u5355\u4f8b\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u61d2\u6c49\u5f0f\u548c\u997f\u6c49\u5f0f\u7684\u533a\u522b"},{"location":"#17-","text":"","title":"17-\u7c7b\u52a0\u8f7d\u673a\u5236\u6709\u4e86\u89e3\u5417"},{"location":"#javaweb","text":"","title":"JavaWeb\u9762\u8bd5\u9898"},{"location":"#1-cookiesession","text":"","title":"1-cookie\u548csession\u7684\u533a\u522b\u4e0e\u8054\u7cfb"},{"location":"#2-httppostget","text":"","title":"2-\u5728HTTP\u8bf7\u6c42\u4e2d\uff0c\u4ec0\u4e48\u60c5\u51b5\u4e0b\u6211\u4eec\u4f1a\u9009\u62e9post\u65b9\u5f0f\u800c\u975eget\uff1f\u53cd\u4e4b\u4e5f\u662f\u5982\u4f55\u8003\u8651\u7684\uff1f"},{"location":"#3-jsp","text":"","title":"3-JSP\u7684\u4e5d\u5927\u5185\u7f6e\u5bf9\u8c61\u53ca\u4f5c\u7528\u5206\u522b\u662f\u4ec0\u4e48\uff1f"},{"location":"#4-servlet","text":"","title":"4-servlet\u7684\u751f\u547d\u5468\u671f\u53ca\u5e38\u7528\u65b9\u6cd5"},{"location":"#5-_1","text":"","title":"5-\u8f6c\u53d1\u548c\u91cd\u5b9a\u5411\u7684\u533a\u522b"},{"location":"#6-ajax","text":"","title":"6-ajax\u4e66\u5199\u65b9\u5f0f\u53ca\u5185\u90e8\u4e3b\u8981\u53c2\u6570\u90fd\u6709\u54ea\u4e9b"},{"location":"#7-jquery","text":"","title":"7-Jquery\u5e38\u7528\u9009\u62e9\u5668\u90fd\u6709\u54ea\u4e9b"},{"location":"#8-jspservlet","text":"","title":"8-JSP\u548cServlet\u7684\u4e4b\u95f4\u7684\u8054\u7cfb\u53ca\u533a\u522b"},{"location":"#9-ajax","text":"","title":"9-ajax\u63d0\u4ea4\u8bf7\u6c42\u9ed8\u8ba4\u662f\u5f02\u6b65\u8fd8\u662f\u540c\u6b65\u600e\u4e48\u6539\u6210\u540c\u6b65\uff1f"},{"location":"#10-jsti","text":"","title":"10-\u4f60\u7684\u9879\u76ee\u4e2d\u4f7f\u7528\u8fc7\u90a3\u4e9bJSTI\u6807\u7b7e\uff1f"},{"location":"#11-jsp","text":"","title":"11-JSP\u5e38\u7528\u7684\u52a8\u4f5c\u6807\u7b7e\u53ca\u4f5c\u7528"},{"location":"#12-jsp","text":"","title":"12-JSP\u56db\u5927\u4f5c\u7528\u57df\u53ca\u8bf7\u6c42\u8303\u56f4"},{"location":"#13-_1","text":"","title":"13-\u5982\u4f55\u9632\u6b62\u8868\u5355\u91cd\u590d\u63d0\u4ea4\u95ee\u9898"},{"location":"#14-httphttpsftptalnet","text":"","title":"14-\u5206\u522b\u8bf4\u51fahttp\uff0chttps\uff0cftp\uff0ctalnet\u7684\u9ed8\u8ba4\u7aef\u53e3"},{"location":"#15-http200301302400","text":"","title":"15-\u5e38\u89c1\u7684http\u8fd4\u56de\u72b6\u6001\u7801\uff08200\uff0c301\uff0c302\uff0c400\uff09"},{"location":"#16-tcpudphttp","text":"","title":"16-TCP\u548cUDP\u533a\u522b\uff0c\u4f60\u5bf9HTTP\u534f\u8bae\u7684\u7406\u89e3"},{"location":"#17-json","text":"","title":"17-json\u6570\u636e\u7684\u683c\u5f0f\u662f\u4ec0\u4e48"},{"location":"#_2","text":"","title":"\u6846\u67b6\u9762\u8bd5\u9898"},{"location":"#1-spring","text":"","title":"1-Spring \u662f\u5982\u4f55\u7ba1\u7406\u4e8b\u52a1\u7684\uff0c\u4e8b\u52a1\u7ba1\u7406\u673a\u5236\uff1f\u4ee5\u53ca\u9694\u79bb\u7ea7\u522b"},{"location":"#2-spring_aop","text":"","title":"2-Spring AOP\u7684\u5b9e\u73b0\u539f\u7406\uff1f"},{"location":"#3-iocdt","text":"","title":"3-IOC\u548cDT\u7684\u5173\u7cfb"},{"location":"#4-spring","text":"","title":"4-Spring \u4e2d\u7528\u5230\u4e86\u90a3\u4e9b\u8bbe\u8ba1\u6a21\u5f0f\uff1f"},{"location":"#5-springbean","text":"","title":"5-Spring\u4e2dBean\u7684\u4f5c\u7528\u57df\u6709\u54ea\u4e9b\uff1f"},{"location":"#6-spring","text":"","title":"6-spring\u6846\u67b6\u5b9e\u73b0\u5b9e\u4f8b\u5316\u548c\u4f9d\u8d56\u6ce8\u5165\u7684\u65b9\u5f0f\u5206\u522b\u662f\u4ec0\u4e48\uff1f"},{"location":"#7-springmvc","text":"","title":"7-springMVC\u7684\u6267\u884c\u6d41\u7a0b"},{"location":"#8-springsprinvc","text":"","title":"8-spring\u548csprinVC\u4e2d\u7684\u5e38\u7528\u6ce8\u89e3"},{"location":"#9-springfvcstruts2","text":"","title":"9-springfVC\u548cstruts2\u7684\u533a\u522b\u6709\u54ea\u4e9b"},{"location":"#10-springfvc","text":"","title":"10-springfVC\u4e2d\u7684\u524d\u7aef\u63a7\u5236\u5668\u548c\u5904\u7406\u5668\u6620\u5c04\u5668\u7684\u8bf4\u660e"},{"location":"#11-springvc","text":"","title":"11-springVC\u5982\u4f55\u5b9e\u73b0\u8bf7\u6c42\u53c2\u6570\u7ed1\u5b9a\u7684"},{"location":"#12-springmvc","text":"","title":"12-springMVC\u83b7\u53d6\u8868\u5355\u6570\u636e\u7684\u51e0\u79cd\u65b9\u5f0f"},{"location":"#13-ssm","text":"","title":"13-ssm\u6574\u5408\u6d41\u7a0b\u8bf4\u660e"},{"location":"#14-mybatishibernate","text":"","title":"14-mybatis\u548chibernate\u7684\u4f18\u7f3a\u70b9\u5206\u6790"},{"location":"#15-mybatis","text":"","title":"15-mybatis\u4e2d#\u548c$\u4f20\u53c2\u7684\u533a\u522b"},{"location":"#16-mybatissql","text":"","title":"16-mybatis\u4e2d\u7684\u52a8\u6001sql\u8bed\u53e5\u662f\u4ec0\u4e48\u610f\u601d\uff1f"},{"location":"#17-mybatis","text":"","title":"17-mybatis\u6620\u5c04\u914d\u7f6e\u6587\u4ef6\u7684\u7f16\u5199\u89c4\u8303"},{"location":"#18-mybatis","text":"","title":"18-mybatis\u7684\u6267\u884c\u8fc7\u7a0b\u5206\u6790"},{"location":"#19-","text":"","title":"19-\u8bf4\u8bf4\u4f60\u6bd4\u8f83\u719f\u6089\u7684\u8bbe\u8ba1\u6a21\u5f0f\u53ca\u5e94\u7528\u573a\u666f\uff1f"},{"location":"#20-","text":"","title":"20-\u4e24\u79cd\u52a8\u6001\u4ee3\u7406\u7684\u533a\u522b"},{"location":"#_3","text":"","title":"\u9879\u76ee\u9762\u8bd5\u9898"},{"location":"#1-","text":"","title":"1-\u7535\u5546\u9879\u76ee\u4e2d\u6709\u6ca1\u6709\u7528\u5230\u591a\u7ebf\u7a0b\uff0c\u54ea\u4e9b\u5730\u65b9\u8981\u7528\u591a\u7ebf\u7a0b\uff1f"},{"location":"#2-","text":"","title":"2-\u65e5\u5fd7\u6587\u4ef6\u7684\u7ba1\u7406\uff0c\u4f60\u4eec\u662f\u600e\u4e48\u505a\u7684\uff1f"},{"location":"#3-","text":"","title":"3-\u4f60\u89c9\u5f97\u5206\u5e03\u5f0f\u5f00\u53d1\u7684\u7f3a\u70b9\u662f\u4ec0\u4e48\uff1f"},{"location":"#4-","text":"","title":"4-\u652f\u4ed8\u63a5\u53e3\u662f\u600e\u4e48\u505a\u7684\uff1f"},{"location":"#5-so1r","text":"","title":"5-so1r\u600e\u4e48\u8bbe\u7f6e\u641c\u7d22\u7ed3\u679c\u6392\u540d\u9760\u524d\uff08\u5f97\u5206\uff09\uff1f"},{"location":"#6-active","text":"","title":"6-active@\u5728\u9879\u76ee\u4e2d\u5982\u4f55\u5e94\u7528\u7684\uff1f"},{"location":"#7-activea","text":"","title":"7-activea\u5982\u679c\u6570\u636e\u63d0\u4ea4\u4e0d\u6210\u529f\u600e\u4e48\u529e\uff1f"},{"location":"#8-","text":"","title":"8-\u5355\u70b9\u767b\u5f55\u7cfb\u7edf\u662f\u600e\u4e48\u505a\u7684\uff1f"},{"location":"#9-dubbo","text":"","title":"9-dubbo\u670d\u52a1\u5f00\u53d1\u6d41\u7a0b\uff0c\u8fd0\u884c\u6d41\u7a0b\uff1f"},{"location":"#10-solr","text":"","title":"10-solr\u8ddf\u6570\u636e\u5e93\u7684\u533a\u522b\uff0c\u4f60\u6e05\u695a\u4e48\uff1f"},{"location":"#11-redis","text":"","title":"11-\u5e7f\u544a\u6570\u636e\u662f\u600e\u4e48\u7528redis\u7f13\u5b58\u7684\uff1f"},{"location":"#12-","text":"","title":"12-.\u9879\u76ee\u4e2d\u6743\u9650\u662f\u600e\u4e48\u505a\u7684\uff1f"},{"location":"#13-activeq","text":"","title":"13-\u5982\u4f55\u5904\u7406activeQ\u6d88\u606f\u4e22\u5931\u7684\u95ee\u9898"},{"location":"#14-tokentoken","text":"","title":"14-token\u5728\u9879\u76ee\u4e2d\u7684\u5e94\u7528\uff1ftoken\u6821\u9a8c\u7684\u8fc7\u7a0b"},{"location":"#15-so1r","text":"","title":"15-so1r\u548c\u6570\u636e\u5e93\u600e\u4e48\u4ea4\u4e92\u7684\uff1f"},{"location":"#16-redis","text":"","title":"16-redis\u7f13\u5b58\u4e0e\u6570\u636e\u5e93\u540c\u6b65\uff0c\u600e\u4e48\u505a\u7684\uff1f"},{"location":"#17-fastdfs","text":"","title":"17-fastDFS\u7684\u6267\u884c\u6d41\u7a0b\uff0c\u4f60\u6e05\u695a\u4e48\uff1f"},{"location":"#18-zookeeper","text":"","title":"18-zookeeper\u96c6\u7fa4\uff0c\u5168\u90e8\u90fd\u6302\u4e86\uff0c\u600e\u4e48\u529e\uff1f"},{"location":"#19-_1","text":"","title":"19-\u5982\u4f55\u89e3\u51b3\u8d2d\u7269\u8f66\u5185\u5b58\u5927\u5c0f\u7684\u95ee\u9898\uff1f"},{"location":"#20-springbootspringoloud","text":"","title":"20-springboot\u548cspringoloud\u7684\u5173\u7cfb"},{"location":"#21-springdatajpa","text":"","title":"21-SpringDataJpa\u5982\u4f55\u4f7f\u7528"},{"location":"MySQL/","text":"MySQL \u53c2\u8003\u624b\u518c \u00b6 Reference Manual day01 \u00b6 01\u64cd\u4f5c\u6570\u636e\u5e93\u548c\u6570\u636e\u8868 \u00b6 \u67e5\u8be2\u6240\u6709\u6570\u636e\u5e93 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a SHOW DATABASES; */ \u67e5\u8be2\u67d0\u4e2a\u6570\u636e\u5e93\u7684\u521b\u5efa\u8bed\u53e5 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a SHOW CREATE DATABASE \u6570\u636e\u5e93\u540d\u79f0; */ \u521b\u5efa\u6570\u636e\u5e93 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a CREATE DATABASE \u6570\u636e\u5e93\u540d\u79f0; */ \u521b\u5efa\u6570\u636e\u5e93\uff0c\u5224\u65ad\u3001\u5982\u679c\u4e0d\u5b58\u5728\u5219\u521b\u5efa \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a CREATE DATABASE IF NOT EXISTS \u6570\u636e\u5e93\u540d\u79f0; */ \u521b\u5efa\u6570\u636e\u5e93\u3001\u5e76\u6307\u5b9a\u5b57\u7b26\u96c6 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a CREATE DATABASE \u6570\u636e\u5e93\u540d\u79f0 CHARACTER SET \u5b57\u7b26\u96c6\u540d\u79f0; */ \u67e5\u770b\u6570\u636e\u5e93\u7684\u5b57\u7b26\u96c6 \u00b6 SHOW CREATE DATABASE \u6570\u636e\u5e93\u540d\u79f0 ; \u4fee\u6539\u6570\u636e\u5e93\u7684\u5b57\u7b26\u96c6 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a ALTER DATABASE \u6570\u636e\u5e93\u540d\u79f0 CHARACTER SET \u5b57\u7b26\u96c6\u540d\u79f0; */ \u5220\u9664\u6570\u636e\u5e93 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a DROP DATABASE \u6570\u636e\u5e93\u540d\u79f0; */ \u5220\u9664\u6570\u636e\u5e93\uff0c\u5224\u65ad\u3001\u5982\u679c\u5b58\u5728\u5219\u5220\u9664 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a DROP DATABASE IF EXISTS \u6570\u636e\u5e93\u540d\u79f0; */ \u4f7f\u7528\u6570\u636e\u5e93 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a USE \u6570\u636e\u5e93\u540d\u79f0; */ \u67e5\u8be2\u5f53\u524d\u4f7f\u7528\u7684\u6570\u636e\u5e93 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT DATABASE(); */ \u67e5\u8be2\u6240\u6709\u6570\u636e\u8868 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a SHOW TABLES; */ \u67e5\u8be2\u8868\u7ed3\u6784 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a DESC \u8868\u540d; */ \u67e5\u8be2\u6570\u636e\u8868\u7684\u5b57\u7b26\u96c6 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a SHOW TABLE STATUS FROM \u6570\u636e\u5e93\u540d\u79f0 LIKE '\u8868\u540d'; */ \u521b\u5efa\u6570\u636e\u8868 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a CREATE TABLE \u8868\u540d( \u5217\u540d \u6570\u636e\u7c7b\u578b \u7ea6\u675f, \u5217\u540d \u6570\u636e\u7c7b\u578b \u7ea6\u675f, ... \u5217\u540d \u6570\u636e\u7c7b\u578b \u7ea6\u675f ); */ \u4fee\u6539\u8868\u540d \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u65e7\u8868\u540d RENAME TO \u65b0\u8868\u540d; */ \u4fee\u6539\u8868\u7684\u5b57\u7b26\u96c6 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d CHARACTER SET \u5b57\u7b26\u96c6\u540d\u79f0; */ \u7ed9\u8868\u6dfb\u52a0\u5217 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d ADD \u5217\u540d \u6570\u636e\u7c7b\u578b; */ \u4fee\u6539\u8868\u4e2d\u5217\u7684\u6570\u636e\u7c7b\u578b \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d MODIFY \u5217\u540d \u6570\u636e\u7c7b\u578b; */ \u4fee\u6539\u8868\u4e2d\u5217\u7684\u540d\u79f0\u548c\u6570\u636e\u7c7b\u578b \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d CHANGE \u65e7\u5217\u540d \u65b0\u5217\u540d \u6570\u636e\u7c7b\u578b; */ \u5220\u9664\u8868\u4e2d\u7684\u5217 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d DROP \u5217\u540d; */ \u5220\u9664\u8868 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a DROP TABLE \u8868\u540d; */ \u5220\u9664\u8868\uff0c\u5224\u65ad\u3001\u5982\u679c\u5b58\u5728\u5219\u5220\u9664 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a DROP TABLE IF EXISTS \u8868\u540d; */ 02\u8868\u6570\u636e\u7684\u589e\u5220\u6539 \u00b6 \u7ed9\u6307\u5b9a\u5217\u6dfb\u52a0\u6570\u636e \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a INSERT INTO \u8868\u540d(\u5217\u540d1,\u5217\u540d2,...) VALUES (\u503c1,\u503c2,...); */ \u7ed9\u5168\u90e8\u5217\u6dfb\u52a0\u6570\u636e \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a INSERT INTO \u8868\u540d VALUES (\u503c1,\u503c2,\u503c3,...); */ \u6279\u91cf\u6dfb\u52a0\u6240\u6709\u5217\u6570\u636e \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a INSERT INTO \u8868\u540d VALUES (\u503c1,\u503c2,\u503c3,...),(\u503c1,\u503c2,\u503c3,...),(\u503c1,\u503c2,\u503c3,...); */ \u4fee\u6539\u8868\u6570\u636e \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a UPDATE \u8868\u540d SET \u5217\u540d1 = \u503c1,\u5217\u540d2 = \u503c2,... [where \u6761\u4ef6]; */ \u5220\u9664\u8868\u6570\u636e \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a DELETE FROM \u8868\u540d [WHERE \u6761\u4ef6]; */ 03\u8868\u6570\u636e\u7684\u67e5\u8be2 \u00b6 \u67e5\u8be2\u5168\u90e8\u6570\u636e \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT * FROM \u8868\u540d; */ \u67e5\u8be2\u6307\u5b9a\u5217 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d1,\u5217\u540d2,... FROM \u8868\u540d; */ \u53bb\u9664\u91cd\u590d\u67e5\u8be2 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT DISTINCT \u5217\u540d1,\u5217\u540d2,... FROM \u8868\u540d; */ \u8ba1\u7b97\u5217\u7684\u503c \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d1 \u8fd0\u7b97\u7b26(+ - * /) \u5217\u540d2 FROM \u8868\u540d; \u5982\u679c\u67d0\u4e00\u5217\u4e3anull\uff0c\u53ef\u4ee5\u8fdb\u884c\u66ff\u6362 ifnull(\u8868\u8fbe\u5f0f1,\u8868\u8fbe\u5f0f2) \u8868\u8fbe\u5f0f1\uff1a\u60f3\u66ff\u6362\u7684\u5217 \u8868\u8fbe\u5f0f2\uff1a\u60f3\u66ff\u6362\u7684\u503c */ example -- \u67e5\u8be2\u5546\u54c1\u540d\u79f0\u548c\u5e93\u5b58\uff0c\u5e93\u5b58\u6570\u91cf\u5728\u539f\u6709\u57fa\u7840\u4e0a\u52a010 SELECT NAME,stock+10 FROM product; -- \u67e5\u8be2\u5546\u54c1\u540d\u79f0\u548c\u5e93\u5b58\uff0c\u5e93\u5b58\u6570\u91cf\u5728\u539f\u6709\u57fa\u7840\u4e0a\u52a010\u3002\u8fdb\u884cnull\u503c\u5224\u65ad SELECT NAME,IFNULL(stock,0)+10 FROM product; \u8d77\u522b\u540d \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d1,\u5217\u540d2,... AS \u522b\u540d FROM \u8868\u540d; */ as\u53ef\u4ee5\u7701\u7565 \u6761\u4ef6\u67e5\u8be2 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d\u5217\u8868 FROM \u8868\u540d WHERE \u6761\u4ef6; */ example -- \u67e5\u8be2\u5e93\u5b58\u5927\u4e8e20\u7684\u5546\u54c1\u4fe1\u606f SELECT * FROM product WHERE stock > 20; -- \u67e5\u8be2\u54c1\u724c\u4e3a\u534e\u4e3a\u7684\u5546\u54c1\u4fe1\u606f SELECT * FROM product WHERE brand='\u534e\u4e3a'; -- \u67e5\u8be2\u91d1\u989d\u57284000 ~ 6000\u4e4b\u95f4\u7684\u5546\u54c1\u4fe1\u606f SELECT * FROM product WHERE price >= 4000 AND price <= 6000; SELECT * FROM product WHERE price BETWEEN 4000 AND 6000; -- \u67e5\u8be2\u5e93\u5b58\u4e3a14\u300130\u300123\u7684\u5546\u54c1\u4fe1\u606f SELECT * FROM product WHERE stock=14 OR stock=30 OR stock=23; SELECT * FROM product WHERE stock IN(14,30,23); -- \u67e5\u8be2\u5e93\u5b58\u4e3anull\u7684\u5546\u54c1\u4fe1\u606f SELECT * FROM product WHERE stock IS NULL; -- \u67e5\u8be2\u5e93\u5b58\u4e0d\u4e3anull\u7684\u5546\u54c1\u4fe1\u606f SELECT * FROM product WHERE stock IS NOT NULL; -- \u67e5\u8be2\u540d\u79f0\u4ee5\u5c0f\u7c73\u4e3a\u5f00\u5934\u7684\u5546\u54c1\u4fe1\u606f SELECT * FROM product WHERE NAME LIKE '\u5c0f\u7c73%'; -- \u67e5\u8be2\u540d\u79f0\u7b2c\u4e8c\u4e2a\u5b57\u662f\u4e3a\u7684\u5546\u54c1\u4fe1\u606f SELECT * FROM product WHERE NAME LIKE '_\u4e3a%'; -- \u67e5\u8be2\u540d\u79f0\u4e3a\u56db\u4e2a\u5b57\u7b26\u7684\u5546\u54c1\u4fe1\u606f SELECT * FROM product WHERE NAME LIKE '____'; -- \u67e5\u8be2\u540d\u79f0\u4e2d\u5305\u542b\u7535\u8111\u7684\u5546\u54c1\u4fe1\u606f SELECT * FROM product WHERE NAME LIKE '%\u7535\u8111%'; \u805a\u5408\u51fd\u6570 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u51fd\u6570\u540d(\u5217\u540d) FROM \u8868\u540d [WHERE \u6761\u4ef6]; */ example -- \u8ba1\u7b97product\u8868\u4e2d\u603b\u8bb0\u5f55\u6761\u6570 SELECT COUNT(*) FROM product; -- \u83b7\u53d6\u6700\u9ad8\u4ef7\u683c SELECT MAX(price) FROM product; -- \u83b7\u53d6\u6700\u4f4e\u5e93\u5b58 SELECT MIN(stock) FROM product; -- \u83b7\u53d6\u603b\u5e93\u5b58\u6570\u91cf SELECT SUM(stock) FROM product; -- \u83b7\u53d6\u54c1\u724c\u4e3a\u82f9\u679c\u7684\u603b\u5e93\u5b58\u6570\u91cf SELECT SUM(stock) FROM product WHERE brand='\u82f9\u679c'; -- \u83b7\u53d6\u54c1\u724c\u4e3a\u5c0f\u7c73\u7684\u5e73\u5747\u5546\u54c1\u4ef7\u683c SELECT AVG(price) FROM product WHERE brand='\u5c0f\u7c73'; \u6392\u5e8f\u67e5\u8be2 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d FROM \u8868\u540d [WHERE \u6761\u4ef6] ORDER BY \u5217\u540d1 \u6392\u5e8f\u65b9\u5f0f1,\u5217\u540d2 \u6392\u5e8f\u65b9\u5f0f2; */ example -- \u6309\u7167\u5e93\u5b58\u5347\u5e8f\u6392\u5e8f SELECT * FROM product ORDER BY stock ASC; -- \u67e5\u8be2\u540d\u79f0\u4e2d\u5305\u542b\u624b\u673a\u7684\u5546\u54c1\u4fe1\u606f\u3002\u6309\u7167\u91d1\u989d\u964d\u5e8f\u6392\u5e8f SELECT * FROM product WHERE NAME LIKE '%\u624b\u673a%' ORDER BY price DESC; -- \u6309\u7167\u91d1\u989d\u5347\u5e8f\u6392\u5e8f\uff0c\u5982\u679c\u91d1\u989d\u76f8\u540c\uff0c\u6309\u7167\u5e93\u5b58\u964d\u5e8f\u6392\u5217 SELECT * FROM product ORDER BY price ASC,stock DESC; \u5206\u7ec4\u67e5\u8be2 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d FROM \u8868\u540d [WHERE \u6761\u4ef6] GROUP BY \u5206\u7ec4\u5217\u540d [HAVING \u5206\u7ec4\u540e\u6761\u4ef6\u8fc7\u6ee4] [ORDER BY \u6392\u5e8f\u5217\u540d \u6392\u5e8f\u65b9\u5f0f]; */ \u5206\u9875\u67e5\u8be2 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d FROM \u8868\u540d [WHERE \u6761\u4ef6] [GROUP BY \u5206\u7ec4\u5217\u540d] [HAVING \u5206\u7ec4\u540e\u6761\u4ef6\u8fc7\u6ee4] [ORDER BY \u6392\u5e8f\u5217\u540d \u6392\u5e8f\u65b9\u5f0f] LIMIT \u5f53\u524d\u9875\u6570,\u6bcf\u9875\u663e\u793a\u7684\u6761\u6570; LIMIT \u5f53\u524d\u9875\u6570,\u6bcf\u9875\u663e\u793a\u7684\u6761\u6570; \u516c\u5f0f\uff1a\u5f53\u524d\u9875\u6570 = (\u5f53\u524d\u9875\u6570-1) * \u6bcf\u9875\u663e\u793a\u7684\u6761\u6570 */ example -- \u6bcf\u9875\u663e\u793a3\u6761\u6570\u636e -- \u7b2c1\u9875 \u5f53\u524d\u9875\u6570=(1-1) * 3 SELECT * FROM product LIMIT 0,3; -- \u7b2c2\u9875 \u5f53\u524d\u9875\u6570=(2-1) * 3 SELECT * FROM product LIMIT 3,3; -- \u7b2c3\u9875 \u5f53\u524d\u9875\u6570=(3-1) * 3 SELECT * FROM product LIMIT 6,3; 04\u7ea6\u675f \u00b6 \u4e3b\u952e\u7ea6\u675f \u00b6 -- \u521b\u5efa\u5b66\u751f\u8868(\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84) \u7f16\u53f7\u8bbe\u4e3a\u4e3b\u952e CREATE TABLE student( id INT PRIMARY KEY, NAME VARCHAR(30), age INT ); -- \u67e5\u8be2\u5b66\u751f\u8868\u7684\u8be6\u7ec6\u4fe1\u606f DESC student; -- \u6dfb\u52a0\u6570\u636e INSERT INTO student VALUES (1,'\u5f20\u4e09',23); INSERT INTO student VALUES (2,'\u674e\u56db',24); -- \u5220\u9664\u4e3b\u952e ALTER TABLE student DROP PRIMARY KEY; -- \u5efa\u8868\u540e\u5355\u72ec\u6dfb\u52a0\u4e3b\u952e\u7ea6\u675f ALTER TABLE student MODIFY id INT PRIMARY KEY; \u4e3b\u952e\u81ea\u589e\u7ea6\u675f \u00b6 -- \u521b\u5efa\u5b66\u751f\u8868(\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84) \u7f16\u53f7\u8bbe\u4e3a\u4e3b\u952e\u81ea\u589e CREATE TABLE student( id INT PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(30), age INT ); -- \u67e5\u8be2\u5b66\u751f\u8868\u7684\u8be6\u7ec6\u4fe1\u606f DESC student; -- \u6dfb\u52a0\u6570\u636e INSERT INTO student VALUES (NULL,'\u5f20\u4e09',23),(NULL,'\u674e\u56db',24); -- \u5220\u9664\u81ea\u589e\u7ea6\u675f ALTER TABLE student MODIFY id INT; INSERT INTO student VALUES (NULL,'\u5f20\u4e09',23); -- \u5efa\u8868\u540e\u5355\u72ec\u6dfb\u52a0\u81ea\u589e\u7ea6\u675f ALTER TABLE student MODIFY id INT AUTO_INCREMENT; \u552f\u4e00\u7ea6\u675f \u00b6 -- \u521b\u5efa\u5b66\u751f\u8868(\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84) \u7f16\u53f7\u8bbe\u4e3a\u4e3b\u952e\u81ea\u589e\uff0c\u5e74\u9f84\u8bbe\u4e3a\u552f\u4e00 CREATE TABLE student( id INT PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(30), age INT UNIQUE ); -- \u67e5\u8be2\u5b66\u751f\u8868\u7684\u8be6\u7ec6\u4fe1\u606f DESC student; -- \u6dfb\u52a0\u6570\u636e INSERT INTO student VALUES (NULL,'\u5f20\u4e09',23); INSERT INTO student VALUES (NULL,'\u674e\u56db',23); -- \u5220\u9664\u552f\u4e00\u7ea6\u675f ALTER TABLE student DROP INDEX age; -- \u5efa\u8868\u540e\u5355\u72ec\u6dfb\u52a0\u552f\u4e00\u7ea6\u675f ALTER TABLE student MODIFY age INT UNIQUE; \u975e\u7a7a\u7ea6\u675f \u00b6 -- \u521b\u5efa\u5b66\u751f\u8868(\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84) \u7f16\u53f7\u8bbe\u4e3a\u4e3b\u952e\u81ea\u589e\uff0c\u59d3\u540d\u8bbe\u4e3a\u975e\u7a7a\uff0c\u5e74\u9f84\u8bbe\u4e3a\u552f\u4e00 CREATE TABLE student( id INT PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(30) NOT NULL, age INT UNIQUE ); -- \u67e5\u8be2\u5b66\u751f\u8868\u7684\u8be6\u7ec6\u4fe1\u606f DESC student; -- \u6dfb\u52a0\u6570\u636e INSERT INTO student VALUES (NULL,'\u5f20\u4e09',23); -- \u5220\u9664\u975e\u7a7a\u7ea6\u675f ALTER TABLE student MODIFY NAME VARCHAR(30); INSERT INTO student VALUES (NULL,NULL,25); -- \u5efa\u8868\u540e\u5355\u72ec\u6dfb\u52a0\u975e\u7a7a\u7ea6\u675f ALTER TABLE student MODIFY NAME VARCHAR(30) NOT NULL; day02 \u00b6 01\u7ea6\u675f \u00b6 \u5916\u952e\u7ea6\u675f \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a CONSTRAINT \u5916\u952e\u540d FOREIGN KEY (\u672c\u8868\u5916\u952e\u5217\u540d) REFERENCES \u4e3b\u8868\u540d(\u4e3b\u8868\u4e3b\u952e\u5217\u540d) */ \u5220\u9664\u5916\u952e\u7ea6\u675f \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d DROP FOREIGN KEY \u5916\u952e\u540d; */ \u5efa\u8868\u540e\u5355\u72ec\u6dfb\u52a0\u5916\u952e\u7ea6\u675f \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d ADD CONSTRAINT \u5916\u952e\u540d FOREIGN KEY (\u672c\u8868\u5916\u952e\u5217\u540d) REFERENCES \u4e3b\u8868\u540d(\u4e3b\u952e\u5217\u540d); */ \u5916\u952e\u7ea6\u675fexample -- \u521b\u5efadb2\u6570\u636e\u5e93 CREATE DATABASE db2; -- \u4f7f\u7528db2\u6570\u636e\u5e93 USE db2; /* \u5916\u952e\u7ea6\u675f \u6807\u51c6\u8bed\u6cd5\uff1a CONSTRAINT \u5916\u952e\u540d FOREIGN KEY (\u672c\u8868\u5916\u952e\u5217\u540d) REFERENCES \u4e3b\u8868\u540d(\u4e3b\u8868\u4e3b\u952e\u5217\u540d) */ -- \u5efa\u8868\u65f6\u6dfb\u52a0\u5916\u952e\u7ea6\u675f -- \u521b\u5efauser\u7528\u6237\u8868 CREATE TABLE USER( id INT PRIMARY KEY AUTO_INCREMENT, -- id NAME VARCHAR(20) NOT NULL -- \u59d3\u540d ); -- \u6dfb\u52a0\u7528\u6237\u6570\u636e INSERT INTO USER VALUES (NULL,'\u5f20\u4e09'),(NULL,'\u674e\u56db'); -- \u521b\u5efaorderlist\u8ba2\u5355\u8868 CREATE TABLE orderlist( id INT PRIMARY KEY AUTO_INCREMENT, -- id number VARCHAR(20) NOT NULL, -- \u8ba2\u5355\u7f16\u53f7 uid INT, -- \u5916\u952e\u5217 CONSTRAINT ou_fk1 FOREIGN KEY (uid) REFERENCES USER(id) ); -- \u6dfb\u52a0\u8ba2\u5355\u6570\u636e INSERT INTO orderlist VALUES (NULL,'hm001',1),(NULL,'hm002',1), (NULL,'hm003',2),(NULL,'hm004',2); -- \u6dfb\u52a0\u4e00\u4e2a\u8ba2\u5355\uff0c\u4f46\u662f\u6ca1\u6709\u771f\u5b9e\u7528\u6237\u3002\u6dfb\u52a0\u5931\u8d25 INSERT INTO orderlist VALUES (NULL,'hm005',3); -- \u5220\u9664\u674e\u56db\u7528\u6237\u3002\u5220\u9664\u5931\u8d25 DELETE FROM USER WHERE NAME='\u674e\u56db'; /* \u5220\u9664\u5916\u952e\u7ea6\u675f \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d DROP FOREIGN KEY \u5916\u952e\u540d; */ -- \u5220\u9664\u5916\u952e\u7ea6\u675f ALTER TABLE orderlist DROP FOREIGN KEY ou_fk1; /* \u5efa\u8868\u540e\u5355\u72ec\u6dfb\u52a0\u5916\u952e\u7ea6\u675f \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d ADD CONSTRAINT \u5916\u952e\u540d FOREIGN KEY (\u672c\u8868\u5916\u952e\u5217\u540d) REFERENCES \u4e3b\u8868\u540d(\u4e3b\u952e\u5217\u540d); */ -- \u6dfb\u52a0\u5916\u952e\u7ea6\u675f ALTER TABLE orderlist ADD CONSTRAINT ou_fk1 FOREIGN KEY (uid) REFERENCES USER(id); \u5916\u952e\u7ea7\u8054\u64cd\u4f5c \u00b6 /* \u6dfb\u52a0\u5916\u952e\u7ea6\u675f\uff0c\u540c\u65f6\u6dfb\u52a0\u7ea7\u8054\u66f4\u65b0 \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d ADD CONSTRAINT \u5916\u952e\u540d FOREIGN KEY (\u672c\u8868\u5916\u952e\u5217\u540d) REFERENCES \u4e3b\u8868\u540d(\u4e3b\u952e\u5217\u540d) ON UPDATE CASCADE; \u6dfb\u52a0\u5916\u952e\u7ea6\u675f\uff0c\u540c\u65f6\u6dfb\u52a0\u7ea7\u8054\u5220\u9664 \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d ADD CONSTRAINT \u5916\u952e\u540d FOREIGN KEY (\u672c\u8868\u5916\u952e\u5217\u540d) REFERENCES \u4e3b\u8868\u540d(\u4e3b\u952e\u5217\u540d) ON DELETE CASCADE; \u6dfb\u52a0\u5916\u952e\u7ea6\u675f\uff0c\u540c\u65f6\u6dfb\u52a0\u7ea7\u8054\u66f4\u65b0\u548c\u7ea7\u8054\u5220\u9664 \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d ADD CONSTRAINT \u5916\u952e\u540d FOREIGN KEY (\u672c\u8868\u5916\u952e\u5217\u540d) REFERENCES \u4e3b\u8868\u540d(\u4e3b\u952e\u5217\u540d) ON UPDATE CASCADE ON DELETE CASCADE; */ \u5916\u952e\u7ea7\u8054\u64cd\u4f5cexample -- \u5220\u9664\u5916\u952e\u7ea6\u675f ALTER TABLE orderlist DROP FOREIGN KEY ou_fk1; -- \u6dfb\u52a0\u5916\u952e\u7ea6\u675f\uff0c\u540c\u65f6\u6dfb\u52a0\u7ea7\u8054\u66f4\u65b0\u548c\u7ea7\u8054\u5220\u9664 ALTER TABLE orderlist ADD CONSTRAINT ou_fk1 FOREIGN KEY (uid) REFERENCES USER(id) ON UPDATE CASCADE ON DELETE CASCADE; -- \u5c06\u674e\u56db\u8fd9\u4e2a\u7528\u6237\u7684id\u4fee\u6539\u4e3a3,\u8ba2\u5355\u8868\u4e2d\u7684uid\u4e5f\u81ea\u52a8\u4fee\u6539 UPDATE USER SET id=3 WHERE id=2; -- \u5c06\u674e\u56db\u8fd9\u4e2a\u7528\u6237\u5220\u9664,\u8ba2\u5355\u8868\u4e2d\u7684\u8be5\u7528\u6237\u6240\u5c5e\u7684\u8ba2\u5355\u4e5f\u81ea\u52a8\u5220\u9664 DELETE FROM USER WHERE id=3; 02\u591a\u8868\u64cd\u4f5c \u00b6 \u8868\u5173\u7cfb\u4e00\u5bf9\u4e00 \u00b6 -- \u521b\u5efadb3\u6570\u636e\u5e93 CREATE DATABASE db3; -- \u4f7f\u7528db3\u6570\u636e\u5e93 USE db3; -- \u521b\u5efaperson\u8868 CREATE TABLE person( id INT PRIMARY KEY AUTO_INCREMENT, -- \u4e3b\u952eid NAME VARCHAR(20) -- \u59d3\u540d ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO person VALUES (NULL,'\u5f20\u4e09'),(NULL,'\u674e\u56db'); -- \u521b\u5efacard\u8868 CREATE TABLE card( id INT PRIMARY KEY AUTO_INCREMENT, -- \u4e3b\u952eid number VARCHAR(20) UNIQUE NOT NULL, -- \u8eab\u4efd\u8bc1\u53f7 pid INT UNIQUE, -- \u5916\u952e\u5217 CONSTRAINT cp_fk1 FOREIGN KEY (pid) REFERENCES person(id) ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO card VALUES (NULL,'12345',1),(NULL,'56789',2); \u8868\u5173\u7cfb\u4e00\u5bf9\u591a \u00b6 -- \u521b\u5efauser\u8868 CREATE TABLE USER( id INT PRIMARY KEY AUTO_INCREMENT, -- \u4e3b\u952eid NAME VARCHAR(20) -- \u59d3\u540d ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO USER VALUES (NULL,'\u5f20\u4e09'),(NULL,'\u674e\u56db'); -- \u521b\u5efaorderlist\u8868 CREATE TABLE orderlist( id INT PRIMARY KEY AUTO_INCREMENT, -- \u4e3b\u952eid number VARCHAR(20), -- \u8ba2\u5355\u7f16\u53f7 uid INT, -- \u5916\u952e\u5217 CONSTRAINT ou_fk1 FOREIGN KEY (uid) REFERENCES USER(id) ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO orderlist VALUES (NULL,'hm001',1),(NULL,'hm002',1),(NULL,'hm003',2),(NULL,'hm004',2); /* \u5546\u54c1\u5206\u7c7b\u548c\u5546\u54c1 */ -- \u521b\u5efacategory\u8868 CREATE TABLE category( id INT PRIMARY KEY AUTO_INCREMENT, -- \u4e3b\u952eid NAME VARCHAR(10) -- \u5206\u7c7b\u540d\u79f0 ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO category VALUES (NULL,'\u624b\u673a\u6570\u7801'),(NULL,'\u7535\u8111\u529e\u516c'); -- \u521b\u5efaproduct\u8868 CREATE TABLE product( id INT PRIMARY KEY AUTO_INCREMENT, -- \u4e3b\u952eid NAME VARCHAR(30), -- \u5546\u54c1\u540d\u79f0 cid INT, -- \u5916\u952e\u5217 CONSTRAINT pc_fk1 FOREIGN KEY (cid) REFERENCES category(id) ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO product VALUES (NULL,'\u534e\u4e3aP30',1),(NULL,'\u5c0f\u7c73note3',1), (NULL,'\u8054\u60f3\u7535\u8111',2),(NULL,'\u82f9\u679c\u7535\u8111',2); \u8868\u5173\u7cfb\u591a\u5bf9\u591a \u00b6 -- \u521b\u5efastudent\u8868 CREATE TABLE student( id INT PRIMARY KEY AUTO_INCREMENT, -- \u4e3b\u952eid NAME VARCHAR(20) -- \u5b66\u751f\u59d3\u540d ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO student VALUES (NULL,'\u5f20\u4e09'),(NULL,'\u674e\u56db'); -- \u521b\u5efacourse\u8868 CREATE TABLE course( id INT PRIMARY KEY AUTO_INCREMENT, -- \u4e3b\u952eid NAME VARCHAR(10) -- \u8bfe\u7a0b\u540d\u79f0 ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO course VALUES (NULL,'\u8bed\u6587'),(NULL,'\u6570\u5b66'); -- \u521b\u5efa\u4e2d\u95f4\u8868 CREATE TABLE stu_course( id INT PRIMARY KEY AUTO_INCREMENT, -- \u4e3b\u952eid sid INT, -- \u7528\u4e8e\u548cstudent\u8868\u4e2d\u7684id\u8fdb\u884c\u5916\u952e\u5173\u8054 cid INT, -- \u7528\u4e8e\u548ccourse\u8868\u4e2d\u7684id\u8fdb\u884c\u5916\u952e\u5173\u8054 CONSTRAINT sc_fk1 FOREIGN KEY (sid) REFERENCES student(id), -- \u6dfb\u52a0\u5916\u952e\u7ea6\u675f CONSTRAINT sc_fk2 FOREIGN KEY (cid) REFERENCES course(id) -- \u6dfb\u52a0\u5916\u952e\u7ea6\u675f ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO stu_course VALUES (NULL,1,1),(NULL,1,2),(NULL,2,1),(NULL,2,2); \u591a\u8868\u67e5\u8be2\u6570\u636e\u51c6\u5907 \u00b6 -- \u521b\u5efadb4\u6570\u636e\u5e93 CREATE DATABASE db4; -- \u4f7f\u7528db4\u6570\u636e\u5e93 USE db4; -- \u521b\u5efauser\u8868 CREATE TABLE USER( id INT PRIMARY KEY AUTO_INCREMENT, -- \u7528\u6237id NAME VARCHAR(20), -- \u7528\u6237\u59d3\u540d age INT -- \u7528\u6237\u5e74\u9f84 ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO USER VALUES (1,'\u5f20\u4e09',23); INSERT INTO USER VALUES (2,'\u674e\u56db',24); INSERT INTO USER VALUES (3,'\u738b\u4e94',25); INSERT INTO USER VALUES (4,'\u8d75\u516d',26); -- \u8ba2\u5355\u8868 CREATE TABLE orderlist( id INT PRIMARY KEY AUTO_INCREMENT, -- \u8ba2\u5355id number VARCHAR(30), -- \u8ba2\u5355\u7f16\u53f7 uid INT, -- \u5916\u952e\u5b57\u6bb5 CONSTRAINT ou_fk1 FOREIGN KEY (uid) REFERENCES USER(id) ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO orderlist VALUES (1,'hm001',1); INSERT INTO orderlist VALUES (2,'hm002',1); INSERT INTO orderlist VALUES (3,'hm003',2); INSERT INTO orderlist VALUES (4,'hm004',2); INSERT INTO orderlist VALUES (5,'hm005',3); INSERT INTO orderlist VALUES (6,'hm006',3); INSERT INTO orderlist VALUES (7,'hm007',NULL); -- \u5546\u54c1\u5206\u7c7b\u8868 CREATE TABLE category( id INT PRIMARY KEY AUTO_INCREMENT, -- \u5546\u54c1\u5206\u7c7bid NAME VARCHAR(10) -- \u5546\u54c1\u5206\u7c7b\u540d\u79f0 ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO category VALUES (1,'\u624b\u673a\u6570\u7801'); INSERT INTO category VALUES (2,'\u7535\u8111\u529e\u516c'); INSERT INTO category VALUES (3,'\u70df\u9152\u8336\u7cd6'); INSERT INTO category VALUES (4,'\u978b\u9774\u7bb1\u5305'); -- \u5546\u54c1\u8868 CREATE TABLE product( id INT PRIMARY KEY AUTO_INCREMENT, -- \u5546\u54c1id NAME VARCHAR(30), -- \u5546\u54c1\u540d\u79f0 cid INT, -- \u5916\u952e\u5b57\u6bb5 CONSTRAINT cp_fk1 FOREIGN KEY (cid) REFERENCES category(id) ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO product VALUES (1,'\u534e\u4e3a\u624b\u673a',1); INSERT INTO product VALUES (2,'\u5c0f\u7c73\u624b\u673a',1); INSERT INTO product VALUES (3,'\u8054\u60f3\u7535\u8111',2); INSERT INTO product VALUES (4,'\u82f9\u679c\u7535\u8111',2); INSERT INTO product VALUES (5,'\u4e2d\u534e\u9999\u70df',3); INSERT INTO product VALUES (6,'\u7389\u6eaa\u9999\u70df',3); INSERT INTO product VALUES (7,'\u8ba1\u751f\u7528\u54c1',NULL); -- \u4e2d\u95f4\u8868 CREATE TABLE us_pro( upid INT PRIMARY KEY AUTO_INCREMENT, -- \u4e2d\u95f4\u8868id uid INT, -- \u5916\u952e\u5b57\u6bb5\u3002\u9700\u8981\u548c\u7528\u6237\u8868\u7684\u4e3b\u952e\u4ea7\u751f\u5173\u8054 pid INT, -- \u5916\u952e\u5b57\u6bb5\u3002\u9700\u8981\u548c\u5546\u54c1\u8868\u7684\u4e3b\u952e\u4ea7\u751f\u5173\u8054 CONSTRAINT up_fk1 FOREIGN KEY (uid) REFERENCES USER(id), CONSTRAINT up_fk2 FOREIGN KEY (pid) REFERENCES product(id) ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO us_pro VALUES (NULL,1,1); INSERT INTO us_pro VALUES (NULL,1,2); INSERT INTO us_pro VALUES (NULL,1,3); INSERT INTO us_pro VALUES (NULL,1,4); INSERT INTO us_pro VALUES (NULL,1,5); INSERT INTO us_pro VALUES (NULL,1,6); INSERT INTO us_pro VALUES (NULL,1,7); INSERT INTO us_pro VALUES (NULL,2,1); INSERT INTO us_pro VALUES (NULL,2,2); INSERT INTO us_pro VALUES (NULL,2,3); INSERT INTO us_pro VALUES (NULL,2,4); INSERT INTO us_pro VALUES (NULL,2,5); INSERT INTO us_pro VALUES (NULL,2,6); INSERT INTO us_pro VALUES (NULL,2,7); INSERT INTO us_pro VALUES (NULL,3,1); INSERT INTO us_pro VALUES (NULL,3,2); INSERT INTO us_pro VALUES (NULL,3,3); INSERT INTO us_pro VALUES (NULL,3,4); INSERT INTO us_pro VALUES (NULL,3,5); INSERT INTO us_pro VALUES (NULL,3,6); INSERT INTO us_pro VALUES (NULL,3,7); INSERT INTO us_pro VALUES (NULL,4,1); INSERT INTO us_pro VALUES (NULL,4,2); INSERT INTO us_pro VALUES (NULL,4,3); INSERT INTO us_pro VALUES (NULL,4,4); INSERT INTO us_pro VALUES (NULL,4,5); INSERT INTO us_pro VALUES (NULL,4,6); INSERT INTO us_pro VALUES (NULL,4,7); \u5185\u8fde\u63a5\u67e5\u8be2 \u00b6 \u663e\u793a\u5185\u8fde\u63a5 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d FROM \u8868\u540d1 [INNER] JOIN \u8868\u540d2 ON \u5173\u8054\u6761\u4ef6; */ \u9690\u5f0f\u5185\u8fde\u63a5 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d FROM \u8868\u540d1,\u8868\u540d2 WHERE \u5173\u8054\u6761\u4ef6; */ \u5916\u8fde\u63a5\u67e5\u8be2 \u00b6 \u5de6\u5916\u8fde\u63a5 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d FROM \u8868\u540d1 LEFT [OUTER] JOIN \u8868\u540d2 ON \u6761\u4ef6; */ \u53f3\u5916\u8fde\u63a5 \u00b6 /* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d FROM \u8868\u540d1 RIGHT [OUTER] JOIN \u8868\u540d2 ON \u6761\u4ef6; */ \u5b50\u67e5\u8be2 \u00b6 /* \u7ed3\u679c\u662f\u5355\u884c\u5355\u5217\u7684 \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d FROM \u8868\u540d WHERE \u5217\u540d=(SELECT \u5217\u540d FROM \u8868\u540d [WHERE \u6761\u4ef6]); */ -- \u67e5\u8be2\u5e74\u9f84\u6700\u9ad8\u7684\u7528\u6237\u59d3\u540d SELECT MAX(age) FROM USER; SELECT NAME,age FROM USER WHERE age=(SELECT MAX(age) FROM USER); /* \u7ed3\u679c\u662f\u591a\u884c\u5355\u5217\u7684 \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d FROM \u8868\u540d WHERE \u5217\u540d [NOT] IN (SELECT \u5217\u540d FROM \u8868\u540d [WHERE \u6761\u4ef6]); */ -- \u67e5\u8be2\u5f20\u4e09\u548c\u674e\u56db\u7684\u8ba2\u5355\u4fe1\u606f SELECT * FROM orderlist WHERE uid IN (1,2); SELECT id FROM USER WHERE NAME IN ('\u5f20\u4e09','\u674e\u56db'); SELECT * FROM orderlist WHERE uid IN (SELECT id FROM USER WHERE NAME IN ('\u5f20\u4e09','\u674e\u56db')); /* \u7ed3\u679c\u662f\u591a\u884c\u591a\u5217\u7684 \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d FROM \u8868\u540d [\u522b\u540d],(SELECT \u5217\u540d FROM \u8868\u540d [WHERE \u6761\u4ef6]) [\u522b\u540d] [WHERE \u6761\u4ef6]; */ -- \u67e5\u8be2\u8ba2\u5355\u8868\u4e2did\u5927\u4e8e4\u7684\u8ba2\u5355\u4fe1\u606f\u548c\u6240\u5c5e\u7528\u6237\u4fe1\u606f SELECT * FROM orderlist WHERE id > 4; SELECT u.name, o.number FROM USER u, (SELECT * FROM orderlist WHERE id > 4) o WHERE o.uid=u.id; \u81ea\u5173\u8054\u67e5\u8be2 \u00b6 -- \u521b\u5efa\u5458\u5de5\u8868 CREATE TABLE employee( id INT PRIMARY KEY AUTO_INCREMENT, -- \u5458\u5de5\u7f16\u53f7 NAME VARCHAR(20), -- \u5458\u5de5\u59d3\u540d mgr INT, -- \u4e0a\u7ea7\u7f16\u53f7 salary DOUBLE -- \u5458\u5de5\u5de5\u8d44 ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO employee VALUES (1001,'\u5b59\u609f\u7a7a',1005,9000.00), (1002,'\u732a\u516b\u6212',1005,8000.00), (1003,'\u6c99\u548c\u5c1a',1005,8500.00), (1004,'\u5c0f\u767d\u9f99',1005,7900.00), (1005,'\u5510\u50e7',NULL,15000.00), (1006,'\u6b66\u677e',1009,7600.00), (1007,'\u674e\u9035',1009,7400.00), (1008,'\u6797\u51b2',1009,8100.00), (1009,'\u5b8b\u6c5f',NULL,16000.00); -- \u67e5\u8be2\u6240\u6709\u5458\u5de5\u7684\u59d3\u540d\u53ca\u5176\u76f4\u63a5\u4e0a\u7ea7\u7684\u59d3\u540d\uff0c\u6ca1\u6709\u4e0a\u7ea7\u7684\u5458\u5de5\u4e5f\u9700\u8981\u67e5\u8be2 /* \u5206\u6790 \u5458\u5de5\u4fe1\u606f employee\u8868 \u6761\u4ef6\uff1aemployee.mgr = employee.id \u67e5\u8be2\u5de6\u8868\u7684\u5168\u90e8\u6570\u636e\uff0c\u548c\u5de6\u53f3\u4e24\u5f20\u8868\u6709\u4ea4\u96c6\u90e8\u5206\u6570\u636e\uff0c\u5de6\u5916\u8fde\u63a5 */ SELECT e1.id, e1.name, e1.mgr, e2.id, e2.name FROM employee e1 LEFT OUTER JOIN employee e2 ON e1.mgr = e2.id; \u591a\u8868\u67e5\u8be2\u7ec3\u4e60 \u00b6 -- 1.\u67e5\u8be2\u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84\u3002\u8ba2\u5355\u7f16\u53f7 /* \u5206\u6790 \u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84 user\u8868 \u8ba2\u5355\u7f16\u53f7 orderlist\u8868 \u6761\u4ef6\uff1auser.id=orderlist.uid */ SELECT u.id, u.name, u.age, o.number FROM USER u, orderlist o WHERE u.id=o.uid; -- 2.\u67e5\u8be2\u6240\u6709\u7684\u7528\u6237\u3002\u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84\u3002\u8ba2\u5355\u7f16\u53f7 /* \u5206\u6790 \u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84 user\u8868 \u8ba2\u5355\u7f16\u53f7 orderlist\u8868 \u6761\u4ef6\uff1auser.id=orderlist.uid \u67e5\u8be2\u6240\u6709\u7684\u7528\u6237\uff0c\u5de6\u5916\u8fde\u63a5 */ SELECT u.id, u.name, u.age, o.number FROM USER u LEFT OUTER JOIN orderlist o ON u.id=o.uid; -- 3.\u67e5\u8be2\u6240\u6709\u7684\u8ba2\u5355\u3002\u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84\u3002\u8ba2\u5355\u7f16\u53f7 /* \u5206\u6790 \u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84 user\u8868 \u8ba2\u5355\u7f16\u53f7 orderlist\u8868 \u6761\u4ef6\uff1auser.id=orderlist.uid \u67e5\u8be2\u6240\u6709\u7684\u8ba2\u5355\uff0c\u53f3\u5916\u8fde\u63a5 */ SELECT u.id, u.name, u.age, o.number FROM USER u RIGHT OUTER JOIN orderlist o ON u.id=o.uid; -- 4.\u67e5\u8be2\u7528\u6237\u5e74\u9f84\u5927\u4e8e23\u5c81\u7684\u4fe1\u606f\u3002\u663e\u793a\u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84\u3002\u8ba2\u5355\u7f16\u53f7 /* \u5206\u6790 \u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84 user\u8868 \u8ba2\u5355\u7f16\u53f7 orderlist\u8868 \u6761\u4ef6\uff1auser.id=orderlist.uid AND user.age > 23 */ SELECT u.id, u.name, u.age, o.number FROM USER u, orderlist o WHERE u.id=o.uid AND u.age > 23; -- 5.\u67e5\u8be2\u5f20\u4e09\u548c\u674e\u56db\u7528\u6237\u7684\u4fe1\u606f\u3002\u663e\u793a\u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84\u3002\u8ba2\u5355\u7f16\u53f7 /* \u5206\u6790 \u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84 user\u8868 \u8ba2\u5355\u7f16\u53f7 orderlist\u8868 \u6761\u4ef6\uff1auser.id=orderlist.uid AND user.name IN ('\u5f20\u4e09','\u674e\u56db') */ SELECT u.id, u.name, u.age, o.number FROM USER u, orderlist o WHERE u.id=o.uid AND u.name IN ('\u5f20\u4e09','\u674e\u56db'); -- 6.\u67e5\u8be2\u5546\u54c1\u5206\u7c7b\u7684\u7f16\u53f7\u3001\u5206\u7c7b\u540d\u79f0\u3002\u5206\u7c7b\u4e0b\u7684\u5546\u54c1\u540d\u79f0 /* \u5206\u6790 \u5546\u54c1\u5206\u7c7b\u7684\u7f16\u53f7\u3001\u5206\u7c7b\u540d\u79f0 category\u8868 \u5546\u54c1\u540d\u79f0 product\u8868 \u6761\u4ef6\uff1acategory.id=product.cid */ SELECT c.id, c.name, p.name FROM category c, product p WHERE c.id=p.cid; -- 7.\u67e5\u8be2\u6240\u6709\u7684\u5546\u54c1\u5206\u7c7b\u3002\u5546\u54c1\u5206\u7c7b\u7684\u7f16\u53f7\u3001\u5206\u7c7b\u540d\u79f0\u3002\u5206\u7c7b\u4e0b\u7684\u5546\u54c1\u540d\u79f0 /* \u5206\u6790 \u5546\u54c1\u5206\u7c7b\u7684\u7f16\u53f7\u3001\u5206\u7c7b\u540d\u79f0 category\u8868 \u5546\u54c1\u540d\u79f0 product\u8868 \u6761\u4ef6\uff1acategory.id=product.cid \u67e5\u8be2\u6240\u6709\u7684\u5546\u54c1\u5206\u7c7b\uff0c\u5de6\u5916\u8fde\u63a5 */ SELECT c.id, c.name, p.name FROM category c LEFT OUTER JOIN product p ON c.id=p.cid; -- 8.\u67e5\u8be2\u6240\u6709\u7684\u5546\u54c1\u4fe1\u606f\u3002\u5546\u54c1\u5206\u7c7b\u7684\u7f16\u53f7\u3001\u5206\u7c7b\u540d\u79f0\u3002\u5206\u7c7b\u4e0b\u7684\u5546\u54c1\u540d\u79f0 /* \u5206\u6790 \u5546\u54c1\u5206\u7c7b\u7684\u7f16\u53f7\u3001\u5206\u7c7b\u540d\u79f0 category\u8868 \u5546\u54c1\u540d\u79f0 product\u8868 \u6761\u4ef6\uff1acategory.id=product.cid \u67e5\u8be2\u6240\u6709\u7684\u5546\u54c1\u4fe1\u606f\uff0c\u53f3\u5916\u8fde\u63a5 */ SELECT c.id, c.name, p.name FROM category c RIGHT OUTER JOIN product p ON c.id=p.cid; -- 9.\u67e5\u8be2\u6240\u6709\u7684\u7528\u6237\u548c\u8be5\u7528\u6237\u80fd\u67e5\u770b\u7684\u6240\u6709\u7684\u5546\u54c1\u3002\u663e\u793a\u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84\u3002\u5546\u54c1\u540d\u79f0 /* \u5206\u6790 \u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84 user\u8868 \u5546\u54c1\u540d\u79f0 product\u8868 \u4e2d\u95f4\u8868 us_pro \u6761\u4ef6\uff1aus_pro.uid=user.id AND us_pro.pid=product.id */ SELECT u.id, u.name, u.age, p.name FROM USER u, product p, us_pro up WHERE up.uid=u.id AND up.pid=p.id; -- 10.\u67e5\u8be2\u5f20\u4e09\u548c\u674e\u56db\u8fd9\u4e24\u4e2a\u7528\u6237\u53ef\u4ee5\u770b\u5230\u7684\u5546\u54c1\u3002\u663e\u793a\u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84\u3002\u5546\u54c1\u540d\u79f0 /* \u5206\u6790 \u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84 user\u8868 \u5546\u54c1\u540d\u79f0 product\u8868 \u4e2d\u95f4\u8868 us_pro \u6761\u4ef6\uff1aus_pro.uid=user.id AND us_pro.pid=product.id AND user.name IN ('\u5f20\u4e09','\u674e\u56db') */ SELECT u.id, u.name, u.age, p.name FROM USER u, product p, us_pro up WHERE up.uid=u.id AND up.pid=p.id AND u.name IN ('\u5f20\u4e09','\u674e\u56db'); 03\u89c6\u56fe \u00b6 \u89c6\u56fe_\u6570\u636e\u51c6\u5907 \u00b6 -- \u521b\u5efadb5\u6570\u636e\u5e93 CREATE DATABASE db5; -- \u4f7f\u7528db5\u6570\u636e\u5e93 USE db5; -- \u521b\u5efacountry\u8868 CREATE TABLE country( id INT PRIMARY KEY AUTO_INCREMENT, -- \u56fd\u5bb6id NAME VARCHAR(30) -- \u56fd\u5bb6\u540d\u79f0 ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO country VALUES (NULL,'\u4e2d\u56fd'),(NULL,'\u7f8e\u56fd'),(NULL,'\u4fc4\u7f57\u65af'); -- \u521b\u5efacity\u8868 CREATE TABLE city( id INT PRIMARY KEY AUTO_INCREMENT, -- \u57ce\u5e02id NAME VARCHAR(30), -- \u57ce\u5e02\u540d\u79f0 cid INT, -- \u5916\u952e\u5217\u3002\u5173\u8054country\u8868\u7684\u4e3b\u952e\u5217id CONSTRAINT cc_fk1 FOREIGN KEY (cid) REFERENCES country(id) -- \u6dfb\u52a0\u5916\u952e\u7ea6\u675f ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO city VALUES (NULL,'\u5317\u4eac',1),(NULL,'\u4e0a\u6d77',1),(NULL,'\u7ebd\u7ea6',2),(NULL,'\u83ab\u65af\u79d1',3); \u521b\u5efa\u89c6\u56fe \u00b6 /* \u6807\u51c6\u8bed\u6cd5 CREATE VIEW \u89c6\u56fe\u540d\u79f0 [(\u5217\u540d\u5217\u8868)] AS \u67e5\u8be2\u8bed\u53e5; */ example -- \u521b\u5efacity_country\u89c6\u56fe\uff0c\u4fdd\u5b58\u57ce\u5e02\u548c\u56fd\u5bb6\u7684\u4fe1\u606f(\u4f7f\u7528\u6307\u5b9a\u5217\u540d) CREATE VIEW city_country (city_id,city_name,country_name) AS SELECT c1.id, c1.name, c2.name FROM city c1, country c2 WHERE c1.cid=c2.id; \u67e5\u8be2\u89c6\u56fe \u00b6 /* \u6807\u51c6\u8bed\u6cd5 SELECT * FROM \u89c6\u56fe\u540d\u79f0; */ example -- \u67e5\u8be2\u89c6\u56fe SELECT * FROM city_country; day03 \u00b6 01\u89c6\u56fe \u00b6 \u6570\u636e\u51c6\u5907 \u00b6 -- \u521b\u5efadb7\u6570\u636e\u5e93 CREATE DATABASE db7; -- \u4f7f\u7528db7\u6570\u636e\u5e93 USE db7; -- \u521b\u5efacountry\u8868 CREATE TABLE country( id INT PRIMARY KEY AUTO_INCREMENT, -- \u56fd\u5bb6id country_name VARCHAR(30) -- \u56fd\u5bb6\u540d\u79f0 ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO country VALUES (NULL,'\u4e2d\u56fd'),(NULL,'\u7f8e\u56fd'),(NULL,'\u4fc4\u7f57\u65af'); -- \u521b\u5efacity\u8868 CREATE TABLE city( id INT PRIMARY KEY AUTO_INCREMENT, -- \u57ce\u5e02id city_name VARCHAR(30), -- \u57ce\u5e02\u540d\u79f0 cid INT, -- \u5916\u952e\u5217\u3002\u5173\u8054country\u8868\u7684\u4e3b\u952e\u5217id CONSTRAINT cc_fk1 FOREIGN KEY (cid) REFERENCES country(id) -- \u6dfb\u52a0\u5916\u952e\u7ea6\u675f ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO city VALUES (NULL,'\u5317\u4eac',1),(NULL,'\u4e0a\u6d77',1),(NULL,'\u7ebd\u7ea6',2),(NULL,'\u83ab\u65af\u79d1',3); \u521b\u5efa\u89c6\u56fe \u00b6 /* \u521b\u5efa\u89c6\u56fe \u6807\u51c6\u8bed\u6cd5 CREATE VIEW \u89c6\u56fe\u540d\u79f0 [(\u5217\u540d\u5217\u8868)] AS \u67e5\u8be2\u8bed\u53e5; */ \u67e5\u8be2\u89c6\u56fe \u00b6 \u67e5\u8be2\u89c6\u56fe \u00b6 /* \u6807\u51c6\u8bed\u6cd5 SELECT * FROM \u89c6\u56fe\u540d\u79f0; */ \u67e5\u8be2\u521b\u5efa\u89c6\u56fe\u7684\u8bed\u53e5 \u00b6 /* \u6807\u51c6\u8bed\u6cd5 SHOW CREATE VIEW \u89c6\u56fe\u540d\u79f0; */ \u4fee\u6539\u89c6\u56fe \u00b6 \u4fee\u6539\u89c6\u56fe\u8868\u6570\u636e \u00b6 /* \u6807\u51c6\u8bed\u6cd5 UPDATE \u89c6\u56fe\u540d\u79f0 SET \u5217\u540d=\u503c WHERE \u6761\u4ef6; */ \u4fee\u6539\u89c6\u56fe\u8868\u7ed3\u6784 \u00b6 /* \u4fee\u6539\u89c6\u56fe\u8868\u7ed3\u6784 \u6807\u51c6\u8bed\u6cd5 ALTER VIEW \u89c6\u56fe\u540d\u79f0 [(\u5217\u540d\u5217\u8868)] AS \u67e5\u8be2\u8bed\u53e5; */ \u5220\u9664\u89c6\u56fe \u00b6 /* \u5220\u9664\u89c6\u56fe \u6807\u51c6\u8bed\u6cd5 DROP VIEW [IF EXISTS] \u89c6\u56fe\u540d\u79f0; */ 02\u5b58\u50a8\u8fc7\u7a0b\u548c\u51fd\u6570 \u00b6 \u6570\u636e\u51c6\u5907 \u00b6 -- \u521b\u5efadb8\u6570\u636e\u5e93 CREATE DATABASE db8; -- \u4f7f\u7528db8\u6570\u636e\u5e93 USE db8; -- \u521b\u5efa\u5b66\u751f\u8868 CREATE TABLE student( id INT PRIMARY KEY AUTO_INCREMENT, -- \u5b66\u751fid NAME VARCHAR(20), -- \u5b66\u751f\u59d3\u540d age INT, -- \u5b66\u751f\u5e74\u9f84 gender VARCHAR(5), -- \u5b66\u751f\u6027\u522b score INT -- \u5b66\u751f\u6210\u7ee9 ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO student VALUES (NULL,'\u5f20\u4e09',23,'\u7537',95),(NULL,'\u674e\u56db',24,'\u7537',98), (NULL,'\u738b\u4e94',25,'\u5973',100),(NULL,'\u8d75\u516d',26,'\u5973',90); -- \u6309\u7167\u6027\u522b\u8fdb\u884c\u5206\u7ec4\uff0c\u67e5\u8be2\u6bcf\u7ec4\u5b66\u751f\u7684\u603b\u6210\u7ee9\u3002\u6309\u7167\u603b\u6210\u7ee9\u7684\u5347\u5e8f\u6392\u5e8f SELECT gender,SUM(score) getSum FROM student GROUP BY gender ORDER BY getSum ASC; \u521b\u5efa\u5b58\u50a8\u8fc7\u7a0b \u00b6 /* -- \u4fee\u6539\u5206\u9694\u7b26\u4e3a $ DELIMITER $ -- \u6807\u51c6\u8bed\u6cd5 CREATE PROCEDURE \u5b58\u50a8\u8fc7\u7a0b\u540d\u79f0 ( \u53c2\u6570 ...) BEGIN sql\u8bed\u53e5 ; END $ -- \u4fee\u6539\u5206\u9694\u7b26\u4e3a\u5206\u53f7 DELIMITER ; */ -- \u521b\u5efastu_group()\u5b58\u50a8\u8fc7\u7a0b\uff0c\u5c01\u88c5 \u5206\u7ec4\u67e5\u8be2\u603b\u6210\u7ee9\uff0c\u5e76\u6309\u7167\u603b\u6210\u7ee9\u5347\u5e8f\u6392\u5e8f\u7684\u529f\u80fd DELIMITER $ CREATE PROCEDURE stu_group () BEGIN SELECT gender , SUM ( score ) getSum FROM student GROUP BY gender ORDER BY getSum ASC ; END $ DELIMITER ; \u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b \u00b6 /* \u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b \u6807\u51c6\u8bed\u6cd5 CALL \u5b58\u50a8\u8fc7\u7a0b\u540d\u79f0(\u5b9e\u9645\u53c2\u6570); */ -- \u8c03\u7528stu_group\u5b58\u50a8\u8fc7\u7a0b CALL stu_group(); \u67e5\u8be2\u6570\u636e\u5e93\u4e2d\u6240\u6709\u7684\u5b58\u50a8\u8fc7\u7a0b \u00b6 /* \u67e5\u8be2\u6570\u636e\u5e93\u4e2d\u6240\u6709\u7684\u5b58\u50a8\u8fc7\u7a0b \u6807\u51c6\u8bed\u6cd5 SELECT name FROM mysql.proc WHERE db='\u6570\u636e\u5e93\u540d\u79f0'; */ -- \u67e5\u770bdb8\u6570\u636e\u5e93\u4e2d\u6240\u6709\u7684\u5b58\u50a8\u8fc7\u7a0b SELECT NAME FROM mysql.proc WHERE db='db8'; \u67e5\u770b\u5b58\u50a8\u8fc7\u7a0b\u7684\u72b6\u6001\u4fe1\u606f \u00b6 /* \u67e5\u770b\u5b58\u50a8\u8fc7\u7a0b\u7684\u72b6\u6001\u4fe1\u606f \u6807\u51c6\u8bed\u6cd5 SHOW PROCEDURE STATUS ; */ -- \u67e5\u770b\u5b58\u50a8\u8fc7\u7a0b\u7684\u72b6\u6001\u4fe1\u606f SHOW PROCEDURE STATUS ; \u67e5\u770b\u5b58\u50a8\u8fc7\u7a0b\u7684\u521b\u5efa\u8bed\u53e5 \u00b6 /* \u67e5\u770b\u5b58\u50a8\u8fc7\u7a0b\u7684\u521b\u5efa\u8bed\u53e5 \u6807\u51c6\u8bed\u6cd5 SHOW CREATE PROCEDURE \u5b58\u50a8\u8fc7\u7a0b\u540d\u79f0 ; */ -- \u67e5\u8be2stu_group\u5b58\u50a8\u8fc7\u7a0b\u7684\u521b\u5efa\u8bed\u53e5 SHOW CREATE PROCEDURE stu_group ; \u5220\u9664\u5b58\u50a8\u8fc7\u7a0b \u00b6 /* \u5220\u9664\u5b58\u50a8\u8fc7\u7a0b \u6807\u51c6\u8bed\u6cd5 DROP PROCEDURE [IF EXISTS] \u5b58\u50a8\u8fc7\u7a0b\u540d\u79f0; */ -- \u5220\u9664stu_group\u5b58\u50a8\u8fc7\u7a0b DROP PROCEDURE IF EXISTS stu_group ; \u5b58\u50a8\u8fc7\u7a0b-\u53d8\u91cf \u00b6 \u5b9a\u4e49\u53d8\u91cf \u00b6 /* \u5b9a\u4e49\u53d8\u91cf \u6807\u51c6\u8bed\u6cd5 DECLARE \u53d8\u91cf\u540d \u6570\u636e\u7c7b\u578b [DEFAULT \u9ed8\u8ba4\u503c]; */ -- \u5b9a\u4e49\u4e00\u4e2aint\u7c7b\u578b\u53d8\u91cf\uff0c\u5e76\u8d4b\u9ed8\u8ba4\u503c\u4e3a10 DELIMITER $ CREATE PROCEDURE pro_test1 () BEGIN -- \u5b9a\u4e49\u53d8\u91cf DECLARE num INT DEFAULT 10 ; -- \u67e5\u8be2\u53d8\u91cf SELECT num ; END $ DELIMITER ; -- \u8c03\u7528pro_test1\u5b58\u50a8\u8fc7\u7a0b CALL pro_test1(); \u53d8\u91cf\u8d4b\u503c-\u65b9\u5f0f\u4e00 \u00b6 /* \u53d8\u91cf\u8d4b\u503c-\u65b9\u5f0f\u4e00 \u6807\u51c6\u8bed\u6cd5 SET \u53d8\u91cf\u540d = \u53d8\u91cf\u503c; */ -- \u5b9a\u4e49\u4e00\u4e2avarchar\u7c7b\u578b\u53d8\u91cf\u5e76\u8d4b\u503c DELIMITER $ CREATE PROCEDURE pro_test2 () BEGIN -- \u5b9a\u4e49\u53d8\u91cf DECLARE NAME VARCHAR ( 10 ); -- \u4e3a\u53d8\u91cf\u8d4b\u503c SET NAME = '\u5b58\u50a8\u8fc7\u7a0b' ; -- \u67e5\u8be2\u53d8\u91cf SELECT NAME ; END $ DELIMITER ; -- \u8c03\u7528pro_test2\u5b58\u50a8\u8fc7\u7a0b CALL pro_test2(); \u53d8\u91cf\u8d4b\u503c-\u65b9\u5f0f\u4e8c /* \u53d8\u91cf\u8d4b\u503c-\u65b9\u5f0f\u4e8c \u6807\u51c6\u8bed\u6cd5 SELECT \u5217\u540d INTO \u53d8\u91cf\u540d FROM \u8868\u540d [WHERE \u6761\u4ef6]; */ -- \u5b9a\u4e49\u4e24\u4e2aint\u53d8\u91cf\uff0c\u7528\u4e8e\u5b58\u50a8\u7537\u5973\u540c\u5b66\u7684\u603b\u5206\u6570 DELIMITER $ CREATE PROCEDURE pro_test3 () BEGIN -- \u5b9a\u4e49\u53d8\u91cf DECLARE men , women INT ; -- \u67e5\u8be2\u7537\u540c\u5b66\u7684\u603b\u5206\u6570\uff0c\u4e3a men\u53d8\u91cf\u8d4b\u503c SELECT SUM ( score ) INTO men FROM student WHERE gender = '\u7537' ; -- \u67e5\u8be2\u5973\u540c\u5b66\u7684\u603b\u5206\u6570\uff0c\u4e3a women\u53d8\u91cf\u8d4b\u503c SELECT SUM ( score ) INTO women FROM student WHERE gender = '\u5973' ; -- \u67e5\u8be2\u53d8\u91cf SELECT men , women ; END $ DELIMITER ; -- \u8c03\u7528pro_test3\u5b58\u50a8\u8fc7\u7a0b CALL pro_test3(); \u5b58\u50a8\u8fc7\u7a0b-if\u8bed\u53e5 \u00b6 /* \u5b58\u50a8\u8fc7\u7a0b - if\u8bed\u53e5 \u6807\u51c6\u8bed\u6cd5 IF \u5224\u65ad\u6761\u4ef6 1 THEN \u6267\u884c\u7684 sql\u8bed\u53e51 ; [ ELSEIF \u5224\u65ad\u6761\u4ef6 2 THEN \u6267\u884c\u7684 sql\u8bed\u53e52 ;] ... [ ELSE \u6267\u884c\u7684 sql\u8bed\u53e5n ;] END IF ; */ / \u5b9a\u4e49\u4e00\u4e2aint\u53d8\u91cf\uff0c\u7528\u4e8e\u5b58\u50a8\u73ed\u7ea7\u603b\u6210\u7ee9 \u5b9a\u4e49\u4e00\u4e2avarchar\u53d8\u91cf\uff0c\u7528\u4e8e\u5b58\u50a8\u5206\u6570\u63cf\u8ff0 \u6839\u636e\u603b\u6210\u7ee9\u5224\u65ad\uff1a 380\u5206\u53ca\u4ee5\u4e0a \u5b66\u4e60\u4f18\u79c0 320 ~ 380 \u5b66\u4e60\u4e0d\u9519 320\u4ee5\u4e0b \u5b66\u4e60\u4e00\u822c / DELIMITER $ CREATE PROCEDURE pro_test4 () BEGIN -- \u5b9a\u4e49\u4fdd\u5b58\u603b\u6210\u7ee9\u7684\u53d8\u91cf DECLARE total INT ; -- \u5b9a\u4e49\u4fdd\u5b58\u5206\u6570\u63cf\u8ff0\u7684\u53d8\u91cf DECLARE description VARCHAR ( 10 ); -- \u4e3a total\u8d4b\u503c SELECT SUM ( score ) INTO total FROM student ; -- \u5224\u65ad\u603b\u6210\u7ee9 IF total >= 380 THEN SET description = '\u5b66\u4e60\u4f18\u79c0' ; ELSEIF total >= 320 AND total < 380 THEN SET description = '\u5b66\u4e60\u4e0d\u9519' ; ELSE SET description = '\u5b66\u4e60\u4e00\u822c' ; END IF ; -- \u67e5\u8be2\u603b\u6210\u7ee9\u548c\u63cf\u8ff0\u4fe1\u606f SELECT total , description ; END $ DELIMITER ; -- \u8c03\u7528pro_test4\u5b58\u50a8\u8fc7\u7a0b CALL pro_test4(); \u5b58\u50a8\u8fc7\u7a0b_\u8f93\u5165\u53c2\u6570 \u00b6 /* \u8f93\u5165\u53c2\u6570 DELIMITER $ -- \u6807\u51c6\u8bed\u6cd5 CREATE PROCEDURE \u5b58\u50a8\u8fc7\u7a0b\u540d\u79f0 ( IN \u53c2\u6570\u540d \u6570\u636e\u7c7b\u578b ) BEGIN \u6267\u884c\u7684 sql\u8bed\u53e5 ; END $ DELIMITER ; */ / \u8f93\u5165\u603b\u6210\u7ee9\u53d8\u91cf\uff0c\u4ee3\u8868\u5b66\u751f\u603b\u6210\u7ee9 \u5b9a\u4e49\u4e00\u4e2avarchar\u53d8\u91cf\uff0c\u7528\u4e8e\u5b58\u50a8\u5206\u6570\u63cf\u8ff0 \u6839\u636e\u603b\u6210\u7ee9\u5224\u65ad\uff1a 380\u5206\u53ca\u4ee5\u4e0a \u5b66\u4e60\u4f18\u79c0 320 ~ 380 \u5b66\u4e60\u4e0d\u9519 320\u4ee5\u4e0b \u5b66\u4e60\u4e00\u822c / DELIMITER $ CREATE PROCEDURE pro_test5 ( IN total INT ) BEGIN -- \u5b9a\u4e49\u5206\u6570\u63cf\u8ff0\u53d8\u91cf DECLARE description VARCHAR ( 10 ); -- \u5224\u65ad\u603b\u6210\u7ee9 IF total >= 380 THEN SET description = '\u5b66\u4e60\u4f18\u79c0' ; ELSEIF total >= 320 AND total < 380 THEN SET description = '\u5b66\u4e60\u4e0d\u9519' ; ELSE SET description = '\u5b66\u4e60\u4e00\u822c' ; END IF ; -- \u67e5\u8be2\u603b\u6210\u7ee9\u548c\u63cf\u8ff0\u4fe1\u606f SELECT total , description ; END $ DELIMITER ; -- \u8c03\u7528pro_test5\u5b58\u50a8\u8fc7\u7a0b CALL pro_test5(310); CALL pro_test5((SELECT SUM(score) FROM student)); \u5b58\u50a8\u8fc7\u7a0b_\u8f93\u51fa\u53c2\u6570 \u00b6 /* \u8f93\u51fa\u53c2\u6570 DELIMITER $ -- \u6807\u51c6\u8bed\u6cd5 CREATE PROCEDURE \u5b58\u50a8\u8fc7\u7a0b\u540d\u79f0 ( OUT \u53c2\u6570\u540d \u6570\u636e\u7c7b\u578b ) BEGIN \u6267\u884c\u7684 sql\u8bed\u53e5 ; END $ DELIMITER ; */ /\u8f93\u5165\u603b\u6210\u7ee9\u53d8\u91cf\uff0c\u4ee3\u8868\u5b66\u751f\u603b\u6210\u7ee9 \u8f93\u51fa\u5206\u6570\u63cf\u8ff0\u53d8\u91cf\uff0c\u4ee3\u8868\u5b66\u751f\u603b\u6210\u7ee9\u7684\u63cf\u8ff0 \u6839\u636e\u603b\u6210\u7ee9\u5224\u65ad\uff1a 380\u5206\u53ca\u4ee5\u4e0a \u5b66\u4e60\u4f18\u79c0 320 ~ 380 \u5b66\u4e60\u4e0d\u9519 320\u4ee5\u4e0b \u5b66\u4e60\u4e00\u822c */ DELIMITER $ CREATE PROCEDURE pro_test6 ( IN total INT , OUT description VARCHAR ( 10 )) BEGIN -- \u5224\u65ad\u603b\u6210\u7ee9 IF total >= 380 THEN SET description = '\u5b66\u4e60\u4f18\u79c0' ; ELSEIF total >= 320 AND total < 380 THEN SET description = '\u5b66\u4e60\u4e0d\u9519' ; ELSE SET description = '\u5b66\u4e60\u4e00\u822c' ; END IF ; END $ DELIMITER ; -- \u8c03\u7528pro_test6\u5b58\u50a8\u8fc7\u7a0b CALL pro_test6 ( 390 , @description ); -- \u67e5\u8be2\u603b\u6210\u7ee9\u63cf\u8ff0\u4fe1\u606f\u53d8\u91cf SELECT @description ; \u5b58\u50a8\u8fc7\u7a0b_case\u8bed\u53e5 \u00b6 /* case\u8bed\u53e5 \u6807\u51c6\u8bed\u6cd5 CASE WHEN \u5224\u65ad\u6761\u4ef6 1 THEN \u6267\u884c sql\u8bed\u53e51 ; [ WHEN \u5224\u65ad\u6761\u4ef6 2 THEN \u6267\u884c sql\u8bed\u53e52 ;] ... [ ELSE \u6267\u884c sql\u8bed\u53e5n ;] END CASE ; */ / \u8f93\u5165\u603b\u6210\u7ee9\u53d8\u91cf\uff0c\u4ee3\u8868\u5b66\u751f\u603b\u6210\u7ee9 \u5b9a\u4e49\u4e00\u4e2avarchar\u53d8\u91cf\uff0c\u7528\u4e8e\u5b58\u50a8\u5206\u6570\u63cf\u8ff0 \u6839\u636e\u603b\u6210\u7ee9\u5224\u65ad\uff1a 380\u5206\u53ca\u4ee5\u4e0a \u5b66\u4e60\u4f18\u79c0 320 ~ 380 \u5b66\u4e60\u4e0d\u9519 320\u4ee5\u4e0b \u5b66\u4e60\u4e00\u822c / DELIMITER $ CREATE PROCEDURE pro_test7 ( IN total INT ) BEGIN -- \u5b9a\u4e49\u603b\u6210\u7ee9\u63cf\u8ff0\u4fe1\u606f\u53d8\u91cf DECLARE description VARCHAR ( 10 ); -- \u5224\u65ad\u603b\u6210\u7ee9 CASE WHEN total >= 380 THEN SET description = '\u5b66\u4e60\u4f18\u79c0' ; WHEN total >= 320 AND total < 380 THEN SET description = '\u5b66\u4e60\u4e0d\u9519' ; ELSE SET description = '\u5b66\u4e60\u4e00\u822c' ; END CASE ; -- \u67e5\u8be2\u603b\u6210\u7ee9\u548c\u63cf\u8ff0\u4fe1\u606f SELECT total , description ; END $ DELIMITER ; -- \u8c03\u7528pro_test7\u5b58\u50a8\u8fc7\u7a0b CALL pro_test7(310); \u5b58\u50a8\u8fc7\u7a0b_while\u5faa\u73af \u00b6 /* while\u5faa\u73af \u6807\u51c6\u8bed\u6cd5 \u521d\u59cb\u5316\u8bed\u53e5 ; WHILE \u6761\u4ef6\u5224\u65ad\u8bed\u53e5 DO \u5faa\u73af\u4f53\u8bed\u53e5 ; \u6761\u4ef6\u63a7\u5236\u8bed\u53e5 ; END WHILE ; */ -- \u8ba1\u7b971~100\u4e4b\u95f4\u7684\u5076\u6570\u548c DELIMITER $ CREATE PROCEDURE pro_test8 () BEGIN -- \u5b9a\u4e49\u6c42\u548c\u53d8\u91cf DECLARE result INT DEFAULT 0 ; -- \u5b9a\u4e49\u521d\u59cb\u5316\u53d8\u91cf DECLARE num INT DEFAULT 1 ; -- while\u5faa\u73af WHILE num <= 100 DO -- \u5224\u65ad num\u662f\u5426\u662f\u5076\u6570 IF num % 2 = 0 THEN -- \u8ba9 num\u548cresult\u8fdb\u884c\u7d2f\u52a0 SET result = result + num ; END IF ; -- \u8ba9 num\u8fdb\u884c\u81ea\u589e SET num = num + 1 ; END WHILE ; -- \u67e5\u8be2\u6c42\u548c\u7ed3\u679c SELECT result ; END $ DELIMITER ; -- \u8c03\u7528pro_test8\u5b58\u50a8\u8fc7\u7a0b CALL pro_test8(); \u5b58\u50a8\u8fc7\u7a0b_repeat\u5faa\u73af \u00b6 /* repeat\u5faa\u73af \u6807\u51c6\u8bed\u6cd5 \u521d\u59cb\u5316\u8bed\u53e5 ; REPEAT \u5faa\u73af\u4f53\u8bed\u53e5 ; \u6761\u4ef6\u63a7\u5236\u8bed\u53e5 ; UNTIL \u6761\u4ef6\u5224\u65ad\u8bed\u53e5 END REPEAT ; */ -- \u8ba1\u7b971~10\u4e4b\u95f4\u7684\u548c DELIMITER $ CREATE PROCEDURE pro_test9 () BEGIN -- \u5b9a\u4e49\u6c42\u548c\u53d8\u91cf DECLARE result INT DEFAULT 0 ; -- \u5b9a\u4e49\u521d\u59cb\u5316\u53d8\u91cf DECLARE num INT DEFAULT 1 ; -- repeat\u5faa\u73af REPEAT -- \u7d2f\u52a0 SET result = result + num ; -- \u8ba9 num + 1 SET num = num + 1 ; -- \u505c\u6b62\u5faa\u73af UNTIL num > 10 END REPEAT ; -- \u67e5\u8be2\u6c42\u548c\u7ed3\u679c SELECT result ; END $ DELIMITER ; -- \u8c03\u7528pro_test9\u5b58\u50a8\u8fc7\u7a0b CALL pro_test9(); \u5b58\u50a8\u8fc7\u7a0b_loop\u5faa\u73af \u00b6 /* loop\u5faa\u73af \u6807\u51c6\u8bed\u6cd5 \u521d\u59cb\u5316\u8bed\u53e5; [ \u5faa\u73af\u540d\u79f0 : ] LOOP \u6761\u4ef6\u5224\u65ad\u8bed\u53e5 [ LEAVE \u5faa\u73af\u540d\u79f0 ; ] \u5faa\u73af\u4f53\u8bed\u53e5; \u6761\u4ef6\u63a7\u5236\u8bed\u53e5; END LOOP \u5faa\u73af\u540d\u79f0; */ -- \u8ba1\u7b971~10\u4e4b\u95f4\u7684\u548c DELIMITER $ CREATE PROCEDURE pro_test10 () BEGIN -- \u5b9a\u4e49\u6c42\u548c\u53d8\u91cf DECLARE result INT DEFAULT 0 ; -- \u5b9a\u4e49\u521d\u59cb\u5316\u53d8\u91cf DECLARE num INT DEFAULT 1 ; -- loop\u5faa\u73af l : LOOP -- \u6761\u4ef6\u5224\u65ad \uff0c \u505c\u6b62\u5faa\u73af IF num > 10 THEN LEAVE l ; END IF ; -- \u7d2f\u52a0 SET result = result + num ; -- \u8ba9num + 1 SET num = num + 1 ; END LOOP l ; -- \u67e5\u8be2\u6c42\u548c\u7ed3\u679c SELECT result ; END $ DELIMITER ; -- \u8c03\u7528pro_test10\u5b58\u50a8\u8fc7\u7a0b CALL pro_test10(); \u5b58\u50a8\u8fc7\u7a0b_\u6e38\u6807 \u00b6 /* \u6e38\u6807 \u6807\u51c6\u8bed\u6cd5 1.\u521b\u5efa\u6e38\u6807\uff1aDECLARE \u6e38\u6807\u540d\u79f0 CURSOR FOR \u67e5\u8be2sql\u8bed\u53e5; 2.\u6253\u5f00\u6e38\u6807\uff1aOPEN \u6e38\u6807\u540d\u79f0; 3.\u4f7f\u7528\u6e38\u6807\uff1aFETCH \u6e38\u6807\u540d\u79f0 INTO \u53d8\u91cf\u540d1,\u53d8\u91cf\u540d2,...; 4.\u5173\u95ed\u6e38\u6807\uff1aCLOSE \u6e38\u6807\u540d\u79f0; */ -- \u521b\u5efastu_score\u8868 CREATE TABLE stu_score( id INT PRIMARY KEY AUTO_INCREMENT, score INT ); -- \u5c06student\u8868\u4e2d\u6240\u6709\u7684\u6210\u7ee9\u4fdd\u5b58\u5230stu_score\u8868\u4e2d DELIMITER $ CREATE PROCEDURE pro_test11 () BEGIN -- \u5b9a\u4e49\u4e00\u4e2a\u4fdd\u5b58\u6210\u7ee9\u7684\u53d8\u91cf DECLARE s_score INT ; -- \u521b\u5efa\u6e38\u6807 DECLARE stu_result CURSOR FOR SELECT score FROM student ; -- \u5f00\u542f\u6e38\u6807 OPEN stu_result ; -- \u4f7f\u7528\u6e38\u6807 -- \u904d\u5386\u7ed3\u679c\uff0c\u62ff\u5230\u7b2c 1 \u884c\u6570\u636e FETCH stu_result INTO s_score ; -- \u5c06\u6570\u636e\u4fdd\u5b58\u5230 stu_score\u8868\u4e2d INSERT INTO stu_score VALUES ( NULL , s_score ); -- \u904d\u5386\u7ed3\u679c\uff0c\u62ff\u5230\u7b2c 2 \u884c\u6570\u636e FETCH stu_result INTO s_score ; -- \u5c06\u6570\u636e\u4fdd\u5b58\u5230 stu_score\u8868\u4e2d INSERT INTO stu_score VALUES ( NULL , s_score ); -- \u904d\u5386\u7ed3\u679c\uff0c\u62ff\u5230\u7b2c 3 \u884c\u6570\u636e FETCH stu_result INTO s_score ; -- \u5c06\u6570\u636e\u4fdd\u5b58\u5230 stu_score\u8868\u4e2d INSERT INTO stu_score VALUES ( NULL , s_score ); -- \u904d\u5386\u7ed3\u679c\uff0c\u62ff\u5230\u7b2c 4 \u884c\u6570\u636e FETCH stu_result INTO s_score ; -- \u5c06\u6570\u636e\u4fdd\u5b58\u5230 stu_score\u8868\u4e2d INSERT INTO stu_score VALUES ( NULL , s_score ); -- \u5173\u95ed\u6e38\u6807 CLOSE stu_result ; END $ DELIMITER ; -- \u8c03\u7528pro_test11\u5b58\u50a8\u8fc7\u7a0b CALL pro_test11(); -- \u67e5\u8be2stu_score\u6570\u636e\u8868 SELECT * FROM stu_score; \u5b58\u50a8\u8fc7\u7a0b_\u6e38\u6807\u4f18\u5316 \u00b6 /* \u5f53\u6e38\u6807\u7ed3\u675f\u540e\uff0c\u4f1a\u81ea\u52a8\u7684\u89e6\u53d1\u4e00\u4e2a\u4e8b\u4ef6\u3002\u5c31\u4ee3\u8868\u6e38\u6807\u5df2\u7ecf\u7ed3\u675f\u4e86\uff01 \u52a0\u6807\u8bb0\u7684\u601d\u60f3\uff1a 1.\u5b9a\u4e49\u4e00\u4e2a\u6807\u8bb0\u53d8\u91cf\uff0c\u9ed8\u8ba4\u503c\u4e3a0\uff08\u610f\u5473\u7740\u6709\u6570\u636e\uff09 2.\u5f53\u6e38\u6807\u7ed3\u675f\u540e\uff0c\u5c06\u6807\u8bb0\u53d8\u91cf\u7684\u503c\u4fee\u6539\u4e3a1\uff08\u610f\u5473\u7740\u6ca1\u6709\u6570\u636e\u4e86\uff09 */ DELIMITER $ CREATE PROCEDURE pro_test12 () BEGIN -- \u5b9a\u4e49\u4e00\u4e2a\u4fdd\u5b58\u6210\u7ee9\u7684\u53d8\u91cf DECLARE s_score INT ; -- \u5b9a\u4e49\u4e00\u4e2a\u6807\u8bb0\u53d8\u91cf\uff0c\u9ed8\u8ba4\u503c\u4e3a 0 \uff08\u610f\u5473\u7740\u6709\u6570\u636e\uff09 DECLARE flag INT DEFAULT 0 ; -- \u521b\u5efa\u6e38\u6807 DECLARE stu_result CURSOR FOR SELECT score FROM student ; -- \u5f53\u6e38\u6807\u7ed3\u675f\u540e\uff0c\u5c06\u6807\u8bb0\u53d8\u91cf\u7684\u503c\u4fee\u6539\u4e3a 1 \uff08\u610f\u5473\u7740\u6ca1\u6709\u6570\u636e\u4e86\uff09 DECLARE EXIT HANDLER FOR NOT FOUND SET flag = 1 ; -- \u5f00\u542f\u6e38\u6807 OPEN stu_result ; -- \u5faa\u73af\u4f7f\u7528\u6e38\u6807 REPEAT -- \u904d\u5386\u7ed3\u679c\uff0c\u62ff\u5230\u6570\u636e FETCH stu_result INTO s_score ; -- \u5c06\u6570\u636e\u4fdd\u5b58\u5230 stu_score\u8868\u4e2d INSERT INTO stu_score VALUES ( NULL , s_score ); -- \u5f53 flag\u7684\u503c\u662f1\u7684\u65f6\u5019 \uff0c\u5c31\u505c\u6b62\u5faa\u73af UNTIL flag = 1 END REPEAT ; -- \u5173\u95ed\u6e38\u6807 CLOSE stu_result ; END $ DELIMITER ; -- \u8c03\u7528pro_test12\u5b58\u50a8\u8fc7\u7a0b CALL pro_test12(); -- \u67e5\u8be2stu_score\u8868 SELECT * FROM stu_score; \u5b58\u50a8\u51fd\u6570 \u00b6 \u521b\u5efa\u5b58\u50a8\u51fd\u6570 \u00b6 /* \u521b\u5efa\u5b58\u50a8\u51fd\u6570 \u6807\u51c6\u8bed\u6cd5 CREATE FUNCTION \u51fd\u6570\u540d\u79f0 ([ \u53c2\u6570 \u6570\u636e\u7c7b\u578b ]) RETURNS \u8fd4\u56de\u503c\u7c7b\u578b BEGIN \u6267\u884c\u7684 sql\u8bed\u53e5 ; RETURN \u7ed3\u679c ; END $ */ -- \u5b9a\u4e49\u5b58\u50a8\u51fd\u6570\uff0c\u83b7\u53d6\u5b66\u751f\u8868\u4e2d\u6210\u7ee9\u5927\u4e8e95\u5206\u7684\u5b66\u751f\u6570\u91cf DELIMITER $ CREATE FUNCTION fun_test1 () RETURNS INT BEGIN -- \u5b9a\u4e49\u4e00\u4e2a\u7edf\u8ba1\u53d8\u91cf DECLARE result INT ; -- \u67e5\u8be2\u6210\u7ee9\u5927\u4e8e 95 \u5206\u7684\u6570\u91cf SELECT COUNT ( * ) INTO result FROM student WHERE score > 95 ; -- \u5c06\u7ed3\u679c\u8fd4\u56de RETURN result ; END $ DELIMITER ; \u8c03\u7528\u51fd\u6570 \u00b6 /* \u8c03\u7528\u51fd\u6570 \u6807\u51c6\u8bed\u6cd5 SELECT \u51fd\u6570\u540d\u79f0(\u5b9e\u9645\u53c2\u6570); */ -- \u8c03\u7528\u51fd\u6570 SELECT fun_test1(); \u5220\u9664\u51fd\u6570 \u00b6 /* \u5220\u9664\u51fd\u6570 \u6807\u51c6\u8bed\u6cd5 DROP FUNCTION \u51fd\u6570\u540d\u79f0; */ -- \u5220\u9664\u51fd\u6570 DROP FUNCTION fun_test1; 03\u89e6\u53d1\u5668 \u00b6 \u89e6\u53d1\u5668\u6570\u636e\u51c6\u5907 \u00b6 -- \u521b\u5efadb9\u6570\u636e\u5e93 CREATE DATABASE db9; -- \u4f7f\u7528db9\u6570\u636e\u5e93 USE db9; -- \u521b\u5efa\u8d26\u6237\u8868account CREATE TABLE account( id INT PRIMARY KEY AUTO_INCREMENT, -- \u8d26\u6237id NAME VARCHAR(20), -- \u59d3\u540d money DOUBLE -- \u4f59\u989d ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO account VALUES (NULL,'\u5f20\u4e09',1000),(NULL,'\u674e\u56db',2000); -- \u521b\u5efa\u65e5\u5fd7\u8868account_log CREATE TABLE account_log( id INT PRIMARY KEY AUTO_INCREMENT, -- \u65e5\u5fd7id operation VARCHAR(20), -- \u64cd\u4f5c\u7c7b\u578b (insert update delete) operation_time DATETIME, -- \u64cd\u4f5c\u65f6\u95f4 operation_id INT, -- \u64cd\u4f5c\u8868\u7684id operation_params VARCHAR(200) -- \u64cd\u4f5c\u53c2\u6570 ); INSERT\u578b\u89e6\u53d1\u5668 \u00b6 /* \u521b\u5efa\u89e6\u53d1\u5668 \u6807\u51c6\u8bed\u6cd5 DELIMITER $ CREATE TRIGGER \u89e6\u53d1\u5668\u540d\u79f0 BEFORE | AFTER INSERT | UPDATE | DELETE ON \u8868\u540d FOR EACH ROW BEGIN \u89e6\u53d1\u5668\u8981\u6267\u884c\u7684\u529f\u80fd ; END $ DELIMITER ; */ -- \u521b\u5efaINSERT\u578b\u89e6\u53d1\u5668\u3002\u7528\u4e8e\u5bf9account\u8868\u65b0\u589e\u6570\u636e\u8fdb\u884c\u65e5\u5fd7\u7684\u8bb0\u5f55 DELIMITER $ CREATE TRIGGER account_insert AFTER INSERT ON account FOR EACH ROW BEGIN INSERT INTO account_log VALUES ( NULL , 'INSERT' , NOW (), new . id , CONCAT ( '\u63d2\u5165\u540e{id=' , new . id , ',name=' , new . name , ',money=' , new . money , '}' )); END $ DELIMITER ; -- \u5411account\u8868\u6765\u6dfb\u52a0\u4e00\u6761\u8bb0\u5f55 INSERT INTO account VALUES (NULL,'\u738b\u4e94',3000); -- \u67e5\u8be2account\u8868 SELECT * FROM account; -- \u67e5\u8be2account_log\u8868 SELECT * FROM account_log; UPDATE\u578b\u89e6\u53d1\u5668 \u00b6 /* \u521b\u5efa\u89e6\u53d1\u5668 \u6807\u51c6\u8bed\u6cd5 DELIMITER $ CREATE TRIGGER \u89e6\u53d1\u5668\u540d\u79f0 BEFORE | AFTER INSERT | UPDATE | DELETE ON \u8868\u540d FOR EACH ROW BEGIN \u89e6\u53d1\u5668\u8981\u6267\u884c\u7684\u529f\u80fd ; END $ DELIMITER ; */ -- \u521b\u5efaUPDATE\u578b\u89e6\u53d1\u5668\u3002\u7528\u4e8e\u5bf9account\u8868\u4fee\u6539\u6570\u636e\u8fdb\u884c\u65e5\u5fd7\u7684\u8bb0\u5f55 DELIMITER $ CREATE TRIGGER account_update AFTER UPDATE ON account FOR EACH ROW BEGIN INSERT INTO account_log VALUES ( NULL , 'UPDATE' , NOW (), new . id , CONCAT ( '\u4fee\u6539\u524d{id=' , old . id , ',name=' , old . name , ',money=' , old . money , '}' , '\u4fee\u6539\u540e{id=' , new . id , ',name=' , new . name , ',money=' , new . money , '}' )); END $ DELIMITER ; -- \u4fee\u6539account\u8868\u4e2d\u674e\u56db\u7684\u91d1\u989d\u4e3a2500 UPDATE account SET money=2500 WHERE NAME='\u674e\u56db'; -- \u67e5\u8be2account\u8868 SELECT * FROM account; -- \u67e5\u8be2account_log\u8868 SELECT * FROM account_log; DELETE\u578b\u89e6\u53d1\u5668 \u00b6 /* \u521b\u5efa\u89e6\u53d1\u5668 \u6807\u51c6\u8bed\u6cd5 DELIMITER $ CREATE TRIGGER \u89e6\u53d1\u5668\u540d\u79f0 BEFORE | AFTER INSERT | UPDATE | DELETE ON \u8868\u540d FOR EACH ROW BEGIN \u89e6\u53d1\u5668\u8981\u6267\u884c\u7684\u529f\u80fd ; END $ DELIMITER ; */ -- \u521b\u5efaDELETE\u578b\u89e6\u53d1\u5668\u3002\u7528\u4e8e\u5bf9account\u8868\u5220\u9664\u6570\u636e\u8fdb\u884c\u65e5\u5fd7\u7684\u8bb0\u5f55 DELIMITER $ CREATE TRIGGER account_delete AFTER DELETE ON account FOR EACH ROW BEGIN INSERT INTO account_log VALUES ( NULL , 'DELETE' , NOW (), old . id , CONCAT ( '\u5220\u9664\u524d{id=' , old . id , ',name=' , old . name , ',money=' , old . money , '}' )); END $ DELIMITER ; -- \u5220\u9664account\u8868\u4e2d\u738b\u4e94 DELETE FROM account WHERE NAME='\u738b\u4e94'; -- \u67e5\u8be2account\u8868 SELECT * FROM account; -- \u67e5\u8be2account_log\u8868 SELECT * FROM account_log; \u67e5\u770b\u89e6\u53d1\u5668 \u00b6 /* \u67e5\u770b\u89e6\u53d1\u5668 \u6807\u51c6\u8bed\u6cd5 SHOW TRIGGERS; */ -- \u67e5\u770b\u89e6\u53d1\u5668 SHOW TRIGGERS ; \u5220\u9664\u89e6\u53d1\u5668 \u00b6 /* \u5220\u9664\u89e6\u53d1\u5668 \u6807\u51c6\u8bed\u6cd5 DROP TRIGGER \u89e6\u53d1\u5668\u540d\u79f0; */ -- \u5220\u9664\u89e6\u53d1\u5668 DROP TRIGGER account_delete; 04\u4e8b\u52a1 \u00b6 \u4e8b\u52a1\u7684\u6570\u636e\u51c6\u5907 \u00b6 -- \u521b\u5efadb10\u6570\u636e\u5e93 CREATE DATABASE db10; -- \u4f7f\u7528db10\u6570\u636e\u5e93 USE db10; -- \u521b\u5efa\u8d26\u6237\u8868 CREATE TABLE account( id INT PRIMARY KEY AUTO_INCREMENT, -- \u8d26\u6237id NAME VARCHAR(20), -- \u8d26\u6237\u540d\u79f0 money DOUBLE -- \u8d26\u6237\u4f59\u989d ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO account VALUES (NULL,'\u5f20\u4e09',1000),(NULL,'\u674e\u56db',1000); \u672a\u7ba1\u7406\u4e8b\u52a1 \u00b6 -- \u5f20\u4e09\u7ed9\u674e\u56db\u8f6c\u8d26500\u5143 -- 1.\u5f20\u4e09\u8d26\u6237-500 UPDATE account SET money=money-500 WHERE NAME='\u5f20\u4e09'; \u51fa\u9519\u4e86... -- 2.\u674e\u56db\u8d26\u6237+500 UPDATE account SET money=money+500 WHERE NAME='\u674e\u56db'; \u7ba1\u7406\u4e8b\u52a1 \u00b6 /* \u5f00\u542f\u4e8b\u52a1\uff1aSTART TRANSACTION; \u56de\u6eda\u4e8b\u52a1\uff1aROLLBACK; \u63d0\u4ea4\u4e8b\u52a1\uff1aCOMMIT; */ -- \u5f20\u4e09\u7ed9\u674e\u56db\u8f6c\u8d26500\u5143 -- 1.\u5f00\u542f\u4e8b\u52a1 START TRANSACTION; -- 2.\u6267\u884c\u8f6c\u8d26\u7684\u64cd\u4f5c UPDATE account SET money=money-500 WHERE NAME='\u5f20\u4e09'; \u51fa\u9519\u4e86... UPDATE account SET money=money+500 WHERE NAME='\u674e\u56db'; -- 3.\u7ed3\u675f\u4e8b\u52a1 -- 3.1\u56de\u6eda\u4e8b\u52a1 ROLLBACK; -- 3.2\u63d0\u4ea4\u4e8b\u52a1 COMMIT; \u4e8b\u52a1\u7684\u63d0\u4ea4\u65b9\u5f0f \u00b6 /* \u4e8b\u52a1\u7684\u63d0\u4ea4\u65b9\u5f0f \u67e5\u8be2\u4e8b\u52a1\u63d0\u4ea4\u65b9\u5f0f\uff1aSELECT @@AUTOCOMMIT; -- 1\u4ee3\u8868\u81ea\u52a8\u63d0\u4ea4 0\u4ee3\u8868\u624b\u52a8\u63d0\u4ea4 \u4fee\u6539\u4e8b\u52a1\u63d0\u4ea4\u65b9\u5f0f\uff1aSET @@AUTOCOMMIT=\u6570\u5b57; */ -- \u67e5\u8be2\u4e8b\u52a1\u7684\u63d0\u4ea4\u65b9\u5f0f SELECT @@autocommit ; UPDATE account SET money = 1000 WHERE NAME = '\u5f20\u4e09' ; COMMIT ; -- \u4fee\u6539\u4e8b\u52a1\u7684\u63d0\u4ea4\u65b9\u5f0f SET @@autocommit = 0 ; \u67e5\u8be2\u548c\u4fee\u6539\u4e8b\u52a1\u7684\u9694\u79bb\u7ea7\u522b \u00b6 /* \u4e8b\u52a1\u7684\u9694\u79bb\u7ea7\u522b \u67e5\u8be2\u9694\u79bb\u7ea7\u522b\uff1aSELECT @@TX_ISOLATION; \u4fee\u6539\u9694\u79bb\u7ea7\u522b\uff1aSET GLOBAL TRANSACTION ISOLATION LEVEL \u7ea7\u522b\u5b57\u7b26\u4e32; */ -- \u67e5\u8be2\u4e8b\u52a1\u9694\u79bb\u7ea7\u522b SELECT @@tx_isolation ; -- \u4fee\u6539\u4e8b\u52a1\u9694\u79bb\u7ea7\u522b SET GLOBAL TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; \u810f\u8bfb\u7684\u95ee\u9898\u6f14\u793a\u548c\u89e3\u51b3_\u7a97\u53e31 \u00b6 /* \u810f\u8bfb\u7684\u95ee\u9898\u6f14\u793a\u548c\u89e3\u51b3 \u810f\u8bfb\uff1a\u4e00\u4e2a\u4e8b\u52a1\u4e2d\u8bfb\u53d6\u5230\u4e86\u5176\u4ed6\u4e8b\u52a1\u672a\u63d0\u4ea4\u7684\u6570\u636e */ -- \u8bbe\u7f6e\u4e8b\u52a1\u9694\u79bb\u7ea7\u522b\u4e3aread uncommitted SET GLOBAL TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED; -- \u5f00\u542f\u4e8b\u52a1 START TRANSACTION; -- \u8f6c\u8d26 UPDATE account SET money = money-500 WHERE NAME='\u5f20\u4e09'; UPDATE account SET money = money+500 WHERE NAME='\u674e\u56db'; -- \u67e5\u8be2account\u8868 SELECT * FROM account; -- \u56de\u6eda ROLLBACK; \u810f\u8bfb\u7684\u95ee\u9898\u6f14\u793a\u548c\u89e3\u51b3_\u7a97\u53e32 \u00b6 -- \u67e5\u8be2\u4e8b\u52a1\u9694\u79bb\u7ea7\u522b SELECT @@tx_isolation ; -- \u5f00\u542f\u4e8b\u52a1 START TRANSACTION; -- \u67e5\u8be2account\u8868 SELECT * FROM account; \u4e0d\u53ef\u91cd\u590d\u8bfb\u7684\u95ee\u9898\u6f14\u793a\u548c\u89e3\u51b3_\u7a97\u53e31 \u00b6 /* \u4e0d\u53ef\u91cd\u590d\u8bfb\u7684\u95ee\u9898\u6f14\u793a\u548c\u89e3\u51b3 \u4e0d\u53ef\u91cd\u590d\u8bfb\uff1a\u4e00\u4e2a\u4e8b\u52a1\u4e2d\u8bfb\u53d6\u5230\u4e86\u5176\u4ed6\u4e8b\u52a1\u5df2\u63d0\u4ea4\u7684\u6570\u636e */ -- \u8bbe\u7f6e\u4e8b\u52a1\u9694\u79bb\u7ea7\u522b\u4e3aread committed SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED; SET GLOBAL TRANSACTION ISOLATION LEVEL REPEATABLE READ; -- \u5f00\u542f\u4e8b\u52a1 START TRANSACTION; -- \u8f6c\u8d26 UPDATE account SET money = money-500 WHERE NAME='\u5f20\u4e09'; UPDATE account SET money = money+500 WHERE NAME='\u674e\u56db'; -- \u67e5\u8be2account\u8868 SELECT * FROM account; -- \u63d0\u4ea4\u4e8b\u52a1 COMMIT; \u4e0d\u53ef\u91cd\u590d\u8bfb\u7684\u95ee\u9898\u6f14\u793a\u548c\u89e3\u51b3_\u7a97\u53e32 \u00b6 -- \u67e5\u8be2\u9694\u79bb\u7ea7\u522b SELECT @@tx_isolation ; -- \u5f00\u542f\u4e8b\u52a1 START TRANSACTION; -- \u67e5\u8be2account\u8868 SELECT * FROM account; -- \u63d0\u4ea4\u4e8b\u52a1 COMMIT; \u5e7b\u8bfb\u7684\u95ee\u9898\u6f14\u793a\u548c\u89e3\u51b3_\u7a97\u53e31 \u00b6 /* \u5e7b\u8bfb\u7684\u95ee\u9898\u6f14\u793a\u548c\u89e3\u51b3 \u5e7b\u8bfb\uff1a \u67e5\u8be2\u67d0\u8bb0\u5f55\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u5b58\u5728 \u51c6\u5907\u63d2\u5165\u6b64\u8bb0\u5f55\uff0c\u4f46\u6267\u884c\u63d2\u5165\u65f6\u53d1\u73b0\u6b64\u8bb0\u5f55\u5df2\u5b58\u5728\uff0c\u65e0\u6cd5\u63d2\u5165 \u6216\u67d0\u8bb0\u5f55\u4e0d\u5b58\u5728\u6267\u884c\u5220\u9664\uff0c\u5374\u53d1\u73b0\u5220\u9664\u6210\u529f */ -- \u8bbe\u7f6e\u9694\u79bb\u7ea7\u522b\u4e3arepeatable read SET GLOBAL TRANSACTION ISOLATION LEVEL REPEATABLE READ; SET GLOBAL TRANSACTION ISOLATION LEVEL SERIALIZABLE; -- \u5f00\u542f\u4e8b\u52a1 START TRANSACTION; -- \u6dfb\u52a0\u8bb0\u5f55 INSERT INTO account VALUES (4,'\u8d75\u516d',2000); -- \u67e5\u8be2account\u8868 SELECT * FROM account; -- \u63d0\u4ea4\u4e8b\u52a1 COMMIT; \u5e7b\u8bfb\u7684\u95ee\u9898\u6f14\u793a\u548c\u89e3\u51b3_\u7a97\u53e32 \u00b6 -- \u67e5\u8be2\u9694\u79bb\u7ea7\u522b SELECT @@tx_isolation ; -- \u5f00\u542f\u4e8b\u52a1 START TRANSACTION; -- \u67e5\u8be2account\u8868 SELECT * FROM account; -- \u6dfb\u52a0 INSERT INTO account VALUES (3,'\u738b\u4e94',2000); day04 \u00b6 01\u5b58\u50a8\u5f15\u64ce \u00b6 \u67e5\u8be2\u6570\u636e\u5e93\u652f\u6301\u7684\u5b58\u50a8\u5f15\u64ce \u00b6 /* \u67e5\u8be2\u6570\u636e\u5e93\u652f\u6301\u7684\u5b58\u50a8\u5f15\u64ce \u6807\u51c6\u8bed\u6cd5 SHOW ENGINES; */ \u67e5\u8be2\u67d0\u4e2a\u6570\u636e\u5e93\u4e2d\u6240\u6709\u6570\u636e\u8868\u7684\u5b58\u50a8\u5f15\u64ce \u00b6 /* \u67e5\u8be2\u67d0\u4e2a\u6570\u636e\u5e93\u4e2d\u6240\u6709\u6570\u636e\u8868\u7684\u5b58\u50a8\u5f15\u64ce \u6807\u51c6\u8bed\u6cd5 SHOW TABLE STATUS FROM \u6570\u636e\u5e93\u540d\u79f0; */ \u67e5\u8be2\u67d0\u4e2a\u6570\u636e\u5e93\u4e2d\u67d0\u4e2a\u8868\u7684\u5b58\u50a8\u5f15\u64ce \u00b6 /* \u67e5\u8be2\u67d0\u4e2a\u6570\u636e\u5e93\u4e2d\u67d0\u4e2a\u8868\u7684\u5b58\u50a8\u5f15\u64ce \u6807\u51c6\u8bed\u6cd5 SHOW TABLE STATUS FROM \u6570\u636e\u5e93\u540d\u79f0 WHERE NAME = '\u6570\u636e\u8868\u540d\u79f0'; */ \u521b\u5efa\u6570\u636e\u8868\u6307\u5b9a\u5b58\u50a8\u5f15\u64ce \u00b6 /* \u521b\u5efa\u6570\u636e\u8868\u6307\u5b9a\u5b58\u50a8\u5f15\u64ce \u6807\u51c6\u8bed\u6cd5 CREATE TABLE \u8868\u540d( \u5217\u540d,\u6570\u636e\u7c7b\u578b, ... )ENGINE = \u5f15\u64ce\u540d\u79f0; */ \u4fee\u6539\u6570\u636e\u8868\u7684\u5b58\u50a8\u5f15\u64ce \u00b6 /* \u4fee\u6539\u6570\u636e\u8868\u7684\u5b58\u50a8\u5f15\u64ce \u6807\u51c6\u8bed\u6cd5 ALTER TABLE \u8868\u540d ENGINE = \u5f15\u64ce\u540d\u79f0; */ -- \u4fee\u6539engine_test\u8868\u7684\u5f15\u64ce\u4e3aInnoDB ALTER TABLE engine_test ENGINE = INNODB; -- \u67e5\u8be2engine_test\u8868\u7684\u5b58\u50a8\u5f15\u64ce SHOW TABLE STATUS FROM db11 WHERE NAME = ' engine_test ' ; 02\u7d22\u5f15 \u00b6 \u7d22\u5f15\u6570\u636e\u51c6\u5907 \u00b6 -- \u521b\u5efadb12\u6570\u636e\u5e93 CREATE DATABASE db12; -- \u4f7f\u7528db12\u6570\u636e\u5e93 USE db12; -- \u521b\u5efastudent\u8868 CREATE TABLE student( id INT PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(10), age INT, score INT ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO student VALUES (NULL,'\u5f20\u4e09',23,98),(NULL,'\u674e\u56db',24,95), (NULL,'\u738b\u4e94',25,96),(NULL,'\u8d75\u516d',26,94),(NULL,'\u5468\u4e03',27,99); \u521b\u5efa\u548c\u67e5\u8be2\u7d22\u5f15 \u00b6 \u521b\u5efa\u7d22\u5f15 \u00b6 /* \u521b\u5efa\u7d22\u5f15 \u6807\u51c6\u8bed\u6cd5 CREATE [UNIQUE|FULLTEXT] INDEX \u7d22\u5f15\u540d\u79f0 [USING \u7d22\u5f15\u7c7b\u578b] -- \u9ed8\u8ba4\u662fB+TREE ON \u8868\u540d(\u5217\u540d...); */ -- \u4e3astudent\u8868\u4e2d\u7684name\u5217\u521b\u5efa\u4e00\u4e2a\u666e\u901a\u7d22\u5f15 CREATE INDEX idx_name ON student(NAME); -- \u4e3astudent\u8868\u4e2d\u7684age\u5217\u521b\u5efa\u4e00\u4e2a\u552f\u4e00\u7d22\u5f15 CREATE UNIQUE INDEX idx_age ON student(age); \u67e5\u8be2\u7d22\u5f15 \u00b6 /* \u67e5\u8be2\u7d22\u5f15 \u6807\u51c6\u8bed\u6cd5 SHOW INDEX FROM \u8868\u540d; */ -- \u67e5\u8be2student\u8868\u4e2d\u7684\u7d22\u5f15 SHOW INDEX FROM student ; ALTER\u6dfb\u52a0\u7d22\u5f15 \u00b6 /* ALTER\u6dfb\u52a0\u7d22\u5f15 -- \u666e\u901a\u7d22\u5f15 ALTER TABLE \u8868\u540d ADD INDEX \u7d22\u5f15\u540d\u79f0(\u5217\u540d); -- \u7ec4\u5408\u7d22\u5f15 ALTER TABLE \u8868\u540d ADD INDEX \u7d22\u5f15\u540d\u79f0(\u5217\u540d1,\u5217\u540d2,...); -- \u4e3b\u952e\u7d22\u5f15 ALTER TABLE \u8868\u540d ADD PRIMARY KEY(\u4e3b\u952e\u5217\u540d); -- \u5916\u952e\u7d22\u5f15(\u6dfb\u52a0\u5916\u952e\u7ea6\u675f\uff0c\u5c31\u662f\u5916\u952e\u7d22\u5f15) ALTER TABLE \u8868\u540d ADD CONSTRAINT \u5916\u952e\u540d FOREIGN KEY (\u672c\u8868\u5916\u952e\u5217\u540d) REFERENCES \u4e3b\u8868\u540d(\u4e3b\u952e\u5217\u540d); -- \u552f\u4e00\u7d22\u5f15 ALTER TABLE \u8868\u540d ADD UNIQUE \u7d22\u5f15\u540d\u79f0(\u5217\u540d); -- \u5168\u6587\u7d22\u5f15 ALTER TABLE \u8868\u540d ADD FULLTEXT \u7d22\u5f15\u540d\u79f0(\u5217\u540d); */ -- \u4e3astudent\u8868\u4e2dname\u5217\u6dfb\u52a0\u5168\u6587\u7d22\u5f15 ALTER TABLE student ADD FULLTEXT idx_fulltext_name(NAME); -- \u67e5\u8be2student\u8868\u7684\u7d22\u5f15 SHOW INDEX FROM student ; \u5220\u9664\u7d22\u5f15 \u00b6 /* \u5220\u9664\u7d22\u5f15 \u6807\u51c6\u8bed\u6cd5 DROP INDEX \u7d22\u5f15\u540d\u79f0 ON \u8868\u540d; */ -- \u5220\u9664idx_name\u7d22\u5f15 DROP INDEX idx_name ON student; \u7d22\u5f15\u7684\u6548\u7387\u6d4b\u8bd5 \u00b6 -- \u521b\u5efa product\u5546\u54c1\u8868 CREATE TABLE product ( id INT PRIMARY KEY AUTO_INCREMENT , -- \u5546\u54c1 id NAME VARCHAR ( 10 ), -- \u5546\u54c1\u540d\u79f0 price INT -- \u5546\u54c1\u4ef7\u683c ); -- \u5b9a\u4e49\u5b58\u50a8\u51fd\u6570\uff0c\u751f\u6210\u957f\u5ea6\u4e3a 10 \u7684\u968f\u673a\u5b57\u7b26\u4e32\u5e76\u8fd4\u56de DELIMITER $ CREATE FUNCTION rand_string () RETURNS VARCHAR ( 255 ) BEGIN DECLARE big_str VARCHAR ( 100 ) DEFAULT 'abcdefghijklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ' ; DECLARE small_str VARCHAR ( 255 ) DEFAULT '' ; DECLARE i INT DEFAULT 1 ; WHILE i <= 10 DO SET small_str = CONCAT ( small_str , SUBSTRING ( big_str , FLOOR ( 1 + RAND () * 52 ), 1 )); SET i = i + 1 ; END WHILE ; RETURN small_str ; END $ DELIMITER ; -- \u5b9a\u4e49\u5b58\u50a8\u8fc7\u7a0b\uff0c\u6dfb\u52a0 100 \u4e07\u6761\u6570\u636e\u5230 product\u8868\u4e2d DELIMITER $ CREATE PROCEDURE pro_test () BEGIN DECLARE num INT DEFAULT 1 ; WHILE num <= 1000000 DO INSERT INTO product VALUES ( NULL , rand_string (), num ); SET num = num + 1 ; END WHILE ; END $ DELIMITER ; -- \u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b CALL pro_test (); -- \u67e5\u8be2\u603b\u8bb0\u5f55\u6761\u6570 SELECT COUNT ( * ) FROM product ; -- \u67e5\u8be2 product\u8868\u7684\u7d22\u5f15 SHOW INDEX FROM product ; -- \u67e5\u8be2 name\u4e3aOkIKDLVwtG\u7684\u6570\u636e ( 0.049 ) SELECT * FROM product WHERE NAME = 'OkIKDLVwtG' ; -- \u901a\u8fc7 id\u5217\u67e5\u8be2OkIKDLVwtG\u7684\u6570\u636e ( 1 \u6beb\u79d2 ) SELECT * FROM product WHERE id = 999998 ; -- \u4e3a name\u5217\u6dfb\u52a0\u7d22\u5f15 ALTER TABLE product ADD INDEX idx_name ( NAME ); -- \u67e5\u8be2 name\u4e3aOkIKDLVwtG\u7684\u6570\u636e ( 0.001 ) SELECT * FROM product WHERE NAME = 'OkIKDLVwtG' ; /* \u8303\u56f4\u67e5\u8be2 */ -- \u67e5\u8be2\u4ef7\u683c\u4e3a 800 ~ 1000 \u4e4b\u95f4\u7684\u6240\u6709\u6570\u636e ( 0.052 ) SELECT * FROM product WHERE price BETWEEN 800 AND 1000 ; /* \u6392\u5e8f\u67e5\u8be2 */ -- \u67e5\u8be2\u4ef7\u683c\u4e3a 800 ~ 1000 \u4e4b\u95f4\u7684\u6240\u6709\u6570\u636e , \u964d\u5e8f\u6392\u5217 ( 0.083 ) SELECT * FROM product WHERE price BETWEEN 800 AND 1000 ORDER BY price DESC ; -- \u4e3a price\u5217\u6dfb\u52a0\u7d22\u5f15 ALTER TABLE product ADD INDEX idx_price ( price ); -- \u67e5\u8be2\u4ef7\u683c\u4e3a 800 ~ 1000 \u4e4b\u95f4\u7684\u6240\u6709\u6570\u636e ( 0.011 ) SELECT * FROM product WHERE price BETWEEN 800 AND 1000 ; -- \u67e5\u8be2\u4ef7\u683c\u4e3a 800 ~ 1000 \u4e4b\u95f4\u7684\u6240\u6709\u6570\u636e , \u964d\u5e8f\u6392\u5217 ( 0.001 ) SELECT * FROM product WHERE price BETWEEN 800 AND 1000 ORDER BY price DESC ; 03\u9501 \u00b6 InnoDB\u9501\u7684\u6570\u636e\u51c6\u5907 \u00b6 -- \u521b\u5efadb13\u6570\u636e\u5e93 CREATE DATABASE db13; -- \u4f7f\u7528db13\u6570\u636e\u5e93 USE db13; -- \u521b\u5efastudent\u8868 CREATE TABLE student( id INT PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(10), age INT, score INT ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO student VALUES (NULL,'\u5f20\u4e09',23,99),(NULL,'\u674e\u56db',24,95), (NULL,'\u738b\u4e94',25,98),(NULL,'\u8d75\u516d',26,97); InnoDB\u5171\u4eab\u9501_\u7a97\u53e31 \u00b6 -- \u7a97\u53e31 /* \u5171\u4eab\u9501\uff1a\u6570\u636e\u53ef\u4ee5\u88ab\u591a\u4e2a\u4e8b\u52a1\u67e5\u8be2\uff0c\u4f46\u662f\u4e0d\u80fd\u4fee\u6539 \u521b\u5efa\u9501\u7684\u683c\u5f0f SELECT\u8bed\u53e5 LOCK IN SHARE MODE; */ -- \u5f00\u542f\u4e8b\u52a1 START TRANSACTION; -- \u67e5\u8be2id\u4e3a1\u7684\u6570\u636e\u8bb0\u5f55\u3002\u5e76\u4e14\u52a0\u5165\u5171\u4eab\u9501 SELECT * FROM student WHERE id=1 LOCK IN SHARE MODE; -- \u67e5\u8be2\u5206\u6570\u4e3a99\u7684\u6570\u636e\u8bb0\u5f55\u3002\u5e76\u4e14\u52a0\u5165\u5171\u4eab\u9501 SELECT * FROM student WHERE score=99 LOCK IN SHARE MODE; -- \u63d0\u4ea4\u4e8b\u52a1 COMMIT; InnoDB\u5171\u4eab\u9501_\u7a97\u53e32 \u00b6 -- \u5f00\u542f\u4e8b\u52a1 START TRANSACTION; -- \u67e5\u8be2id\u4e3a1\u7684\u6570\u636e\u8bb0\u5f55\u3002(\u666e\u901a\u67e5\u8be2\u6ca1\u95ee\u9898) SELECT * FROM student WHERE id=1; -- \u67e5\u8be2id\u4e3a1\u7684\u6570\u636e\u8bb0\u5f55\u3002\u5e76\u4e14\u52a0\u5165\u5171\u4eab\u9501(\u5171\u4eab\u9501\u548c\u5171\u4eab\u9501\u662f\u517c\u5bb9\u7684) SELECT * FROM student WHERE id=1 LOCK IN SHARE MODE; -- \u4fee\u6539id\u4e3a1\u7684\u6570\u636e\u3002\u4fee\u6539\u59d3\u540d\u4e3a\u5f20\u4e09\u4e09(\u4fee\u6539\u5931\u8d25\uff0c\u4f1a\u51fa\u73b0\u9501\u7684\u60c5\u51b5\u3002\u53ea\u6709\u7a97\u53e31\u63d0\u4ea4\u4e8b\u52a1\u540e\uff0c\u624d\u80fd\u4fee\u6539\u6210\u529f) UPDATE student SET NAME='\u5f20\u4e09\u4e09' WHERE id=1; -- \u4fee\u6539id\u4e3a2\u7684\u6570\u636e\u3002\u4fee\u6539\u59d3\u540d\u4e3a\u674e\u56db\u56db(\u4fee\u6539\u6210\u529f\u3002InnoDB\u5f15\u64ce\u9ed8\u8ba4\u662f\u884c\u9501) UPDATE student SET NAME='\u674e\u56db\u56db' WHERE id=2; -- \u4fee\u6539id\u4e3a3\u7684\u6570\u636e\u3002\u4fee\u6539\u59d3\u540d\u4e3a\u738b\u4e94\u4e94(\u6ce8\u610f\uff1aInnoDB\u5f15\u64ce\u5982\u679c\u4e0d\u91c7\u7528\u5e26\u7d22\u5f15\u7684\u5217\uff0c\u5219\u4f1a\u63d0\u5347\u4e3a\u8868\u9501) UPDATE student SET NAME='\u738b\u4e94\u4e94' WHERE id=3; -- \u63d0\u4ea4\u4e8b\u52a1 COMMIT; InnoDB\u6392\u4ed6\u9501_\u7a97\u53e31 \u00b6 -- \u7a97\u53e3 1 /* \u6392\u4ed6\u9501\uff1a\u52a0\u9501\u7684\u6570\u636e\uff0c\u4e0d\u80fd\u88ab\u5176\u4ed6\u4e8b\u52a1\u52a0\u9501\u67e5\u8be2\u6216\u4fee\u6539 \u6392\u4ed6\u9501\u521b\u5efa\u683c\u5f0f SELECT\u8bed\u53e5 FOR UPDATE; */ -- \u5f00\u542f\u4e8b\u52a1 START TRANSACTION ; -- \u67e5\u8be2 id \u4e3a 1 \u7684\u6570\u636e\u8bb0\u5f55\u3002\u5e76\u4e14\u52a0\u5165\u6392\u4ed6\u9501 SELECT * FROM student WHERE id = 1 FOR UPDATE ; -- \u63d0\u4ea4\u4e8b\u52a1 COMMIT ; InnoDB\u6392\u4ed6\u9501_\u7a97\u53e32 \u00b6 -- \u5f00\u542f\u4e8b\u52a1 START TRANSACTION ; -- \u67e5\u8be2 id \u4e3a 1 \u7684\u6570\u636e\u8bb0\u5f55\u3002 ( \u666e\u901a\u67e5\u8be2\u6ca1\u95ee\u9898 ) SELECT * FROM student WHERE id = 1 ; -- \u67e5\u8be2 id \u4e3a 1 \u7684\u6570\u636e\u8bb0\u5f55\u3002\u5e76\u4e14\u52a0\u5165\u5171\u4eab\u9501 ( \u6392\u4ed6\u9501\u4e0d\u80fd\u548c\u5171\u4eab\u9501\u5171\u5b58 ) SELECT * FROM student WHERE id = 1 LOCK IN SHARE MODE ; -- \u67e5\u8be2 id \u4e3a 1 \u7684\u6570\u636e\u8bb0\u5f55\u3002\u5e76\u4e14\u52a0\u5165\u6392\u4ed6\u9501 ( \u6392\u4ed6\u9501\u548c\u6392\u4ed6\u9501\u4e0d\u80fd\u5171\u5b58 ) SELECT * FROM student WHERE id = 1 FOR UPDATE ; -- \u4fee\u6539 id \u4e3a 1 \u7684\u6570\u636e\u3002\u5c06\u59d3\u540d\u4fee\u6539\u4e3a\u5f20\u4e09\u4e09 ( \u4e0d\u80fd\u4fee\u6539\u3002\u4f1a\u51fa\u73b0\u9501\u7684\u60c5\u51b5\u3002\u53ea\u6709\u7a97\u53e3 1 \u63d0\u4ea4\u4e8b\u52a1\u540e\uff0c\u624d\u80fd\u4fee\u6539\u6210\u529f ) UPDATE student SET NAME = ' \u5f20\u4e09\u4e09 ' WHERE id = 1 ; -- \u63d0\u4ea4\u4e8b\u52a1 COMMIT ; MYISAM\u9501\u7684\u6570\u636e\u51c6\u5907 \u00b6 -- \u521b\u5efaproduct\u8868 CREATE TABLE product( id INT PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(20), price INT )ENGINE = MYISAM; -- \u6307\u5b9a\u5b58\u50a8\u5f15\u64ce\u4e3aMyISAM -- \u6dfb\u52a0\u6570\u636e INSERT INTO product VALUES (NULL,'\u534e\u4e3a\u624b\u673a',4999),(NULL,'\u5c0f\u7c73\u624b\u673a',2999), (NULL,'\u82f9\u679c',8999),(NULL,'\u4e2d\u5174',1999); MYISAM\u8bfb\u9501_\u7a97\u53e31 \u00b6 /* \u8bfb\u9501\uff1a\u6240\u6709\u8fde\u63a5\u53ea\u80fd\u8bfb\u53d6\u6570\u636e\uff0c\u4e0d\u80fd\u4fee\u6539 \u52a0\u9501 LOCK TABLE \u8868\u540d READ; \u89e3\u9501(\u5c06\u5f53\u524d\u4f1a\u8bdd\u6240\u6709\u7684\u8868\u8fdb\u884c\u89e3\u9501) UNLOCK TABLES; */ -- \u4e3aproduct\u8868\u6dfb\u52a0\u8bfb\u9501 LOCK TABLE product READ; -- \u67e5\u8be2product\u8868(\u67e5\u8be2\u6210\u529f) SELECT * FROM product; -- \u5c06id\u4e3a1\u7684\u4ef7\u683c\u4fee\u6539\u4e3a5999(\u4e0d\u80fd\u4fee\u6539) UPDATE product SET price=5999 WHERE id=1; -- \u89e3\u9501 UNLOCK TABLES; MYISAM\u8bfb\u9501_\u7a97\u53e32 \u00b6 -- \u67e5\u8be2product\u8868(\u67e5\u8be2\u6210\u529f) SELECT * FROM product; -- \u5c06id\u4e3a1\u7684\u4ef7\u683c\u4fee\u6539\u4e3a5999(\u4e0d\u80fd\u4fee\u6539\u3002\u53ea\u6709\u7a97\u53e31\u89e3\u9501\u540e\u624d\u80fd\u4fee\u6539\u6210\u529f) UPDATE product SET price=5999 WHERE id=1; MYISAM\u5199\u9501_\u7a97\u53e31 \u00b6 /* \u5199\u9501\uff1a\u5176\u4ed6\u8fde\u63a5\u4e0d\u80fd\u67e5\u8be2\u548c\u4fee\u6539\u6570\u636e \u52a0\u9501 LOCK TABLE \u8868\u540d WRITE; \u89e3\u9501(\u5c06\u5f53\u524d\u4f1a\u8bdd\u6240\u6709\u7684\u8868\u8fdb\u884c\u89e3\u9501) UNLOCK TABLES; */ -- \u4e3a product\u8868\u6dfb\u52a0\u5199\u9501 LOCK TABLE product WRITE ; -- \u67e5\u8be2 product\u8868 ( \u67e5\u8be2\u6210\u529f ) SELECT * FROM product ; -- \u4fee\u6539 id\u4e3a2\u7684\u4ef7\u683c\u4e3a3999 ( \u4fee\u6539\u6210\u529f ) UPDATE product SET price = 3999 WHERE id = 2 ; -- \u89e3\u9501 UNLOCK TABLES ; MYISAM\u5199\u9501_\u7a97\u53e32 \u00b6 -- \u67e5\u8be2product\u8868\uff08\u67e5\u8be2\u5931\u8d25\u3002\u53ea\u6709\u7a97\u53e31\u89e3\u9501\u540e\uff0c\u624d\u80fd\u67e5\u8be2\u6210\u529f\uff09 SELECT * FROM product; -- \u4fee\u6539id\u4e3a2\u7684\u4ef7\u683c\u4e3a1999(\u4fee\u6539\u5931\u8d25\u3002\u53ea\u6709\u7a97\u53e31\u89e3\u9501\u540e\uff0c\u624d\u80fd\u4fee\u6539\u6210\u529f) UPDATE product SET price=1999 WHERE id=2; \u4e50\u89c2\u9501 \u00b6 -- \u521b\u5efacity\u8868 CREATE TABLE city( id INT PRIMARY KEY AUTO_INCREMENT, -- \u57ce\u5e02id NAME VARCHAR(20), -- \u57ce\u5e02\u540d\u79f0 VERSION INT -- \u7248\u672c\u53f7 ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO city VALUES (NULL,'\u5317\u4eac',1),(NULL,'\u4e0a\u6d77',1),(NULL,'\u5e7f\u5dde',1),(NULL,'\u6df1\u5733',1); -- \u5c06\u5317\u4eac\u4fee\u6539\u4e3a\u5317\u4eac\u5e02 -- 1.\u5c06\u5317\u4eac\u7684\u7248\u672c\u53f7\u8bfb\u53d6\u51fa\u6765 SELECT VERSION FROM city WHERE NAME='\u5317\u4eac'; -- 1 -- 2.\u4fee\u6539\u5317\u4eac\u4e3a\u5317\u4eac\u5e02\uff0c\u7248\u672c\u53f7+1.\u5e76\u5bf9\u6bd4\u7248\u672c\u53f7\u662f\u5426\u76f8\u540c UPDATE city SET NAME='\u5317\u4eac\u5e02',VERSION=VERSION+1 WHERE NAME='\u5317\u4eac' AND VERSION=1; 04\u4e3b\u4ece\u590d\u5236 \u00b6 \u4e3b\u4ece\u590d\u5236_\u4e3b\u670d\u52a1\u5668\u64cd\u4f5c \u00b6 -- \u4e3b\u670d\u52a1\u5668\u521b\u5efadb1\u6570\u636e\u5e93,\u4ece\u670d\u52a1\u5668\u4f1a\u81ea\u52a8\u540c\u6b65 CREATE DATABASE db1; \u4e3b\u4ece\u590d\u5236_\u4ece\u670d\u52a1\u5668\u64cd\u4f5c \u00b6 -- \u4ece\u670d\u52a1\u5668\u521b\u5efadb2\u6570\u636e\u5e93,\u4e3b\u670d\u52a1\u5668\u4e0d\u4f1a\u81ea\u52a8\u540c\u6b65 CREATE DATABASE db2; 05\u8bfb\u5199\u5206\u79bb \u00b6 \u8bfb\u5199\u5206\u79bb_mycat\u64cd\u4f5c \u00b6 -- \u521b\u5efa\u5b66\u751f\u8868 CREATE TABLE student( id INT PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(10) ); -- \u67e5\u8be2\u5b66\u751f\u8868 SELECT * FROM student; -- \u6dfb\u52a0\u4e24\u6761\u8bb0\u5f55 INSERT INTO student VALUES (NULL,'\u5f20\u4e09'),(NULL,'\u674e\u56db'); -- \u505c\u6b62\u4e3b\u4ece\u590d\u5236\u540e\uff0c\u6dfb\u52a0\u7684\u6570\u636e\u53ea\u4f1a\u4fdd\u5b58\u5230\u4e3b\u670d\u52a1\u5668\u4e0a\u3002 INSERT INTO student VALUES (NULL,'\u738b\u4e94'); \u8bfb\u5199\u5206\u79bb_\u4e3b\u670d\u52a1\u5668\u64cd\u4f5c \u00b6 -- \u4e3b\u670d\u52a1\u5668\uff1a\u67e5\u8be2\u5b66\u751f\u8868\uff0c\u53ef\u4ee5\u770b\u5230\u6570\u636e SELECT * FROM student; \u8bfb\u5199\u5206\u79bb_\u4ece\u670d\u52a1\u5668\u64cd\u4f5c \u00b6 -- \u4ece\u670d\u52a1\u5668\uff1a\u67e5\u8be2\u5b66\u751f\u8868\uff0c\u53ef\u4ee5\u770b\u5230\u6570\u636e(\u56e0\u4e3a\u6709\u4e3b\u4ece\u590d\u5236) SELECT * FROM student; -- \u4ece\u670d\u52a1\u5668\uff1a\u5220\u9664\u4e00\u6761\u8bb0\u5f55\u3002(\u4e3b\u670d\u52a1\u5668\u5e76\u6ca1\u6709\u5220\u9664\uff0cmycat\u4e2d\u95f4\u4ef6\u67e5\u8be2\u7684\u7ed3\u679c\u662f\u4ece\u670d\u52a1\u5668\u7684\u6570\u636e) DELETE FROM student WHERE id=2; 06\u6c34\u5e73\u62c6\u5206 \u00b6 \u6c34\u5e73\u62c6\u5206_mycat\u64cd\u4f5c \u00b6 -- \u521b\u5efa product \u8868 CREATE TABLE product ( id INT PRIMARY KEY AUTO_INCREMENT , NAME VARCHAR ( 20 ) , price INT ) ; -- \u6dfb\u52a0 6 \u6761\u6570\u636e INSERT INTO product ( id , NAME , price ) VALUES ( NEXT VALUE FOR MYCATSEQ_GLOBAL , ' \u82f9\u679c\u624b\u673a ' , 6999 ) ; INSERT INTO product ( id , NAME , price ) VALUES ( NEXT VALUE FOR MYCATSEQ_GLOBAL , ' \u534e\u4e3a\u624b\u673a ' , 5999 ) ; INSERT INTO product ( id , NAME , price ) VALUES ( NEXT VALUE FOR MYCATSEQ_GLOBAL , ' \u4e09\u661f\u624b\u673a ' , 4999 ) ; INSERT INTO product ( id , NAME , price ) VALUES ( NEXT VALUE FOR MYCATSEQ_GLOBAL , ' \u5c0f\u7c73\u624b\u673a ' , 3999 ) ; INSERT INTO product ( id , NAME , price ) VALUES ( NEXT VALUE FOR MYCATSEQ_GLOBAL , ' \u4e2d\u5174\u624b\u673a ' , 2999 ) ; INSERT INTO product ( id , NAME , price ) VALUES ( NEXT VALUE FOR MYCATSEQ_GLOBAL , ' OOPO\u624b\u673a ' , 1999 ) ; -- \u67e5\u8be2 product \u8868 SELECT * FROM product ; \u6c34\u5e73\u62c6\u5206_\u4e3b\u670d\u52a1\u5668\u64cd\u4f5c \u00b6 -- \u5728\u4e0d\u540c\u6570\u636e\u5e93\u4e2d\u67e5\u8be2product\u8868 SELECT * FROM product; \u6c34\u5e73\u62c6\u5206_\u4ece\u670d\u52a1\u5668\u64cd\u4f5c \u00b6 -- \u5728\u4e0d\u540c\u6570\u636e\u5e93\u4e2d\u67e5\u8be2product\u8868 SELECT * FROM product; 07\u5782\u76f4\u62c6\u5206 \u00b6 \u5782\u76f4\u62c6\u5206_mycat\u64cd\u4f5c \u00b6 -- \u521b\u5efa dog \u8868 CREATE TABLE dog ( id INT PRIMARY KEY AUTO_INCREMENT , NAME VARCHAR ( 10 ) ) ; -- \u6dfb\u52a0\u6570\u636e INSERT INTO dog ( id , NAME ) VALUES ( NEXT VALUE FOR MYCATSEQ_GLOBAL , ' \u54c8\u58eb\u5947 ' ) ; -- \u67e5\u8be2 dog \u8868 SELECT * FROM dog ; -- \u521b\u5efa cat \u8868 CREATE TABLE cat ( id INT PRIMARY KEY AUTO_INCREMENT , NAME VARCHAR ( 10 ) ) ; -- \u6dfb\u52a0\u6570\u636e INSERT INTO cat ( id , NAME ) VALUES ( NEXT VALUE FOR MYCATSEQ_GLOBAL , ' \u6ce2\u65af\u732b ' ) ; -- \u67e5\u8be2 cat \u8868 SELECT * FROM cat ; -- \u521b\u5efa apple \u8868 CREATE TABLE apple ( id INT PRIMARY KEY AUTO_INCREMENT , NAME VARCHAR ( 10 ) ) ; -- \u6dfb\u52a0\u6570\u636e INSERT INTO apple ( id , NAME ) VALUES ( NEXT VALUE FOR MYCATSEQ_GLOBAL , ' \u7ea2\u5bcc\u58eb ' ) ; -- \u67e5\u8be2 apple \u8868 SELECT * FROM apple ; -- \u521b\u5efa banana \u8868 CREATE TABLE banana ( id INT PRIMARY KEY AUTO_INCREMENT , NAME VARCHAR ( 10 ) ) ; -- \u6dfb\u52a0\u6570\u636e INSERT INTO banana ( id , NAME ) VALUES ( NEXT VALUE FOR MYCATSEQ_GLOBAL , ' \u9999\u8549 ' ) ; -- \u67e5\u8be2 banana \u8868 SELECT * FROM banana ; \u5782\u76f4\u62c6\u5206_\u4e3b\u670d\u52a1\u5668\u64cd\u4f5c \u00b6 -- \u67e5\u8be2dog\u8868 SELECT * FROM dog; -- \u67e5\u8be2cat\u8868 SELECT * FROM cat; -- \u67e5\u8be2apple\u8868 SELECT * FROM apple; -- \u67e5\u8be2banana\u8868 SELECT * FROM banana; \u5782\u76f4\u62c6\u5206_\u4ece\u670d\u52a1\u5668\u64cd\u4f5c \u00b6 -- \u67e5\u8be2dog\u8868 SELECT * FROM dog; -- \u67e5\u8be2cat\u8868 SELECT * FROM cat; -- \u67e5\u8be2apple\u8868 SELECT * FROM apple; -- \u67e5\u8be2banana\u8868 SELECT * FROM banana;","title":"Mysql"},{"location":"MySQL/#mysql","text":"Reference Manual","title":"MySQL \u53c2\u8003\u624b\u518c"},{"location":"MySQL/#day01","text":"","title":"day01"},{"location":"MySQL/#01","text":"","title":"01\u64cd\u4f5c\u6570\u636e\u5e93\u548c\u6570\u636e\u8868"},{"location":"MySQL/#_1","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a SHOW DATABASES; */","title":"\u67e5\u8be2\u6240\u6709\u6570\u636e\u5e93"},{"location":"MySQL/#_2","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a SHOW CREATE DATABASE \u6570\u636e\u5e93\u540d\u79f0; */","title":"\u67e5\u8be2\u67d0\u4e2a\u6570\u636e\u5e93\u7684\u521b\u5efa\u8bed\u53e5"},{"location":"MySQL/#_3","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a CREATE DATABASE \u6570\u636e\u5e93\u540d\u79f0; */","title":"\u521b\u5efa\u6570\u636e\u5e93"},{"location":"MySQL/#_4","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a CREATE DATABASE IF NOT EXISTS \u6570\u636e\u5e93\u540d\u79f0; */","title":"\u521b\u5efa\u6570\u636e\u5e93\uff0c\u5224\u65ad\u3001\u5982\u679c\u4e0d\u5b58\u5728\u5219\u521b\u5efa"},{"location":"MySQL/#_5","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a CREATE DATABASE \u6570\u636e\u5e93\u540d\u79f0 CHARACTER SET \u5b57\u7b26\u96c6\u540d\u79f0; */","title":"\u521b\u5efa\u6570\u636e\u5e93\u3001\u5e76\u6307\u5b9a\u5b57\u7b26\u96c6"},{"location":"MySQL/#_6","text":"SHOW CREATE DATABASE \u6570\u636e\u5e93\u540d\u79f0 ;","title":"\u67e5\u770b\u6570\u636e\u5e93\u7684\u5b57\u7b26\u96c6"},{"location":"MySQL/#_7","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a ALTER DATABASE \u6570\u636e\u5e93\u540d\u79f0 CHARACTER SET \u5b57\u7b26\u96c6\u540d\u79f0; */","title":"\u4fee\u6539\u6570\u636e\u5e93\u7684\u5b57\u7b26\u96c6"},{"location":"MySQL/#_8","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a DROP DATABASE \u6570\u636e\u5e93\u540d\u79f0; */","title":"\u5220\u9664\u6570\u636e\u5e93"},{"location":"MySQL/#_9","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a DROP DATABASE IF EXISTS \u6570\u636e\u5e93\u540d\u79f0; */","title":"\u5220\u9664\u6570\u636e\u5e93\uff0c\u5224\u65ad\u3001\u5982\u679c\u5b58\u5728\u5219\u5220\u9664"},{"location":"MySQL/#_10","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a USE \u6570\u636e\u5e93\u540d\u79f0; */","title":"\u4f7f\u7528\u6570\u636e\u5e93"},{"location":"MySQL/#_11","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT DATABASE(); */","title":"\u67e5\u8be2\u5f53\u524d\u4f7f\u7528\u7684\u6570\u636e\u5e93"},{"location":"MySQL/#_12","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a SHOW TABLES; */","title":"\u67e5\u8be2\u6240\u6709\u6570\u636e\u8868"},{"location":"MySQL/#_13","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a DESC \u8868\u540d; */","title":"\u67e5\u8be2\u8868\u7ed3\u6784"},{"location":"MySQL/#_14","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a SHOW TABLE STATUS FROM \u6570\u636e\u5e93\u540d\u79f0 LIKE '\u8868\u540d'; */","title":"\u67e5\u8be2\u6570\u636e\u8868\u7684\u5b57\u7b26\u96c6"},{"location":"MySQL/#_15","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a CREATE TABLE \u8868\u540d( \u5217\u540d \u6570\u636e\u7c7b\u578b \u7ea6\u675f, \u5217\u540d \u6570\u636e\u7c7b\u578b \u7ea6\u675f, ... \u5217\u540d \u6570\u636e\u7c7b\u578b \u7ea6\u675f ); */","title":"\u521b\u5efa\u6570\u636e\u8868"},{"location":"MySQL/#_16","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u65e7\u8868\u540d RENAME TO \u65b0\u8868\u540d; */","title":"\u4fee\u6539\u8868\u540d"},{"location":"MySQL/#_17","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d CHARACTER SET \u5b57\u7b26\u96c6\u540d\u79f0; */","title":"\u4fee\u6539\u8868\u7684\u5b57\u7b26\u96c6"},{"location":"MySQL/#_18","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d ADD \u5217\u540d \u6570\u636e\u7c7b\u578b; */","title":"\u7ed9\u8868\u6dfb\u52a0\u5217"},{"location":"MySQL/#_19","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d MODIFY \u5217\u540d \u6570\u636e\u7c7b\u578b; */","title":"\u4fee\u6539\u8868\u4e2d\u5217\u7684\u6570\u636e\u7c7b\u578b"},{"location":"MySQL/#_20","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d CHANGE \u65e7\u5217\u540d \u65b0\u5217\u540d \u6570\u636e\u7c7b\u578b; */","title":"\u4fee\u6539\u8868\u4e2d\u5217\u7684\u540d\u79f0\u548c\u6570\u636e\u7c7b\u578b"},{"location":"MySQL/#_21","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d DROP \u5217\u540d; */","title":"\u5220\u9664\u8868\u4e2d\u7684\u5217"},{"location":"MySQL/#_22","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a DROP TABLE \u8868\u540d; */","title":"\u5220\u9664\u8868"},{"location":"MySQL/#_23","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a DROP TABLE IF EXISTS \u8868\u540d; */","title":"\u5220\u9664\u8868\uff0c\u5224\u65ad\u3001\u5982\u679c\u5b58\u5728\u5219\u5220\u9664"},{"location":"MySQL/#02","text":"","title":"02\u8868\u6570\u636e\u7684\u589e\u5220\u6539"},{"location":"MySQL/#_24","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a INSERT INTO \u8868\u540d(\u5217\u540d1,\u5217\u540d2,...) VALUES (\u503c1,\u503c2,...); */","title":"\u7ed9\u6307\u5b9a\u5217\u6dfb\u52a0\u6570\u636e"},{"location":"MySQL/#_25","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a INSERT INTO \u8868\u540d VALUES (\u503c1,\u503c2,\u503c3,...); */","title":"\u7ed9\u5168\u90e8\u5217\u6dfb\u52a0\u6570\u636e"},{"location":"MySQL/#_26","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a INSERT INTO \u8868\u540d VALUES (\u503c1,\u503c2,\u503c3,...),(\u503c1,\u503c2,\u503c3,...),(\u503c1,\u503c2,\u503c3,...); */","title":"\u6279\u91cf\u6dfb\u52a0\u6240\u6709\u5217\u6570\u636e"},{"location":"MySQL/#_27","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a UPDATE \u8868\u540d SET \u5217\u540d1 = \u503c1,\u5217\u540d2 = \u503c2,... [where \u6761\u4ef6]; */","title":"\u4fee\u6539\u8868\u6570\u636e"},{"location":"MySQL/#_28","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a DELETE FROM \u8868\u540d [WHERE \u6761\u4ef6]; */","title":"\u5220\u9664\u8868\u6570\u636e"},{"location":"MySQL/#03","text":"","title":"03\u8868\u6570\u636e\u7684\u67e5\u8be2"},{"location":"MySQL/#_29","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT * FROM \u8868\u540d; */","title":"\u67e5\u8be2\u5168\u90e8\u6570\u636e"},{"location":"MySQL/#_30","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d1,\u5217\u540d2,... FROM \u8868\u540d; */","title":"\u67e5\u8be2\u6307\u5b9a\u5217"},{"location":"MySQL/#_31","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT DISTINCT \u5217\u540d1,\u5217\u540d2,... FROM \u8868\u540d; */","title":"\u53bb\u9664\u91cd\u590d\u67e5\u8be2"},{"location":"MySQL/#_32","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d1 \u8fd0\u7b97\u7b26(+ - * /) \u5217\u540d2 FROM \u8868\u540d; \u5982\u679c\u67d0\u4e00\u5217\u4e3anull\uff0c\u53ef\u4ee5\u8fdb\u884c\u66ff\u6362 ifnull(\u8868\u8fbe\u5f0f1,\u8868\u8fbe\u5f0f2) \u8868\u8fbe\u5f0f1\uff1a\u60f3\u66ff\u6362\u7684\u5217 \u8868\u8fbe\u5f0f2\uff1a\u60f3\u66ff\u6362\u7684\u503c */ example -- \u67e5\u8be2\u5546\u54c1\u540d\u79f0\u548c\u5e93\u5b58\uff0c\u5e93\u5b58\u6570\u91cf\u5728\u539f\u6709\u57fa\u7840\u4e0a\u52a010 SELECT NAME,stock+10 FROM product; -- \u67e5\u8be2\u5546\u54c1\u540d\u79f0\u548c\u5e93\u5b58\uff0c\u5e93\u5b58\u6570\u91cf\u5728\u539f\u6709\u57fa\u7840\u4e0a\u52a010\u3002\u8fdb\u884cnull\u503c\u5224\u65ad SELECT NAME,IFNULL(stock,0)+10 FROM product;","title":"\u8ba1\u7b97\u5217\u7684\u503c"},{"location":"MySQL/#_33","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d1,\u5217\u540d2,... AS \u522b\u540d FROM \u8868\u540d; */ as\u53ef\u4ee5\u7701\u7565","title":"\u8d77\u522b\u540d"},{"location":"MySQL/#_34","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d\u5217\u8868 FROM \u8868\u540d WHERE \u6761\u4ef6; */ example -- \u67e5\u8be2\u5e93\u5b58\u5927\u4e8e20\u7684\u5546\u54c1\u4fe1\u606f SELECT * FROM product WHERE stock > 20; -- \u67e5\u8be2\u54c1\u724c\u4e3a\u534e\u4e3a\u7684\u5546\u54c1\u4fe1\u606f SELECT * FROM product WHERE brand='\u534e\u4e3a'; -- \u67e5\u8be2\u91d1\u989d\u57284000 ~ 6000\u4e4b\u95f4\u7684\u5546\u54c1\u4fe1\u606f SELECT * FROM product WHERE price >= 4000 AND price <= 6000; SELECT * FROM product WHERE price BETWEEN 4000 AND 6000; -- \u67e5\u8be2\u5e93\u5b58\u4e3a14\u300130\u300123\u7684\u5546\u54c1\u4fe1\u606f SELECT * FROM product WHERE stock=14 OR stock=30 OR stock=23; SELECT * FROM product WHERE stock IN(14,30,23); -- \u67e5\u8be2\u5e93\u5b58\u4e3anull\u7684\u5546\u54c1\u4fe1\u606f SELECT * FROM product WHERE stock IS NULL; -- \u67e5\u8be2\u5e93\u5b58\u4e0d\u4e3anull\u7684\u5546\u54c1\u4fe1\u606f SELECT * FROM product WHERE stock IS NOT NULL; -- \u67e5\u8be2\u540d\u79f0\u4ee5\u5c0f\u7c73\u4e3a\u5f00\u5934\u7684\u5546\u54c1\u4fe1\u606f SELECT * FROM product WHERE NAME LIKE '\u5c0f\u7c73%'; -- \u67e5\u8be2\u540d\u79f0\u7b2c\u4e8c\u4e2a\u5b57\u662f\u4e3a\u7684\u5546\u54c1\u4fe1\u606f SELECT * FROM product WHERE NAME LIKE '_\u4e3a%'; -- \u67e5\u8be2\u540d\u79f0\u4e3a\u56db\u4e2a\u5b57\u7b26\u7684\u5546\u54c1\u4fe1\u606f SELECT * FROM product WHERE NAME LIKE '____'; -- \u67e5\u8be2\u540d\u79f0\u4e2d\u5305\u542b\u7535\u8111\u7684\u5546\u54c1\u4fe1\u606f SELECT * FROM product WHERE NAME LIKE '%\u7535\u8111%';","title":"\u6761\u4ef6\u67e5\u8be2"},{"location":"MySQL/#_35","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u51fd\u6570\u540d(\u5217\u540d) FROM \u8868\u540d [WHERE \u6761\u4ef6]; */ example -- \u8ba1\u7b97product\u8868\u4e2d\u603b\u8bb0\u5f55\u6761\u6570 SELECT COUNT(*) FROM product; -- \u83b7\u53d6\u6700\u9ad8\u4ef7\u683c SELECT MAX(price) FROM product; -- \u83b7\u53d6\u6700\u4f4e\u5e93\u5b58 SELECT MIN(stock) FROM product; -- \u83b7\u53d6\u603b\u5e93\u5b58\u6570\u91cf SELECT SUM(stock) FROM product; -- \u83b7\u53d6\u54c1\u724c\u4e3a\u82f9\u679c\u7684\u603b\u5e93\u5b58\u6570\u91cf SELECT SUM(stock) FROM product WHERE brand='\u82f9\u679c'; -- \u83b7\u53d6\u54c1\u724c\u4e3a\u5c0f\u7c73\u7684\u5e73\u5747\u5546\u54c1\u4ef7\u683c SELECT AVG(price) FROM product WHERE brand='\u5c0f\u7c73';","title":"\u805a\u5408\u51fd\u6570"},{"location":"MySQL/#_36","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d FROM \u8868\u540d [WHERE \u6761\u4ef6] ORDER BY \u5217\u540d1 \u6392\u5e8f\u65b9\u5f0f1,\u5217\u540d2 \u6392\u5e8f\u65b9\u5f0f2; */ example -- \u6309\u7167\u5e93\u5b58\u5347\u5e8f\u6392\u5e8f SELECT * FROM product ORDER BY stock ASC; -- \u67e5\u8be2\u540d\u79f0\u4e2d\u5305\u542b\u624b\u673a\u7684\u5546\u54c1\u4fe1\u606f\u3002\u6309\u7167\u91d1\u989d\u964d\u5e8f\u6392\u5e8f SELECT * FROM product WHERE NAME LIKE '%\u624b\u673a%' ORDER BY price DESC; -- \u6309\u7167\u91d1\u989d\u5347\u5e8f\u6392\u5e8f\uff0c\u5982\u679c\u91d1\u989d\u76f8\u540c\uff0c\u6309\u7167\u5e93\u5b58\u964d\u5e8f\u6392\u5217 SELECT * FROM product ORDER BY price ASC,stock DESC;","title":"\u6392\u5e8f\u67e5\u8be2"},{"location":"MySQL/#_37","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d FROM \u8868\u540d [WHERE \u6761\u4ef6] GROUP BY \u5206\u7ec4\u5217\u540d [HAVING \u5206\u7ec4\u540e\u6761\u4ef6\u8fc7\u6ee4] [ORDER BY \u6392\u5e8f\u5217\u540d \u6392\u5e8f\u65b9\u5f0f]; */","title":"\u5206\u7ec4\u67e5\u8be2"},{"location":"MySQL/#_38","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d FROM \u8868\u540d [WHERE \u6761\u4ef6] [GROUP BY \u5206\u7ec4\u5217\u540d] [HAVING \u5206\u7ec4\u540e\u6761\u4ef6\u8fc7\u6ee4] [ORDER BY \u6392\u5e8f\u5217\u540d \u6392\u5e8f\u65b9\u5f0f] LIMIT \u5f53\u524d\u9875\u6570,\u6bcf\u9875\u663e\u793a\u7684\u6761\u6570; LIMIT \u5f53\u524d\u9875\u6570,\u6bcf\u9875\u663e\u793a\u7684\u6761\u6570; \u516c\u5f0f\uff1a\u5f53\u524d\u9875\u6570 = (\u5f53\u524d\u9875\u6570-1) * \u6bcf\u9875\u663e\u793a\u7684\u6761\u6570 */ example -- \u6bcf\u9875\u663e\u793a3\u6761\u6570\u636e -- \u7b2c1\u9875 \u5f53\u524d\u9875\u6570=(1-1) * 3 SELECT * FROM product LIMIT 0,3; -- \u7b2c2\u9875 \u5f53\u524d\u9875\u6570=(2-1) * 3 SELECT * FROM product LIMIT 3,3; -- \u7b2c3\u9875 \u5f53\u524d\u9875\u6570=(3-1) * 3 SELECT * FROM product LIMIT 6,3;","title":"\u5206\u9875\u67e5\u8be2"},{"location":"MySQL/#04","text":"","title":"04\u7ea6\u675f"},{"location":"MySQL/#_39","text":"-- \u521b\u5efa\u5b66\u751f\u8868(\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84) \u7f16\u53f7\u8bbe\u4e3a\u4e3b\u952e CREATE TABLE student( id INT PRIMARY KEY, NAME VARCHAR(30), age INT ); -- \u67e5\u8be2\u5b66\u751f\u8868\u7684\u8be6\u7ec6\u4fe1\u606f DESC student; -- \u6dfb\u52a0\u6570\u636e INSERT INTO student VALUES (1,'\u5f20\u4e09',23); INSERT INTO student VALUES (2,'\u674e\u56db',24); -- \u5220\u9664\u4e3b\u952e ALTER TABLE student DROP PRIMARY KEY; -- \u5efa\u8868\u540e\u5355\u72ec\u6dfb\u52a0\u4e3b\u952e\u7ea6\u675f ALTER TABLE student MODIFY id INT PRIMARY KEY;","title":"\u4e3b\u952e\u7ea6\u675f"},{"location":"MySQL/#_40","text":"-- \u521b\u5efa\u5b66\u751f\u8868(\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84) \u7f16\u53f7\u8bbe\u4e3a\u4e3b\u952e\u81ea\u589e CREATE TABLE student( id INT PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(30), age INT ); -- \u67e5\u8be2\u5b66\u751f\u8868\u7684\u8be6\u7ec6\u4fe1\u606f DESC student; -- \u6dfb\u52a0\u6570\u636e INSERT INTO student VALUES (NULL,'\u5f20\u4e09',23),(NULL,'\u674e\u56db',24); -- \u5220\u9664\u81ea\u589e\u7ea6\u675f ALTER TABLE student MODIFY id INT; INSERT INTO student VALUES (NULL,'\u5f20\u4e09',23); -- \u5efa\u8868\u540e\u5355\u72ec\u6dfb\u52a0\u81ea\u589e\u7ea6\u675f ALTER TABLE student MODIFY id INT AUTO_INCREMENT;","title":"\u4e3b\u952e\u81ea\u589e\u7ea6\u675f"},{"location":"MySQL/#_41","text":"-- \u521b\u5efa\u5b66\u751f\u8868(\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84) \u7f16\u53f7\u8bbe\u4e3a\u4e3b\u952e\u81ea\u589e\uff0c\u5e74\u9f84\u8bbe\u4e3a\u552f\u4e00 CREATE TABLE student( id INT PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(30), age INT UNIQUE ); -- \u67e5\u8be2\u5b66\u751f\u8868\u7684\u8be6\u7ec6\u4fe1\u606f DESC student; -- \u6dfb\u52a0\u6570\u636e INSERT INTO student VALUES (NULL,'\u5f20\u4e09',23); INSERT INTO student VALUES (NULL,'\u674e\u56db',23); -- \u5220\u9664\u552f\u4e00\u7ea6\u675f ALTER TABLE student DROP INDEX age; -- \u5efa\u8868\u540e\u5355\u72ec\u6dfb\u52a0\u552f\u4e00\u7ea6\u675f ALTER TABLE student MODIFY age INT UNIQUE;","title":"\u552f\u4e00\u7ea6\u675f"},{"location":"MySQL/#_42","text":"-- \u521b\u5efa\u5b66\u751f\u8868(\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84) \u7f16\u53f7\u8bbe\u4e3a\u4e3b\u952e\u81ea\u589e\uff0c\u59d3\u540d\u8bbe\u4e3a\u975e\u7a7a\uff0c\u5e74\u9f84\u8bbe\u4e3a\u552f\u4e00 CREATE TABLE student( id INT PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(30) NOT NULL, age INT UNIQUE ); -- \u67e5\u8be2\u5b66\u751f\u8868\u7684\u8be6\u7ec6\u4fe1\u606f DESC student; -- \u6dfb\u52a0\u6570\u636e INSERT INTO student VALUES (NULL,'\u5f20\u4e09',23); -- \u5220\u9664\u975e\u7a7a\u7ea6\u675f ALTER TABLE student MODIFY NAME VARCHAR(30); INSERT INTO student VALUES (NULL,NULL,25); -- \u5efa\u8868\u540e\u5355\u72ec\u6dfb\u52a0\u975e\u7a7a\u7ea6\u675f ALTER TABLE student MODIFY NAME VARCHAR(30) NOT NULL;","title":"\u975e\u7a7a\u7ea6\u675f"},{"location":"MySQL/#day02","text":"","title":"day02"},{"location":"MySQL/#01_1","text":"","title":"01\u7ea6\u675f"},{"location":"MySQL/#_43","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a CONSTRAINT \u5916\u952e\u540d FOREIGN KEY (\u672c\u8868\u5916\u952e\u5217\u540d) REFERENCES \u4e3b\u8868\u540d(\u4e3b\u8868\u4e3b\u952e\u5217\u540d) */","title":"\u5916\u952e\u7ea6\u675f"},{"location":"MySQL/#_44","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d DROP FOREIGN KEY \u5916\u952e\u540d; */","title":"\u5220\u9664\u5916\u952e\u7ea6\u675f"},{"location":"MySQL/#_45","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d ADD CONSTRAINT \u5916\u952e\u540d FOREIGN KEY (\u672c\u8868\u5916\u952e\u5217\u540d) REFERENCES \u4e3b\u8868\u540d(\u4e3b\u952e\u5217\u540d); */ \u5916\u952e\u7ea6\u675fexample -- \u521b\u5efadb2\u6570\u636e\u5e93 CREATE DATABASE db2; -- \u4f7f\u7528db2\u6570\u636e\u5e93 USE db2; /* \u5916\u952e\u7ea6\u675f \u6807\u51c6\u8bed\u6cd5\uff1a CONSTRAINT \u5916\u952e\u540d FOREIGN KEY (\u672c\u8868\u5916\u952e\u5217\u540d) REFERENCES \u4e3b\u8868\u540d(\u4e3b\u8868\u4e3b\u952e\u5217\u540d) */ -- \u5efa\u8868\u65f6\u6dfb\u52a0\u5916\u952e\u7ea6\u675f -- \u521b\u5efauser\u7528\u6237\u8868 CREATE TABLE USER( id INT PRIMARY KEY AUTO_INCREMENT, -- id NAME VARCHAR(20) NOT NULL -- \u59d3\u540d ); -- \u6dfb\u52a0\u7528\u6237\u6570\u636e INSERT INTO USER VALUES (NULL,'\u5f20\u4e09'),(NULL,'\u674e\u56db'); -- \u521b\u5efaorderlist\u8ba2\u5355\u8868 CREATE TABLE orderlist( id INT PRIMARY KEY AUTO_INCREMENT, -- id number VARCHAR(20) NOT NULL, -- \u8ba2\u5355\u7f16\u53f7 uid INT, -- \u5916\u952e\u5217 CONSTRAINT ou_fk1 FOREIGN KEY (uid) REFERENCES USER(id) ); -- \u6dfb\u52a0\u8ba2\u5355\u6570\u636e INSERT INTO orderlist VALUES (NULL,'hm001',1),(NULL,'hm002',1), (NULL,'hm003',2),(NULL,'hm004',2); -- \u6dfb\u52a0\u4e00\u4e2a\u8ba2\u5355\uff0c\u4f46\u662f\u6ca1\u6709\u771f\u5b9e\u7528\u6237\u3002\u6dfb\u52a0\u5931\u8d25 INSERT INTO orderlist VALUES (NULL,'hm005',3); -- \u5220\u9664\u674e\u56db\u7528\u6237\u3002\u5220\u9664\u5931\u8d25 DELETE FROM USER WHERE NAME='\u674e\u56db'; /* \u5220\u9664\u5916\u952e\u7ea6\u675f \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d DROP FOREIGN KEY \u5916\u952e\u540d; */ -- \u5220\u9664\u5916\u952e\u7ea6\u675f ALTER TABLE orderlist DROP FOREIGN KEY ou_fk1; /* \u5efa\u8868\u540e\u5355\u72ec\u6dfb\u52a0\u5916\u952e\u7ea6\u675f \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d ADD CONSTRAINT \u5916\u952e\u540d FOREIGN KEY (\u672c\u8868\u5916\u952e\u5217\u540d) REFERENCES \u4e3b\u8868\u540d(\u4e3b\u952e\u5217\u540d); */ -- \u6dfb\u52a0\u5916\u952e\u7ea6\u675f ALTER TABLE orderlist ADD CONSTRAINT ou_fk1 FOREIGN KEY (uid) REFERENCES USER(id);","title":"\u5efa\u8868\u540e\u5355\u72ec\u6dfb\u52a0\u5916\u952e\u7ea6\u675f"},{"location":"MySQL/#_46","text":"/* \u6dfb\u52a0\u5916\u952e\u7ea6\u675f\uff0c\u540c\u65f6\u6dfb\u52a0\u7ea7\u8054\u66f4\u65b0 \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d ADD CONSTRAINT \u5916\u952e\u540d FOREIGN KEY (\u672c\u8868\u5916\u952e\u5217\u540d) REFERENCES \u4e3b\u8868\u540d(\u4e3b\u952e\u5217\u540d) ON UPDATE CASCADE; \u6dfb\u52a0\u5916\u952e\u7ea6\u675f\uff0c\u540c\u65f6\u6dfb\u52a0\u7ea7\u8054\u5220\u9664 \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d ADD CONSTRAINT \u5916\u952e\u540d FOREIGN KEY (\u672c\u8868\u5916\u952e\u5217\u540d) REFERENCES \u4e3b\u8868\u540d(\u4e3b\u952e\u5217\u540d) ON DELETE CASCADE; \u6dfb\u52a0\u5916\u952e\u7ea6\u675f\uff0c\u540c\u65f6\u6dfb\u52a0\u7ea7\u8054\u66f4\u65b0\u548c\u7ea7\u8054\u5220\u9664 \u6807\u51c6\u8bed\u6cd5\uff1a ALTER TABLE \u8868\u540d ADD CONSTRAINT \u5916\u952e\u540d FOREIGN KEY (\u672c\u8868\u5916\u952e\u5217\u540d) REFERENCES \u4e3b\u8868\u540d(\u4e3b\u952e\u5217\u540d) ON UPDATE CASCADE ON DELETE CASCADE; */ \u5916\u952e\u7ea7\u8054\u64cd\u4f5cexample -- \u5220\u9664\u5916\u952e\u7ea6\u675f ALTER TABLE orderlist DROP FOREIGN KEY ou_fk1; -- \u6dfb\u52a0\u5916\u952e\u7ea6\u675f\uff0c\u540c\u65f6\u6dfb\u52a0\u7ea7\u8054\u66f4\u65b0\u548c\u7ea7\u8054\u5220\u9664 ALTER TABLE orderlist ADD CONSTRAINT ou_fk1 FOREIGN KEY (uid) REFERENCES USER(id) ON UPDATE CASCADE ON DELETE CASCADE; -- \u5c06\u674e\u56db\u8fd9\u4e2a\u7528\u6237\u7684id\u4fee\u6539\u4e3a3,\u8ba2\u5355\u8868\u4e2d\u7684uid\u4e5f\u81ea\u52a8\u4fee\u6539 UPDATE USER SET id=3 WHERE id=2; -- \u5c06\u674e\u56db\u8fd9\u4e2a\u7528\u6237\u5220\u9664,\u8ba2\u5355\u8868\u4e2d\u7684\u8be5\u7528\u6237\u6240\u5c5e\u7684\u8ba2\u5355\u4e5f\u81ea\u52a8\u5220\u9664 DELETE FROM USER WHERE id=3;","title":"\u5916\u952e\u7ea7\u8054\u64cd\u4f5c"},{"location":"MySQL/#02_1","text":"","title":"02\u591a\u8868\u64cd\u4f5c"},{"location":"MySQL/#_47","text":"-- \u521b\u5efadb3\u6570\u636e\u5e93 CREATE DATABASE db3; -- \u4f7f\u7528db3\u6570\u636e\u5e93 USE db3; -- \u521b\u5efaperson\u8868 CREATE TABLE person( id INT PRIMARY KEY AUTO_INCREMENT, -- \u4e3b\u952eid NAME VARCHAR(20) -- \u59d3\u540d ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO person VALUES (NULL,'\u5f20\u4e09'),(NULL,'\u674e\u56db'); -- \u521b\u5efacard\u8868 CREATE TABLE card( id INT PRIMARY KEY AUTO_INCREMENT, -- \u4e3b\u952eid number VARCHAR(20) UNIQUE NOT NULL, -- \u8eab\u4efd\u8bc1\u53f7 pid INT UNIQUE, -- \u5916\u952e\u5217 CONSTRAINT cp_fk1 FOREIGN KEY (pid) REFERENCES person(id) ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO card VALUES (NULL,'12345',1),(NULL,'56789',2);","title":"\u8868\u5173\u7cfb\u4e00\u5bf9\u4e00"},{"location":"MySQL/#_48","text":"-- \u521b\u5efauser\u8868 CREATE TABLE USER( id INT PRIMARY KEY AUTO_INCREMENT, -- \u4e3b\u952eid NAME VARCHAR(20) -- \u59d3\u540d ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO USER VALUES (NULL,'\u5f20\u4e09'),(NULL,'\u674e\u56db'); -- \u521b\u5efaorderlist\u8868 CREATE TABLE orderlist( id INT PRIMARY KEY AUTO_INCREMENT, -- \u4e3b\u952eid number VARCHAR(20), -- \u8ba2\u5355\u7f16\u53f7 uid INT, -- \u5916\u952e\u5217 CONSTRAINT ou_fk1 FOREIGN KEY (uid) REFERENCES USER(id) ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO orderlist VALUES (NULL,'hm001',1),(NULL,'hm002',1),(NULL,'hm003',2),(NULL,'hm004',2); /* \u5546\u54c1\u5206\u7c7b\u548c\u5546\u54c1 */ -- \u521b\u5efacategory\u8868 CREATE TABLE category( id INT PRIMARY KEY AUTO_INCREMENT, -- \u4e3b\u952eid NAME VARCHAR(10) -- \u5206\u7c7b\u540d\u79f0 ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO category VALUES (NULL,'\u624b\u673a\u6570\u7801'),(NULL,'\u7535\u8111\u529e\u516c'); -- \u521b\u5efaproduct\u8868 CREATE TABLE product( id INT PRIMARY KEY AUTO_INCREMENT, -- \u4e3b\u952eid NAME VARCHAR(30), -- \u5546\u54c1\u540d\u79f0 cid INT, -- \u5916\u952e\u5217 CONSTRAINT pc_fk1 FOREIGN KEY (cid) REFERENCES category(id) ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO product VALUES (NULL,'\u534e\u4e3aP30',1),(NULL,'\u5c0f\u7c73note3',1), (NULL,'\u8054\u60f3\u7535\u8111',2),(NULL,'\u82f9\u679c\u7535\u8111',2);","title":"\u8868\u5173\u7cfb\u4e00\u5bf9\u591a"},{"location":"MySQL/#_49","text":"-- \u521b\u5efastudent\u8868 CREATE TABLE student( id INT PRIMARY KEY AUTO_INCREMENT, -- \u4e3b\u952eid NAME VARCHAR(20) -- \u5b66\u751f\u59d3\u540d ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO student VALUES (NULL,'\u5f20\u4e09'),(NULL,'\u674e\u56db'); -- \u521b\u5efacourse\u8868 CREATE TABLE course( id INT PRIMARY KEY AUTO_INCREMENT, -- \u4e3b\u952eid NAME VARCHAR(10) -- \u8bfe\u7a0b\u540d\u79f0 ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO course VALUES (NULL,'\u8bed\u6587'),(NULL,'\u6570\u5b66'); -- \u521b\u5efa\u4e2d\u95f4\u8868 CREATE TABLE stu_course( id INT PRIMARY KEY AUTO_INCREMENT, -- \u4e3b\u952eid sid INT, -- \u7528\u4e8e\u548cstudent\u8868\u4e2d\u7684id\u8fdb\u884c\u5916\u952e\u5173\u8054 cid INT, -- \u7528\u4e8e\u548ccourse\u8868\u4e2d\u7684id\u8fdb\u884c\u5916\u952e\u5173\u8054 CONSTRAINT sc_fk1 FOREIGN KEY (sid) REFERENCES student(id), -- \u6dfb\u52a0\u5916\u952e\u7ea6\u675f CONSTRAINT sc_fk2 FOREIGN KEY (cid) REFERENCES course(id) -- \u6dfb\u52a0\u5916\u952e\u7ea6\u675f ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO stu_course VALUES (NULL,1,1),(NULL,1,2),(NULL,2,1),(NULL,2,2);","title":"\u8868\u5173\u7cfb\u591a\u5bf9\u591a"},{"location":"MySQL/#_50","text":"-- \u521b\u5efadb4\u6570\u636e\u5e93 CREATE DATABASE db4; -- \u4f7f\u7528db4\u6570\u636e\u5e93 USE db4; -- \u521b\u5efauser\u8868 CREATE TABLE USER( id INT PRIMARY KEY AUTO_INCREMENT, -- \u7528\u6237id NAME VARCHAR(20), -- \u7528\u6237\u59d3\u540d age INT -- \u7528\u6237\u5e74\u9f84 ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO USER VALUES (1,'\u5f20\u4e09',23); INSERT INTO USER VALUES (2,'\u674e\u56db',24); INSERT INTO USER VALUES (3,'\u738b\u4e94',25); INSERT INTO USER VALUES (4,'\u8d75\u516d',26); -- \u8ba2\u5355\u8868 CREATE TABLE orderlist( id INT PRIMARY KEY AUTO_INCREMENT, -- \u8ba2\u5355id number VARCHAR(30), -- \u8ba2\u5355\u7f16\u53f7 uid INT, -- \u5916\u952e\u5b57\u6bb5 CONSTRAINT ou_fk1 FOREIGN KEY (uid) REFERENCES USER(id) ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO orderlist VALUES (1,'hm001',1); INSERT INTO orderlist VALUES (2,'hm002',1); INSERT INTO orderlist VALUES (3,'hm003',2); INSERT INTO orderlist VALUES (4,'hm004',2); INSERT INTO orderlist VALUES (5,'hm005',3); INSERT INTO orderlist VALUES (6,'hm006',3); INSERT INTO orderlist VALUES (7,'hm007',NULL); -- \u5546\u54c1\u5206\u7c7b\u8868 CREATE TABLE category( id INT PRIMARY KEY AUTO_INCREMENT, -- \u5546\u54c1\u5206\u7c7bid NAME VARCHAR(10) -- \u5546\u54c1\u5206\u7c7b\u540d\u79f0 ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO category VALUES (1,'\u624b\u673a\u6570\u7801'); INSERT INTO category VALUES (2,'\u7535\u8111\u529e\u516c'); INSERT INTO category VALUES (3,'\u70df\u9152\u8336\u7cd6'); INSERT INTO category VALUES (4,'\u978b\u9774\u7bb1\u5305'); -- \u5546\u54c1\u8868 CREATE TABLE product( id INT PRIMARY KEY AUTO_INCREMENT, -- \u5546\u54c1id NAME VARCHAR(30), -- \u5546\u54c1\u540d\u79f0 cid INT, -- \u5916\u952e\u5b57\u6bb5 CONSTRAINT cp_fk1 FOREIGN KEY (cid) REFERENCES category(id) ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO product VALUES (1,'\u534e\u4e3a\u624b\u673a',1); INSERT INTO product VALUES (2,'\u5c0f\u7c73\u624b\u673a',1); INSERT INTO product VALUES (3,'\u8054\u60f3\u7535\u8111',2); INSERT INTO product VALUES (4,'\u82f9\u679c\u7535\u8111',2); INSERT INTO product VALUES (5,'\u4e2d\u534e\u9999\u70df',3); INSERT INTO product VALUES (6,'\u7389\u6eaa\u9999\u70df',3); INSERT INTO product VALUES (7,'\u8ba1\u751f\u7528\u54c1',NULL); -- \u4e2d\u95f4\u8868 CREATE TABLE us_pro( upid INT PRIMARY KEY AUTO_INCREMENT, -- \u4e2d\u95f4\u8868id uid INT, -- \u5916\u952e\u5b57\u6bb5\u3002\u9700\u8981\u548c\u7528\u6237\u8868\u7684\u4e3b\u952e\u4ea7\u751f\u5173\u8054 pid INT, -- \u5916\u952e\u5b57\u6bb5\u3002\u9700\u8981\u548c\u5546\u54c1\u8868\u7684\u4e3b\u952e\u4ea7\u751f\u5173\u8054 CONSTRAINT up_fk1 FOREIGN KEY (uid) REFERENCES USER(id), CONSTRAINT up_fk2 FOREIGN KEY (pid) REFERENCES product(id) ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO us_pro VALUES (NULL,1,1); INSERT INTO us_pro VALUES (NULL,1,2); INSERT INTO us_pro VALUES (NULL,1,3); INSERT INTO us_pro VALUES (NULL,1,4); INSERT INTO us_pro VALUES (NULL,1,5); INSERT INTO us_pro VALUES (NULL,1,6); INSERT INTO us_pro VALUES (NULL,1,7); INSERT INTO us_pro VALUES (NULL,2,1); INSERT INTO us_pro VALUES (NULL,2,2); INSERT INTO us_pro VALUES (NULL,2,3); INSERT INTO us_pro VALUES (NULL,2,4); INSERT INTO us_pro VALUES (NULL,2,5); INSERT INTO us_pro VALUES (NULL,2,6); INSERT INTO us_pro VALUES (NULL,2,7); INSERT INTO us_pro VALUES (NULL,3,1); INSERT INTO us_pro VALUES (NULL,3,2); INSERT INTO us_pro VALUES (NULL,3,3); INSERT INTO us_pro VALUES (NULL,3,4); INSERT INTO us_pro VALUES (NULL,3,5); INSERT INTO us_pro VALUES (NULL,3,6); INSERT INTO us_pro VALUES (NULL,3,7); INSERT INTO us_pro VALUES (NULL,4,1); INSERT INTO us_pro VALUES (NULL,4,2); INSERT INTO us_pro VALUES (NULL,4,3); INSERT INTO us_pro VALUES (NULL,4,4); INSERT INTO us_pro VALUES (NULL,4,5); INSERT INTO us_pro VALUES (NULL,4,6); INSERT INTO us_pro VALUES (NULL,4,7);","title":"\u591a\u8868\u67e5\u8be2\u6570\u636e\u51c6\u5907"},{"location":"MySQL/#_51","text":"","title":"\u5185\u8fde\u63a5\u67e5\u8be2"},{"location":"MySQL/#_52","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d FROM \u8868\u540d1 [INNER] JOIN \u8868\u540d2 ON \u5173\u8054\u6761\u4ef6; */","title":"\u663e\u793a\u5185\u8fde\u63a5"},{"location":"MySQL/#_53","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d FROM \u8868\u540d1,\u8868\u540d2 WHERE \u5173\u8054\u6761\u4ef6; */","title":"\u9690\u5f0f\u5185\u8fde\u63a5"},{"location":"MySQL/#_54","text":"","title":"\u5916\u8fde\u63a5\u67e5\u8be2"},{"location":"MySQL/#_55","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d FROM \u8868\u540d1 LEFT [OUTER] JOIN \u8868\u540d2 ON \u6761\u4ef6; */","title":"\u5de6\u5916\u8fde\u63a5"},{"location":"MySQL/#_56","text":"/* \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d FROM \u8868\u540d1 RIGHT [OUTER] JOIN \u8868\u540d2 ON \u6761\u4ef6; */","title":"\u53f3\u5916\u8fde\u63a5"},{"location":"MySQL/#_57","text":"/* \u7ed3\u679c\u662f\u5355\u884c\u5355\u5217\u7684 \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d FROM \u8868\u540d WHERE \u5217\u540d=(SELECT \u5217\u540d FROM \u8868\u540d [WHERE \u6761\u4ef6]); */ -- \u67e5\u8be2\u5e74\u9f84\u6700\u9ad8\u7684\u7528\u6237\u59d3\u540d SELECT MAX(age) FROM USER; SELECT NAME,age FROM USER WHERE age=(SELECT MAX(age) FROM USER); /* \u7ed3\u679c\u662f\u591a\u884c\u5355\u5217\u7684 \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d FROM \u8868\u540d WHERE \u5217\u540d [NOT] IN (SELECT \u5217\u540d FROM \u8868\u540d [WHERE \u6761\u4ef6]); */ -- \u67e5\u8be2\u5f20\u4e09\u548c\u674e\u56db\u7684\u8ba2\u5355\u4fe1\u606f SELECT * FROM orderlist WHERE uid IN (1,2); SELECT id FROM USER WHERE NAME IN ('\u5f20\u4e09','\u674e\u56db'); SELECT * FROM orderlist WHERE uid IN (SELECT id FROM USER WHERE NAME IN ('\u5f20\u4e09','\u674e\u56db')); /* \u7ed3\u679c\u662f\u591a\u884c\u591a\u5217\u7684 \u6807\u51c6\u8bed\u6cd5\uff1a SELECT \u5217\u540d FROM \u8868\u540d [\u522b\u540d],(SELECT \u5217\u540d FROM \u8868\u540d [WHERE \u6761\u4ef6]) [\u522b\u540d] [WHERE \u6761\u4ef6]; */ -- \u67e5\u8be2\u8ba2\u5355\u8868\u4e2did\u5927\u4e8e4\u7684\u8ba2\u5355\u4fe1\u606f\u548c\u6240\u5c5e\u7528\u6237\u4fe1\u606f SELECT * FROM orderlist WHERE id > 4; SELECT u.name, o.number FROM USER u, (SELECT * FROM orderlist WHERE id > 4) o WHERE o.uid=u.id;","title":"\u5b50\u67e5\u8be2"},{"location":"MySQL/#_58","text":"-- \u521b\u5efa\u5458\u5de5\u8868 CREATE TABLE employee( id INT PRIMARY KEY AUTO_INCREMENT, -- \u5458\u5de5\u7f16\u53f7 NAME VARCHAR(20), -- \u5458\u5de5\u59d3\u540d mgr INT, -- \u4e0a\u7ea7\u7f16\u53f7 salary DOUBLE -- \u5458\u5de5\u5de5\u8d44 ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO employee VALUES (1001,'\u5b59\u609f\u7a7a',1005,9000.00), (1002,'\u732a\u516b\u6212',1005,8000.00), (1003,'\u6c99\u548c\u5c1a',1005,8500.00), (1004,'\u5c0f\u767d\u9f99',1005,7900.00), (1005,'\u5510\u50e7',NULL,15000.00), (1006,'\u6b66\u677e',1009,7600.00), (1007,'\u674e\u9035',1009,7400.00), (1008,'\u6797\u51b2',1009,8100.00), (1009,'\u5b8b\u6c5f',NULL,16000.00); -- \u67e5\u8be2\u6240\u6709\u5458\u5de5\u7684\u59d3\u540d\u53ca\u5176\u76f4\u63a5\u4e0a\u7ea7\u7684\u59d3\u540d\uff0c\u6ca1\u6709\u4e0a\u7ea7\u7684\u5458\u5de5\u4e5f\u9700\u8981\u67e5\u8be2 /* \u5206\u6790 \u5458\u5de5\u4fe1\u606f employee\u8868 \u6761\u4ef6\uff1aemployee.mgr = employee.id \u67e5\u8be2\u5de6\u8868\u7684\u5168\u90e8\u6570\u636e\uff0c\u548c\u5de6\u53f3\u4e24\u5f20\u8868\u6709\u4ea4\u96c6\u90e8\u5206\u6570\u636e\uff0c\u5de6\u5916\u8fde\u63a5 */ SELECT e1.id, e1.name, e1.mgr, e2.id, e2.name FROM employee e1 LEFT OUTER JOIN employee e2 ON e1.mgr = e2.id;","title":"\u81ea\u5173\u8054\u67e5\u8be2"},{"location":"MySQL/#_59","text":"-- 1.\u67e5\u8be2\u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84\u3002\u8ba2\u5355\u7f16\u53f7 /* \u5206\u6790 \u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84 user\u8868 \u8ba2\u5355\u7f16\u53f7 orderlist\u8868 \u6761\u4ef6\uff1auser.id=orderlist.uid */ SELECT u.id, u.name, u.age, o.number FROM USER u, orderlist o WHERE u.id=o.uid; -- 2.\u67e5\u8be2\u6240\u6709\u7684\u7528\u6237\u3002\u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84\u3002\u8ba2\u5355\u7f16\u53f7 /* \u5206\u6790 \u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84 user\u8868 \u8ba2\u5355\u7f16\u53f7 orderlist\u8868 \u6761\u4ef6\uff1auser.id=orderlist.uid \u67e5\u8be2\u6240\u6709\u7684\u7528\u6237\uff0c\u5de6\u5916\u8fde\u63a5 */ SELECT u.id, u.name, u.age, o.number FROM USER u LEFT OUTER JOIN orderlist o ON u.id=o.uid; -- 3.\u67e5\u8be2\u6240\u6709\u7684\u8ba2\u5355\u3002\u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84\u3002\u8ba2\u5355\u7f16\u53f7 /* \u5206\u6790 \u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84 user\u8868 \u8ba2\u5355\u7f16\u53f7 orderlist\u8868 \u6761\u4ef6\uff1auser.id=orderlist.uid \u67e5\u8be2\u6240\u6709\u7684\u8ba2\u5355\uff0c\u53f3\u5916\u8fde\u63a5 */ SELECT u.id, u.name, u.age, o.number FROM USER u RIGHT OUTER JOIN orderlist o ON u.id=o.uid; -- 4.\u67e5\u8be2\u7528\u6237\u5e74\u9f84\u5927\u4e8e23\u5c81\u7684\u4fe1\u606f\u3002\u663e\u793a\u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84\u3002\u8ba2\u5355\u7f16\u53f7 /* \u5206\u6790 \u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84 user\u8868 \u8ba2\u5355\u7f16\u53f7 orderlist\u8868 \u6761\u4ef6\uff1auser.id=orderlist.uid AND user.age > 23 */ SELECT u.id, u.name, u.age, o.number FROM USER u, orderlist o WHERE u.id=o.uid AND u.age > 23; -- 5.\u67e5\u8be2\u5f20\u4e09\u548c\u674e\u56db\u7528\u6237\u7684\u4fe1\u606f\u3002\u663e\u793a\u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84\u3002\u8ba2\u5355\u7f16\u53f7 /* \u5206\u6790 \u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84 user\u8868 \u8ba2\u5355\u7f16\u53f7 orderlist\u8868 \u6761\u4ef6\uff1auser.id=orderlist.uid AND user.name IN ('\u5f20\u4e09','\u674e\u56db') */ SELECT u.id, u.name, u.age, o.number FROM USER u, orderlist o WHERE u.id=o.uid AND u.name IN ('\u5f20\u4e09','\u674e\u56db'); -- 6.\u67e5\u8be2\u5546\u54c1\u5206\u7c7b\u7684\u7f16\u53f7\u3001\u5206\u7c7b\u540d\u79f0\u3002\u5206\u7c7b\u4e0b\u7684\u5546\u54c1\u540d\u79f0 /* \u5206\u6790 \u5546\u54c1\u5206\u7c7b\u7684\u7f16\u53f7\u3001\u5206\u7c7b\u540d\u79f0 category\u8868 \u5546\u54c1\u540d\u79f0 product\u8868 \u6761\u4ef6\uff1acategory.id=product.cid */ SELECT c.id, c.name, p.name FROM category c, product p WHERE c.id=p.cid; -- 7.\u67e5\u8be2\u6240\u6709\u7684\u5546\u54c1\u5206\u7c7b\u3002\u5546\u54c1\u5206\u7c7b\u7684\u7f16\u53f7\u3001\u5206\u7c7b\u540d\u79f0\u3002\u5206\u7c7b\u4e0b\u7684\u5546\u54c1\u540d\u79f0 /* \u5206\u6790 \u5546\u54c1\u5206\u7c7b\u7684\u7f16\u53f7\u3001\u5206\u7c7b\u540d\u79f0 category\u8868 \u5546\u54c1\u540d\u79f0 product\u8868 \u6761\u4ef6\uff1acategory.id=product.cid \u67e5\u8be2\u6240\u6709\u7684\u5546\u54c1\u5206\u7c7b\uff0c\u5de6\u5916\u8fde\u63a5 */ SELECT c.id, c.name, p.name FROM category c LEFT OUTER JOIN product p ON c.id=p.cid; -- 8.\u67e5\u8be2\u6240\u6709\u7684\u5546\u54c1\u4fe1\u606f\u3002\u5546\u54c1\u5206\u7c7b\u7684\u7f16\u53f7\u3001\u5206\u7c7b\u540d\u79f0\u3002\u5206\u7c7b\u4e0b\u7684\u5546\u54c1\u540d\u79f0 /* \u5206\u6790 \u5546\u54c1\u5206\u7c7b\u7684\u7f16\u53f7\u3001\u5206\u7c7b\u540d\u79f0 category\u8868 \u5546\u54c1\u540d\u79f0 product\u8868 \u6761\u4ef6\uff1acategory.id=product.cid \u67e5\u8be2\u6240\u6709\u7684\u5546\u54c1\u4fe1\u606f\uff0c\u53f3\u5916\u8fde\u63a5 */ SELECT c.id, c.name, p.name FROM category c RIGHT OUTER JOIN product p ON c.id=p.cid; -- 9.\u67e5\u8be2\u6240\u6709\u7684\u7528\u6237\u548c\u8be5\u7528\u6237\u80fd\u67e5\u770b\u7684\u6240\u6709\u7684\u5546\u54c1\u3002\u663e\u793a\u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84\u3002\u5546\u54c1\u540d\u79f0 /* \u5206\u6790 \u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84 user\u8868 \u5546\u54c1\u540d\u79f0 product\u8868 \u4e2d\u95f4\u8868 us_pro \u6761\u4ef6\uff1aus_pro.uid=user.id AND us_pro.pid=product.id */ SELECT u.id, u.name, u.age, p.name FROM USER u, product p, us_pro up WHERE up.uid=u.id AND up.pid=p.id; -- 10.\u67e5\u8be2\u5f20\u4e09\u548c\u674e\u56db\u8fd9\u4e24\u4e2a\u7528\u6237\u53ef\u4ee5\u770b\u5230\u7684\u5546\u54c1\u3002\u663e\u793a\u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84\u3002\u5546\u54c1\u540d\u79f0 /* \u5206\u6790 \u7528\u6237\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001\u5e74\u9f84 user\u8868 \u5546\u54c1\u540d\u79f0 product\u8868 \u4e2d\u95f4\u8868 us_pro \u6761\u4ef6\uff1aus_pro.uid=user.id AND us_pro.pid=product.id AND user.name IN ('\u5f20\u4e09','\u674e\u56db') */ SELECT u.id, u.name, u.age, p.name FROM USER u, product p, us_pro up WHERE up.uid=u.id AND up.pid=p.id AND u.name IN ('\u5f20\u4e09','\u674e\u56db');","title":"\u591a\u8868\u67e5\u8be2\u7ec3\u4e60"},{"location":"MySQL/#03_1","text":"","title":"03\u89c6\u56fe"},{"location":"MySQL/#_","text":"-- \u521b\u5efadb5\u6570\u636e\u5e93 CREATE DATABASE db5; -- \u4f7f\u7528db5\u6570\u636e\u5e93 USE db5; -- \u521b\u5efacountry\u8868 CREATE TABLE country( id INT PRIMARY KEY AUTO_INCREMENT, -- \u56fd\u5bb6id NAME VARCHAR(30) -- \u56fd\u5bb6\u540d\u79f0 ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO country VALUES (NULL,'\u4e2d\u56fd'),(NULL,'\u7f8e\u56fd'),(NULL,'\u4fc4\u7f57\u65af'); -- \u521b\u5efacity\u8868 CREATE TABLE city( id INT PRIMARY KEY AUTO_INCREMENT, -- \u57ce\u5e02id NAME VARCHAR(30), -- \u57ce\u5e02\u540d\u79f0 cid INT, -- \u5916\u952e\u5217\u3002\u5173\u8054country\u8868\u7684\u4e3b\u952e\u5217id CONSTRAINT cc_fk1 FOREIGN KEY (cid) REFERENCES country(id) -- \u6dfb\u52a0\u5916\u952e\u7ea6\u675f ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO city VALUES (NULL,'\u5317\u4eac',1),(NULL,'\u4e0a\u6d77',1),(NULL,'\u7ebd\u7ea6',2),(NULL,'\u83ab\u65af\u79d1',3);","title":"\u89c6\u56fe_\u6570\u636e\u51c6\u5907"},{"location":"MySQL/#_60","text":"/* \u6807\u51c6\u8bed\u6cd5 CREATE VIEW \u89c6\u56fe\u540d\u79f0 [(\u5217\u540d\u5217\u8868)] AS \u67e5\u8be2\u8bed\u53e5; */ example -- \u521b\u5efacity_country\u89c6\u56fe\uff0c\u4fdd\u5b58\u57ce\u5e02\u548c\u56fd\u5bb6\u7684\u4fe1\u606f(\u4f7f\u7528\u6307\u5b9a\u5217\u540d) CREATE VIEW city_country (city_id,city_name,country_name) AS SELECT c1.id, c1.name, c2.name FROM city c1, country c2 WHERE c1.cid=c2.id;","title":"\u521b\u5efa\u89c6\u56fe"},{"location":"MySQL/#_61","text":"/* \u6807\u51c6\u8bed\u6cd5 SELECT * FROM \u89c6\u56fe\u540d\u79f0; */ example -- \u67e5\u8be2\u89c6\u56fe SELECT * FROM city_country;","title":"\u67e5\u8be2\u89c6\u56fe"},{"location":"MySQL/#day03","text":"","title":"day03"},{"location":"MySQL/#01_2","text":"","title":"01\u89c6\u56fe"},{"location":"MySQL/#_62","text":"-- \u521b\u5efadb7\u6570\u636e\u5e93 CREATE DATABASE db7; -- \u4f7f\u7528db7\u6570\u636e\u5e93 USE db7; -- \u521b\u5efacountry\u8868 CREATE TABLE country( id INT PRIMARY KEY AUTO_INCREMENT, -- \u56fd\u5bb6id country_name VARCHAR(30) -- \u56fd\u5bb6\u540d\u79f0 ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO country VALUES (NULL,'\u4e2d\u56fd'),(NULL,'\u7f8e\u56fd'),(NULL,'\u4fc4\u7f57\u65af'); -- \u521b\u5efacity\u8868 CREATE TABLE city( id INT PRIMARY KEY AUTO_INCREMENT, -- \u57ce\u5e02id city_name VARCHAR(30), -- \u57ce\u5e02\u540d\u79f0 cid INT, -- \u5916\u952e\u5217\u3002\u5173\u8054country\u8868\u7684\u4e3b\u952e\u5217id CONSTRAINT cc_fk1 FOREIGN KEY (cid) REFERENCES country(id) -- \u6dfb\u52a0\u5916\u952e\u7ea6\u675f ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO city VALUES (NULL,'\u5317\u4eac',1),(NULL,'\u4e0a\u6d77',1),(NULL,'\u7ebd\u7ea6',2),(NULL,'\u83ab\u65af\u79d1',3);","title":"\u6570\u636e\u51c6\u5907"},{"location":"MySQL/#_63","text":"/* \u521b\u5efa\u89c6\u56fe \u6807\u51c6\u8bed\u6cd5 CREATE VIEW \u89c6\u56fe\u540d\u79f0 [(\u5217\u540d\u5217\u8868)] AS \u67e5\u8be2\u8bed\u53e5; */","title":"\u521b\u5efa\u89c6\u56fe"},{"location":"MySQL/#_64","text":"","title":"\u67e5\u8be2\u89c6\u56fe"},{"location":"MySQL/#_65","text":"/* \u6807\u51c6\u8bed\u6cd5 SELECT * FROM \u89c6\u56fe\u540d\u79f0; */","title":"\u67e5\u8be2\u89c6\u56fe"},{"location":"MySQL/#_66","text":"/* \u6807\u51c6\u8bed\u6cd5 SHOW CREATE VIEW \u89c6\u56fe\u540d\u79f0; */","title":"\u67e5\u8be2\u521b\u5efa\u89c6\u56fe\u7684\u8bed\u53e5"},{"location":"MySQL/#_67","text":"","title":"\u4fee\u6539\u89c6\u56fe"},{"location":"MySQL/#_68","text":"/* \u6807\u51c6\u8bed\u6cd5 UPDATE \u89c6\u56fe\u540d\u79f0 SET \u5217\u540d=\u503c WHERE \u6761\u4ef6; */","title":"\u4fee\u6539\u89c6\u56fe\u8868\u6570\u636e"},{"location":"MySQL/#_69","text":"/* \u4fee\u6539\u89c6\u56fe\u8868\u7ed3\u6784 \u6807\u51c6\u8bed\u6cd5 ALTER VIEW \u89c6\u56fe\u540d\u79f0 [(\u5217\u540d\u5217\u8868)] AS \u67e5\u8be2\u8bed\u53e5; */","title":"\u4fee\u6539\u89c6\u56fe\u8868\u7ed3\u6784"},{"location":"MySQL/#_70","text":"/* \u5220\u9664\u89c6\u56fe \u6807\u51c6\u8bed\u6cd5 DROP VIEW [IF EXISTS] \u89c6\u56fe\u540d\u79f0; */","title":"\u5220\u9664\u89c6\u56fe"},{"location":"MySQL/#02_2","text":"","title":"02\u5b58\u50a8\u8fc7\u7a0b\u548c\u51fd\u6570"},{"location":"MySQL/#_71","text":"-- \u521b\u5efadb8\u6570\u636e\u5e93 CREATE DATABASE db8; -- \u4f7f\u7528db8\u6570\u636e\u5e93 USE db8; -- \u521b\u5efa\u5b66\u751f\u8868 CREATE TABLE student( id INT PRIMARY KEY AUTO_INCREMENT, -- \u5b66\u751fid NAME VARCHAR(20), -- \u5b66\u751f\u59d3\u540d age INT, -- \u5b66\u751f\u5e74\u9f84 gender VARCHAR(5), -- \u5b66\u751f\u6027\u522b score INT -- \u5b66\u751f\u6210\u7ee9 ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO student VALUES (NULL,'\u5f20\u4e09',23,'\u7537',95),(NULL,'\u674e\u56db',24,'\u7537',98), (NULL,'\u738b\u4e94',25,'\u5973',100),(NULL,'\u8d75\u516d',26,'\u5973',90); -- \u6309\u7167\u6027\u522b\u8fdb\u884c\u5206\u7ec4\uff0c\u67e5\u8be2\u6bcf\u7ec4\u5b66\u751f\u7684\u603b\u6210\u7ee9\u3002\u6309\u7167\u603b\u6210\u7ee9\u7684\u5347\u5e8f\u6392\u5e8f SELECT gender,SUM(score) getSum FROM student GROUP BY gender ORDER BY getSum ASC;","title":"\u6570\u636e\u51c6\u5907"},{"location":"MySQL/#_72","text":"/* -- \u4fee\u6539\u5206\u9694\u7b26\u4e3a $ DELIMITER $ -- \u6807\u51c6\u8bed\u6cd5 CREATE PROCEDURE \u5b58\u50a8\u8fc7\u7a0b\u540d\u79f0 ( \u53c2\u6570 ...) BEGIN sql\u8bed\u53e5 ; END $ -- \u4fee\u6539\u5206\u9694\u7b26\u4e3a\u5206\u53f7 DELIMITER ; */ -- \u521b\u5efastu_group()\u5b58\u50a8\u8fc7\u7a0b\uff0c\u5c01\u88c5 \u5206\u7ec4\u67e5\u8be2\u603b\u6210\u7ee9\uff0c\u5e76\u6309\u7167\u603b\u6210\u7ee9\u5347\u5e8f\u6392\u5e8f\u7684\u529f\u80fd DELIMITER $ CREATE PROCEDURE stu_group () BEGIN SELECT gender , SUM ( score ) getSum FROM student GROUP BY gender ORDER BY getSum ASC ; END $ DELIMITER ;","title":"\u521b\u5efa\u5b58\u50a8\u8fc7\u7a0b"},{"location":"MySQL/#_73","text":"/* \u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b \u6807\u51c6\u8bed\u6cd5 CALL \u5b58\u50a8\u8fc7\u7a0b\u540d\u79f0(\u5b9e\u9645\u53c2\u6570); */ -- \u8c03\u7528stu_group\u5b58\u50a8\u8fc7\u7a0b CALL stu_group();","title":"\u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b"},{"location":"MySQL/#_74","text":"/* \u67e5\u8be2\u6570\u636e\u5e93\u4e2d\u6240\u6709\u7684\u5b58\u50a8\u8fc7\u7a0b \u6807\u51c6\u8bed\u6cd5 SELECT name FROM mysql.proc WHERE db='\u6570\u636e\u5e93\u540d\u79f0'; */ -- \u67e5\u770bdb8\u6570\u636e\u5e93\u4e2d\u6240\u6709\u7684\u5b58\u50a8\u8fc7\u7a0b SELECT NAME FROM mysql.proc WHERE db='db8';","title":"\u67e5\u8be2\u6570\u636e\u5e93\u4e2d\u6240\u6709\u7684\u5b58\u50a8\u8fc7\u7a0b"},{"location":"MySQL/#_75","text":"/* \u67e5\u770b\u5b58\u50a8\u8fc7\u7a0b\u7684\u72b6\u6001\u4fe1\u606f \u6807\u51c6\u8bed\u6cd5 SHOW PROCEDURE STATUS ; */ -- \u67e5\u770b\u5b58\u50a8\u8fc7\u7a0b\u7684\u72b6\u6001\u4fe1\u606f SHOW PROCEDURE STATUS ;","title":"\u67e5\u770b\u5b58\u50a8\u8fc7\u7a0b\u7684\u72b6\u6001\u4fe1\u606f"},{"location":"MySQL/#_76","text":"/* \u67e5\u770b\u5b58\u50a8\u8fc7\u7a0b\u7684\u521b\u5efa\u8bed\u53e5 \u6807\u51c6\u8bed\u6cd5 SHOW CREATE PROCEDURE \u5b58\u50a8\u8fc7\u7a0b\u540d\u79f0 ; */ -- \u67e5\u8be2stu_group\u5b58\u50a8\u8fc7\u7a0b\u7684\u521b\u5efa\u8bed\u53e5 SHOW CREATE PROCEDURE stu_group ;","title":"\u67e5\u770b\u5b58\u50a8\u8fc7\u7a0b\u7684\u521b\u5efa\u8bed\u53e5"},{"location":"MySQL/#_77","text":"/* \u5220\u9664\u5b58\u50a8\u8fc7\u7a0b \u6807\u51c6\u8bed\u6cd5 DROP PROCEDURE [IF EXISTS] \u5b58\u50a8\u8fc7\u7a0b\u540d\u79f0; */ -- \u5220\u9664stu_group\u5b58\u50a8\u8fc7\u7a0b DROP PROCEDURE IF EXISTS stu_group ;","title":"\u5220\u9664\u5b58\u50a8\u8fc7\u7a0b"},{"location":"MySQL/#-","text":"","title":"\u5b58\u50a8\u8fc7\u7a0b-\u53d8\u91cf"},{"location":"MySQL/#_78","text":"/* \u5b9a\u4e49\u53d8\u91cf \u6807\u51c6\u8bed\u6cd5 DECLARE \u53d8\u91cf\u540d \u6570\u636e\u7c7b\u578b [DEFAULT \u9ed8\u8ba4\u503c]; */ -- \u5b9a\u4e49\u4e00\u4e2aint\u7c7b\u578b\u53d8\u91cf\uff0c\u5e76\u8d4b\u9ed8\u8ba4\u503c\u4e3a10 DELIMITER $ CREATE PROCEDURE pro_test1 () BEGIN -- \u5b9a\u4e49\u53d8\u91cf DECLARE num INT DEFAULT 10 ; -- \u67e5\u8be2\u53d8\u91cf SELECT num ; END $ DELIMITER ; -- \u8c03\u7528pro_test1\u5b58\u50a8\u8fc7\u7a0b CALL pro_test1();","title":"\u5b9a\u4e49\u53d8\u91cf"},{"location":"MySQL/#-_1","text":"/* \u53d8\u91cf\u8d4b\u503c-\u65b9\u5f0f\u4e00 \u6807\u51c6\u8bed\u6cd5 SET \u53d8\u91cf\u540d = \u53d8\u91cf\u503c; */ -- \u5b9a\u4e49\u4e00\u4e2avarchar\u7c7b\u578b\u53d8\u91cf\u5e76\u8d4b\u503c DELIMITER $ CREATE PROCEDURE pro_test2 () BEGIN -- \u5b9a\u4e49\u53d8\u91cf DECLARE NAME VARCHAR ( 10 ); -- \u4e3a\u53d8\u91cf\u8d4b\u503c SET NAME = '\u5b58\u50a8\u8fc7\u7a0b' ; -- \u67e5\u8be2\u53d8\u91cf SELECT NAME ; END $ DELIMITER ; -- \u8c03\u7528pro_test2\u5b58\u50a8\u8fc7\u7a0b CALL pro_test2(); \u53d8\u91cf\u8d4b\u503c-\u65b9\u5f0f\u4e8c /* \u53d8\u91cf\u8d4b\u503c-\u65b9\u5f0f\u4e8c \u6807\u51c6\u8bed\u6cd5 SELECT \u5217\u540d INTO \u53d8\u91cf\u540d FROM \u8868\u540d [WHERE \u6761\u4ef6]; */ -- \u5b9a\u4e49\u4e24\u4e2aint\u53d8\u91cf\uff0c\u7528\u4e8e\u5b58\u50a8\u7537\u5973\u540c\u5b66\u7684\u603b\u5206\u6570 DELIMITER $ CREATE PROCEDURE pro_test3 () BEGIN -- \u5b9a\u4e49\u53d8\u91cf DECLARE men , women INT ; -- \u67e5\u8be2\u7537\u540c\u5b66\u7684\u603b\u5206\u6570\uff0c\u4e3a men\u53d8\u91cf\u8d4b\u503c SELECT SUM ( score ) INTO men FROM student WHERE gender = '\u7537' ; -- \u67e5\u8be2\u5973\u540c\u5b66\u7684\u603b\u5206\u6570\uff0c\u4e3a women\u53d8\u91cf\u8d4b\u503c SELECT SUM ( score ) INTO women FROM student WHERE gender = '\u5973' ; -- \u67e5\u8be2\u53d8\u91cf SELECT men , women ; END $ DELIMITER ; -- \u8c03\u7528pro_test3\u5b58\u50a8\u8fc7\u7a0b CALL pro_test3();","title":"\u53d8\u91cf\u8d4b\u503c-\u65b9\u5f0f\u4e00"},{"location":"MySQL/#-if","text":"/* \u5b58\u50a8\u8fc7\u7a0b - if\u8bed\u53e5 \u6807\u51c6\u8bed\u6cd5 IF \u5224\u65ad\u6761\u4ef6 1 THEN \u6267\u884c\u7684 sql\u8bed\u53e51 ; [ ELSEIF \u5224\u65ad\u6761\u4ef6 2 THEN \u6267\u884c\u7684 sql\u8bed\u53e52 ;] ... [ ELSE \u6267\u884c\u7684 sql\u8bed\u53e5n ;] END IF ; */ / \u5b9a\u4e49\u4e00\u4e2aint\u53d8\u91cf\uff0c\u7528\u4e8e\u5b58\u50a8\u73ed\u7ea7\u603b\u6210\u7ee9 \u5b9a\u4e49\u4e00\u4e2avarchar\u53d8\u91cf\uff0c\u7528\u4e8e\u5b58\u50a8\u5206\u6570\u63cf\u8ff0 \u6839\u636e\u603b\u6210\u7ee9\u5224\u65ad\uff1a 380\u5206\u53ca\u4ee5\u4e0a \u5b66\u4e60\u4f18\u79c0 320 ~ 380 \u5b66\u4e60\u4e0d\u9519 320\u4ee5\u4e0b \u5b66\u4e60\u4e00\u822c / DELIMITER $ CREATE PROCEDURE pro_test4 () BEGIN -- \u5b9a\u4e49\u4fdd\u5b58\u603b\u6210\u7ee9\u7684\u53d8\u91cf DECLARE total INT ; -- \u5b9a\u4e49\u4fdd\u5b58\u5206\u6570\u63cf\u8ff0\u7684\u53d8\u91cf DECLARE description VARCHAR ( 10 ); -- \u4e3a total\u8d4b\u503c SELECT SUM ( score ) INTO total FROM student ; -- \u5224\u65ad\u603b\u6210\u7ee9 IF total >= 380 THEN SET description = '\u5b66\u4e60\u4f18\u79c0' ; ELSEIF total >= 320 AND total < 380 THEN SET description = '\u5b66\u4e60\u4e0d\u9519' ; ELSE SET description = '\u5b66\u4e60\u4e00\u822c' ; END IF ; -- \u67e5\u8be2\u603b\u6210\u7ee9\u548c\u63cf\u8ff0\u4fe1\u606f SELECT total , description ; END $ DELIMITER ; -- \u8c03\u7528pro_test4\u5b58\u50a8\u8fc7\u7a0b CALL pro_test4();","title":"\u5b58\u50a8\u8fc7\u7a0b-if\u8bed\u53e5"},{"location":"MySQL/#__1","text":"/* \u8f93\u5165\u53c2\u6570 DELIMITER $ -- \u6807\u51c6\u8bed\u6cd5 CREATE PROCEDURE \u5b58\u50a8\u8fc7\u7a0b\u540d\u79f0 ( IN \u53c2\u6570\u540d \u6570\u636e\u7c7b\u578b ) BEGIN \u6267\u884c\u7684 sql\u8bed\u53e5 ; END $ DELIMITER ; */ / \u8f93\u5165\u603b\u6210\u7ee9\u53d8\u91cf\uff0c\u4ee3\u8868\u5b66\u751f\u603b\u6210\u7ee9 \u5b9a\u4e49\u4e00\u4e2avarchar\u53d8\u91cf\uff0c\u7528\u4e8e\u5b58\u50a8\u5206\u6570\u63cf\u8ff0 \u6839\u636e\u603b\u6210\u7ee9\u5224\u65ad\uff1a 380\u5206\u53ca\u4ee5\u4e0a \u5b66\u4e60\u4f18\u79c0 320 ~ 380 \u5b66\u4e60\u4e0d\u9519 320\u4ee5\u4e0b \u5b66\u4e60\u4e00\u822c / DELIMITER $ CREATE PROCEDURE pro_test5 ( IN total INT ) BEGIN -- \u5b9a\u4e49\u5206\u6570\u63cf\u8ff0\u53d8\u91cf DECLARE description VARCHAR ( 10 ); -- \u5224\u65ad\u603b\u6210\u7ee9 IF total >= 380 THEN SET description = '\u5b66\u4e60\u4f18\u79c0' ; ELSEIF total >= 320 AND total < 380 THEN SET description = '\u5b66\u4e60\u4e0d\u9519' ; ELSE SET description = '\u5b66\u4e60\u4e00\u822c' ; END IF ; -- \u67e5\u8be2\u603b\u6210\u7ee9\u548c\u63cf\u8ff0\u4fe1\u606f SELECT total , description ; END $ DELIMITER ; -- \u8c03\u7528pro_test5\u5b58\u50a8\u8fc7\u7a0b CALL pro_test5(310); CALL pro_test5((SELECT SUM(score) FROM student));","title":"\u5b58\u50a8\u8fc7\u7a0b_\u8f93\u5165\u53c2\u6570"},{"location":"MySQL/#__2","text":"/* \u8f93\u51fa\u53c2\u6570 DELIMITER $ -- \u6807\u51c6\u8bed\u6cd5 CREATE PROCEDURE \u5b58\u50a8\u8fc7\u7a0b\u540d\u79f0 ( OUT \u53c2\u6570\u540d \u6570\u636e\u7c7b\u578b ) BEGIN \u6267\u884c\u7684 sql\u8bed\u53e5 ; END $ DELIMITER ; */ /\u8f93\u5165\u603b\u6210\u7ee9\u53d8\u91cf\uff0c\u4ee3\u8868\u5b66\u751f\u603b\u6210\u7ee9 \u8f93\u51fa\u5206\u6570\u63cf\u8ff0\u53d8\u91cf\uff0c\u4ee3\u8868\u5b66\u751f\u603b\u6210\u7ee9\u7684\u63cf\u8ff0 \u6839\u636e\u603b\u6210\u7ee9\u5224\u65ad\uff1a 380\u5206\u53ca\u4ee5\u4e0a \u5b66\u4e60\u4f18\u79c0 320 ~ 380 \u5b66\u4e60\u4e0d\u9519 320\u4ee5\u4e0b \u5b66\u4e60\u4e00\u822c */ DELIMITER $ CREATE PROCEDURE pro_test6 ( IN total INT , OUT description VARCHAR ( 10 )) BEGIN -- \u5224\u65ad\u603b\u6210\u7ee9 IF total >= 380 THEN SET description = '\u5b66\u4e60\u4f18\u79c0' ; ELSEIF total >= 320 AND total < 380 THEN SET description = '\u5b66\u4e60\u4e0d\u9519' ; ELSE SET description = '\u5b66\u4e60\u4e00\u822c' ; END IF ; END $ DELIMITER ; -- \u8c03\u7528pro_test6\u5b58\u50a8\u8fc7\u7a0b CALL pro_test6 ( 390 , @description ); -- \u67e5\u8be2\u603b\u6210\u7ee9\u63cf\u8ff0\u4fe1\u606f\u53d8\u91cf SELECT @description ;","title":"\u5b58\u50a8\u8fc7\u7a0b_\u8f93\u51fa\u53c2\u6570"},{"location":"MySQL/#_case","text":"/* case\u8bed\u53e5 \u6807\u51c6\u8bed\u6cd5 CASE WHEN \u5224\u65ad\u6761\u4ef6 1 THEN \u6267\u884c sql\u8bed\u53e51 ; [ WHEN \u5224\u65ad\u6761\u4ef6 2 THEN \u6267\u884c sql\u8bed\u53e52 ;] ... [ ELSE \u6267\u884c sql\u8bed\u53e5n ;] END CASE ; */ / \u8f93\u5165\u603b\u6210\u7ee9\u53d8\u91cf\uff0c\u4ee3\u8868\u5b66\u751f\u603b\u6210\u7ee9 \u5b9a\u4e49\u4e00\u4e2avarchar\u53d8\u91cf\uff0c\u7528\u4e8e\u5b58\u50a8\u5206\u6570\u63cf\u8ff0 \u6839\u636e\u603b\u6210\u7ee9\u5224\u65ad\uff1a 380\u5206\u53ca\u4ee5\u4e0a \u5b66\u4e60\u4f18\u79c0 320 ~ 380 \u5b66\u4e60\u4e0d\u9519 320\u4ee5\u4e0b \u5b66\u4e60\u4e00\u822c / DELIMITER $ CREATE PROCEDURE pro_test7 ( IN total INT ) BEGIN -- \u5b9a\u4e49\u603b\u6210\u7ee9\u63cf\u8ff0\u4fe1\u606f\u53d8\u91cf DECLARE description VARCHAR ( 10 ); -- \u5224\u65ad\u603b\u6210\u7ee9 CASE WHEN total >= 380 THEN SET description = '\u5b66\u4e60\u4f18\u79c0' ; WHEN total >= 320 AND total < 380 THEN SET description = '\u5b66\u4e60\u4e0d\u9519' ; ELSE SET description = '\u5b66\u4e60\u4e00\u822c' ; END CASE ; -- \u67e5\u8be2\u603b\u6210\u7ee9\u548c\u63cf\u8ff0\u4fe1\u606f SELECT total , description ; END $ DELIMITER ; -- \u8c03\u7528pro_test7\u5b58\u50a8\u8fc7\u7a0b CALL pro_test7(310);","title":"\u5b58\u50a8\u8fc7\u7a0b_case\u8bed\u53e5"},{"location":"MySQL/#_while","text":"/* while\u5faa\u73af \u6807\u51c6\u8bed\u6cd5 \u521d\u59cb\u5316\u8bed\u53e5 ; WHILE \u6761\u4ef6\u5224\u65ad\u8bed\u53e5 DO \u5faa\u73af\u4f53\u8bed\u53e5 ; \u6761\u4ef6\u63a7\u5236\u8bed\u53e5 ; END WHILE ; */ -- \u8ba1\u7b971~100\u4e4b\u95f4\u7684\u5076\u6570\u548c DELIMITER $ CREATE PROCEDURE pro_test8 () BEGIN -- \u5b9a\u4e49\u6c42\u548c\u53d8\u91cf DECLARE result INT DEFAULT 0 ; -- \u5b9a\u4e49\u521d\u59cb\u5316\u53d8\u91cf DECLARE num INT DEFAULT 1 ; -- while\u5faa\u73af WHILE num <= 100 DO -- \u5224\u65ad num\u662f\u5426\u662f\u5076\u6570 IF num % 2 = 0 THEN -- \u8ba9 num\u548cresult\u8fdb\u884c\u7d2f\u52a0 SET result = result + num ; END IF ; -- \u8ba9 num\u8fdb\u884c\u81ea\u589e SET num = num + 1 ; END WHILE ; -- \u67e5\u8be2\u6c42\u548c\u7ed3\u679c SELECT result ; END $ DELIMITER ; -- \u8c03\u7528pro_test8\u5b58\u50a8\u8fc7\u7a0b CALL pro_test8();","title":"\u5b58\u50a8\u8fc7\u7a0b_while\u5faa\u73af"},{"location":"MySQL/#_repeat","text":"/* repeat\u5faa\u73af \u6807\u51c6\u8bed\u6cd5 \u521d\u59cb\u5316\u8bed\u53e5 ; REPEAT \u5faa\u73af\u4f53\u8bed\u53e5 ; \u6761\u4ef6\u63a7\u5236\u8bed\u53e5 ; UNTIL \u6761\u4ef6\u5224\u65ad\u8bed\u53e5 END REPEAT ; */ -- \u8ba1\u7b971~10\u4e4b\u95f4\u7684\u548c DELIMITER $ CREATE PROCEDURE pro_test9 () BEGIN -- \u5b9a\u4e49\u6c42\u548c\u53d8\u91cf DECLARE result INT DEFAULT 0 ; -- \u5b9a\u4e49\u521d\u59cb\u5316\u53d8\u91cf DECLARE num INT DEFAULT 1 ; -- repeat\u5faa\u73af REPEAT -- \u7d2f\u52a0 SET result = result + num ; -- \u8ba9 num + 1 SET num = num + 1 ; -- \u505c\u6b62\u5faa\u73af UNTIL num > 10 END REPEAT ; -- \u67e5\u8be2\u6c42\u548c\u7ed3\u679c SELECT result ; END $ DELIMITER ; -- \u8c03\u7528pro_test9\u5b58\u50a8\u8fc7\u7a0b CALL pro_test9();","title":"\u5b58\u50a8\u8fc7\u7a0b_repeat\u5faa\u73af"},{"location":"MySQL/#_loop","text":"/* loop\u5faa\u73af \u6807\u51c6\u8bed\u6cd5 \u521d\u59cb\u5316\u8bed\u53e5; [ \u5faa\u73af\u540d\u79f0 : ] LOOP \u6761\u4ef6\u5224\u65ad\u8bed\u53e5 [ LEAVE \u5faa\u73af\u540d\u79f0 ; ] \u5faa\u73af\u4f53\u8bed\u53e5; \u6761\u4ef6\u63a7\u5236\u8bed\u53e5; END LOOP \u5faa\u73af\u540d\u79f0; */ -- \u8ba1\u7b971~10\u4e4b\u95f4\u7684\u548c DELIMITER $ CREATE PROCEDURE pro_test10 () BEGIN -- \u5b9a\u4e49\u6c42\u548c\u53d8\u91cf DECLARE result INT DEFAULT 0 ; -- \u5b9a\u4e49\u521d\u59cb\u5316\u53d8\u91cf DECLARE num INT DEFAULT 1 ; -- loop\u5faa\u73af l : LOOP -- \u6761\u4ef6\u5224\u65ad \uff0c \u505c\u6b62\u5faa\u73af IF num > 10 THEN LEAVE l ; END IF ; -- \u7d2f\u52a0 SET result = result + num ; -- \u8ba9num + 1 SET num = num + 1 ; END LOOP l ; -- \u67e5\u8be2\u6c42\u548c\u7ed3\u679c SELECT result ; END $ DELIMITER ; -- \u8c03\u7528pro_test10\u5b58\u50a8\u8fc7\u7a0b CALL pro_test10();","title":"\u5b58\u50a8\u8fc7\u7a0b_loop\u5faa\u73af"},{"location":"MySQL/#__3","text":"/* \u6e38\u6807 \u6807\u51c6\u8bed\u6cd5 1.\u521b\u5efa\u6e38\u6807\uff1aDECLARE \u6e38\u6807\u540d\u79f0 CURSOR FOR \u67e5\u8be2sql\u8bed\u53e5; 2.\u6253\u5f00\u6e38\u6807\uff1aOPEN \u6e38\u6807\u540d\u79f0; 3.\u4f7f\u7528\u6e38\u6807\uff1aFETCH \u6e38\u6807\u540d\u79f0 INTO \u53d8\u91cf\u540d1,\u53d8\u91cf\u540d2,...; 4.\u5173\u95ed\u6e38\u6807\uff1aCLOSE \u6e38\u6807\u540d\u79f0; */ -- \u521b\u5efastu_score\u8868 CREATE TABLE stu_score( id INT PRIMARY KEY AUTO_INCREMENT, score INT ); -- \u5c06student\u8868\u4e2d\u6240\u6709\u7684\u6210\u7ee9\u4fdd\u5b58\u5230stu_score\u8868\u4e2d DELIMITER $ CREATE PROCEDURE pro_test11 () BEGIN -- \u5b9a\u4e49\u4e00\u4e2a\u4fdd\u5b58\u6210\u7ee9\u7684\u53d8\u91cf DECLARE s_score INT ; -- \u521b\u5efa\u6e38\u6807 DECLARE stu_result CURSOR FOR SELECT score FROM student ; -- \u5f00\u542f\u6e38\u6807 OPEN stu_result ; -- \u4f7f\u7528\u6e38\u6807 -- \u904d\u5386\u7ed3\u679c\uff0c\u62ff\u5230\u7b2c 1 \u884c\u6570\u636e FETCH stu_result INTO s_score ; -- \u5c06\u6570\u636e\u4fdd\u5b58\u5230 stu_score\u8868\u4e2d INSERT INTO stu_score VALUES ( NULL , s_score ); -- \u904d\u5386\u7ed3\u679c\uff0c\u62ff\u5230\u7b2c 2 \u884c\u6570\u636e FETCH stu_result INTO s_score ; -- \u5c06\u6570\u636e\u4fdd\u5b58\u5230 stu_score\u8868\u4e2d INSERT INTO stu_score VALUES ( NULL , s_score ); -- \u904d\u5386\u7ed3\u679c\uff0c\u62ff\u5230\u7b2c 3 \u884c\u6570\u636e FETCH stu_result INTO s_score ; -- \u5c06\u6570\u636e\u4fdd\u5b58\u5230 stu_score\u8868\u4e2d INSERT INTO stu_score VALUES ( NULL , s_score ); -- \u904d\u5386\u7ed3\u679c\uff0c\u62ff\u5230\u7b2c 4 \u884c\u6570\u636e FETCH stu_result INTO s_score ; -- \u5c06\u6570\u636e\u4fdd\u5b58\u5230 stu_score\u8868\u4e2d INSERT INTO stu_score VALUES ( NULL , s_score ); -- \u5173\u95ed\u6e38\u6807 CLOSE stu_result ; END $ DELIMITER ; -- \u8c03\u7528pro_test11\u5b58\u50a8\u8fc7\u7a0b CALL pro_test11(); -- \u67e5\u8be2stu_score\u6570\u636e\u8868 SELECT * FROM stu_score;","title":"\u5b58\u50a8\u8fc7\u7a0b_\u6e38\u6807"},{"location":"MySQL/#__4","text":"/* \u5f53\u6e38\u6807\u7ed3\u675f\u540e\uff0c\u4f1a\u81ea\u52a8\u7684\u89e6\u53d1\u4e00\u4e2a\u4e8b\u4ef6\u3002\u5c31\u4ee3\u8868\u6e38\u6807\u5df2\u7ecf\u7ed3\u675f\u4e86\uff01 \u52a0\u6807\u8bb0\u7684\u601d\u60f3\uff1a 1.\u5b9a\u4e49\u4e00\u4e2a\u6807\u8bb0\u53d8\u91cf\uff0c\u9ed8\u8ba4\u503c\u4e3a0\uff08\u610f\u5473\u7740\u6709\u6570\u636e\uff09 2.\u5f53\u6e38\u6807\u7ed3\u675f\u540e\uff0c\u5c06\u6807\u8bb0\u53d8\u91cf\u7684\u503c\u4fee\u6539\u4e3a1\uff08\u610f\u5473\u7740\u6ca1\u6709\u6570\u636e\u4e86\uff09 */ DELIMITER $ CREATE PROCEDURE pro_test12 () BEGIN -- \u5b9a\u4e49\u4e00\u4e2a\u4fdd\u5b58\u6210\u7ee9\u7684\u53d8\u91cf DECLARE s_score INT ; -- \u5b9a\u4e49\u4e00\u4e2a\u6807\u8bb0\u53d8\u91cf\uff0c\u9ed8\u8ba4\u503c\u4e3a 0 \uff08\u610f\u5473\u7740\u6709\u6570\u636e\uff09 DECLARE flag INT DEFAULT 0 ; -- \u521b\u5efa\u6e38\u6807 DECLARE stu_result CURSOR FOR SELECT score FROM student ; -- \u5f53\u6e38\u6807\u7ed3\u675f\u540e\uff0c\u5c06\u6807\u8bb0\u53d8\u91cf\u7684\u503c\u4fee\u6539\u4e3a 1 \uff08\u610f\u5473\u7740\u6ca1\u6709\u6570\u636e\u4e86\uff09 DECLARE EXIT HANDLER FOR NOT FOUND SET flag = 1 ; -- \u5f00\u542f\u6e38\u6807 OPEN stu_result ; -- \u5faa\u73af\u4f7f\u7528\u6e38\u6807 REPEAT -- \u904d\u5386\u7ed3\u679c\uff0c\u62ff\u5230\u6570\u636e FETCH stu_result INTO s_score ; -- \u5c06\u6570\u636e\u4fdd\u5b58\u5230 stu_score\u8868\u4e2d INSERT INTO stu_score VALUES ( NULL , s_score ); -- \u5f53 flag\u7684\u503c\u662f1\u7684\u65f6\u5019 \uff0c\u5c31\u505c\u6b62\u5faa\u73af UNTIL flag = 1 END REPEAT ; -- \u5173\u95ed\u6e38\u6807 CLOSE stu_result ; END $ DELIMITER ; -- \u8c03\u7528pro_test12\u5b58\u50a8\u8fc7\u7a0b CALL pro_test12(); -- \u67e5\u8be2stu_score\u8868 SELECT * FROM stu_score;","title":"\u5b58\u50a8\u8fc7\u7a0b_\u6e38\u6807\u4f18\u5316"},{"location":"MySQL/#_79","text":"","title":"\u5b58\u50a8\u51fd\u6570"},{"location":"MySQL/#_80","text":"/* \u521b\u5efa\u5b58\u50a8\u51fd\u6570 \u6807\u51c6\u8bed\u6cd5 CREATE FUNCTION \u51fd\u6570\u540d\u79f0 ([ \u53c2\u6570 \u6570\u636e\u7c7b\u578b ]) RETURNS \u8fd4\u56de\u503c\u7c7b\u578b BEGIN \u6267\u884c\u7684 sql\u8bed\u53e5 ; RETURN \u7ed3\u679c ; END $ */ -- \u5b9a\u4e49\u5b58\u50a8\u51fd\u6570\uff0c\u83b7\u53d6\u5b66\u751f\u8868\u4e2d\u6210\u7ee9\u5927\u4e8e95\u5206\u7684\u5b66\u751f\u6570\u91cf DELIMITER $ CREATE FUNCTION fun_test1 () RETURNS INT BEGIN -- \u5b9a\u4e49\u4e00\u4e2a\u7edf\u8ba1\u53d8\u91cf DECLARE result INT ; -- \u67e5\u8be2\u6210\u7ee9\u5927\u4e8e 95 \u5206\u7684\u6570\u91cf SELECT COUNT ( * ) INTO result FROM student WHERE score > 95 ; -- \u5c06\u7ed3\u679c\u8fd4\u56de RETURN result ; END $ DELIMITER ;","title":"\u521b\u5efa\u5b58\u50a8\u51fd\u6570"},{"location":"MySQL/#_81","text":"/* \u8c03\u7528\u51fd\u6570 \u6807\u51c6\u8bed\u6cd5 SELECT \u51fd\u6570\u540d\u79f0(\u5b9e\u9645\u53c2\u6570); */ -- \u8c03\u7528\u51fd\u6570 SELECT fun_test1();","title":"\u8c03\u7528\u51fd\u6570"},{"location":"MySQL/#_82","text":"/* \u5220\u9664\u51fd\u6570 \u6807\u51c6\u8bed\u6cd5 DROP FUNCTION \u51fd\u6570\u540d\u79f0; */ -- \u5220\u9664\u51fd\u6570 DROP FUNCTION fun_test1;","title":"\u5220\u9664\u51fd\u6570"},{"location":"MySQL/#03_2","text":"","title":"03\u89e6\u53d1\u5668"},{"location":"MySQL/#_83","text":"-- \u521b\u5efadb9\u6570\u636e\u5e93 CREATE DATABASE db9; -- \u4f7f\u7528db9\u6570\u636e\u5e93 USE db9; -- \u521b\u5efa\u8d26\u6237\u8868account CREATE TABLE account( id INT PRIMARY KEY AUTO_INCREMENT, -- \u8d26\u6237id NAME VARCHAR(20), -- \u59d3\u540d money DOUBLE -- \u4f59\u989d ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO account VALUES (NULL,'\u5f20\u4e09',1000),(NULL,'\u674e\u56db',2000); -- \u521b\u5efa\u65e5\u5fd7\u8868account_log CREATE TABLE account_log( id INT PRIMARY KEY AUTO_INCREMENT, -- \u65e5\u5fd7id operation VARCHAR(20), -- \u64cd\u4f5c\u7c7b\u578b (insert update delete) operation_time DATETIME, -- \u64cd\u4f5c\u65f6\u95f4 operation_id INT, -- \u64cd\u4f5c\u8868\u7684id operation_params VARCHAR(200) -- \u64cd\u4f5c\u53c2\u6570 );","title":"\u89e6\u53d1\u5668\u6570\u636e\u51c6\u5907"},{"location":"MySQL/#insert","text":"/* \u521b\u5efa\u89e6\u53d1\u5668 \u6807\u51c6\u8bed\u6cd5 DELIMITER $ CREATE TRIGGER \u89e6\u53d1\u5668\u540d\u79f0 BEFORE | AFTER INSERT | UPDATE | DELETE ON \u8868\u540d FOR EACH ROW BEGIN \u89e6\u53d1\u5668\u8981\u6267\u884c\u7684\u529f\u80fd ; END $ DELIMITER ; */ -- \u521b\u5efaINSERT\u578b\u89e6\u53d1\u5668\u3002\u7528\u4e8e\u5bf9account\u8868\u65b0\u589e\u6570\u636e\u8fdb\u884c\u65e5\u5fd7\u7684\u8bb0\u5f55 DELIMITER $ CREATE TRIGGER account_insert AFTER INSERT ON account FOR EACH ROW BEGIN INSERT INTO account_log VALUES ( NULL , 'INSERT' , NOW (), new . id , CONCAT ( '\u63d2\u5165\u540e{id=' , new . id , ',name=' , new . name , ',money=' , new . money , '}' )); END $ DELIMITER ; -- \u5411account\u8868\u6765\u6dfb\u52a0\u4e00\u6761\u8bb0\u5f55 INSERT INTO account VALUES (NULL,'\u738b\u4e94',3000); -- \u67e5\u8be2account\u8868 SELECT * FROM account; -- \u67e5\u8be2account_log\u8868 SELECT * FROM account_log;","title":"INSERT\u578b\u89e6\u53d1\u5668"},{"location":"MySQL/#update","text":"/* \u521b\u5efa\u89e6\u53d1\u5668 \u6807\u51c6\u8bed\u6cd5 DELIMITER $ CREATE TRIGGER \u89e6\u53d1\u5668\u540d\u79f0 BEFORE | AFTER INSERT | UPDATE | DELETE ON \u8868\u540d FOR EACH ROW BEGIN \u89e6\u53d1\u5668\u8981\u6267\u884c\u7684\u529f\u80fd ; END $ DELIMITER ; */ -- \u521b\u5efaUPDATE\u578b\u89e6\u53d1\u5668\u3002\u7528\u4e8e\u5bf9account\u8868\u4fee\u6539\u6570\u636e\u8fdb\u884c\u65e5\u5fd7\u7684\u8bb0\u5f55 DELIMITER $ CREATE TRIGGER account_update AFTER UPDATE ON account FOR EACH ROW BEGIN INSERT INTO account_log VALUES ( NULL , 'UPDATE' , NOW (), new . id , CONCAT ( '\u4fee\u6539\u524d{id=' , old . id , ',name=' , old . name , ',money=' , old . money , '}' , '\u4fee\u6539\u540e{id=' , new . id , ',name=' , new . name , ',money=' , new . money , '}' )); END $ DELIMITER ; -- \u4fee\u6539account\u8868\u4e2d\u674e\u56db\u7684\u91d1\u989d\u4e3a2500 UPDATE account SET money=2500 WHERE NAME='\u674e\u56db'; -- \u67e5\u8be2account\u8868 SELECT * FROM account; -- \u67e5\u8be2account_log\u8868 SELECT * FROM account_log;","title":"UPDATE\u578b\u89e6\u53d1\u5668"},{"location":"MySQL/#delete","text":"/* \u521b\u5efa\u89e6\u53d1\u5668 \u6807\u51c6\u8bed\u6cd5 DELIMITER $ CREATE TRIGGER \u89e6\u53d1\u5668\u540d\u79f0 BEFORE | AFTER INSERT | UPDATE | DELETE ON \u8868\u540d FOR EACH ROW BEGIN \u89e6\u53d1\u5668\u8981\u6267\u884c\u7684\u529f\u80fd ; END $ DELIMITER ; */ -- \u521b\u5efaDELETE\u578b\u89e6\u53d1\u5668\u3002\u7528\u4e8e\u5bf9account\u8868\u5220\u9664\u6570\u636e\u8fdb\u884c\u65e5\u5fd7\u7684\u8bb0\u5f55 DELIMITER $ CREATE TRIGGER account_delete AFTER DELETE ON account FOR EACH ROW BEGIN INSERT INTO account_log VALUES ( NULL , 'DELETE' , NOW (), old . id , CONCAT ( '\u5220\u9664\u524d{id=' , old . id , ',name=' , old . name , ',money=' , old . money , '}' )); END $ DELIMITER ; -- \u5220\u9664account\u8868\u4e2d\u738b\u4e94 DELETE FROM account WHERE NAME='\u738b\u4e94'; -- \u67e5\u8be2account\u8868 SELECT * FROM account; -- \u67e5\u8be2account_log\u8868 SELECT * FROM account_log;","title":"DELETE\u578b\u89e6\u53d1\u5668"},{"location":"MySQL/#_84","text":"/* \u67e5\u770b\u89e6\u53d1\u5668 \u6807\u51c6\u8bed\u6cd5 SHOW TRIGGERS; */ -- \u67e5\u770b\u89e6\u53d1\u5668 SHOW TRIGGERS ;","title":"\u67e5\u770b\u89e6\u53d1\u5668"},{"location":"MySQL/#_85","text":"/* \u5220\u9664\u89e6\u53d1\u5668 \u6807\u51c6\u8bed\u6cd5 DROP TRIGGER \u89e6\u53d1\u5668\u540d\u79f0; */ -- \u5220\u9664\u89e6\u53d1\u5668 DROP TRIGGER account_delete;","title":"\u5220\u9664\u89e6\u53d1\u5668"},{"location":"MySQL/#04_1","text":"","title":"04\u4e8b\u52a1"},{"location":"MySQL/#_86","text":"-- \u521b\u5efadb10\u6570\u636e\u5e93 CREATE DATABASE db10; -- \u4f7f\u7528db10\u6570\u636e\u5e93 USE db10; -- \u521b\u5efa\u8d26\u6237\u8868 CREATE TABLE account( id INT PRIMARY KEY AUTO_INCREMENT, -- \u8d26\u6237id NAME VARCHAR(20), -- \u8d26\u6237\u540d\u79f0 money DOUBLE -- \u8d26\u6237\u4f59\u989d ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO account VALUES (NULL,'\u5f20\u4e09',1000),(NULL,'\u674e\u56db',1000);","title":"\u4e8b\u52a1\u7684\u6570\u636e\u51c6\u5907"},{"location":"MySQL/#_87","text":"-- \u5f20\u4e09\u7ed9\u674e\u56db\u8f6c\u8d26500\u5143 -- 1.\u5f20\u4e09\u8d26\u6237-500 UPDATE account SET money=money-500 WHERE NAME='\u5f20\u4e09'; \u51fa\u9519\u4e86... -- 2.\u674e\u56db\u8d26\u6237+500 UPDATE account SET money=money+500 WHERE NAME='\u674e\u56db';","title":"\u672a\u7ba1\u7406\u4e8b\u52a1"},{"location":"MySQL/#_88","text":"/* \u5f00\u542f\u4e8b\u52a1\uff1aSTART TRANSACTION; \u56de\u6eda\u4e8b\u52a1\uff1aROLLBACK; \u63d0\u4ea4\u4e8b\u52a1\uff1aCOMMIT; */ -- \u5f20\u4e09\u7ed9\u674e\u56db\u8f6c\u8d26500\u5143 -- 1.\u5f00\u542f\u4e8b\u52a1 START TRANSACTION; -- 2.\u6267\u884c\u8f6c\u8d26\u7684\u64cd\u4f5c UPDATE account SET money=money-500 WHERE NAME='\u5f20\u4e09'; \u51fa\u9519\u4e86... UPDATE account SET money=money+500 WHERE NAME='\u674e\u56db'; -- 3.\u7ed3\u675f\u4e8b\u52a1 -- 3.1\u56de\u6eda\u4e8b\u52a1 ROLLBACK; -- 3.2\u63d0\u4ea4\u4e8b\u52a1 COMMIT;","title":"\u7ba1\u7406\u4e8b\u52a1"},{"location":"MySQL/#_89","text":"/* \u4e8b\u52a1\u7684\u63d0\u4ea4\u65b9\u5f0f \u67e5\u8be2\u4e8b\u52a1\u63d0\u4ea4\u65b9\u5f0f\uff1aSELECT @@AUTOCOMMIT; -- 1\u4ee3\u8868\u81ea\u52a8\u63d0\u4ea4 0\u4ee3\u8868\u624b\u52a8\u63d0\u4ea4 \u4fee\u6539\u4e8b\u52a1\u63d0\u4ea4\u65b9\u5f0f\uff1aSET @@AUTOCOMMIT=\u6570\u5b57; */ -- \u67e5\u8be2\u4e8b\u52a1\u7684\u63d0\u4ea4\u65b9\u5f0f SELECT @@autocommit ; UPDATE account SET money = 1000 WHERE NAME = '\u5f20\u4e09' ; COMMIT ; -- \u4fee\u6539\u4e8b\u52a1\u7684\u63d0\u4ea4\u65b9\u5f0f SET @@autocommit = 0 ;","title":"\u4e8b\u52a1\u7684\u63d0\u4ea4\u65b9\u5f0f"},{"location":"MySQL/#_90","text":"/* \u4e8b\u52a1\u7684\u9694\u79bb\u7ea7\u522b \u67e5\u8be2\u9694\u79bb\u7ea7\u522b\uff1aSELECT @@TX_ISOLATION; \u4fee\u6539\u9694\u79bb\u7ea7\u522b\uff1aSET GLOBAL TRANSACTION ISOLATION LEVEL \u7ea7\u522b\u5b57\u7b26\u4e32; */ -- \u67e5\u8be2\u4e8b\u52a1\u9694\u79bb\u7ea7\u522b SELECT @@tx_isolation ; -- \u4fee\u6539\u4e8b\u52a1\u9694\u79bb\u7ea7\u522b SET GLOBAL TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;","title":"\u67e5\u8be2\u548c\u4fee\u6539\u4e8b\u52a1\u7684\u9694\u79bb\u7ea7\u522b"},{"location":"MySQL/#_91","text":"/* \u810f\u8bfb\u7684\u95ee\u9898\u6f14\u793a\u548c\u89e3\u51b3 \u810f\u8bfb\uff1a\u4e00\u4e2a\u4e8b\u52a1\u4e2d\u8bfb\u53d6\u5230\u4e86\u5176\u4ed6\u4e8b\u52a1\u672a\u63d0\u4ea4\u7684\u6570\u636e */ -- \u8bbe\u7f6e\u4e8b\u52a1\u9694\u79bb\u7ea7\u522b\u4e3aread uncommitted SET GLOBAL TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED; -- \u5f00\u542f\u4e8b\u52a1 START TRANSACTION; -- \u8f6c\u8d26 UPDATE account SET money = money-500 WHERE NAME='\u5f20\u4e09'; UPDATE account SET money = money+500 WHERE NAME='\u674e\u56db'; -- \u67e5\u8be2account\u8868 SELECT * FROM account; -- \u56de\u6eda ROLLBACK;","title":"\u810f\u8bfb\u7684\u95ee\u9898\u6f14\u793a\u548c\u89e3\u51b3_\u7a97\u53e31"},{"location":"MySQL/#_92","text":"-- \u67e5\u8be2\u4e8b\u52a1\u9694\u79bb\u7ea7\u522b SELECT @@tx_isolation ; -- \u5f00\u542f\u4e8b\u52a1 START TRANSACTION; -- \u67e5\u8be2account\u8868 SELECT * FROM account;","title":"\u810f\u8bfb\u7684\u95ee\u9898\u6f14\u793a\u548c\u89e3\u51b3_\u7a97\u53e32"},{"location":"MySQL/#_93","text":"/* \u4e0d\u53ef\u91cd\u590d\u8bfb\u7684\u95ee\u9898\u6f14\u793a\u548c\u89e3\u51b3 \u4e0d\u53ef\u91cd\u590d\u8bfb\uff1a\u4e00\u4e2a\u4e8b\u52a1\u4e2d\u8bfb\u53d6\u5230\u4e86\u5176\u4ed6\u4e8b\u52a1\u5df2\u63d0\u4ea4\u7684\u6570\u636e */ -- \u8bbe\u7f6e\u4e8b\u52a1\u9694\u79bb\u7ea7\u522b\u4e3aread committed SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED; SET GLOBAL TRANSACTION ISOLATION LEVEL REPEATABLE READ; -- \u5f00\u542f\u4e8b\u52a1 START TRANSACTION; -- \u8f6c\u8d26 UPDATE account SET money = money-500 WHERE NAME='\u5f20\u4e09'; UPDATE account SET money = money+500 WHERE NAME='\u674e\u56db'; -- \u67e5\u8be2account\u8868 SELECT * FROM account; -- \u63d0\u4ea4\u4e8b\u52a1 COMMIT;","title":"\u4e0d\u53ef\u91cd\u590d\u8bfb\u7684\u95ee\u9898\u6f14\u793a\u548c\u89e3\u51b3_\u7a97\u53e31"},{"location":"MySQL/#_94","text":"-- \u67e5\u8be2\u9694\u79bb\u7ea7\u522b SELECT @@tx_isolation ; -- \u5f00\u542f\u4e8b\u52a1 START TRANSACTION; -- \u67e5\u8be2account\u8868 SELECT * FROM account; -- \u63d0\u4ea4\u4e8b\u52a1 COMMIT;","title":"\u4e0d\u53ef\u91cd\u590d\u8bfb\u7684\u95ee\u9898\u6f14\u793a\u548c\u89e3\u51b3_\u7a97\u53e32"},{"location":"MySQL/#_95","text":"/* \u5e7b\u8bfb\u7684\u95ee\u9898\u6f14\u793a\u548c\u89e3\u51b3 \u5e7b\u8bfb\uff1a \u67e5\u8be2\u67d0\u8bb0\u5f55\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u5b58\u5728 \u51c6\u5907\u63d2\u5165\u6b64\u8bb0\u5f55\uff0c\u4f46\u6267\u884c\u63d2\u5165\u65f6\u53d1\u73b0\u6b64\u8bb0\u5f55\u5df2\u5b58\u5728\uff0c\u65e0\u6cd5\u63d2\u5165 \u6216\u67d0\u8bb0\u5f55\u4e0d\u5b58\u5728\u6267\u884c\u5220\u9664\uff0c\u5374\u53d1\u73b0\u5220\u9664\u6210\u529f */ -- \u8bbe\u7f6e\u9694\u79bb\u7ea7\u522b\u4e3arepeatable read SET GLOBAL TRANSACTION ISOLATION LEVEL REPEATABLE READ; SET GLOBAL TRANSACTION ISOLATION LEVEL SERIALIZABLE; -- \u5f00\u542f\u4e8b\u52a1 START TRANSACTION; -- \u6dfb\u52a0\u8bb0\u5f55 INSERT INTO account VALUES (4,'\u8d75\u516d',2000); -- \u67e5\u8be2account\u8868 SELECT * FROM account; -- \u63d0\u4ea4\u4e8b\u52a1 COMMIT;","title":"\u5e7b\u8bfb\u7684\u95ee\u9898\u6f14\u793a\u548c\u89e3\u51b3_\u7a97\u53e31"},{"location":"MySQL/#_96","text":"-- \u67e5\u8be2\u9694\u79bb\u7ea7\u522b SELECT @@tx_isolation ; -- \u5f00\u542f\u4e8b\u52a1 START TRANSACTION; -- \u67e5\u8be2account\u8868 SELECT * FROM account; -- \u6dfb\u52a0 INSERT INTO account VALUES (3,'\u738b\u4e94',2000);","title":"\u5e7b\u8bfb\u7684\u95ee\u9898\u6f14\u793a\u548c\u89e3\u51b3_\u7a97\u53e32"},{"location":"MySQL/#day04","text":"","title":"day04"},{"location":"MySQL/#01_3","text":"","title":"01\u5b58\u50a8\u5f15\u64ce"},{"location":"MySQL/#_97","text":"/* \u67e5\u8be2\u6570\u636e\u5e93\u652f\u6301\u7684\u5b58\u50a8\u5f15\u64ce \u6807\u51c6\u8bed\u6cd5 SHOW ENGINES; */","title":"\u67e5\u8be2\u6570\u636e\u5e93\u652f\u6301\u7684\u5b58\u50a8\u5f15\u64ce"},{"location":"MySQL/#_98","text":"/* \u67e5\u8be2\u67d0\u4e2a\u6570\u636e\u5e93\u4e2d\u6240\u6709\u6570\u636e\u8868\u7684\u5b58\u50a8\u5f15\u64ce \u6807\u51c6\u8bed\u6cd5 SHOW TABLE STATUS FROM \u6570\u636e\u5e93\u540d\u79f0; */","title":"\u67e5\u8be2\u67d0\u4e2a\u6570\u636e\u5e93\u4e2d\u6240\u6709\u6570\u636e\u8868\u7684\u5b58\u50a8\u5f15\u64ce"},{"location":"MySQL/#_99","text":"/* \u67e5\u8be2\u67d0\u4e2a\u6570\u636e\u5e93\u4e2d\u67d0\u4e2a\u8868\u7684\u5b58\u50a8\u5f15\u64ce \u6807\u51c6\u8bed\u6cd5 SHOW TABLE STATUS FROM \u6570\u636e\u5e93\u540d\u79f0 WHERE NAME = '\u6570\u636e\u8868\u540d\u79f0'; */","title":"\u67e5\u8be2\u67d0\u4e2a\u6570\u636e\u5e93\u4e2d\u67d0\u4e2a\u8868\u7684\u5b58\u50a8\u5f15\u64ce"},{"location":"MySQL/#_100","text":"/* \u521b\u5efa\u6570\u636e\u8868\u6307\u5b9a\u5b58\u50a8\u5f15\u64ce \u6807\u51c6\u8bed\u6cd5 CREATE TABLE \u8868\u540d( \u5217\u540d,\u6570\u636e\u7c7b\u578b, ... )ENGINE = \u5f15\u64ce\u540d\u79f0; */","title":"\u521b\u5efa\u6570\u636e\u8868\u6307\u5b9a\u5b58\u50a8\u5f15\u64ce"},{"location":"MySQL/#_101","text":"/* \u4fee\u6539\u6570\u636e\u8868\u7684\u5b58\u50a8\u5f15\u64ce \u6807\u51c6\u8bed\u6cd5 ALTER TABLE \u8868\u540d ENGINE = \u5f15\u64ce\u540d\u79f0; */ -- \u4fee\u6539engine_test\u8868\u7684\u5f15\u64ce\u4e3aInnoDB ALTER TABLE engine_test ENGINE = INNODB; -- \u67e5\u8be2engine_test\u8868\u7684\u5b58\u50a8\u5f15\u64ce SHOW TABLE STATUS FROM db11 WHERE NAME = ' engine_test ' ;","title":"\u4fee\u6539\u6570\u636e\u8868\u7684\u5b58\u50a8\u5f15\u64ce"},{"location":"MySQL/#02_3","text":"","title":"02\u7d22\u5f15"},{"location":"MySQL/#_102","text":"-- \u521b\u5efadb12\u6570\u636e\u5e93 CREATE DATABASE db12; -- \u4f7f\u7528db12\u6570\u636e\u5e93 USE db12; -- \u521b\u5efastudent\u8868 CREATE TABLE student( id INT PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(10), age INT, score INT ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO student VALUES (NULL,'\u5f20\u4e09',23,98),(NULL,'\u674e\u56db',24,95), (NULL,'\u738b\u4e94',25,96),(NULL,'\u8d75\u516d',26,94),(NULL,'\u5468\u4e03',27,99);","title":"\u7d22\u5f15\u6570\u636e\u51c6\u5907"},{"location":"MySQL/#_103","text":"","title":"\u521b\u5efa\u548c\u67e5\u8be2\u7d22\u5f15"},{"location":"MySQL/#_104","text":"/* \u521b\u5efa\u7d22\u5f15 \u6807\u51c6\u8bed\u6cd5 CREATE [UNIQUE|FULLTEXT] INDEX \u7d22\u5f15\u540d\u79f0 [USING \u7d22\u5f15\u7c7b\u578b] -- \u9ed8\u8ba4\u662fB+TREE ON \u8868\u540d(\u5217\u540d...); */ -- \u4e3astudent\u8868\u4e2d\u7684name\u5217\u521b\u5efa\u4e00\u4e2a\u666e\u901a\u7d22\u5f15 CREATE INDEX idx_name ON student(NAME); -- \u4e3astudent\u8868\u4e2d\u7684age\u5217\u521b\u5efa\u4e00\u4e2a\u552f\u4e00\u7d22\u5f15 CREATE UNIQUE INDEX idx_age ON student(age);","title":"\u521b\u5efa\u7d22\u5f15"},{"location":"MySQL/#_105","text":"/* \u67e5\u8be2\u7d22\u5f15 \u6807\u51c6\u8bed\u6cd5 SHOW INDEX FROM \u8868\u540d; */ -- \u67e5\u8be2student\u8868\u4e2d\u7684\u7d22\u5f15 SHOW INDEX FROM student ;","title":"\u67e5\u8be2\u7d22\u5f15"},{"location":"MySQL/#alter","text":"/* ALTER\u6dfb\u52a0\u7d22\u5f15 -- \u666e\u901a\u7d22\u5f15 ALTER TABLE \u8868\u540d ADD INDEX \u7d22\u5f15\u540d\u79f0(\u5217\u540d); -- \u7ec4\u5408\u7d22\u5f15 ALTER TABLE \u8868\u540d ADD INDEX \u7d22\u5f15\u540d\u79f0(\u5217\u540d1,\u5217\u540d2,...); -- \u4e3b\u952e\u7d22\u5f15 ALTER TABLE \u8868\u540d ADD PRIMARY KEY(\u4e3b\u952e\u5217\u540d); -- \u5916\u952e\u7d22\u5f15(\u6dfb\u52a0\u5916\u952e\u7ea6\u675f\uff0c\u5c31\u662f\u5916\u952e\u7d22\u5f15) ALTER TABLE \u8868\u540d ADD CONSTRAINT \u5916\u952e\u540d FOREIGN KEY (\u672c\u8868\u5916\u952e\u5217\u540d) REFERENCES \u4e3b\u8868\u540d(\u4e3b\u952e\u5217\u540d); -- \u552f\u4e00\u7d22\u5f15 ALTER TABLE \u8868\u540d ADD UNIQUE \u7d22\u5f15\u540d\u79f0(\u5217\u540d); -- \u5168\u6587\u7d22\u5f15 ALTER TABLE \u8868\u540d ADD FULLTEXT \u7d22\u5f15\u540d\u79f0(\u5217\u540d); */ -- \u4e3astudent\u8868\u4e2dname\u5217\u6dfb\u52a0\u5168\u6587\u7d22\u5f15 ALTER TABLE student ADD FULLTEXT idx_fulltext_name(NAME); -- \u67e5\u8be2student\u8868\u7684\u7d22\u5f15 SHOW INDEX FROM student ;","title":"ALTER\u6dfb\u52a0\u7d22\u5f15"},{"location":"MySQL/#_106","text":"/* \u5220\u9664\u7d22\u5f15 \u6807\u51c6\u8bed\u6cd5 DROP INDEX \u7d22\u5f15\u540d\u79f0 ON \u8868\u540d; */ -- \u5220\u9664idx_name\u7d22\u5f15 DROP INDEX idx_name ON student;","title":"\u5220\u9664\u7d22\u5f15"},{"location":"MySQL/#_107","text":"-- \u521b\u5efa product\u5546\u54c1\u8868 CREATE TABLE product ( id INT PRIMARY KEY AUTO_INCREMENT , -- \u5546\u54c1 id NAME VARCHAR ( 10 ), -- \u5546\u54c1\u540d\u79f0 price INT -- \u5546\u54c1\u4ef7\u683c ); -- \u5b9a\u4e49\u5b58\u50a8\u51fd\u6570\uff0c\u751f\u6210\u957f\u5ea6\u4e3a 10 \u7684\u968f\u673a\u5b57\u7b26\u4e32\u5e76\u8fd4\u56de DELIMITER $ CREATE FUNCTION rand_string () RETURNS VARCHAR ( 255 ) BEGIN DECLARE big_str VARCHAR ( 100 ) DEFAULT 'abcdefghijklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ' ; DECLARE small_str VARCHAR ( 255 ) DEFAULT '' ; DECLARE i INT DEFAULT 1 ; WHILE i <= 10 DO SET small_str = CONCAT ( small_str , SUBSTRING ( big_str , FLOOR ( 1 + RAND () * 52 ), 1 )); SET i = i + 1 ; END WHILE ; RETURN small_str ; END $ DELIMITER ; -- \u5b9a\u4e49\u5b58\u50a8\u8fc7\u7a0b\uff0c\u6dfb\u52a0 100 \u4e07\u6761\u6570\u636e\u5230 product\u8868\u4e2d DELIMITER $ CREATE PROCEDURE pro_test () BEGIN DECLARE num INT DEFAULT 1 ; WHILE num <= 1000000 DO INSERT INTO product VALUES ( NULL , rand_string (), num ); SET num = num + 1 ; END WHILE ; END $ DELIMITER ; -- \u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b CALL pro_test (); -- \u67e5\u8be2\u603b\u8bb0\u5f55\u6761\u6570 SELECT COUNT ( * ) FROM product ; -- \u67e5\u8be2 product\u8868\u7684\u7d22\u5f15 SHOW INDEX FROM product ; -- \u67e5\u8be2 name\u4e3aOkIKDLVwtG\u7684\u6570\u636e ( 0.049 ) SELECT * FROM product WHERE NAME = 'OkIKDLVwtG' ; -- \u901a\u8fc7 id\u5217\u67e5\u8be2OkIKDLVwtG\u7684\u6570\u636e ( 1 \u6beb\u79d2 ) SELECT * FROM product WHERE id = 999998 ; -- \u4e3a name\u5217\u6dfb\u52a0\u7d22\u5f15 ALTER TABLE product ADD INDEX idx_name ( NAME ); -- \u67e5\u8be2 name\u4e3aOkIKDLVwtG\u7684\u6570\u636e ( 0.001 ) SELECT * FROM product WHERE NAME = 'OkIKDLVwtG' ; /* \u8303\u56f4\u67e5\u8be2 */ -- \u67e5\u8be2\u4ef7\u683c\u4e3a 800 ~ 1000 \u4e4b\u95f4\u7684\u6240\u6709\u6570\u636e ( 0.052 ) SELECT * FROM product WHERE price BETWEEN 800 AND 1000 ; /* \u6392\u5e8f\u67e5\u8be2 */ -- \u67e5\u8be2\u4ef7\u683c\u4e3a 800 ~ 1000 \u4e4b\u95f4\u7684\u6240\u6709\u6570\u636e , \u964d\u5e8f\u6392\u5217 ( 0.083 ) SELECT * FROM product WHERE price BETWEEN 800 AND 1000 ORDER BY price DESC ; -- \u4e3a price\u5217\u6dfb\u52a0\u7d22\u5f15 ALTER TABLE product ADD INDEX idx_price ( price ); -- \u67e5\u8be2\u4ef7\u683c\u4e3a 800 ~ 1000 \u4e4b\u95f4\u7684\u6240\u6709\u6570\u636e ( 0.011 ) SELECT * FROM product WHERE price BETWEEN 800 AND 1000 ; -- \u67e5\u8be2\u4ef7\u683c\u4e3a 800 ~ 1000 \u4e4b\u95f4\u7684\u6240\u6709\u6570\u636e , \u964d\u5e8f\u6392\u5217 ( 0.001 ) SELECT * FROM product WHERE price BETWEEN 800 AND 1000 ORDER BY price DESC ;","title":"\u7d22\u5f15\u7684\u6548\u7387\u6d4b\u8bd5"},{"location":"MySQL/#03_3","text":"","title":"03\u9501"},{"location":"MySQL/#innodb","text":"-- \u521b\u5efadb13\u6570\u636e\u5e93 CREATE DATABASE db13; -- \u4f7f\u7528db13\u6570\u636e\u5e93 USE db13; -- \u521b\u5efastudent\u8868 CREATE TABLE student( id INT PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(10), age INT, score INT ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO student VALUES (NULL,'\u5f20\u4e09',23,99),(NULL,'\u674e\u56db',24,95), (NULL,'\u738b\u4e94',25,98),(NULL,'\u8d75\u516d',26,97);","title":"InnoDB\u9501\u7684\u6570\u636e\u51c6\u5907"},{"location":"MySQL/#innodb_1","text":"-- \u7a97\u53e31 /* \u5171\u4eab\u9501\uff1a\u6570\u636e\u53ef\u4ee5\u88ab\u591a\u4e2a\u4e8b\u52a1\u67e5\u8be2\uff0c\u4f46\u662f\u4e0d\u80fd\u4fee\u6539 \u521b\u5efa\u9501\u7684\u683c\u5f0f SELECT\u8bed\u53e5 LOCK IN SHARE MODE; */ -- \u5f00\u542f\u4e8b\u52a1 START TRANSACTION; -- \u67e5\u8be2id\u4e3a1\u7684\u6570\u636e\u8bb0\u5f55\u3002\u5e76\u4e14\u52a0\u5165\u5171\u4eab\u9501 SELECT * FROM student WHERE id=1 LOCK IN SHARE MODE; -- \u67e5\u8be2\u5206\u6570\u4e3a99\u7684\u6570\u636e\u8bb0\u5f55\u3002\u5e76\u4e14\u52a0\u5165\u5171\u4eab\u9501 SELECT * FROM student WHERE score=99 LOCK IN SHARE MODE; -- \u63d0\u4ea4\u4e8b\u52a1 COMMIT;","title":"InnoDB\u5171\u4eab\u9501_\u7a97\u53e31"},{"location":"MySQL/#innodb_2","text":"-- \u5f00\u542f\u4e8b\u52a1 START TRANSACTION; -- \u67e5\u8be2id\u4e3a1\u7684\u6570\u636e\u8bb0\u5f55\u3002(\u666e\u901a\u67e5\u8be2\u6ca1\u95ee\u9898) SELECT * FROM student WHERE id=1; -- \u67e5\u8be2id\u4e3a1\u7684\u6570\u636e\u8bb0\u5f55\u3002\u5e76\u4e14\u52a0\u5165\u5171\u4eab\u9501(\u5171\u4eab\u9501\u548c\u5171\u4eab\u9501\u662f\u517c\u5bb9\u7684) SELECT * FROM student WHERE id=1 LOCK IN SHARE MODE; -- \u4fee\u6539id\u4e3a1\u7684\u6570\u636e\u3002\u4fee\u6539\u59d3\u540d\u4e3a\u5f20\u4e09\u4e09(\u4fee\u6539\u5931\u8d25\uff0c\u4f1a\u51fa\u73b0\u9501\u7684\u60c5\u51b5\u3002\u53ea\u6709\u7a97\u53e31\u63d0\u4ea4\u4e8b\u52a1\u540e\uff0c\u624d\u80fd\u4fee\u6539\u6210\u529f) UPDATE student SET NAME='\u5f20\u4e09\u4e09' WHERE id=1; -- \u4fee\u6539id\u4e3a2\u7684\u6570\u636e\u3002\u4fee\u6539\u59d3\u540d\u4e3a\u674e\u56db\u56db(\u4fee\u6539\u6210\u529f\u3002InnoDB\u5f15\u64ce\u9ed8\u8ba4\u662f\u884c\u9501) UPDATE student SET NAME='\u674e\u56db\u56db' WHERE id=2; -- \u4fee\u6539id\u4e3a3\u7684\u6570\u636e\u3002\u4fee\u6539\u59d3\u540d\u4e3a\u738b\u4e94\u4e94(\u6ce8\u610f\uff1aInnoDB\u5f15\u64ce\u5982\u679c\u4e0d\u91c7\u7528\u5e26\u7d22\u5f15\u7684\u5217\uff0c\u5219\u4f1a\u63d0\u5347\u4e3a\u8868\u9501) UPDATE student SET NAME='\u738b\u4e94\u4e94' WHERE id=3; -- \u63d0\u4ea4\u4e8b\u52a1 COMMIT;","title":"InnoDB\u5171\u4eab\u9501_\u7a97\u53e32"},{"location":"MySQL/#innodb_3","text":"-- \u7a97\u53e3 1 /* \u6392\u4ed6\u9501\uff1a\u52a0\u9501\u7684\u6570\u636e\uff0c\u4e0d\u80fd\u88ab\u5176\u4ed6\u4e8b\u52a1\u52a0\u9501\u67e5\u8be2\u6216\u4fee\u6539 \u6392\u4ed6\u9501\u521b\u5efa\u683c\u5f0f SELECT\u8bed\u53e5 FOR UPDATE; */ -- \u5f00\u542f\u4e8b\u52a1 START TRANSACTION ; -- \u67e5\u8be2 id \u4e3a 1 \u7684\u6570\u636e\u8bb0\u5f55\u3002\u5e76\u4e14\u52a0\u5165\u6392\u4ed6\u9501 SELECT * FROM student WHERE id = 1 FOR UPDATE ; -- \u63d0\u4ea4\u4e8b\u52a1 COMMIT ;","title":"InnoDB\u6392\u4ed6\u9501_\u7a97\u53e31"},{"location":"MySQL/#innodb_4","text":"-- \u5f00\u542f\u4e8b\u52a1 START TRANSACTION ; -- \u67e5\u8be2 id \u4e3a 1 \u7684\u6570\u636e\u8bb0\u5f55\u3002 ( \u666e\u901a\u67e5\u8be2\u6ca1\u95ee\u9898 ) SELECT * FROM student WHERE id = 1 ; -- \u67e5\u8be2 id \u4e3a 1 \u7684\u6570\u636e\u8bb0\u5f55\u3002\u5e76\u4e14\u52a0\u5165\u5171\u4eab\u9501 ( \u6392\u4ed6\u9501\u4e0d\u80fd\u548c\u5171\u4eab\u9501\u5171\u5b58 ) SELECT * FROM student WHERE id = 1 LOCK IN SHARE MODE ; -- \u67e5\u8be2 id \u4e3a 1 \u7684\u6570\u636e\u8bb0\u5f55\u3002\u5e76\u4e14\u52a0\u5165\u6392\u4ed6\u9501 ( \u6392\u4ed6\u9501\u548c\u6392\u4ed6\u9501\u4e0d\u80fd\u5171\u5b58 ) SELECT * FROM student WHERE id = 1 FOR UPDATE ; -- \u4fee\u6539 id \u4e3a 1 \u7684\u6570\u636e\u3002\u5c06\u59d3\u540d\u4fee\u6539\u4e3a\u5f20\u4e09\u4e09 ( \u4e0d\u80fd\u4fee\u6539\u3002\u4f1a\u51fa\u73b0\u9501\u7684\u60c5\u51b5\u3002\u53ea\u6709\u7a97\u53e3 1 \u63d0\u4ea4\u4e8b\u52a1\u540e\uff0c\u624d\u80fd\u4fee\u6539\u6210\u529f ) UPDATE student SET NAME = ' \u5f20\u4e09\u4e09 ' WHERE id = 1 ; -- \u63d0\u4ea4\u4e8b\u52a1 COMMIT ;","title":"InnoDB\u6392\u4ed6\u9501_\u7a97\u53e32"},{"location":"MySQL/#myisam","text":"-- \u521b\u5efaproduct\u8868 CREATE TABLE product( id INT PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(20), price INT )ENGINE = MYISAM; -- \u6307\u5b9a\u5b58\u50a8\u5f15\u64ce\u4e3aMyISAM -- \u6dfb\u52a0\u6570\u636e INSERT INTO product VALUES (NULL,'\u534e\u4e3a\u624b\u673a',4999),(NULL,'\u5c0f\u7c73\u624b\u673a',2999), (NULL,'\u82f9\u679c',8999),(NULL,'\u4e2d\u5174',1999);","title":"MYISAM\u9501\u7684\u6570\u636e\u51c6\u5907"},{"location":"MySQL/#myisam_1","text":"/* \u8bfb\u9501\uff1a\u6240\u6709\u8fde\u63a5\u53ea\u80fd\u8bfb\u53d6\u6570\u636e\uff0c\u4e0d\u80fd\u4fee\u6539 \u52a0\u9501 LOCK TABLE \u8868\u540d READ; \u89e3\u9501(\u5c06\u5f53\u524d\u4f1a\u8bdd\u6240\u6709\u7684\u8868\u8fdb\u884c\u89e3\u9501) UNLOCK TABLES; */ -- \u4e3aproduct\u8868\u6dfb\u52a0\u8bfb\u9501 LOCK TABLE product READ; -- \u67e5\u8be2product\u8868(\u67e5\u8be2\u6210\u529f) SELECT * FROM product; -- \u5c06id\u4e3a1\u7684\u4ef7\u683c\u4fee\u6539\u4e3a5999(\u4e0d\u80fd\u4fee\u6539) UPDATE product SET price=5999 WHERE id=1; -- \u89e3\u9501 UNLOCK TABLES;","title":"MYISAM\u8bfb\u9501_\u7a97\u53e31"},{"location":"MySQL/#myisam_2","text":"-- \u67e5\u8be2product\u8868(\u67e5\u8be2\u6210\u529f) SELECT * FROM product; -- \u5c06id\u4e3a1\u7684\u4ef7\u683c\u4fee\u6539\u4e3a5999(\u4e0d\u80fd\u4fee\u6539\u3002\u53ea\u6709\u7a97\u53e31\u89e3\u9501\u540e\u624d\u80fd\u4fee\u6539\u6210\u529f) UPDATE product SET price=5999 WHERE id=1;","title":"MYISAM\u8bfb\u9501_\u7a97\u53e32"},{"location":"MySQL/#myisam_3","text":"/* \u5199\u9501\uff1a\u5176\u4ed6\u8fde\u63a5\u4e0d\u80fd\u67e5\u8be2\u548c\u4fee\u6539\u6570\u636e \u52a0\u9501 LOCK TABLE \u8868\u540d WRITE; \u89e3\u9501(\u5c06\u5f53\u524d\u4f1a\u8bdd\u6240\u6709\u7684\u8868\u8fdb\u884c\u89e3\u9501) UNLOCK TABLES; */ -- \u4e3a product\u8868\u6dfb\u52a0\u5199\u9501 LOCK TABLE product WRITE ; -- \u67e5\u8be2 product\u8868 ( \u67e5\u8be2\u6210\u529f ) SELECT * FROM product ; -- \u4fee\u6539 id\u4e3a2\u7684\u4ef7\u683c\u4e3a3999 ( \u4fee\u6539\u6210\u529f ) UPDATE product SET price = 3999 WHERE id = 2 ; -- \u89e3\u9501 UNLOCK TABLES ;","title":"MYISAM\u5199\u9501_\u7a97\u53e31"},{"location":"MySQL/#myisam_4","text":"-- \u67e5\u8be2product\u8868\uff08\u67e5\u8be2\u5931\u8d25\u3002\u53ea\u6709\u7a97\u53e31\u89e3\u9501\u540e\uff0c\u624d\u80fd\u67e5\u8be2\u6210\u529f\uff09 SELECT * FROM product; -- \u4fee\u6539id\u4e3a2\u7684\u4ef7\u683c\u4e3a1999(\u4fee\u6539\u5931\u8d25\u3002\u53ea\u6709\u7a97\u53e31\u89e3\u9501\u540e\uff0c\u624d\u80fd\u4fee\u6539\u6210\u529f) UPDATE product SET price=1999 WHERE id=2;","title":"MYISAM\u5199\u9501_\u7a97\u53e32"},{"location":"MySQL/#_108","text":"-- \u521b\u5efacity\u8868 CREATE TABLE city( id INT PRIMARY KEY AUTO_INCREMENT, -- \u57ce\u5e02id NAME VARCHAR(20), -- \u57ce\u5e02\u540d\u79f0 VERSION INT -- \u7248\u672c\u53f7 ); -- \u6dfb\u52a0\u6570\u636e INSERT INTO city VALUES (NULL,'\u5317\u4eac',1),(NULL,'\u4e0a\u6d77',1),(NULL,'\u5e7f\u5dde',1),(NULL,'\u6df1\u5733',1); -- \u5c06\u5317\u4eac\u4fee\u6539\u4e3a\u5317\u4eac\u5e02 -- 1.\u5c06\u5317\u4eac\u7684\u7248\u672c\u53f7\u8bfb\u53d6\u51fa\u6765 SELECT VERSION FROM city WHERE NAME='\u5317\u4eac'; -- 1 -- 2.\u4fee\u6539\u5317\u4eac\u4e3a\u5317\u4eac\u5e02\uff0c\u7248\u672c\u53f7+1.\u5e76\u5bf9\u6bd4\u7248\u672c\u53f7\u662f\u5426\u76f8\u540c UPDATE city SET NAME='\u5317\u4eac\u5e02',VERSION=VERSION+1 WHERE NAME='\u5317\u4eac' AND VERSION=1;","title":"\u4e50\u89c2\u9501"},{"location":"MySQL/#04_2","text":"","title":"04\u4e3b\u4ece\u590d\u5236"},{"location":"MySQL/#__5","text":"-- \u4e3b\u670d\u52a1\u5668\u521b\u5efadb1\u6570\u636e\u5e93,\u4ece\u670d\u52a1\u5668\u4f1a\u81ea\u52a8\u540c\u6b65 CREATE DATABASE db1;","title":"\u4e3b\u4ece\u590d\u5236_\u4e3b\u670d\u52a1\u5668\u64cd\u4f5c"},{"location":"MySQL/#__6","text":"-- \u4ece\u670d\u52a1\u5668\u521b\u5efadb2\u6570\u636e\u5e93,\u4e3b\u670d\u52a1\u5668\u4e0d\u4f1a\u81ea\u52a8\u540c\u6b65 CREATE DATABASE db2;","title":"\u4e3b\u4ece\u590d\u5236_\u4ece\u670d\u52a1\u5668\u64cd\u4f5c"},{"location":"MySQL/#05","text":"","title":"05\u8bfb\u5199\u5206\u79bb"},{"location":"MySQL/#_mycat","text":"-- \u521b\u5efa\u5b66\u751f\u8868 CREATE TABLE student( id INT PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(10) ); -- \u67e5\u8be2\u5b66\u751f\u8868 SELECT * FROM student; -- \u6dfb\u52a0\u4e24\u6761\u8bb0\u5f55 INSERT INTO student VALUES (NULL,'\u5f20\u4e09'),(NULL,'\u674e\u56db'); -- \u505c\u6b62\u4e3b\u4ece\u590d\u5236\u540e\uff0c\u6dfb\u52a0\u7684\u6570\u636e\u53ea\u4f1a\u4fdd\u5b58\u5230\u4e3b\u670d\u52a1\u5668\u4e0a\u3002 INSERT INTO student VALUES (NULL,'\u738b\u4e94');","title":"\u8bfb\u5199\u5206\u79bb_mycat\u64cd\u4f5c"},{"location":"MySQL/#__7","text":"-- \u4e3b\u670d\u52a1\u5668\uff1a\u67e5\u8be2\u5b66\u751f\u8868\uff0c\u53ef\u4ee5\u770b\u5230\u6570\u636e SELECT * FROM student;","title":"\u8bfb\u5199\u5206\u79bb_\u4e3b\u670d\u52a1\u5668\u64cd\u4f5c"},{"location":"MySQL/#__8","text":"-- \u4ece\u670d\u52a1\u5668\uff1a\u67e5\u8be2\u5b66\u751f\u8868\uff0c\u53ef\u4ee5\u770b\u5230\u6570\u636e(\u56e0\u4e3a\u6709\u4e3b\u4ece\u590d\u5236) SELECT * FROM student; -- \u4ece\u670d\u52a1\u5668\uff1a\u5220\u9664\u4e00\u6761\u8bb0\u5f55\u3002(\u4e3b\u670d\u52a1\u5668\u5e76\u6ca1\u6709\u5220\u9664\uff0cmycat\u4e2d\u95f4\u4ef6\u67e5\u8be2\u7684\u7ed3\u679c\u662f\u4ece\u670d\u52a1\u5668\u7684\u6570\u636e) DELETE FROM student WHERE id=2;","title":"\u8bfb\u5199\u5206\u79bb_\u4ece\u670d\u52a1\u5668\u64cd\u4f5c"},{"location":"MySQL/#06","text":"","title":"06\u6c34\u5e73\u62c6\u5206"},{"location":"MySQL/#_mycat_1","text":"-- \u521b\u5efa product \u8868 CREATE TABLE product ( id INT PRIMARY KEY AUTO_INCREMENT , NAME VARCHAR ( 20 ) , price INT ) ; -- \u6dfb\u52a0 6 \u6761\u6570\u636e INSERT INTO product ( id , NAME , price ) VALUES ( NEXT VALUE FOR MYCATSEQ_GLOBAL , ' \u82f9\u679c\u624b\u673a ' , 6999 ) ; INSERT INTO product ( id , NAME , price ) VALUES ( NEXT VALUE FOR MYCATSEQ_GLOBAL , ' \u534e\u4e3a\u624b\u673a ' , 5999 ) ; INSERT INTO product ( id , NAME , price ) VALUES ( NEXT VALUE FOR MYCATSEQ_GLOBAL , ' \u4e09\u661f\u624b\u673a ' , 4999 ) ; INSERT INTO product ( id , NAME , price ) VALUES ( NEXT VALUE FOR MYCATSEQ_GLOBAL , ' \u5c0f\u7c73\u624b\u673a ' , 3999 ) ; INSERT INTO product ( id , NAME , price ) VALUES ( NEXT VALUE FOR MYCATSEQ_GLOBAL , ' \u4e2d\u5174\u624b\u673a ' , 2999 ) ; INSERT INTO product ( id , NAME , price ) VALUES ( NEXT VALUE FOR MYCATSEQ_GLOBAL , ' OOPO\u624b\u673a ' , 1999 ) ; -- \u67e5\u8be2 product \u8868 SELECT * FROM product ;","title":"\u6c34\u5e73\u62c6\u5206_mycat\u64cd\u4f5c"},{"location":"MySQL/#__9","text":"-- \u5728\u4e0d\u540c\u6570\u636e\u5e93\u4e2d\u67e5\u8be2product\u8868 SELECT * FROM product;","title":"\u6c34\u5e73\u62c6\u5206_\u4e3b\u670d\u52a1\u5668\u64cd\u4f5c"},{"location":"MySQL/#__10","text":"-- \u5728\u4e0d\u540c\u6570\u636e\u5e93\u4e2d\u67e5\u8be2product\u8868 SELECT * FROM product;","title":"\u6c34\u5e73\u62c6\u5206_\u4ece\u670d\u52a1\u5668\u64cd\u4f5c"},{"location":"MySQL/#07","text":"","title":"07\u5782\u76f4\u62c6\u5206"},{"location":"MySQL/#_mycat_2","text":"-- \u521b\u5efa dog \u8868 CREATE TABLE dog ( id INT PRIMARY KEY AUTO_INCREMENT , NAME VARCHAR ( 10 ) ) ; -- \u6dfb\u52a0\u6570\u636e INSERT INTO dog ( id , NAME ) VALUES ( NEXT VALUE FOR MYCATSEQ_GLOBAL , ' \u54c8\u58eb\u5947 ' ) ; -- \u67e5\u8be2 dog \u8868 SELECT * FROM dog ; -- \u521b\u5efa cat \u8868 CREATE TABLE cat ( id INT PRIMARY KEY AUTO_INCREMENT , NAME VARCHAR ( 10 ) ) ; -- \u6dfb\u52a0\u6570\u636e INSERT INTO cat ( id , NAME ) VALUES ( NEXT VALUE FOR MYCATSEQ_GLOBAL , ' \u6ce2\u65af\u732b ' ) ; -- \u67e5\u8be2 cat \u8868 SELECT * FROM cat ; -- \u521b\u5efa apple \u8868 CREATE TABLE apple ( id INT PRIMARY KEY AUTO_INCREMENT , NAME VARCHAR ( 10 ) ) ; -- \u6dfb\u52a0\u6570\u636e INSERT INTO apple ( id , NAME ) VALUES ( NEXT VALUE FOR MYCATSEQ_GLOBAL , ' \u7ea2\u5bcc\u58eb ' ) ; -- \u67e5\u8be2 apple \u8868 SELECT * FROM apple ; -- \u521b\u5efa banana \u8868 CREATE TABLE banana ( id INT PRIMARY KEY AUTO_INCREMENT , NAME VARCHAR ( 10 ) ) ; -- \u6dfb\u52a0\u6570\u636e INSERT INTO banana ( id , NAME ) VALUES ( NEXT VALUE FOR MYCATSEQ_GLOBAL , ' \u9999\u8549 ' ) ; -- \u67e5\u8be2 banana \u8868 SELECT * FROM banana ;","title":"\u5782\u76f4\u62c6\u5206_mycat\u64cd\u4f5c"},{"location":"MySQL/#__11","text":"-- \u67e5\u8be2dog\u8868 SELECT * FROM dog; -- \u67e5\u8be2cat\u8868 SELECT * FROM cat; -- \u67e5\u8be2apple\u8868 SELECT * FROM apple; -- \u67e5\u8be2banana\u8868 SELECT * FROM banana;","title":"\u5782\u76f4\u62c6\u5206_\u4e3b\u670d\u52a1\u5668\u64cd\u4f5c"},{"location":"MySQL/#__12","text":"-- \u67e5\u8be2dog\u8868 SELECT * FROM dog; -- \u67e5\u8be2cat\u8868 SELECT * FROM cat; -- \u67e5\u8be2apple\u8868 SELECT * FROM apple; -- \u67e5\u8be2banana\u8868 SELECT * FROM banana;","title":"\u5782\u76f4\u62c6\u5206_\u4ece\u670d\u52a1\u5668\u64cd\u4f5c"},{"location":"license/","text":"License \u00b6 MIT License The graduate cap icon made by Freepik from www.flaticon.com is licensed by CC 3.0 BY Support Author \u00b6 Amazon wish list","title":"License"},{"location":"license/#license","text":"MIT License The graduate cap icon made by Freepik from www.flaticon.com is licensed by CC 3.0 BY","title":"License"},{"location":"license/#support_author","text":"Amazon wish list","title":"Support Author"},{"location":"MongoDB/MongoDB/","text":"3\u3001MongoDB\u5feb\u901f\u5165\u95e8 \u00b6 3.1\u3001MongoDB\u7b80\u4ecb \u00b6 MongoDB\u662f\u4e00\u4e2a\u57fa\u4e8e\u5206\u5e03\u5f0f\u6587\u4ef6\u5b58\u50a8\u7684\u6570\u636e\u5e93\u3002\u7531C++\u8bed\u8a00\u7f16\u5199\u3002\u65e8\u5728\u4e3aWEB\u5e94\u7528\u63d0\u4f9b\u53ef\u6269\u5c55\u7684\u9ad8\u6027\u80fd\u6570\u636e\u5b58\u50a8\u89e3\u51b3\u65b9\u6848\u3002 MongoDB\u662f\u4e00\u4e2a\u4ecb\u4e8e\u5173\u7cfb\u6570\u636e\u5e93\u548c\u975e\u5173\u7cfb\u6570\u636e\u5e93\u4e4b\u95f4\u7684\u4ea7\u54c1\uff0c\u662f\u975e\u5173\u7cfb\u6570\u636e\u5e93\u5f53\u4e2d\u529f\u80fd\u6700\u4e30\u5bcc\uff0c\u6700\u50cf\u5173\u7cfb\u6570\u636e\u5e93\u7684\uff0c\u5b83\u652f\u6301\u7684\u6570\u636e\u7ed3\u6784\u975e\u5e38\u677e\u6563\uff0c\u662f\u7c7b\u4f3cjson\u7684bson\u683c\u5f0f\uff0c\u56e0\u6b64\u53ef\u4ee5\u5b58\u50a8\u6bd4\u8f83\u590d\u6742\u7684\u6570\u636e\u7c7b\u578b\u3002 MongoDB\u6700\u5927\u7684\u7279\u70b9\u662f\u5b83\u652f\u6301\u7684\u67e5\u8be2\u8bed\u8a00\u975e\u5e38\u5f3a\u5927\uff0c\u5176\u8bed\u6cd5\u6709\u70b9\u7c7b\u4f3c\u4e8e\u9762\u5411\u5bf9\u8c61\u7684\u67e5\u8be2\u8bed\u8a00\uff0c\u51e0\u4e4e\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u4f3c\u5173\u7cfb\u6570\u636e\u5e93\u5355\u8868\u67e5\u8be2\u7684\u7edd\u5927\u90e8\u5206\u529f\u80fd\uff0c\u800c\u4e14\u8fd8\u652f\u6301\u5bf9\u6570\u636e\u5efa\u7acb\u7d22\u5f15\u3002 \u5b98\u7f51\uff1ahttps://www.mongodb.com 3.2\u3001\u901a\u8fc7docker\u5b89\u88c5MongoDB \u00b6 #\u62c9\u53d6\u955c\u50cf docker pull mongo:4.0.3 #\u521b\u5efa\u5bb9\u5668 docker create --name mongodb-server -p 27018 :27017 -v mongodb-data:/data/db mongo:4.0.3 --auth #\u542f\u52a8\u5bb9\u5668 docker start mongodb-server #\u8fdb\u5165\u5bb9\u5668 docker exec -it mongodb-server /bin/bash #\u8fdb\u5165admin\u6570\u636e\u5e93 mongo use admin #\u6dfb\u52a0\u7ba1\u7406\u5458\uff0c\u5176\u62e5\u6709\u7ba1\u7406\u7528\u6237\u548c\u89d2\u8272\u7684\u6743\u9650 db.createUser ({ user: 'root' , pwd: 'root' , roles: [ { role: \"root\" , db: \"admin\" } ] }) #\u6d4b\u8bd5\uff0c\u53d1\u73b0\u662f\u6ca1\u6709\u6743\u9650\u64cd\u4f5c\u7684 > show dbs 2020 -10-20T09:09:15.543+0000 E QUERY [ js ] Error: listDatabases failed: { \"ok\" : 0 , \"errmsg\" : \"command listDatabases requires authentication\" , \"code\" : 13 , \"codeName\" : \"Unauthorized\" } : #\u8fdb\u884c\u8ba4\u8bc1 mongo -u \"root\" -p \"root\" --authenticationDatabase \"admin\" #\u901a\u8fc7admin\u6dfb\u52a0\u666e\u901a\u7528\u6237 use admin db.createUser ({ user: 'tanhua' , pwd: 'l3SCjl0HvmSkTtiSbN0Swv40spYnHhDV' , roles: [ { role: \"readWrite\" , db: \"tanhua\" } ] }) ; #\u901a\u8fc7tanhua\u7528\u6237\u767b\u5f55\u8fdb\u884c\u6d4b\u8bd5 mongo -u \"tanhua\" -p \"l3SCjl0HvmSkTtiSbN0Swv40spYnHhDV\" --authenticationDatabase \"admin\" #\u6d4b\u8bd5 root@5d848955ff7e:/# mongo -u \"tanhua\" -p \"tanhua123\" --authenticationDatabase \"admin\" MongoDB shell version v4.0.3 connecting to: mongodb://127.0.0.1:27017 Implicit session: session { \"id\" : UUID ( \"6c368269-30f0-4b29-a224-05a38b5847e2\" ) } MongoDB server version: 4 .0.3 > use tanhua switched to db tanhua > db.user.insert ({ id:1,username: 'zhangsan' ,age:20 }) WriteResult ({ \"nInserted\" : 1 }) > db.user.find () { \"_id\" : ObjectId ( \"5f8eb2726e0de0aa9517afd3\" ) , \"id\" : 1 , \"username\" : \"zhangsan\" , \"age\" : 20 } 3.3\u3001MongoDB\u57fa\u672c\u64cd\u4f5c \u00b6 3.3.1\u3001\u57fa\u672c\u6982\u5ff5 \u00b6 \u4e3a\u4e86\u66f4\u597d\u7684\u7406\u89e3\uff0c\u4e0b\u9762\u4e0eSQL\u4e2d\u7684\u6982\u5ff5\u8fdb\u884c\u5bf9\u6bd4\uff1a SQL\u672f\u8bed/\u6982\u5ff5 MongoDB\u672f\u8bed/\u6982\u5ff5 \u89e3\u91ca/\u8bf4\u660e database database \u6570\u636e\u5e93 table collection \u6570\u636e\u5e93\u8868/\u96c6\u5408 row document \u6570\u636e\u8bb0\u5f55\u884c/\u6587\u6863 column field \u6570\u636e\u5b57\u6bb5/\u57df index index \u7d22\u5f15 table joins \u8868\u8fde\u63a5,MongoDB\u4e0d\u652f\u6301 primary key primary key \u4e3b\u952e,MongoDB\u81ea\u52a8\u5c06_id\u5b57\u6bb5\u8bbe\u7f6e\u4e3a\u4e3b\u952e 3.3.2\u3001\u6570\u636e\u5e93\u4ee5\u53ca\u8868\u7684\u64cd\u4f5c \u00b6 #\u67e5\u770b\u6240\u6709\u7684\u6570\u636e\u5e93 > show dbs admin 0 .000GB config 0 .000GB local 0 .000GB #\u901a\u8fc7use\u5173\u952e\u5b57\u5207\u6362\u6570\u636e\u5e93 > use admin switched to db admin #\u521b\u5efa\u6570\u636e\u5e93 #\u8bf4\u660e\uff1a\u5728MongoDB\u4e2d\uff0c\u6570\u636e\u5e93\u662f\u81ea\u52a8\u521b\u5efa\u7684\uff0c\u901a\u8fc7use\u5207\u6362\u5230\u65b0\u6570\u636e\u5e93\u4e2d\uff0c\u8fdb\u884c\u63d2\u5165\u6570\u636e\u5373\u53ef\u81ea\u52a8\u521b\u5efa\u6570\u636e\u5e93 > use testdb switched to db testdb > show dbs #\u5e76\u6ca1\u6709\u521b\u5efa\u6570\u636e\u5e93 admin 0 .000GB config 0 .000GB local 0 .000GB > db.user.insert ({ id:1,name: 'zhangsan' }) #\u63d2\u5165\u6570\u636e WriteResult ({ \"nInserted\" : 1 }) > show dbs admin 0 .000GB config 0 .000GB local 0 .000GB testdb 0 .000GB #\u6570\u636e\u5e93\u81ea\u52a8\u521b\u5efa #\u67e5\u770b\u8868 > show tables user > show collections user > #\u5220\u9664\u96c6\u5408\uff08\u8868\uff09 > db.user.drop () true #\u5982\u679c\u6210\u529f\u5220\u9664\u9009\u5b9a\u96c6\u5408\uff0c\u5219 drop() \u65b9\u6cd5\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false\u3002 #\u5220\u9664\u6570\u636e\u5e93 > use testdb #\u5148\u5207\u6362\u5230\u8981\u5220\u9664\u7684\u6570\u636e\u5e93\u4e2d switched to db testdb > db.dropDatabase () #\u5220\u9664\u6570\u636e\u5e93 { \"dropped\" : \"testdb\" , \"ok\" : 1 } > show dbs admin 0 .000GB config 0 .000GB local 0 .000GB 3.3.3\u3001\u65b0\u589e\u6570\u636e \u00b6 \u5728MongoDB\u4e2d\uff0c\u5b58\u50a8\u7684\u6587\u6863\u7ed3\u6784\u662f\u4e00\u79cd\u7c7b\u4f3c\u4e8ejson\u7684\u7ed3\u6784\uff0c\u79f0\u4e4b\u4e3abson\uff08\u5168\u79f0\u4e3a\uff1aBinary JSON\uff09\u3002 #\u63d2\u5165\u6570\u636e #\u8bed\u6cd5\uff1adb.COLLECTION_NAME.insert(document) > db.user.insert ({ id:1,username: 'zhangsan' ,age:20 }) WriteResult ({ \"nInserted\" : 1 }) > db.user.save ({ id:2,username: 'lisi' ,age:25 }) WriteResult ({ \"nInserted\" : 1 }) > db.user.find () #\u67e5\u8be2\u6570\u636e { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"id\" : 1 , \"username\" : \"zhangsan\" , \"age\" : 20 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 } 3.3.4\u3001\u66f4\u65b0\u6570\u636e \u00b6 update() \u65b9\u6cd5\u7528\u4e8e\u66f4\u65b0\u5df2\u5b58\u5728\u7684\u6587\u6863\u3002\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a db.collection.update ( <query>, <update>, [ upsert: <boolean>, multi: <boolean>, writeConcern: <document> ] ) \u53c2\u6570\u8bf4\u660e\uff1a query : update\u7684\u67e5\u8be2\u6761\u4ef6\uff0c\u7c7b\u4f3csql update\u67e5\u8be2\u5185where\u540e\u9762\u7684\u3002 update : update\u7684\u5bf9\u8c61\u548c\u4e00\u4e9b\u66f4\u65b0\u7684\u64cd\u4f5c\u7b26\uff08\u5982 , inc...\uff09\u7b49\uff0c\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3asql update\u67e5\u8be2\u5185set\u540e\u9762\u7684 upsert : \u53ef\u9009\uff0c\u8fd9\u4e2a\u53c2\u6570\u7684\u610f\u601d\u662f\uff0c\u5982\u679c\u4e0d\u5b58\u5728update\u7684\u8bb0\u5f55\uff0c\u662f\u5426\u63d2\u5165objNew,true\u4e3a\u63d2\u5165\uff0c\u9ed8\u8ba4\u662ffalse\uff0c\u4e0d\u63d2\u5165\u3002 multi : \u53ef\u9009\uff0cmongodb \u9ed8\u8ba4\u662ffalse,\u53ea\u66f4\u65b0\u627e\u5230\u7684\u7b2c\u4e00\u6761\u8bb0\u5f55\uff0c\u5982\u679c\u8fd9\u4e2a\u53c2\u6570\u4e3atrue,\u5c31\u628a\u6309\u6761\u4ef6\u67e5\u51fa\u6765\u591a\u6761\u8bb0\u5f55\u5168\u90e8\u66f4\u65b0\u3002 writeConcern :\u53ef\u9009\uff0c\u629b\u51fa\u5f02\u5e38\u7684\u7ea7\u522b\u3002 > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"id\" : 1 , \"username\" : \"zhangsan\" , \"age\" : 20 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 } > db.user.update ({ id:1 } , { $set : { age:22 }}) #\u66f4\u65b0\u6570\u636e WriteResult ({ \"nMatched\" : 1 , \"nUpserted\" : 0 , \"nModified\" : 1 }) > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"id\" : 1 , \"username\" : \"zhangsan\" , \"age\" : 22 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 } #\u6ce8\u610f\uff1a\u5982\u679c\u8fd9\u6837\u5199\uff0c\u4f1a\u5220\u9664\u6389\u5176\u4ed6\u7684\u5b57\u6bb5 > db.user.update ({ id:1 } , { age:25 }) WriteResult ({ \"nMatched\" : 1 , \"nUpserted\" : 0 , \"nModified\" : 1 }) > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"age\" : 25 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 } #\u66f4\u65b0\u4e0d\u5b58\u5728\u7684\u5b57\u6bb5\uff0c\u4f1a\u65b0\u589e\u5b57\u6bb5 > db.user.update ({ id:2 } , { $set : { sex:1 }}) #\u66f4\u65b0\u6570\u636e > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"age\" : 25 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 , \"sex\" : 1 } #\u66f4\u65b0\u4e0d\u5b58\u5728\u7684\u6570\u636e\uff0c\u9ed8\u8ba4\u4e0d\u4f1a\u65b0\u589e\u6570\u636e > db.user.update ({ id:3 } , { $set : { sex:1 }}) WriteResult ({ \"nMatched\" : 0 , \"nUpserted\" : 0 , \"nModified\" : 0 }) > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"age\" : 25 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 , \"sex\" : 1 } #\u5982\u679c\u8bbe\u7f6e\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3atrue\uff0c\u5c31\u662f\u65b0\u589e\u6570\u636e > db.user.update ({ id:3 } , { $set : { sex:1 }} ,true ) WriteResult ({ \"nMatched\" : 0 , \"nUpserted\" : 1 , \"nModified\" : 0 , \"_id\" : ObjectId ( \"5c08cb281418d073246bc642\" ) }) > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"age\" : 25 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 , \"sex\" : 1 } { \"_id\" : ObjectId ( \"5c08cb281418d073246bc642\" ) , \"id\" : 3 , \"sex\" : 1 } 3.3.5\u3001\u5220\u9664\u6570\u636e \u00b6 \u901a\u8fc7remove()\u65b9\u6cd5\u8fdb\u884c\u5220\u9664\u6570\u636e\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a db.collection.remove ( <query>, { justOne: <boolean>, writeConcern: <document> } ) \u53c2\u6570\u8bf4\u660e\uff1a query :\uff08\u53ef\u9009\uff09\u5220\u9664\u7684\u6587\u6863\u7684\u6761\u4ef6\u3002 justOne : \uff08\u53ef\u9009\uff09\u5982\u679c\u8bbe\u4e3a true \u6216 1\uff0c\u5219\u53ea\u5220\u9664\u4e00\u4e2a\u6587\u6863\uff0c\u5982\u679c\u4e0d\u8bbe\u7f6e\u8be5\u53c2\u6570\uff0c\u6216\u4f7f\u7528\u9ed8\u8ba4\u503c false\uff0c\u5219\u5220\u9664\u6240\u6709\u5339\u914d\u6761\u4ef6\u7684\u6587\u6863\u3002 writeConcern :\uff08\u53ef\u9009\uff09\u629b\u51fa\u5f02\u5e38\u7684\u7ea7\u522b\u3002 \u5b9e\u4f8b\uff1a > db.user.remove ({ age:25 }) WriteResult ({ \"nRemoved\" : 2 }) #\u5220\u9664\u4e862\u6761\u6570\u636e #\u63d2\u51654\u6761\u6d4b\u8bd5\u6570\u636e db.user.insert ({ id:1,username: 'zhangsan' ,age:20 }) db.user.insert ({ id:2,username: 'lisi' ,age:21 }) db.user.insert ({ id:3,username: 'wangwu' ,age:22 }) db.user.insert ({ id:4,username: 'zhaoliu' ,age:22 }) > db.user.remove ({ age:22 } ,true ) WriteResult ({ \"nRemoved\" : 1 }) #\u5220\u9664\u4e861\u6761\u6570\u636e #\u5220\u9664\u6240\u6709\u6570\u636e > db.user.remove ({}) #\u8bf4\u660e\uff1a\u4e3a\u4e86\u7b80\u5316\u64cd\u4f5c\uff0c\u5b98\u65b9\u63a8\u8350\u4f7f\u7528deleteOne()\u4e0edeleteMany()\u8fdb\u884c\u5220\u9664\u6570\u636e\u64cd\u4f5c\u3002 db.user.deleteOne ({ id:1 }) db.user.deleteMany ({}) #\u5220\u9664\u6240\u6709\u6570\u636e 3.3.6\u3001\u67e5\u8be2\u6570\u636e \u00b6 MongoDB \u67e5\u8be2\u6570\u636e\u7684\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a db . user . find ( [ query ] , [ fields ] ) query \uff1a\u53ef\u9009\uff0c\u4f7f\u7528\u67e5\u8be2\u64cd\u4f5c\u7b26\u6307\u5b9a\u67e5\u8be2\u6761\u4ef6 fields \uff1a\u53ef\u9009\uff0c\u4f7f\u7528\u6295\u5f71\u64cd\u4f5c\u7b26\u6307\u5b9a\u8fd4\u56de\u7684\u952e\u3002\u67e5\u8be2\u65f6\u8fd4\u56de\u6587\u6863\u4e2d\u6240\u6709\u952e\u503c\uff0c \u53ea\u9700\u7701\u7565\u8be5\u53c2\u6570\u5373\u53ef\uff08\u9ed8\u8ba4\u7701\u7565\uff09\u3002 \u5982\u679c\u4f60\u9700\u8981\u4ee5\u6613\u8bfb\u7684\u65b9\u5f0f\u6765\u8bfb\u53d6\u6570\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528 pretty() \u65b9\u6cd5\uff0c\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a >db.col.find().pretty() pretty() \u65b9\u6cd5\u4ee5\u683c\u5f0f\u5316\u7684\u65b9\u5f0f\u6765\u663e\u793a\u6240\u6709\u6587\u6863\u3002 \u6761\u4ef6\u67e5\u8be2\uff1a \u64cd\u4f5c \u683c\u5f0f \u8303\u4f8b RDBMS\u4e2d\u7684\u7c7b\u4f3c\u8bed\u53e5 \u7b49\u4e8e {<key>:<value> } db.col.find({\"by\":\"\u9ed1\u9a6c\u7a0b\u5e8f\u5458\"}).pretty() where by = '\u9ed1\u9a6c\u7a0b\u5e8f\u5458' \u5c0f\u4e8e {<key>:{$lt:<value>}} db.col.find({\"likes\":{$lt:50}}).pretty() where likes < 50 \u5c0f\u4e8e\u6216\u7b49\u4e8e {<key>:{$lte:<value>}} db.col.find({\"likes\":{$lte:50}}).pretty() where likes <= 50 \u5927\u4e8e {<key>:{$gt:<value>}} db.col.find({\"likes\":{$gt:50}}).pretty() where likes > 50 \u5927\u4e8e\u6216\u7b49\u4e8e {<key>:{$gte:<value>}} db.col.find({\"likes\":{$gte:50}}).pretty() where likes >= 50 \u4e0d\u7b49\u4e8e {<key>:{$ne:<value>}} db.col.find({\"likes\":{$ne:50}}).pretty() where likes != 50 \u5b9e\u4f8b\uff1a #\u63d2\u5165\u6d4b\u8bd5\u6570\u636e db.user.insert ({ id:1,username: 'zhangsan' ,age:20 }) db.user.insert ({ id:2,username: 'lisi' ,age:21 }) db.user.insert ({ id:3,username: 'wangwu' ,age:22 }) db.user.insert ({ id:4,username: 'zhaoliu' ,age:22 }) db.user.find () #\u67e5\u8be2\u5168\u90e8\u6570\u636e db.user.find ({} , { id:1,username:1 }) #\u53ea\u67e5\u8be2id\u4e0eusername\u5b57\u6bb5 db.user.find () .count () #\u67e5\u8be2\u6570\u636e\u6761\u6570 db.user.find ({ id:1 }) #\u67e5\u8be2id\u4e3a1\u7684\u6570\u636e db.user.find ({ age: { $lte :21 }}) #\u67e5\u8be2\u5c0f\u4e8e\u7b49\u4e8e21\u7684\u6570\u636e db.user.find ({ age: { $lte :21 } , id: { $gte :2 }}) #and\u67e5\u8be2\uff0cage\u5c0f\u4e8e\u7b49\u4e8e21\u5e76\u4e14id\u5927\u4e8e\u7b49\u4e8e2 db.user.find ({ $or : [{ id:1 } , { id:2 }]}) #\u67e5\u8be2id=1 or id=2 #\u5206\u9875\u67e5\u8be2\uff1aSkip()\u8df3\u8fc7\u51e0\u6761\uff0climit()\u67e5\u8be2\u6761\u6570 db.user.find () .limit ( 2 ) .skip ( 1 ) #\u8df3\u8fc71\u6761\u6570\u636e\uff0c\u67e5\u8be22\u6761\u6570\u636e db.user.find () .sort ({ id:-1 }) #\u6309\u7167age\u5012\u5e8f\u6392\u5e8f\uff0c-1\u4e3a\u5012\u5e8f\uff0c1\u4e3a\u6b63\u5e8f 3.4\u3001\u7d22\u5f15 \u00b6 \u7d22\u5f15\u901a\u5e38\u80fd\u591f\u6781\u5927\u7684\u63d0\u9ad8\u67e5\u8be2\u7684\u6548\u7387\uff0c\u5982\u679c\u6ca1\u6709\u7d22\u5f15\uff0cMongoDB\u5728\u8bfb\u53d6\u6570\u636e\u65f6\u5fc5\u987b\u626b\u63cf\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u6587\u4ef6\u5e76\u9009\u53d6\u90a3\u4e9b\u7b26\u5408\u67e5\u8be2\u6761\u4ef6\u7684\u8bb0\u5f55\u3002 \u8fd9\u79cd\u626b\u63cf\u5168\u96c6\u5408\u7684\u67e5\u8be2\u6548\u7387\u662f\u975e\u5e38\u4f4e\u7684\uff0c\u7279\u522b\u5728\u5904\u7406\u5927\u91cf\u7684\u6570\u636e\u65f6\uff0c\u67e5\u8be2\u53ef\u4ee5\u8981\u82b1\u8d39\u51e0\u5341\u79d2\u751a\u81f3\u51e0\u5206\u949f\uff0c\u8fd9\u5bf9\u7f51\u7ad9\u7684\u6027\u80fd\u662f\u975e\u5e38\u81f4\u547d\u7684\u3002 \u7d22\u5f15\u662f\u7279\u6b8a\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7d22\u5f15\u5b58\u50a8\u5728\u4e00\u4e2a\u6613\u4e8e\u904d\u5386\u8bfb\u53d6\u7684\u6570\u636e\u96c6\u5408\u4e2d\uff0c\u7d22\u5f15\u662f\u5bf9\u6570\u636e\u5e93\u8868\u4e2d\u4e00\u5217\u6216\u591a\u5217\u7684\u503c\u8fdb\u884c\u6392\u5e8f\u7684\u4e00\u79cd\u7ed3\u6784 #\u67e5\u770b\u7d22\u5f15 > db.user.getIndexes () [ { \"v\" : 2 , \"key\" : { \"_id\" : 1 } , \"name\" : \"_id_\" , \"ns\" : \"testdb.user\" } ] #\u8bf4\u660e\uff1a1\u8868\u793a\u5347\u5e8f\u521b\u5efa\u7d22\u5f15\uff0c-1\u8868\u793a\u964d\u5e8f\u521b\u5efa\u7d22\u5f15\u3002 #\u521b\u5efa\u7d22\u5f15 > db.user.createIndex ({ 'age' :1 }) { \"createdCollectionAutomatically\" : false, \"numIndexesBefore\" : 1 , \"numIndexesAfter\" : 2 , \"ok\" : 1 } #\u5220\u9664\u7d22\u5f15 db.user.dropIndex ( \"age_1\" ) #\u6216\u8005\uff0c\u5220\u9664\u9664\u4e86_id\u4e4b\u5916\u7684\u7d22\u5f15 db.user.dropIndexes () #\u521b\u5efa\u8054\u5408\u7d22\u5f15 db.user.createIndex ({ 'age' :1, 'id' :-1 }) #\u67e5\u770b\u7d22\u5f15\u5927\u5c0f\uff0c\u5355\u4f4d\uff1a\u5b57\u8282 db.user.totalIndexSize () 3.5\u3001\u6267\u884c\u8ba1\u5212 \u00b6 MongoDB \u67e5\u8be2\u5206\u6790\u53ef\u4ee5\u786e\u4fdd\u6211\u4eec\u5efa\u8bae\u7684\u7d22\u5f15\u662f\u5426\u6709\u6548\uff0c\u662f\u67e5\u8be2\u8bed\u53e5\u6027\u80fd\u5206\u6790\u7684\u91cd\u8981\u5de5\u5177\u3002 #\u63d2\u51651000\u6761\u6570\u636e for ( var i = 1 ; i< 1000 ; i++ ) db.user.insert ({ id:100+i,username: 'name_' +i,age:10+i }) #\u67e5\u770b\u6267\u884c\u8ba1\u5212 > db.user.find ({ age: { $gt :100 } ,id: { $lt :200 }}) .explain () { \"queryPlanner\" : { \"plannerVersion\" : 1 , \"namespace\" : \"testdb.user\" , \"indexFilterSet\" : false, \"parsedQuery\" : { \" $and \" : [ { \"id\" : { \" $lt \" : 200 } } , { \"age\" : { \" $gt \" : 100 } } ] } , \"winningPlan\" : { #\u6700\u4f73\u6267\u884c\u8ba1\u5212 \"stage\" : \"FETCH\" , #\u67e5\u8be2\u65b9\u5f0f\uff0c\u5e38\u89c1\u7684\u6709COLLSCAN/\u5168\u8868\u626b\u63cf\u3001IXSCAN/\u7d22\u5f15\u626b\u63cf\u3001FETCH/\u6839\u636e\u7d22\u5f15\u53bb\u68c0\u7d22\u6587\u6863\u3001SHARD_MERGE/\u5408\u5e76\u5206\u7247\u7ed3\u679c\u3001IDHACK/\u9488\u5bf9_id\u8fdb\u884c\u67e5\u8be2 \"inputStage\" : { \"stage\" : \"IXSCAN\" , \"keyPattern\" : { \"age\" : 1 , \"id\" : -1 } , \"indexName\" : \"age_1_id_-1\" , \"isMultiKey\" : false, \"multiKeyPaths\" : { \"age\" : [ ] , \"id\" : [ ] } , \"isUnique\" : false, \"isSparse\" : false, \"isPartial\" : false, \"indexVersion\" : 2 , \"direction\" : \"forward\" , \"indexBounds\" : { \"age\" : [ \"(100.0, inf.0]\" ] , \"id\" : [ \"(200.0, -inf.0]\" ] } } } , \"rejectedPlans\" : [ ] } , \"serverInfo\" : { \"host\" : \"c493d5ff750a\" , \"port\" : 27017 , \"version\" : \"4.0.3\" , \"gitVersion\" : \"7ea530946fa7880364d88c8d8b6026bbc9ffa48c\" } , \"ok\" : 1 } #\u6d4b\u8bd5\u6ca1\u6709\u4f7f\u7528\u7d22\u5f15 > db.user.find ({ username: 'zhangsan' }) .explain () { \"queryPlanner\" : { \"plannerVersion\" : 1 , \"namespace\" : \"testdb.user\" , \"indexFilterSet\" : false, \"parsedQuery\" : { \"username\" : { \" $eq \" : \"zhangsan\" } } , \"winningPlan\" : { \"stage\" : \"COLLSCAN\" , #\u5168\u8868\u626b\u63cf \"filter\" : { \"username\" : { \" $eq \" : \"zhangsan\" } } , \"direction\" : \"forward\" } , \"rejectedPlans\" : [ ] } , \"serverInfo\" : { \"host\" : \"c493d5ff750a\" , \"port\" : 27017 , \"version\" : \"4.0.3\" , \"gitVersion\" : \"7ea530946fa7880364d88c8d8b6026bbc9ffa48c\" } , \"ok\" : 1 } 3.6\u3001UI\u5ba2\u6237\u7aef\u5de5\u5177 \u00b6 Robo 3T\u662fMongoDB\u7684\u5ba2\u6237\u7aef\u5de5\u5177\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u64cd\u4f5cMongoDB\u3002 \u67e5\u770b\u6570\u636e\uff1a \u6216\u4f7f\u7528Navicat Premium 15\uff1a 4\u3001SpringBoot\u6574\u5408MongoDB \u00b6 spring-data\u5bf9MongoDB\u505a\u4e86\u652f\u6301\uff0c\u4f7f\u7528spring-data-mongodb\u53ef\u4ee5\u7b80\u5316MongoDB\u7684\u64cd\u4f5c\u3002 \u5730\u5740\uff1ahttps://spring.io/projects/spring-data-mongodb 4.1\u3001\u5bfc\u5165\u4f9d\u8d56 \u00b6 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-parent </artifactId> <version> 2.1.0.RELEASE </version> </parent> <groupId> cn.itcast.mongodb </groupId> <artifactId> itcast-mongodb </artifactId> <version> 1.0-SNAPSHOT </version> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-mongodb </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-test </artifactId> <scope> test </scope> </dependency> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> <optional> true </optional> <version> 1.18.4 </version> </dependency> </dependencies> <build> <plugins> <!-- java\u7f16\u8bd1\u63d2\u4ef6 --> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-compiler-plugin </artifactId> <version> 3.2 </version> <configuration> <source> 1.8 </source> <target> 1.8 </target> <encoding> UTF-8 </encoding> </configuration> </plugin> </plugins> </build> </project> 4.2\u3001\u7f16\u5199application.properties\u914d\u7f6e\u6587\u4ef6 \u00b6 # Spring boot application spring.application.name = itcast-mongodb #\u65e0\u8ba4\u8bc1\u4fe1\u606f\u7684\u914d\u7f6e #spring.data.mongodb.uri=mongodb://192.168.31.81:27017/tanhua #springboot \u914d\u7f6e spring.data.mongodb.username = tanhua spring.data.mongodb.password = l3SCjl0HvmSkTtiSbN0Swv40spYnHhDV spring.data.mongodb.authentication-database = admin spring.data.mongodb.database = tanhua spring.data.mongodb.port = 27018 spring.data.mongodb.host = 192.168.31.81 4.3\u3001\u7f16\u5199\u5b9e\u4f53 \u00b6 package cn.itcast.mongodb.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; @Data @AllArgsConstructor @NoArgsConstructor public class Person { private ObjectId id ; private String name ; private int age ; private Address address ; } package cn.itcast.mongodb.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @AllArgsConstructor @NoArgsConstructor public class Address { private String street ; private String city ; private String zip ; } 4.4\u3001\u7f16\u5199dao \u00b6 package cn.itcast.mongodb.dao ; import cn.itcast.mongodb.pojo.Person ; import com.mongodb.client.result.DeleteResult ; import com.mongodb.client.result.UpdateResult ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.mongodb.core.MongoTemplate ; import org.springframework.data.mongodb.core.query.Criteria ; import org.springframework.data.mongodb.core.query.Query ; import org.springframework.data.mongodb.core.query.Update ; import org.springframework.stereotype.Component ; import java.util.List ; @Component public class PersonDao { @Autowired private MongoTemplate mongoTemplate ; public void savePerson ( Person person ) { this . mongoTemplate . save ( person ); } public List < Person > queryPersonListByName ( String name ) { Query query = Query . query ( Criteria . where ( \"name\" ). is ( name )); return this . mongoTemplate . find ( query , Person . class ); } public List < Person > queryPersonPageList ( Integer page , Integer rows ) { Query query = new Query (). limit ( rows ). skip (( page - 1 ) * rows ); return this . mongoTemplate . find ( query , Person . class ); } public UpdateResult update ( Person person ) { Query query = Query . query ( Criteria . where ( \"id\" ). is ( person . getId ())); Update update = Update . update ( \"age\" , person . getAge ()); return this . mongoTemplate . updateFirst ( query , update , Person . class ); } public DeleteResult deleteById ( String id ) { Query query = Query . query ( Criteria . where ( \"id\" ). is ( id )); return this . mongoTemplate . remove ( query , Person . class ); } } 4.5\u3001\u7f16\u5199\u542f\u52a8\u7c7b \u00b6 package cn.itcast.mongodb ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @SpringBootApplication public class MongoApplication { public static void main ( String [] args ) { SpringApplication . run ( MongoApplication . class , args ); } } 4.6\u3001\u7f16\u5199\u5355\u5143\u6d4b\u8bd5 \u00b6 package cn.itcast.mongodb ; import cn.itcast.mongodb.dao.PersonDao ; import cn.itcast.mongodb.pojo.Address ; import cn.itcast.mongodb.pojo.Person ; import org.bson.types.ObjectId ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; import java.util.List ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestPersonDao { @Autowired private PersonDao personDao ; @Test public void testSave () { Person person = new Person ( ObjectId . get (), \"\u5f20\u4e09\" , 20 , new Address ( \"\u4eba\u6c11\u8def\" , \"\u4e0a\u6d77\u5e02\" , \"666666\" )); this . personDao . savePerson ( person ); } @Test public void testQuery () { List < Person > personList = this . personDao . queryPersonListByName ( \"\u5f20\u4e09\" ); for ( Person person : personList ) { System . out . println ( person ); } } @Test public void testQuery2 () { List < Person > personList = this . personDao . queryPersonPageList ( 2 , 2 ); for ( Person person : personList ) { System . out . println ( person ); } } @Test public void testUpdate () { Person person = new Person (); person . setId ( new ObjectId ( \"5c0956ce235e192520086736\" )); person . setAge ( 30 ); this . personDao . update ( person ); } @Test public void testDelete () { this . personDao . deleteById ( \"5c09ca05235e192d8887a389\" ); } }","title":"MongoDB"},{"location":"MongoDB/MongoDB/#3mongodb","text":"","title":"3\u3001MongoDB\u5feb\u901f\u5165\u95e8"},{"location":"MongoDB/MongoDB/#31mongodb","text":"MongoDB\u662f\u4e00\u4e2a\u57fa\u4e8e\u5206\u5e03\u5f0f\u6587\u4ef6\u5b58\u50a8\u7684\u6570\u636e\u5e93\u3002\u7531C++\u8bed\u8a00\u7f16\u5199\u3002\u65e8\u5728\u4e3aWEB\u5e94\u7528\u63d0\u4f9b\u53ef\u6269\u5c55\u7684\u9ad8\u6027\u80fd\u6570\u636e\u5b58\u50a8\u89e3\u51b3\u65b9\u6848\u3002 MongoDB\u662f\u4e00\u4e2a\u4ecb\u4e8e\u5173\u7cfb\u6570\u636e\u5e93\u548c\u975e\u5173\u7cfb\u6570\u636e\u5e93\u4e4b\u95f4\u7684\u4ea7\u54c1\uff0c\u662f\u975e\u5173\u7cfb\u6570\u636e\u5e93\u5f53\u4e2d\u529f\u80fd\u6700\u4e30\u5bcc\uff0c\u6700\u50cf\u5173\u7cfb\u6570\u636e\u5e93\u7684\uff0c\u5b83\u652f\u6301\u7684\u6570\u636e\u7ed3\u6784\u975e\u5e38\u677e\u6563\uff0c\u662f\u7c7b\u4f3cjson\u7684bson\u683c\u5f0f\uff0c\u56e0\u6b64\u53ef\u4ee5\u5b58\u50a8\u6bd4\u8f83\u590d\u6742\u7684\u6570\u636e\u7c7b\u578b\u3002 MongoDB\u6700\u5927\u7684\u7279\u70b9\u662f\u5b83\u652f\u6301\u7684\u67e5\u8be2\u8bed\u8a00\u975e\u5e38\u5f3a\u5927\uff0c\u5176\u8bed\u6cd5\u6709\u70b9\u7c7b\u4f3c\u4e8e\u9762\u5411\u5bf9\u8c61\u7684\u67e5\u8be2\u8bed\u8a00\uff0c\u51e0\u4e4e\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u4f3c\u5173\u7cfb\u6570\u636e\u5e93\u5355\u8868\u67e5\u8be2\u7684\u7edd\u5927\u90e8\u5206\u529f\u80fd\uff0c\u800c\u4e14\u8fd8\u652f\u6301\u5bf9\u6570\u636e\u5efa\u7acb\u7d22\u5f15\u3002 \u5b98\u7f51\uff1ahttps://www.mongodb.com","title":"3.1\u3001MongoDB\u7b80\u4ecb"},{"location":"MongoDB/MongoDB/#32dockermongodb","text":"#\u62c9\u53d6\u955c\u50cf docker pull mongo:4.0.3 #\u521b\u5efa\u5bb9\u5668 docker create --name mongodb-server -p 27018 :27017 -v mongodb-data:/data/db mongo:4.0.3 --auth #\u542f\u52a8\u5bb9\u5668 docker start mongodb-server #\u8fdb\u5165\u5bb9\u5668 docker exec -it mongodb-server /bin/bash #\u8fdb\u5165admin\u6570\u636e\u5e93 mongo use admin #\u6dfb\u52a0\u7ba1\u7406\u5458\uff0c\u5176\u62e5\u6709\u7ba1\u7406\u7528\u6237\u548c\u89d2\u8272\u7684\u6743\u9650 db.createUser ({ user: 'root' , pwd: 'root' , roles: [ { role: \"root\" , db: \"admin\" } ] }) #\u6d4b\u8bd5\uff0c\u53d1\u73b0\u662f\u6ca1\u6709\u6743\u9650\u64cd\u4f5c\u7684 > show dbs 2020 -10-20T09:09:15.543+0000 E QUERY [ js ] Error: listDatabases failed: { \"ok\" : 0 , \"errmsg\" : \"command listDatabases requires authentication\" , \"code\" : 13 , \"codeName\" : \"Unauthorized\" } : #\u8fdb\u884c\u8ba4\u8bc1 mongo -u \"root\" -p \"root\" --authenticationDatabase \"admin\" #\u901a\u8fc7admin\u6dfb\u52a0\u666e\u901a\u7528\u6237 use admin db.createUser ({ user: 'tanhua' , pwd: 'l3SCjl0HvmSkTtiSbN0Swv40spYnHhDV' , roles: [ { role: \"readWrite\" , db: \"tanhua\" } ] }) ; #\u901a\u8fc7tanhua\u7528\u6237\u767b\u5f55\u8fdb\u884c\u6d4b\u8bd5 mongo -u \"tanhua\" -p \"l3SCjl0HvmSkTtiSbN0Swv40spYnHhDV\" --authenticationDatabase \"admin\" #\u6d4b\u8bd5 root@5d848955ff7e:/# mongo -u \"tanhua\" -p \"tanhua123\" --authenticationDatabase \"admin\" MongoDB shell version v4.0.3 connecting to: mongodb://127.0.0.1:27017 Implicit session: session { \"id\" : UUID ( \"6c368269-30f0-4b29-a224-05a38b5847e2\" ) } MongoDB server version: 4 .0.3 > use tanhua switched to db tanhua > db.user.insert ({ id:1,username: 'zhangsan' ,age:20 }) WriteResult ({ \"nInserted\" : 1 }) > db.user.find () { \"_id\" : ObjectId ( \"5f8eb2726e0de0aa9517afd3\" ) , \"id\" : 1 , \"username\" : \"zhangsan\" , \"age\" : 20 }","title":"3.2\u3001\u901a\u8fc7docker\u5b89\u88c5MongoDB"},{"location":"MongoDB/MongoDB/#33mongodb","text":"","title":"3.3\u3001MongoDB\u57fa\u672c\u64cd\u4f5c"},{"location":"MongoDB/MongoDB/#331","text":"\u4e3a\u4e86\u66f4\u597d\u7684\u7406\u89e3\uff0c\u4e0b\u9762\u4e0eSQL\u4e2d\u7684\u6982\u5ff5\u8fdb\u884c\u5bf9\u6bd4\uff1a SQL\u672f\u8bed/\u6982\u5ff5 MongoDB\u672f\u8bed/\u6982\u5ff5 \u89e3\u91ca/\u8bf4\u660e database database \u6570\u636e\u5e93 table collection \u6570\u636e\u5e93\u8868/\u96c6\u5408 row document \u6570\u636e\u8bb0\u5f55\u884c/\u6587\u6863 column field \u6570\u636e\u5b57\u6bb5/\u57df index index \u7d22\u5f15 table joins \u8868\u8fde\u63a5,MongoDB\u4e0d\u652f\u6301 primary key primary key \u4e3b\u952e,MongoDB\u81ea\u52a8\u5c06_id\u5b57\u6bb5\u8bbe\u7f6e\u4e3a\u4e3b\u952e","title":"3.3.1\u3001\u57fa\u672c\u6982\u5ff5"},{"location":"MongoDB/MongoDB/#332","text":"#\u67e5\u770b\u6240\u6709\u7684\u6570\u636e\u5e93 > show dbs admin 0 .000GB config 0 .000GB local 0 .000GB #\u901a\u8fc7use\u5173\u952e\u5b57\u5207\u6362\u6570\u636e\u5e93 > use admin switched to db admin #\u521b\u5efa\u6570\u636e\u5e93 #\u8bf4\u660e\uff1a\u5728MongoDB\u4e2d\uff0c\u6570\u636e\u5e93\u662f\u81ea\u52a8\u521b\u5efa\u7684\uff0c\u901a\u8fc7use\u5207\u6362\u5230\u65b0\u6570\u636e\u5e93\u4e2d\uff0c\u8fdb\u884c\u63d2\u5165\u6570\u636e\u5373\u53ef\u81ea\u52a8\u521b\u5efa\u6570\u636e\u5e93 > use testdb switched to db testdb > show dbs #\u5e76\u6ca1\u6709\u521b\u5efa\u6570\u636e\u5e93 admin 0 .000GB config 0 .000GB local 0 .000GB > db.user.insert ({ id:1,name: 'zhangsan' }) #\u63d2\u5165\u6570\u636e WriteResult ({ \"nInserted\" : 1 }) > show dbs admin 0 .000GB config 0 .000GB local 0 .000GB testdb 0 .000GB #\u6570\u636e\u5e93\u81ea\u52a8\u521b\u5efa #\u67e5\u770b\u8868 > show tables user > show collections user > #\u5220\u9664\u96c6\u5408\uff08\u8868\uff09 > db.user.drop () true #\u5982\u679c\u6210\u529f\u5220\u9664\u9009\u5b9a\u96c6\u5408\uff0c\u5219 drop() \u65b9\u6cd5\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false\u3002 #\u5220\u9664\u6570\u636e\u5e93 > use testdb #\u5148\u5207\u6362\u5230\u8981\u5220\u9664\u7684\u6570\u636e\u5e93\u4e2d switched to db testdb > db.dropDatabase () #\u5220\u9664\u6570\u636e\u5e93 { \"dropped\" : \"testdb\" , \"ok\" : 1 } > show dbs admin 0 .000GB config 0 .000GB local 0 .000GB","title":"3.3.2\u3001\u6570\u636e\u5e93\u4ee5\u53ca\u8868\u7684\u64cd\u4f5c"},{"location":"MongoDB/MongoDB/#333","text":"\u5728MongoDB\u4e2d\uff0c\u5b58\u50a8\u7684\u6587\u6863\u7ed3\u6784\u662f\u4e00\u79cd\u7c7b\u4f3c\u4e8ejson\u7684\u7ed3\u6784\uff0c\u79f0\u4e4b\u4e3abson\uff08\u5168\u79f0\u4e3a\uff1aBinary JSON\uff09\u3002 #\u63d2\u5165\u6570\u636e #\u8bed\u6cd5\uff1adb.COLLECTION_NAME.insert(document) > db.user.insert ({ id:1,username: 'zhangsan' ,age:20 }) WriteResult ({ \"nInserted\" : 1 }) > db.user.save ({ id:2,username: 'lisi' ,age:25 }) WriteResult ({ \"nInserted\" : 1 }) > db.user.find () #\u67e5\u8be2\u6570\u636e { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"id\" : 1 , \"username\" : \"zhangsan\" , \"age\" : 20 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 }","title":"3.3.3\u3001\u65b0\u589e\u6570\u636e"},{"location":"MongoDB/MongoDB/#334","text":"update() \u65b9\u6cd5\u7528\u4e8e\u66f4\u65b0\u5df2\u5b58\u5728\u7684\u6587\u6863\u3002\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a db.collection.update ( <query>, <update>, [ upsert: <boolean>, multi: <boolean>, writeConcern: <document> ] ) \u53c2\u6570\u8bf4\u660e\uff1a query : update\u7684\u67e5\u8be2\u6761\u4ef6\uff0c\u7c7b\u4f3csql update\u67e5\u8be2\u5185where\u540e\u9762\u7684\u3002 update : update\u7684\u5bf9\u8c61\u548c\u4e00\u4e9b\u66f4\u65b0\u7684\u64cd\u4f5c\u7b26\uff08\u5982 , inc...\uff09\u7b49\uff0c\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3asql update\u67e5\u8be2\u5185set\u540e\u9762\u7684 upsert : \u53ef\u9009\uff0c\u8fd9\u4e2a\u53c2\u6570\u7684\u610f\u601d\u662f\uff0c\u5982\u679c\u4e0d\u5b58\u5728update\u7684\u8bb0\u5f55\uff0c\u662f\u5426\u63d2\u5165objNew,true\u4e3a\u63d2\u5165\uff0c\u9ed8\u8ba4\u662ffalse\uff0c\u4e0d\u63d2\u5165\u3002 multi : \u53ef\u9009\uff0cmongodb \u9ed8\u8ba4\u662ffalse,\u53ea\u66f4\u65b0\u627e\u5230\u7684\u7b2c\u4e00\u6761\u8bb0\u5f55\uff0c\u5982\u679c\u8fd9\u4e2a\u53c2\u6570\u4e3atrue,\u5c31\u628a\u6309\u6761\u4ef6\u67e5\u51fa\u6765\u591a\u6761\u8bb0\u5f55\u5168\u90e8\u66f4\u65b0\u3002 writeConcern :\u53ef\u9009\uff0c\u629b\u51fa\u5f02\u5e38\u7684\u7ea7\u522b\u3002 > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"id\" : 1 , \"username\" : \"zhangsan\" , \"age\" : 20 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 } > db.user.update ({ id:1 } , { $set : { age:22 }}) #\u66f4\u65b0\u6570\u636e WriteResult ({ \"nMatched\" : 1 , \"nUpserted\" : 0 , \"nModified\" : 1 }) > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"id\" : 1 , \"username\" : \"zhangsan\" , \"age\" : 22 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 } #\u6ce8\u610f\uff1a\u5982\u679c\u8fd9\u6837\u5199\uff0c\u4f1a\u5220\u9664\u6389\u5176\u4ed6\u7684\u5b57\u6bb5 > db.user.update ({ id:1 } , { age:25 }) WriteResult ({ \"nMatched\" : 1 , \"nUpserted\" : 0 , \"nModified\" : 1 }) > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"age\" : 25 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 } #\u66f4\u65b0\u4e0d\u5b58\u5728\u7684\u5b57\u6bb5\uff0c\u4f1a\u65b0\u589e\u5b57\u6bb5 > db.user.update ({ id:2 } , { $set : { sex:1 }}) #\u66f4\u65b0\u6570\u636e > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"age\" : 25 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 , \"sex\" : 1 } #\u66f4\u65b0\u4e0d\u5b58\u5728\u7684\u6570\u636e\uff0c\u9ed8\u8ba4\u4e0d\u4f1a\u65b0\u589e\u6570\u636e > db.user.update ({ id:3 } , { $set : { sex:1 }}) WriteResult ({ \"nMatched\" : 0 , \"nUpserted\" : 0 , \"nModified\" : 0 }) > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"age\" : 25 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 , \"sex\" : 1 } #\u5982\u679c\u8bbe\u7f6e\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3atrue\uff0c\u5c31\u662f\u65b0\u589e\u6570\u636e > db.user.update ({ id:3 } , { $set : { sex:1 }} ,true ) WriteResult ({ \"nMatched\" : 0 , \"nUpserted\" : 1 , \"nModified\" : 0 , \"_id\" : ObjectId ( \"5c08cb281418d073246bc642\" ) }) > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"age\" : 25 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 , \"sex\" : 1 } { \"_id\" : ObjectId ( \"5c08cb281418d073246bc642\" ) , \"id\" : 3 , \"sex\" : 1 }","title":"3.3.4\u3001\u66f4\u65b0\u6570\u636e"},{"location":"MongoDB/MongoDB/#335","text":"\u901a\u8fc7remove()\u65b9\u6cd5\u8fdb\u884c\u5220\u9664\u6570\u636e\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a db.collection.remove ( <query>, { justOne: <boolean>, writeConcern: <document> } ) \u53c2\u6570\u8bf4\u660e\uff1a query :\uff08\u53ef\u9009\uff09\u5220\u9664\u7684\u6587\u6863\u7684\u6761\u4ef6\u3002 justOne : \uff08\u53ef\u9009\uff09\u5982\u679c\u8bbe\u4e3a true \u6216 1\uff0c\u5219\u53ea\u5220\u9664\u4e00\u4e2a\u6587\u6863\uff0c\u5982\u679c\u4e0d\u8bbe\u7f6e\u8be5\u53c2\u6570\uff0c\u6216\u4f7f\u7528\u9ed8\u8ba4\u503c false\uff0c\u5219\u5220\u9664\u6240\u6709\u5339\u914d\u6761\u4ef6\u7684\u6587\u6863\u3002 writeConcern :\uff08\u53ef\u9009\uff09\u629b\u51fa\u5f02\u5e38\u7684\u7ea7\u522b\u3002 \u5b9e\u4f8b\uff1a > db.user.remove ({ age:25 }) WriteResult ({ \"nRemoved\" : 2 }) #\u5220\u9664\u4e862\u6761\u6570\u636e #\u63d2\u51654\u6761\u6d4b\u8bd5\u6570\u636e db.user.insert ({ id:1,username: 'zhangsan' ,age:20 }) db.user.insert ({ id:2,username: 'lisi' ,age:21 }) db.user.insert ({ id:3,username: 'wangwu' ,age:22 }) db.user.insert ({ id:4,username: 'zhaoliu' ,age:22 }) > db.user.remove ({ age:22 } ,true ) WriteResult ({ \"nRemoved\" : 1 }) #\u5220\u9664\u4e861\u6761\u6570\u636e #\u5220\u9664\u6240\u6709\u6570\u636e > db.user.remove ({}) #\u8bf4\u660e\uff1a\u4e3a\u4e86\u7b80\u5316\u64cd\u4f5c\uff0c\u5b98\u65b9\u63a8\u8350\u4f7f\u7528deleteOne()\u4e0edeleteMany()\u8fdb\u884c\u5220\u9664\u6570\u636e\u64cd\u4f5c\u3002 db.user.deleteOne ({ id:1 }) db.user.deleteMany ({}) #\u5220\u9664\u6240\u6709\u6570\u636e","title":"3.3.5\u3001\u5220\u9664\u6570\u636e"},{"location":"MongoDB/MongoDB/#336","text":"MongoDB \u67e5\u8be2\u6570\u636e\u7684\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a db . user . find ( [ query ] , [ fields ] ) query \uff1a\u53ef\u9009\uff0c\u4f7f\u7528\u67e5\u8be2\u64cd\u4f5c\u7b26\u6307\u5b9a\u67e5\u8be2\u6761\u4ef6 fields \uff1a\u53ef\u9009\uff0c\u4f7f\u7528\u6295\u5f71\u64cd\u4f5c\u7b26\u6307\u5b9a\u8fd4\u56de\u7684\u952e\u3002\u67e5\u8be2\u65f6\u8fd4\u56de\u6587\u6863\u4e2d\u6240\u6709\u952e\u503c\uff0c \u53ea\u9700\u7701\u7565\u8be5\u53c2\u6570\u5373\u53ef\uff08\u9ed8\u8ba4\u7701\u7565\uff09\u3002 \u5982\u679c\u4f60\u9700\u8981\u4ee5\u6613\u8bfb\u7684\u65b9\u5f0f\u6765\u8bfb\u53d6\u6570\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528 pretty() \u65b9\u6cd5\uff0c\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a >db.col.find().pretty() pretty() \u65b9\u6cd5\u4ee5\u683c\u5f0f\u5316\u7684\u65b9\u5f0f\u6765\u663e\u793a\u6240\u6709\u6587\u6863\u3002 \u6761\u4ef6\u67e5\u8be2\uff1a \u64cd\u4f5c \u683c\u5f0f \u8303\u4f8b RDBMS\u4e2d\u7684\u7c7b\u4f3c\u8bed\u53e5 \u7b49\u4e8e {<key>:<value> } db.col.find({\"by\":\"\u9ed1\u9a6c\u7a0b\u5e8f\u5458\"}).pretty() where by = '\u9ed1\u9a6c\u7a0b\u5e8f\u5458' \u5c0f\u4e8e {<key>:{$lt:<value>}} db.col.find({\"likes\":{$lt:50}}).pretty() where likes < 50 \u5c0f\u4e8e\u6216\u7b49\u4e8e {<key>:{$lte:<value>}} db.col.find({\"likes\":{$lte:50}}).pretty() where likes <= 50 \u5927\u4e8e {<key>:{$gt:<value>}} db.col.find({\"likes\":{$gt:50}}).pretty() where likes > 50 \u5927\u4e8e\u6216\u7b49\u4e8e {<key>:{$gte:<value>}} db.col.find({\"likes\":{$gte:50}}).pretty() where likes >= 50 \u4e0d\u7b49\u4e8e {<key>:{$ne:<value>}} db.col.find({\"likes\":{$ne:50}}).pretty() where likes != 50 \u5b9e\u4f8b\uff1a #\u63d2\u5165\u6d4b\u8bd5\u6570\u636e db.user.insert ({ id:1,username: 'zhangsan' ,age:20 }) db.user.insert ({ id:2,username: 'lisi' ,age:21 }) db.user.insert ({ id:3,username: 'wangwu' ,age:22 }) db.user.insert ({ id:4,username: 'zhaoliu' ,age:22 }) db.user.find () #\u67e5\u8be2\u5168\u90e8\u6570\u636e db.user.find ({} , { id:1,username:1 }) #\u53ea\u67e5\u8be2id\u4e0eusername\u5b57\u6bb5 db.user.find () .count () #\u67e5\u8be2\u6570\u636e\u6761\u6570 db.user.find ({ id:1 }) #\u67e5\u8be2id\u4e3a1\u7684\u6570\u636e db.user.find ({ age: { $lte :21 }}) #\u67e5\u8be2\u5c0f\u4e8e\u7b49\u4e8e21\u7684\u6570\u636e db.user.find ({ age: { $lte :21 } , id: { $gte :2 }}) #and\u67e5\u8be2\uff0cage\u5c0f\u4e8e\u7b49\u4e8e21\u5e76\u4e14id\u5927\u4e8e\u7b49\u4e8e2 db.user.find ({ $or : [{ id:1 } , { id:2 }]}) #\u67e5\u8be2id=1 or id=2 #\u5206\u9875\u67e5\u8be2\uff1aSkip()\u8df3\u8fc7\u51e0\u6761\uff0climit()\u67e5\u8be2\u6761\u6570 db.user.find () .limit ( 2 ) .skip ( 1 ) #\u8df3\u8fc71\u6761\u6570\u636e\uff0c\u67e5\u8be22\u6761\u6570\u636e db.user.find () .sort ({ id:-1 }) #\u6309\u7167age\u5012\u5e8f\u6392\u5e8f\uff0c-1\u4e3a\u5012\u5e8f\uff0c1\u4e3a\u6b63\u5e8f","title":"3.3.6\u3001\u67e5\u8be2\u6570\u636e"},{"location":"MongoDB/MongoDB/#34","text":"\u7d22\u5f15\u901a\u5e38\u80fd\u591f\u6781\u5927\u7684\u63d0\u9ad8\u67e5\u8be2\u7684\u6548\u7387\uff0c\u5982\u679c\u6ca1\u6709\u7d22\u5f15\uff0cMongoDB\u5728\u8bfb\u53d6\u6570\u636e\u65f6\u5fc5\u987b\u626b\u63cf\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u6587\u4ef6\u5e76\u9009\u53d6\u90a3\u4e9b\u7b26\u5408\u67e5\u8be2\u6761\u4ef6\u7684\u8bb0\u5f55\u3002 \u8fd9\u79cd\u626b\u63cf\u5168\u96c6\u5408\u7684\u67e5\u8be2\u6548\u7387\u662f\u975e\u5e38\u4f4e\u7684\uff0c\u7279\u522b\u5728\u5904\u7406\u5927\u91cf\u7684\u6570\u636e\u65f6\uff0c\u67e5\u8be2\u53ef\u4ee5\u8981\u82b1\u8d39\u51e0\u5341\u79d2\u751a\u81f3\u51e0\u5206\u949f\uff0c\u8fd9\u5bf9\u7f51\u7ad9\u7684\u6027\u80fd\u662f\u975e\u5e38\u81f4\u547d\u7684\u3002 \u7d22\u5f15\u662f\u7279\u6b8a\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7d22\u5f15\u5b58\u50a8\u5728\u4e00\u4e2a\u6613\u4e8e\u904d\u5386\u8bfb\u53d6\u7684\u6570\u636e\u96c6\u5408\u4e2d\uff0c\u7d22\u5f15\u662f\u5bf9\u6570\u636e\u5e93\u8868\u4e2d\u4e00\u5217\u6216\u591a\u5217\u7684\u503c\u8fdb\u884c\u6392\u5e8f\u7684\u4e00\u79cd\u7ed3\u6784 #\u67e5\u770b\u7d22\u5f15 > db.user.getIndexes () [ { \"v\" : 2 , \"key\" : { \"_id\" : 1 } , \"name\" : \"_id_\" , \"ns\" : \"testdb.user\" } ] #\u8bf4\u660e\uff1a1\u8868\u793a\u5347\u5e8f\u521b\u5efa\u7d22\u5f15\uff0c-1\u8868\u793a\u964d\u5e8f\u521b\u5efa\u7d22\u5f15\u3002 #\u521b\u5efa\u7d22\u5f15 > db.user.createIndex ({ 'age' :1 }) { \"createdCollectionAutomatically\" : false, \"numIndexesBefore\" : 1 , \"numIndexesAfter\" : 2 , \"ok\" : 1 } #\u5220\u9664\u7d22\u5f15 db.user.dropIndex ( \"age_1\" ) #\u6216\u8005\uff0c\u5220\u9664\u9664\u4e86_id\u4e4b\u5916\u7684\u7d22\u5f15 db.user.dropIndexes () #\u521b\u5efa\u8054\u5408\u7d22\u5f15 db.user.createIndex ({ 'age' :1, 'id' :-1 }) #\u67e5\u770b\u7d22\u5f15\u5927\u5c0f\uff0c\u5355\u4f4d\uff1a\u5b57\u8282 db.user.totalIndexSize ()","title":"3.4\u3001\u7d22\u5f15"},{"location":"MongoDB/MongoDB/#35","text":"MongoDB \u67e5\u8be2\u5206\u6790\u53ef\u4ee5\u786e\u4fdd\u6211\u4eec\u5efa\u8bae\u7684\u7d22\u5f15\u662f\u5426\u6709\u6548\uff0c\u662f\u67e5\u8be2\u8bed\u53e5\u6027\u80fd\u5206\u6790\u7684\u91cd\u8981\u5de5\u5177\u3002 #\u63d2\u51651000\u6761\u6570\u636e for ( var i = 1 ; i< 1000 ; i++ ) db.user.insert ({ id:100+i,username: 'name_' +i,age:10+i }) #\u67e5\u770b\u6267\u884c\u8ba1\u5212 > db.user.find ({ age: { $gt :100 } ,id: { $lt :200 }}) .explain () { \"queryPlanner\" : { \"plannerVersion\" : 1 , \"namespace\" : \"testdb.user\" , \"indexFilterSet\" : false, \"parsedQuery\" : { \" $and \" : [ { \"id\" : { \" $lt \" : 200 } } , { \"age\" : { \" $gt \" : 100 } } ] } , \"winningPlan\" : { #\u6700\u4f73\u6267\u884c\u8ba1\u5212 \"stage\" : \"FETCH\" , #\u67e5\u8be2\u65b9\u5f0f\uff0c\u5e38\u89c1\u7684\u6709COLLSCAN/\u5168\u8868\u626b\u63cf\u3001IXSCAN/\u7d22\u5f15\u626b\u63cf\u3001FETCH/\u6839\u636e\u7d22\u5f15\u53bb\u68c0\u7d22\u6587\u6863\u3001SHARD_MERGE/\u5408\u5e76\u5206\u7247\u7ed3\u679c\u3001IDHACK/\u9488\u5bf9_id\u8fdb\u884c\u67e5\u8be2 \"inputStage\" : { \"stage\" : \"IXSCAN\" , \"keyPattern\" : { \"age\" : 1 , \"id\" : -1 } , \"indexName\" : \"age_1_id_-1\" , \"isMultiKey\" : false, \"multiKeyPaths\" : { \"age\" : [ ] , \"id\" : [ ] } , \"isUnique\" : false, \"isSparse\" : false, \"isPartial\" : false, \"indexVersion\" : 2 , \"direction\" : \"forward\" , \"indexBounds\" : { \"age\" : [ \"(100.0, inf.0]\" ] , \"id\" : [ \"(200.0, -inf.0]\" ] } } } , \"rejectedPlans\" : [ ] } , \"serverInfo\" : { \"host\" : \"c493d5ff750a\" , \"port\" : 27017 , \"version\" : \"4.0.3\" , \"gitVersion\" : \"7ea530946fa7880364d88c8d8b6026bbc9ffa48c\" } , \"ok\" : 1 } #\u6d4b\u8bd5\u6ca1\u6709\u4f7f\u7528\u7d22\u5f15 > db.user.find ({ username: 'zhangsan' }) .explain () { \"queryPlanner\" : { \"plannerVersion\" : 1 , \"namespace\" : \"testdb.user\" , \"indexFilterSet\" : false, \"parsedQuery\" : { \"username\" : { \" $eq \" : \"zhangsan\" } } , \"winningPlan\" : { \"stage\" : \"COLLSCAN\" , #\u5168\u8868\u626b\u63cf \"filter\" : { \"username\" : { \" $eq \" : \"zhangsan\" } } , \"direction\" : \"forward\" } , \"rejectedPlans\" : [ ] } , \"serverInfo\" : { \"host\" : \"c493d5ff750a\" , \"port\" : 27017 , \"version\" : \"4.0.3\" , \"gitVersion\" : \"7ea530946fa7880364d88c8d8b6026bbc9ffa48c\" } , \"ok\" : 1 }","title":"3.5\u3001\u6267\u884c\u8ba1\u5212"},{"location":"MongoDB/MongoDB/#36ui","text":"Robo 3T\u662fMongoDB\u7684\u5ba2\u6237\u7aef\u5de5\u5177\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u64cd\u4f5cMongoDB\u3002 \u67e5\u770b\u6570\u636e\uff1a \u6216\u4f7f\u7528Navicat Premium 15\uff1a","title":"3.6\u3001UI\u5ba2\u6237\u7aef\u5de5\u5177"},{"location":"MongoDB/MongoDB/#4springbootmongodb","text":"spring-data\u5bf9MongoDB\u505a\u4e86\u652f\u6301\uff0c\u4f7f\u7528spring-data-mongodb\u53ef\u4ee5\u7b80\u5316MongoDB\u7684\u64cd\u4f5c\u3002 \u5730\u5740\uff1ahttps://spring.io/projects/spring-data-mongodb","title":"4\u3001SpringBoot\u6574\u5408MongoDB"},{"location":"MongoDB/MongoDB/#41","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-parent </artifactId> <version> 2.1.0.RELEASE </version> </parent> <groupId> cn.itcast.mongodb </groupId> <artifactId> itcast-mongodb </artifactId> <version> 1.0-SNAPSHOT </version> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-mongodb </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-test </artifactId> <scope> test </scope> </dependency> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> <optional> true </optional> <version> 1.18.4 </version> </dependency> </dependencies> <build> <plugins> <!-- java\u7f16\u8bd1\u63d2\u4ef6 --> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-compiler-plugin </artifactId> <version> 3.2 </version> <configuration> <source> 1.8 </source> <target> 1.8 </target> <encoding> UTF-8 </encoding> </configuration> </plugin> </plugins> </build> </project>","title":"4.1\u3001\u5bfc\u5165\u4f9d\u8d56"},{"location":"MongoDB/MongoDB/#42applicationproperties","text":"# Spring boot application spring.application.name = itcast-mongodb #\u65e0\u8ba4\u8bc1\u4fe1\u606f\u7684\u914d\u7f6e #spring.data.mongodb.uri=mongodb://192.168.31.81:27017/tanhua #springboot \u914d\u7f6e spring.data.mongodb.username = tanhua spring.data.mongodb.password = l3SCjl0HvmSkTtiSbN0Swv40spYnHhDV spring.data.mongodb.authentication-database = admin spring.data.mongodb.database = tanhua spring.data.mongodb.port = 27018 spring.data.mongodb.host = 192.168.31.81","title":"4.2\u3001\u7f16\u5199application.properties\u914d\u7f6e\u6587\u4ef6"},{"location":"MongoDB/MongoDB/#43","text":"package cn.itcast.mongodb.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; @Data @AllArgsConstructor @NoArgsConstructor public class Person { private ObjectId id ; private String name ; private int age ; private Address address ; } package cn.itcast.mongodb.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @AllArgsConstructor @NoArgsConstructor public class Address { private String street ; private String city ; private String zip ; }","title":"4.3\u3001\u7f16\u5199\u5b9e\u4f53"},{"location":"MongoDB/MongoDB/#44dao","text":"package cn.itcast.mongodb.dao ; import cn.itcast.mongodb.pojo.Person ; import com.mongodb.client.result.DeleteResult ; import com.mongodb.client.result.UpdateResult ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.mongodb.core.MongoTemplate ; import org.springframework.data.mongodb.core.query.Criteria ; import org.springframework.data.mongodb.core.query.Query ; import org.springframework.data.mongodb.core.query.Update ; import org.springframework.stereotype.Component ; import java.util.List ; @Component public class PersonDao { @Autowired private MongoTemplate mongoTemplate ; public void savePerson ( Person person ) { this . mongoTemplate . save ( person ); } public List < Person > queryPersonListByName ( String name ) { Query query = Query . query ( Criteria . where ( \"name\" ). is ( name )); return this . mongoTemplate . find ( query , Person . class ); } public List < Person > queryPersonPageList ( Integer page , Integer rows ) { Query query = new Query (). limit ( rows ). skip (( page - 1 ) * rows ); return this . mongoTemplate . find ( query , Person . class ); } public UpdateResult update ( Person person ) { Query query = Query . query ( Criteria . where ( \"id\" ). is ( person . getId ())); Update update = Update . update ( \"age\" , person . getAge ()); return this . mongoTemplate . updateFirst ( query , update , Person . class ); } public DeleteResult deleteById ( String id ) { Query query = Query . query ( Criteria . where ( \"id\" ). is ( id )); return this . mongoTemplate . remove ( query , Person . class ); } }","title":"4.4\u3001\u7f16\u5199dao"},{"location":"MongoDB/MongoDB/#45","text":"package cn.itcast.mongodb ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @SpringBootApplication public class MongoApplication { public static void main ( String [] args ) { SpringApplication . run ( MongoApplication . class , args ); } }","title":"4.5\u3001\u7f16\u5199\u542f\u52a8\u7c7b"},{"location":"MongoDB/MongoDB/#46","text":"package cn.itcast.mongodb ; import cn.itcast.mongodb.dao.PersonDao ; import cn.itcast.mongodb.pojo.Address ; import cn.itcast.mongodb.pojo.Person ; import org.bson.types.ObjectId ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; import java.util.List ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestPersonDao { @Autowired private PersonDao personDao ; @Test public void testSave () { Person person = new Person ( ObjectId . get (), \"\u5f20\u4e09\" , 20 , new Address ( \"\u4eba\u6c11\u8def\" , \"\u4e0a\u6d77\u5e02\" , \"666666\" )); this . personDao . savePerson ( person ); } @Test public void testQuery () { List < Person > personList = this . personDao . queryPersonListByName ( \"\u5f20\u4e09\" ); for ( Person person : personList ) { System . out . println ( person ); } } @Test public void testQuery2 () { List < Person > personList = this . personDao . queryPersonPageList ( 2 , 2 ); for ( Person person : personList ) { System . out . println ( person ); } } @Test public void testUpdate () { Person person = new Person (); person . setId ( new ObjectId ( \"5c0956ce235e192520086736\" )); person . setAge ( 30 ); this . personDao . update ( person ); } @Test public void testDelete () { this . personDao . deleteById ( \"5c09ca05235e192d8887a389\" ); } }","title":"4.6\u3001\u7f16\u5199\u5355\u5143\u6d4b\u8bd5"},{"location":"ajax/","text":"1\u3001Ajax\u5feb\u901f\u5165\u95e8 \u00b6 1.1\u3001AJAX\u4ecb\u7ecd \u00b6 AJAX(Asynchronous JavaScript And XML)\uff1a\u5f02\u6b65\u7684 JavaScript \u548c XML\u3002 \u672c\u8eab\u4e0d\u662f\u4e00\u79cd\u65b0\u6280\u672f\uff0c\u800c\u662f\u591a\u4e2a\u6280\u672f\u7efc\u5408\u3002\u7528\u4e8e\u5feb\u901f\u521b\u5efa\u52a8\u6001\u7f51\u9875\u7684\u6280\u672f\u3002 \u4e00\u822c\u7684\u7f51\u9875\u5982\u679c\u9700\u8981\u66f4\u65b0\u5185\u5bb9\uff0c\u5fc5\u9700\u91cd\u65b0\u52a0\u8f7d\u4e2a\u9875\u9762\u3002 \u800c AJAX \u901a\u8fc7\u6d4f\u89c8\u5668\u4e0e\u670d\u52a1\u5668\u8fdb\u884c\u5c11\u91cf\u6570\u636e\u4ea4\u6362\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7f51\u9875\u5b9e\u73b0\u5f02\u6b65\u66f4\u65b0\u3002\u4e5f\u5c31\u662f\u5728\u4e0d\u91cd\u65b0\u52a0\u8f7d\u6574\u4e2a\u9875 \u9762\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u7f51\u9875\u7684\u90e8\u5206\u5185\u5bb9\u8fdb\u884c \u5c40\u90e8\u66f4\u65b0 \u3002 \u200b \u200b 1.2\u3001\u539f\u751fJS\u5b9e\u73b0AJAX \u00b6 \u4ee3\u7801\u5b9e\u73b0 ```java import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; @WebServlet(\"/userServlet\") public class UserServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //\u8bbe\u7f6e\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u4e71\u7801 req.setCharacterEncoding(\"UTF-8\"); resp.setContentType(\"text/html;charset=UTF-8\"); //1.\u83b7\u53d6\u8bf7\u6c42\u53c2\u6570 String username = req.getParameter(\"username\"); //\u6a21\u62df\u670d\u52a1\u5668\u5904\u7406\u8bf7\u6c42\u9700\u89815\u79d2\u949f /*try { Thread.sleep(5000); } catch (InterruptedException e) { e.printStackTrace(); }*/ //2.\u5224\u65ad\u59d3\u540d\u662f\u5426\u5df2\u6ce8\u518c if(\"zhangsan\".equals(username)) { resp.getWriter().write(\" <font color= 'red' > \u7528\u6237\u540d\u5df2\u6ce8\u518c </font> \"); }else { resp.getWriter().write(\" <font color= 'green' > \u7528\u6237\u540d\u53ef\u7528 </font> \"); } } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { doGet(req,resp); } } ``` html\u4ee3\u7801 ```html \u7528\u6237\u6ce8\u518c \u59d3\u540d\uff1a \u5bc6\u7801\uff1a //1.\u4e3a\u59d3\u540d\u7ed1\u5b9a\u5931\u53bb\u7126\u70b9\u4e8b\u4ef6 document.getElementById(\"username\").onblur = function() { //2.\u521b\u5efaXMLHttpRequest\u6838\u5fc3\u5bf9\u8c61 let xmlHttp = new XMLHttpRequest(); //3.\u6253\u5f00\u94fe\u63a5 let username = document.getElementById(\"username\").value; xmlHttp.open(\"GET\",\"userServlet?username=\"+username,true); //xmlHttp.open(\"GET\",\"userServlet?username=\"+username,false); //4.\u53d1\u9001\u8bf7\u6c42 xmlHttp.send(); //5.\u5904\u7406\u54cd\u5e94 xmlHttp.onreadystatechange = function() { //\u5224\u65ad\u8bf7\u6c42\u548c\u54cd\u5e94\u662f\u5426\u6210\u529f if(xmlHttp.readyState == 4 && xmlHttp.status == 200) { //\u5c06\u54cd\u5e94\u7684\u6570\u636e\u663e\u793a\u5230span\u6807\u7b7e document.getElementById(\"uSpan\").innerHTML = xmlHttp.responseText; } } } ``` 1.3\u3001\u539f\u751fJS\u5b9e\u73b0AJAX\u8be6\u89e3 \u00b6 \u6838\u5fc3\u5bf9\u8c61\uff1aXMLHttpRequest \u200b \u7528\u4e8e\u5728\u540e\u53f0\u4e0e\u670d\u52a1\u5668\u4ea4\u6362\u6570\u636e\u3002\u53ef\u4ee5\u5728\u4e0d\u91cd\u65b0\u52a0\u8f7d\u6574\u4e2a\u7f51\u9875\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u7f51\u9875\u7684\u67d0\u90e8\u5206\u8fdb\u884c\u66f4\u65b0\u3002 \u6253\u5f00\u94fe\u63a5\uff1aopen(method,url,async) \u200b method\uff1a\u8bf7\u6c42\u7684\u7c7b\u578b GET \u6216 POST\u3002 \u200b url\uff1a\u8bf7\u6c42\u8d44\u6e90\u7684\u8def\u5f84\u3002 \u200b async\uff1atrue(\u5f02\u6b65) \u6216 false(\u540c\u6b65)\u3002 \u53d1\u9001\u8bf7\u6c42\uff1asend(String params) \u200b params\uff1a\u8bf7\u6c42\u7684\u53c2\u6570(POST \u4e13\u7528)\u3002 \u5904\u7406\u54cd\u5e94\uff1aonreadystatechange \u200b readyState\uff1a0-\u8bf7\u6c42\u672a\u521d\u59cb\u5316\uff0c1-\u670d\u52a1\u5668\u8fde\u63a5\u5df2\u5efa\u7acb\uff0c2-\u8bf7\u6c42\u5df2\u63a5\u6536\uff0c3-\u8bf7\u6c42\u5904\u7406\u4e2d\uff0c4-\u8bf7\u6c42\u5df2\u5b8c\u6210\uff0c\u4e14\u54cd\u5e94\u5df2\u5c31\u7eea\u3002 \u200b status\uff1a200-\u54cd\u5e94\u5df2\u5168\u90e8 OK\u3002 \u83b7\u5f97\u54cd\u5e94\u6570\u636e\u5f62\u5f0f \u200b responseText\uff1a\u83b7\u5f97\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u54cd\u5e94\u6570\u636e\u3002 \u200b responseXML\uff1a\u83b7\u5f97 XML \u5f62\u5f0f\u7684\u54cd\u5e94\u6570\u636e\u3002 1.4\u3001JQuery\u7684GET\u65b9\u5f0f\u5b9e\u73b0AJAX \u00b6 \u6838\u5fc3\u8bed\u6cd5\uff1a $.get(url,[data],[callback],[type]); url\uff1a\u8bf7\u6c42\u7684\u8d44\u6e90\u8def\u5f84\u3002 data\uff1a\u53d1\u9001\u7ed9\u670d\u52a1\u5668\u7aef\u7684\u8bf7\u6c42\u53c2\u6570\uff0c\u683c\u5f0f\u53ef\u4ee5\u662fkey=value\uff0c\u4e5f\u53ef\u4ee5\u662f js \u5bf9\u8c61\u3002 callback\uff1a\u5f53\u8bf7\u6c42\u6210\u529f\u540e\u7684\u56de\u8c03\u51fd\u6570\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u4e2d\u7f16\u5199\u6211\u4eec\u7684\u903b\u8f91\u4ee3\u7801\u3002 type\uff1a\u9884\u671f\u7684\u8fd4\u56de\u6570\u636e\u7684\u7c7b\u578b\uff0c\u53d6\u503c\u53ef\u4ee5\u662f xml, html, js, json, text\u7b49\u3002 \u4ee3\u7801\u5b9e\u73b0 ```html \u7528\u6237\u6ce8\u518c \u59d3\u540d\uff1a \u5bc6\u7801\uff1a //1.\u4e3a\u7528\u6237\u540d\u7ed1\u5b9a\u5931\u53bb\u7126\u70b9\u4e8b\u4ef6 $(\"#username\").blur(function () { let username = $(\"#username\").val(); //2.jQuery\u7684GET\u65b9\u5f0f\u5b9e\u73b0AJAX $.get( //\u8bf7\u6c42\u7684\u8d44\u6e90\u8def\u5f84 \"userServlet\", //\u8bf7\u6c42\u53c2\u6570 \"username=\" + username, //\u56de\u8c03\u51fd\u6570 function (data) { //\u5c06\u54cd\u5e94\u7684\u6570\u636e\u663e\u793a\u5230span\u6807\u7b7e $(\"#uSpan\").html(data); }, //\u54cd\u5e94\u6570\u636e\u5f62\u5f0f \"text\" ); }); ``` 1.5\u3001JQuery\u7684POST\u65b9\u5f0f\u5b9e\u73b0AJAX \u00b6 \u6838\u5fc3\u8bed\u6cd5\uff1a $.post(url,[data],[callback],[type]); url\uff1a\u8bf7\u6c42\u7684\u8d44\u6e90\u8def\u5f84\u3002 data\uff1a\u53d1\u9001\u7ed9\u670d\u52a1\u5668\u7aef\u7684\u8bf7\u6c42\u53c2\u6570\uff0c\u683c\u5f0f\u53ef\u4ee5\u662fkey=value\uff0c\u4e5f\u53ef\u4ee5\u662f js \u5bf9\u8c61\u3002 callback\uff1a\u5f53\u8bf7\u6c42\u6210\u529f\u540e\u7684\u56de\u8c03\u51fd\u6570\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u4e2d\u7f16\u5199\u6211\u4eec\u7684\u903b\u8f91\u4ee3\u7801\u3002 type\uff1a\u9884\u671f\u7684\u8fd4\u56de\u6570\u636e\u7684\u7c7b\u578b\uff0c\u53d6\u503c\u53ef\u4ee5\u662f xml, html, js, json, text\u7b49\u3002 \u4ee3\u7801\u5b9e\u73b0 ```html \u7528\u6237\u6ce8\u518c \u59d3\u540d\uff1a \u5bc6\u7801\uff1a //1.\u4e3a\u7528\u6237\u540d\u7ed1\u5b9a\u5931\u53bb\u7126\u70b9\u4e8b\u4ef6 $(\"#username\").blur(function () { let username = $(\"#username\").val(); //2.jQuery\u7684POST\u65b9\u5f0f\u5b9e\u73b0AJAX $.post( //\u8bf7\u6c42\u7684\u8d44\u6e90\u8def\u5f84 \"userServlet\", //\u8bf7\u6c42\u53c2\u6570 \"username=\" + username, //\u56de\u8c03\u51fd\u6570 function (data) { //\u5c06\u54cd\u5e94\u7684\u6570\u636e\u663e\u793a\u5230span\u6807\u7b7e $(\"#uSpan\").html(data); }, //\u54cd\u5e94\u6570\u636e\u5f62\u5f0f \"text\" ); }); ``` 1.6\u3001JQuery\u7684\u901a\u7528\u65b9\u5f0f\u5b9e\u73b0AJAX \u00b6 \u6838\u5fc3\u8bed\u6cd5\uff1a $.ajax({name:value,name:value,\u2026}); url\uff1a\u8bf7\u6c42\u7684\u8d44\u6e90\u8def\u5f84\u3002 async\uff1a\u662f\u5426\u5f02\u6b65\u8bf7\u6c42\uff0ctrue-\u662f\uff0cfalse-\u5426 (\u9ed8\u8ba4\u662f true)\u3002 data\uff1a\u53d1\u9001\u5230\u670d\u52a1\u5668\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u662f\u952e\u503c\u5bf9\u5f62\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u662f js \u5bf9\u8c61\u5f62\u5f0f\u3002 type\uff1a\u8bf7\u6c42\u65b9\u5f0f\uff0cPOST \u6216 GET (\u9ed8\u8ba4\u662f GET)\u3002 dataType\uff1a\u9884\u671f\u7684\u8fd4\u56de\u6570\u636e\u7684\u7c7b\u578b\uff0c\u53d6\u503c\u53ef\u4ee5\u662f xml, html, js, json, text\u7b49\u3002 success\uff1a\u8bf7\u6c42\u6210\u529f\u65f6\u8c03\u7528\u7684\u56de\u8c03\u51fd\u6570\u3002 error\uff1a\u8bf7\u6c42\u5931\u8d25\u65f6\u8c03\u7528\u7684\u56de\u8c03\u51fd\u6570\u3002 \u4ee3\u7801\u5b9e\u73b0 ```html \u7528\u6237\u6ce8\u518c \u59d3\u540d\uff1a \u5bc6\u7801\uff1a //1.\u4e3a\u7528\u6237\u540d\u7ed1\u5b9a\u5931\u53bb\u7126\u70b9\u4e8b\u4ef6 $(\"#username\").blur(function () { let username = $(\"#username\").val(); //2.jQuery\u7684\u901a\u7528\u65b9\u5f0f\u5b9e\u73b0AJAX $.ajax({ //\u8bf7\u6c42\u8d44\u6e90\u8def\u5f84 url:\"userServletxxx\", //\u662f\u5426\u5f02\u6b65 async:true, //\u8bf7\u6c42\u53c2\u6570 data:\"username=\"+username, //\u8bf7\u6c42\u65b9\u5f0f type:\"POST\", //\u6570\u636e\u5f62\u5f0f dataType:\"text\", //\u8bf7\u6c42\u6210\u529f\u540e\u8c03\u7528\u7684\u56de\u8c03\u51fd\u6570 success:function (data) { //\u5c06\u54cd\u5e94\u7684\u6570\u636e\u663e\u793a\u5230span\u6807\u7b7e $(\"#uSpan\").html(data); }, //\u8bf7\u6c42\u5931\u8d25\u540e\u8c03\u7528\u7684\u56de\u8c03\u51fd\u6570 error:function () { alert(\"\u64cd\u4f5c\u5931\u8d25...\"); } }); }); ``` 1.7\u3001\u5c0f\u7ed3 \u00b6 AJAX(Asynchronous JavaScript And XML)\uff1a \u5f02\u6b65\u7684 JavaScript \u548c XML\u3002 \u901a\u8fc7\u6d4f\u89c8\u5668\u4e0e\u670d\u52a1\u5668\u8fdb\u884c\u5c11\u91cf\u6570\u636e\u4ea4\u6362\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7f51\u9875\u5b9e\u73b0\u5f02\u6b65\u66f4\u65b0\u3002\u4e5f\u5c31\u662f\u5728\u4e0d\u91cd\u65b0\u52a0\u8f7d\u6574\u4e2a\u9875\u9762\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u7f51\u9875\u7684\u90e8 \u5206\u5185\u5bb9\u8fdb\u884c\u5c40\u90e8\u66f4\u65b0\u3002 \u540c\u6b65\u548c\u5f02\u6b65 \u540c\u6b65\uff1a\u670d\u52a1\u5668\u7aef\u5728\u5904\u7406\u8fc7\u7a0b\u4e2d\uff0c\u65e0\u6cd5\u8fdb\u884c\u5176\u4ed6\u64cd\u4f5c\u3002 \u5f02\u6b65\uff1a\u670d\u52a1\u5668\u7aef\u5728\u5904\u7406\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u8fdb\u884c\u5176\u4ed6\u64cd\u4f5c\u3002 GET \u65b9\u5f0f\u5b9e\u73b0\uff1a $.get(); POST \u65b9\u5f0f\u5b9e\u73b0\uff1a $.post(); url\uff1a\u8bf7\u6c42\u7684\u8d44\u6e90\u8def\u5f84\u3002 data\uff1a\u53d1\u9001\u7ed9\u670d\u52a1\u5668\u7aef\u7684\u8bf7\u6c42\u53c2\u6570\uff0c\u683c\u5f0f\u53ef\u4ee5\u662fkey=value\uff0c\u4e5f\u53ef\u4ee5\u662f js \u5bf9\u8c61\u3002 callback\uff1a\u5f53\u8bf7\u6c42\u6210\u529f\u540e\u7684\u56de\u8c03\u51fd\u6570\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u4e2d\u7f16\u5199\u6211\u4eec\u7684\u903b\u8f91\u4ee3\u7801\u3002 type\uff1a\u9884\u671f\u7684\u8fd4\u56de\u6570\u636e\u7684\u7c7b\u578b\uff0c\u53d6\u503c\u53ef\u4ee5\u662f xml, html, js, json, text\u7b49\u3002 \u901a\u7528\u65b9\u5f0f\u5b9e\u73b0\uff1a $.ajax(); url\uff1a\u8bf7\u6c42\u7684\u8d44\u6e90\u8def\u5f84\u3002 async\uff1a\u662f\u5426\u5f02\u6b65\u8bf7\u6c42\uff0ctrue-\u662f\uff0cfalse-\u5426 (\u9ed8\u8ba4\u662f true)\u3002 data\uff1a\u53d1\u9001\u5230\u670d\u52a1\u5668\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u662f\u952e\u503c\u5bf9\u5f62\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u662f js \u5bf9\u8c61\u5f62\u5f0f\u3002 type\uff1a\u8bf7\u6c42\u65b9\u5f0f\uff0cPOST \u6216 GET (\u9ed8\u8ba4\u662f GET)\u3002 dataType\uff1a\u9884\u671f\u7684\u8fd4\u56de\u6570\u636e\u7684\u7c7b\u578b\uff0c\u53d6\u503c\u53ef\u4ee5\u662f xml, html, js, json, text\u7b49\u3002 success\uff1a\u8bf7\u6c42\u6210\u529f\u65f6\u8c03\u7528\u7684\u56de\u8c03\u51fd\u6570\u3002 error\uff1a\u8bf7\u6c42\u5931\u8d25\u65f6\u8c03\u7528\u7684\u56de\u8c03\u51fd\u6570\u3002 2\u3001JSON\u7684\u5904\u7406 \u00b6 2.1\u3001JSON\u56de\u987e \u00b6 JSON(JavaScript Object Notation)\uff1a\u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u7684\u6570\u636e\u4ea4\u6362\u683c\u5f0f\u3002 \u5b83\u662f\u57fa\u4e8e ECMAScript \u89c4\u8303\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u91c7\u7528\u5b8c\u5168\u72ec\u7acb\u4e8e\u7f16\u7a0b\u8bed\u8a00\u7684\u6587\u672c\u683c\u5f0f\u6765\u5b58\u50a8\u548c\u8868\u793a\u6570\u636e\u3002 \u7b80\u6d01\u548c\u6e05\u6670\u7684\u5c42\u6b21\u7ed3\u6784\u4f7f\u5f97 JSON \u6210\u4e3a\u7406\u60f3\u7684\u6570\u636e\u4ea4\u6362\u8bed\u8a00\u3002\u6613\u4e8e\u4eba\u9605\u8bfb\u548c\u7f16\u5199\uff0c\u540c\u65f6\u4e5f\u6613\u4e8e\u8ba1\u7b97\u673a\u89e3\u6790\u548c\u751f\u6210\uff0c\u5e76\u6709\u6548\u7684 \u63d0\u5347\u7f51\u7edc\u4f20\u8f93\u6548\u7387\u3002 \u521b\u5efa\u683c\u5f0f \u5e38\u7528\u65b9\u6cd5 2.2\u3001JSON\u8f6c\u6362\u5de5\u5177\u7684\u4ecb\u7ecd \u00b6 \u6211\u4eec\u9664\u4e86\u53ef\u4ee5\u5728 JavaScript \u4e2d\u6765\u4f7f\u7528 JSON \u4ee5\u5916\uff0c\u5728 JAVA \u4e2d\u540c\u6837\u4e5f\u53ef\u4ee5\u4f7f\u7528 JSON\u3002 JSON \u7684\u8f6c\u6362\u5de5\u5177\u662f\u901a\u8fc7 JAVA \u5c01\u88c5\u597d\u7684\u4e00\u4e9b JAR \u5de5\u5177\u5305\u3002 \u53ef\u4ee5\u5c06 JAVA \u5bf9\u8c61\u6216\u96c6\u5408\u8f6c\u6362\u6210 JSON \u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u5c06 JSON \u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u8f6c\u6210 JAVA \u5bf9\u8c61\u3002 Jackson\uff1a\u5f00\u6e90\u514d\u8d39\u7684 JSON \u8f6c\u6362\u5de5\u5177\uff0cSpringMVC \u8f6c\u6362\u9ed8\u8ba4\u4f7f\u7528 Jackson\u3002 \u5bfc\u5165 jar \u5305\u3002 \u521b\u5efa\u6838\u5fc3\u5bf9\u8c61\u3002 \u8c03\u7528\u65b9\u6cd5\u5b8c\u6210\u8f6c\u6362\u3002 \u5e38\u7528\u7c7b ObjectMapper\u5e38\u7528\u65b9\u6cd5 2.3\u3001JSON\u8f6c\u6362\u7ec3\u4e60 \u00b6 \u5bf9\u8c61\u8f6c JSON, JSON \u8f6c\u5bf9\u8c61\u3002 ```java / JSON\u8f6c\u6362\u5de5\u5177\u7684\u4f7f\u7528 / public class ObjectMapperTest { private ObjectMapper mapper = new ObjectMapper(); / 1.User\u5bf9\u8c61\u8f6cjson, json\u8f6cUser\u5bf9\u8c61 json\u5b57\u7b26\u4e32 = {\"name\":\"\u5f20\u4e09\",\"age\":23} user\u5bf9\u8c61 = User{name='\u5f20\u4e09', age=23} / @Test public void test01() throws Exception{ //User\u5bf9\u8c61\u8f6cjson User user = new User(\"\u5f20\u4e09\",23); String json = mapper.writeValueAsString(user); System.out.println(\"json\u5b57\u7b26\u4e32\uff1a\" + json); //json\u8f6cUser\u5bf9\u8c61 User user2 = mapper.readValue(json, User.class); System.out.println(\"java\u5bf9\u8c61\uff1a\" + user2); } } ``` Map\u8f6c JSON, JSON \u8f6c Map\u3002 ```java / 2.map \u8f6cjson, json\u8f6cmap json\u5b57\u7b26\u4e32 = {\"\u59d3\u540d\":\"\u5f20\u4e09\",\"\u6027\u522b\":\"\u7537\"} map\u5bf9\u8c61 = {\u59d3\u540d=\u5f20\u4e09, \u6027\u522b=\u7537} / @Test public void test02() throws Exception{ //map \u8f6cjson HashMap map = new HashMap<>(); map.put(\"\u59d3\u540d\",\"\u5f20\u4e09\"); map.put(\"\u6027\u522b\",\"\u7537\"); String json = mapper.writeValueAsString(map); System.out.println(\"json\u5b57\u7b26\u4e32\uff1a\" + json); //json\u8f6cmap<String,String> HashMap<String,String> map2 = mapper.readValue(json, HashMap.class); System.out.println(\"java\u5bf9\u8c61\uff1a\" + map2); } ``` Map\u8f6c JSON, JSON \u8f6c Map\u3002 ```java / 3.map \u8f6cjson, json\u8f6cmap json\u5b57\u7b26\u4e32 = {\"\u9ed1\u9a6c\u4e00\u73ed\":{\"name\":\"\u5f20\u4e09\",\"age\":23},\"\u9ed1\u9a6c\u4e8c\u73ed\":{\"name\":\"\u674e\u56db\",\"age\":24}} map\u5bf9\u8c61 = {\u9ed1\u9a6c\u4e00\u73ed=User{name='\u5f20\u4e09', age=23}, \u9ed1\u9a6c\u4e8c\u73ed=User{name='\u674e\u56db', age=24}} / @Test public void test03() throws Exception{ //map \u8f6cjson HashMap map = new HashMap<>(); map.put(\"\u9ed1\u9a6c\u4e00\u73ed\",new User(\"\u5f20\u4e09\",23)); map.put(\"\u9ed1\u9a6c\u4e8c\u73ed\",new User(\"\u674e\u56db\",24)); String json = mapper.writeValueAsString(map); System.out.println(\"json\u5b57\u7b26\u4e32\uff1a\" + json); //json\u8f6cmap<String,User> HashMap<String,User> map2 = mapper.readValue(json,new TypeReference<HashMap<String,User>>(){}); System.out.println(\"java\u5bf9\u8c61\uff1a\" + map2); } ``` List\u8f6c JSON, JSON \u8f6c List\u3002 ```java / 4.List \u8f6cjson, json\u8f6c List json\u5b57\u7b26\u4e32 = [\"\u5f20\u4e09\",\"\u674e\u56db\"] list\u5bf9\u8c61 = [\u5f20\u4e09, \u674e\u56db] / @Test public void test04() throws Exception{ //List \u8f6cjson ArrayList list = new ArrayList<>(); list.add(\"\u5f20\u4e09\"); list.add(\"\u674e\u56db\"); String json = mapper.writeValueAsString(list); System.out.println(\"json\u5b57\u7b26\u4e32\uff1a\" + json); //json\u8f6c List<String> ArrayList<String> list2 = mapper.readValue(json,ArrayList.class); System.out.println(\"java\u5bf9\u8c61\uff1a\" + list2); } ``` List\u8f6c JSON, JSON \u8f6c List\u3002 ```java / 5.List \u8f6cjson, json\u8f6cList json\u5b57\u7b26\u4e32 = [{\"name\":\"\u5f20\u4e09\",\"age\":23},{\"name\":\"\u674e\u56db\",\"age\":24}] list\u5bf9\u8c61 = [User{name='\u5f20\u4e09', age=23}, User{name='\u674e\u56db', age=24}] / @Test public void test05() throws Exception{ //List \u8f6cjson ArrayList list = new ArrayList<>(); list.add(new User(\"\u5f20\u4e09\",23)); list.add(new User(\"\u674e\u56db\",24)); String json = mapper.writeValueAsString(list); System.out.println(\"json\u5b57\u7b26\u4e32\uff1a\" + json); //json\u8f6cList<User> ArrayList<User> list2 = mapper.readValue(json,new TypeReference<ArrayList<User>>(){}); System.out.println(\"java\u5bf9\u8c61\uff1a\" + list2); } ``` 2.4\u3001\u5c0f\u7ed3 \u00b6 Jackson\uff1a \u5f00\u6e90\u514d\u8d39\u7684 JSON \u8f6c\u6362\u5de5\u5177\uff0cSpringMVC \u8f6c\u6362\u9ed8\u8ba4\u4f7f\u7528 Jackson\u3002 \u53ef\u4ee5\u5c06 JAVA \u5bf9\u8c61\u6216\u96c6\u5408\u8f6c\u6362\u6210 JSON \u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u5c06 JSON \u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u8f6c\u6210 JAVA \u5bf9\u8c61\u3002 \u5e38\u7528\u7c7b 3\u3001\u7efc\u5408\u6848\u4f8b \u641c\u7d22\u8054\u60f3 \u00b6 \u6848\u4f8b\u6548\u679c\u548c\u73af\u5883\u4ecb\u7ecd \u6848\u4f8b\u5206\u6790 \u9875\u9762 \u4e3a\u7528\u6237\u540d\u8f93\u5165\u6846\u7ed1\u5b9a\u9f20\u6807\u70b9\u51fb\u4e8b\u4ef6\u3002 \u83b7\u53d6\u8f93\u5165\u7684\u7528\u6237\u540d\u6570\u636e\u3002 \u5224\u65ad\u7528\u6237\u540d\u662f\u5426\u4e3a\u7a7a\u3002 \u5982\u679c\u4e3a\u7a7a\uff0c\u5219\u5c06\u8054\u60f3\u63d0\u793a\u6846\u9690\u85cf\u3002 \u5982\u679c\u4e0d\u4e3a\u7a7a\uff0c\u5219\u53d1\u9001 AJAX \u8bf7\u6c42\uff0c\u5e76\u5c06\u54cd\u5e94\u7684\u6570\u636e\u663e\u793a\u5230\u8054\u60f3\u6846\u3002 \u63a7\u5236\u5c42 \u83b7\u53d6\u8bf7\u6c42\u53c2\u6570\u3002 \u8c03\u7528\u4e1a\u52a1\u5c42\u7684\u6a21\u7cca\u67e5\u8be2\u65b9\u6cd5\u3002 \u5c06\u8fd4\u56de\u7684\u6570\u636e\u8f6c\u6210 JSON\uff0c\u5e76\u54cd\u5e94\u7ed9\u5ba2\u6237\u7aef\u3002 \u4ee3\u7801\u5b9e\u73b0 html\u9875\u9762 ```html <!DOCTYPE html> \u7528\u6237\u641c\u7d22","title":"AJAX"},{"location":"ajax/#1ajax","text":"","title":"1\u3001Ajax\u5feb\u901f\u5165\u95e8"},{"location":"ajax/#11ajax","text":"AJAX(Asynchronous JavaScript And XML)\uff1a\u5f02\u6b65\u7684 JavaScript \u548c XML\u3002 \u672c\u8eab\u4e0d\u662f\u4e00\u79cd\u65b0\u6280\u672f\uff0c\u800c\u662f\u591a\u4e2a\u6280\u672f\u7efc\u5408\u3002\u7528\u4e8e\u5feb\u901f\u521b\u5efa\u52a8\u6001\u7f51\u9875\u7684\u6280\u672f\u3002 \u4e00\u822c\u7684\u7f51\u9875\u5982\u679c\u9700\u8981\u66f4\u65b0\u5185\u5bb9\uff0c\u5fc5\u9700\u91cd\u65b0\u52a0\u8f7d\u4e2a\u9875\u9762\u3002 \u800c AJAX \u901a\u8fc7\u6d4f\u89c8\u5668\u4e0e\u670d\u52a1\u5668\u8fdb\u884c\u5c11\u91cf\u6570\u636e\u4ea4\u6362\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7f51\u9875\u5b9e\u73b0\u5f02\u6b65\u66f4\u65b0\u3002\u4e5f\u5c31\u662f\u5728\u4e0d\u91cd\u65b0\u52a0\u8f7d\u6574\u4e2a\u9875 \u9762\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u7f51\u9875\u7684\u90e8\u5206\u5185\u5bb9\u8fdb\u884c \u5c40\u90e8\u66f4\u65b0 \u3002 \u200b \u200b","title":"1.1\u3001AJAX\u4ecb\u7ecd"},{"location":"ajax/#12jsajax","text":"\u4ee3\u7801\u5b9e\u73b0 ```java import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; @WebServlet(\"/userServlet\") public class UserServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //\u8bbe\u7f6e\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u4e71\u7801 req.setCharacterEncoding(\"UTF-8\"); resp.setContentType(\"text/html;charset=UTF-8\"); //1.\u83b7\u53d6\u8bf7\u6c42\u53c2\u6570 String username = req.getParameter(\"username\"); //\u6a21\u62df\u670d\u52a1\u5668\u5904\u7406\u8bf7\u6c42\u9700\u89815\u79d2\u949f /*try { Thread.sleep(5000); } catch (InterruptedException e) { e.printStackTrace(); }*/ //2.\u5224\u65ad\u59d3\u540d\u662f\u5426\u5df2\u6ce8\u518c if(\"zhangsan\".equals(username)) { resp.getWriter().write(\" <font color= 'red' > \u7528\u6237\u540d\u5df2\u6ce8\u518c </font> \"); }else { resp.getWriter().write(\" <font color= 'green' > \u7528\u6237\u540d\u53ef\u7528 </font> \"); } } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { doGet(req,resp); } } ``` html\u4ee3\u7801 ```html \u7528\u6237\u6ce8\u518c \u59d3\u540d\uff1a \u5bc6\u7801\uff1a //1.\u4e3a\u59d3\u540d\u7ed1\u5b9a\u5931\u53bb\u7126\u70b9\u4e8b\u4ef6 document.getElementById(\"username\").onblur = function() { //2.\u521b\u5efaXMLHttpRequest\u6838\u5fc3\u5bf9\u8c61 let xmlHttp = new XMLHttpRequest(); //3.\u6253\u5f00\u94fe\u63a5 let username = document.getElementById(\"username\").value; xmlHttp.open(\"GET\",\"userServlet?username=\"+username,true); //xmlHttp.open(\"GET\",\"userServlet?username=\"+username,false); //4.\u53d1\u9001\u8bf7\u6c42 xmlHttp.send(); //5.\u5904\u7406\u54cd\u5e94 xmlHttp.onreadystatechange = function() { //\u5224\u65ad\u8bf7\u6c42\u548c\u54cd\u5e94\u662f\u5426\u6210\u529f if(xmlHttp.readyState == 4 && xmlHttp.status == 200) { //\u5c06\u54cd\u5e94\u7684\u6570\u636e\u663e\u793a\u5230span\u6807\u7b7e document.getElementById(\"uSpan\").innerHTML = xmlHttp.responseText; } } } ```","title":"1.2\u3001\u539f\u751fJS\u5b9e\u73b0AJAX"},{"location":"ajax/#13jsajax","text":"\u6838\u5fc3\u5bf9\u8c61\uff1aXMLHttpRequest \u200b \u7528\u4e8e\u5728\u540e\u53f0\u4e0e\u670d\u52a1\u5668\u4ea4\u6362\u6570\u636e\u3002\u53ef\u4ee5\u5728\u4e0d\u91cd\u65b0\u52a0\u8f7d\u6574\u4e2a\u7f51\u9875\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u7f51\u9875\u7684\u67d0\u90e8\u5206\u8fdb\u884c\u66f4\u65b0\u3002 \u6253\u5f00\u94fe\u63a5\uff1aopen(method,url,async) \u200b method\uff1a\u8bf7\u6c42\u7684\u7c7b\u578b GET \u6216 POST\u3002 \u200b url\uff1a\u8bf7\u6c42\u8d44\u6e90\u7684\u8def\u5f84\u3002 \u200b async\uff1atrue(\u5f02\u6b65) \u6216 false(\u540c\u6b65)\u3002 \u53d1\u9001\u8bf7\u6c42\uff1asend(String params) \u200b params\uff1a\u8bf7\u6c42\u7684\u53c2\u6570(POST \u4e13\u7528)\u3002 \u5904\u7406\u54cd\u5e94\uff1aonreadystatechange \u200b readyState\uff1a0-\u8bf7\u6c42\u672a\u521d\u59cb\u5316\uff0c1-\u670d\u52a1\u5668\u8fde\u63a5\u5df2\u5efa\u7acb\uff0c2-\u8bf7\u6c42\u5df2\u63a5\u6536\uff0c3-\u8bf7\u6c42\u5904\u7406\u4e2d\uff0c4-\u8bf7\u6c42\u5df2\u5b8c\u6210\uff0c\u4e14\u54cd\u5e94\u5df2\u5c31\u7eea\u3002 \u200b status\uff1a200-\u54cd\u5e94\u5df2\u5168\u90e8 OK\u3002 \u83b7\u5f97\u54cd\u5e94\u6570\u636e\u5f62\u5f0f \u200b responseText\uff1a\u83b7\u5f97\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u54cd\u5e94\u6570\u636e\u3002 \u200b responseXML\uff1a\u83b7\u5f97 XML \u5f62\u5f0f\u7684\u54cd\u5e94\u6570\u636e\u3002","title":"1.3\u3001\u539f\u751fJS\u5b9e\u73b0AJAX\u8be6\u89e3"},{"location":"ajax/#14jquerygetajax","text":"\u6838\u5fc3\u8bed\u6cd5\uff1a $.get(url,[data],[callback],[type]); url\uff1a\u8bf7\u6c42\u7684\u8d44\u6e90\u8def\u5f84\u3002 data\uff1a\u53d1\u9001\u7ed9\u670d\u52a1\u5668\u7aef\u7684\u8bf7\u6c42\u53c2\u6570\uff0c\u683c\u5f0f\u53ef\u4ee5\u662fkey=value\uff0c\u4e5f\u53ef\u4ee5\u662f js \u5bf9\u8c61\u3002 callback\uff1a\u5f53\u8bf7\u6c42\u6210\u529f\u540e\u7684\u56de\u8c03\u51fd\u6570\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u4e2d\u7f16\u5199\u6211\u4eec\u7684\u903b\u8f91\u4ee3\u7801\u3002 type\uff1a\u9884\u671f\u7684\u8fd4\u56de\u6570\u636e\u7684\u7c7b\u578b\uff0c\u53d6\u503c\u53ef\u4ee5\u662f xml, html, js, json, text\u7b49\u3002 \u4ee3\u7801\u5b9e\u73b0 ```html \u7528\u6237\u6ce8\u518c \u59d3\u540d\uff1a \u5bc6\u7801\uff1a //1.\u4e3a\u7528\u6237\u540d\u7ed1\u5b9a\u5931\u53bb\u7126\u70b9\u4e8b\u4ef6 $(\"#username\").blur(function () { let username = $(\"#username\").val(); //2.jQuery\u7684GET\u65b9\u5f0f\u5b9e\u73b0AJAX $.get( //\u8bf7\u6c42\u7684\u8d44\u6e90\u8def\u5f84 \"userServlet\", //\u8bf7\u6c42\u53c2\u6570 \"username=\" + username, //\u56de\u8c03\u51fd\u6570 function (data) { //\u5c06\u54cd\u5e94\u7684\u6570\u636e\u663e\u793a\u5230span\u6807\u7b7e $(\"#uSpan\").html(data); }, //\u54cd\u5e94\u6570\u636e\u5f62\u5f0f \"text\" ); }); ```","title":"1.4\u3001JQuery\u7684GET\u65b9\u5f0f\u5b9e\u73b0AJAX"},{"location":"ajax/#15jquerypostajax","text":"\u6838\u5fc3\u8bed\u6cd5\uff1a $.post(url,[data],[callback],[type]); url\uff1a\u8bf7\u6c42\u7684\u8d44\u6e90\u8def\u5f84\u3002 data\uff1a\u53d1\u9001\u7ed9\u670d\u52a1\u5668\u7aef\u7684\u8bf7\u6c42\u53c2\u6570\uff0c\u683c\u5f0f\u53ef\u4ee5\u662fkey=value\uff0c\u4e5f\u53ef\u4ee5\u662f js \u5bf9\u8c61\u3002 callback\uff1a\u5f53\u8bf7\u6c42\u6210\u529f\u540e\u7684\u56de\u8c03\u51fd\u6570\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u4e2d\u7f16\u5199\u6211\u4eec\u7684\u903b\u8f91\u4ee3\u7801\u3002 type\uff1a\u9884\u671f\u7684\u8fd4\u56de\u6570\u636e\u7684\u7c7b\u578b\uff0c\u53d6\u503c\u53ef\u4ee5\u662f xml, html, js, json, text\u7b49\u3002 \u4ee3\u7801\u5b9e\u73b0 ```html \u7528\u6237\u6ce8\u518c \u59d3\u540d\uff1a \u5bc6\u7801\uff1a //1.\u4e3a\u7528\u6237\u540d\u7ed1\u5b9a\u5931\u53bb\u7126\u70b9\u4e8b\u4ef6 $(\"#username\").blur(function () { let username = $(\"#username\").val(); //2.jQuery\u7684POST\u65b9\u5f0f\u5b9e\u73b0AJAX $.post( //\u8bf7\u6c42\u7684\u8d44\u6e90\u8def\u5f84 \"userServlet\", //\u8bf7\u6c42\u53c2\u6570 \"username=\" + username, //\u56de\u8c03\u51fd\u6570 function (data) { //\u5c06\u54cd\u5e94\u7684\u6570\u636e\u663e\u793a\u5230span\u6807\u7b7e $(\"#uSpan\").html(data); }, //\u54cd\u5e94\u6570\u636e\u5f62\u5f0f \"text\" ); }); ```","title":"1.5\u3001JQuery\u7684POST\u65b9\u5f0f\u5b9e\u73b0AJAX"},{"location":"ajax/#16jqueryajax","text":"\u6838\u5fc3\u8bed\u6cd5\uff1a $.ajax({name:value,name:value,\u2026}); url\uff1a\u8bf7\u6c42\u7684\u8d44\u6e90\u8def\u5f84\u3002 async\uff1a\u662f\u5426\u5f02\u6b65\u8bf7\u6c42\uff0ctrue-\u662f\uff0cfalse-\u5426 (\u9ed8\u8ba4\u662f true)\u3002 data\uff1a\u53d1\u9001\u5230\u670d\u52a1\u5668\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u662f\u952e\u503c\u5bf9\u5f62\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u662f js \u5bf9\u8c61\u5f62\u5f0f\u3002 type\uff1a\u8bf7\u6c42\u65b9\u5f0f\uff0cPOST \u6216 GET (\u9ed8\u8ba4\u662f GET)\u3002 dataType\uff1a\u9884\u671f\u7684\u8fd4\u56de\u6570\u636e\u7684\u7c7b\u578b\uff0c\u53d6\u503c\u53ef\u4ee5\u662f xml, html, js, json, text\u7b49\u3002 success\uff1a\u8bf7\u6c42\u6210\u529f\u65f6\u8c03\u7528\u7684\u56de\u8c03\u51fd\u6570\u3002 error\uff1a\u8bf7\u6c42\u5931\u8d25\u65f6\u8c03\u7528\u7684\u56de\u8c03\u51fd\u6570\u3002 \u4ee3\u7801\u5b9e\u73b0 ```html \u7528\u6237\u6ce8\u518c \u59d3\u540d\uff1a \u5bc6\u7801\uff1a //1.\u4e3a\u7528\u6237\u540d\u7ed1\u5b9a\u5931\u53bb\u7126\u70b9\u4e8b\u4ef6 $(\"#username\").blur(function () { let username = $(\"#username\").val(); //2.jQuery\u7684\u901a\u7528\u65b9\u5f0f\u5b9e\u73b0AJAX $.ajax({ //\u8bf7\u6c42\u8d44\u6e90\u8def\u5f84 url:\"userServletxxx\", //\u662f\u5426\u5f02\u6b65 async:true, //\u8bf7\u6c42\u53c2\u6570 data:\"username=\"+username, //\u8bf7\u6c42\u65b9\u5f0f type:\"POST\", //\u6570\u636e\u5f62\u5f0f dataType:\"text\", //\u8bf7\u6c42\u6210\u529f\u540e\u8c03\u7528\u7684\u56de\u8c03\u51fd\u6570 success:function (data) { //\u5c06\u54cd\u5e94\u7684\u6570\u636e\u663e\u793a\u5230span\u6807\u7b7e $(\"#uSpan\").html(data); }, //\u8bf7\u6c42\u5931\u8d25\u540e\u8c03\u7528\u7684\u56de\u8c03\u51fd\u6570 error:function () { alert(\"\u64cd\u4f5c\u5931\u8d25...\"); } }); }); ```","title":"1.6\u3001JQuery\u7684\u901a\u7528\u65b9\u5f0f\u5b9e\u73b0AJAX"},{"location":"ajax/#17","text":"AJAX(Asynchronous JavaScript And XML)\uff1a \u5f02\u6b65\u7684 JavaScript \u548c XML\u3002 \u901a\u8fc7\u6d4f\u89c8\u5668\u4e0e\u670d\u52a1\u5668\u8fdb\u884c\u5c11\u91cf\u6570\u636e\u4ea4\u6362\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7f51\u9875\u5b9e\u73b0\u5f02\u6b65\u66f4\u65b0\u3002\u4e5f\u5c31\u662f\u5728\u4e0d\u91cd\u65b0\u52a0\u8f7d\u6574\u4e2a\u9875\u9762\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u7f51\u9875\u7684\u90e8 \u5206\u5185\u5bb9\u8fdb\u884c\u5c40\u90e8\u66f4\u65b0\u3002 \u540c\u6b65\u548c\u5f02\u6b65 \u540c\u6b65\uff1a\u670d\u52a1\u5668\u7aef\u5728\u5904\u7406\u8fc7\u7a0b\u4e2d\uff0c\u65e0\u6cd5\u8fdb\u884c\u5176\u4ed6\u64cd\u4f5c\u3002 \u5f02\u6b65\uff1a\u670d\u52a1\u5668\u7aef\u5728\u5904\u7406\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u8fdb\u884c\u5176\u4ed6\u64cd\u4f5c\u3002 GET \u65b9\u5f0f\u5b9e\u73b0\uff1a $.get(); POST \u65b9\u5f0f\u5b9e\u73b0\uff1a $.post(); url\uff1a\u8bf7\u6c42\u7684\u8d44\u6e90\u8def\u5f84\u3002 data\uff1a\u53d1\u9001\u7ed9\u670d\u52a1\u5668\u7aef\u7684\u8bf7\u6c42\u53c2\u6570\uff0c\u683c\u5f0f\u53ef\u4ee5\u662fkey=value\uff0c\u4e5f\u53ef\u4ee5\u662f js \u5bf9\u8c61\u3002 callback\uff1a\u5f53\u8bf7\u6c42\u6210\u529f\u540e\u7684\u56de\u8c03\u51fd\u6570\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u4e2d\u7f16\u5199\u6211\u4eec\u7684\u903b\u8f91\u4ee3\u7801\u3002 type\uff1a\u9884\u671f\u7684\u8fd4\u56de\u6570\u636e\u7684\u7c7b\u578b\uff0c\u53d6\u503c\u53ef\u4ee5\u662f xml, html, js, json, text\u7b49\u3002 \u901a\u7528\u65b9\u5f0f\u5b9e\u73b0\uff1a $.ajax(); url\uff1a\u8bf7\u6c42\u7684\u8d44\u6e90\u8def\u5f84\u3002 async\uff1a\u662f\u5426\u5f02\u6b65\u8bf7\u6c42\uff0ctrue-\u662f\uff0cfalse-\u5426 (\u9ed8\u8ba4\u662f true)\u3002 data\uff1a\u53d1\u9001\u5230\u670d\u52a1\u5668\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u662f\u952e\u503c\u5bf9\u5f62\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u662f js \u5bf9\u8c61\u5f62\u5f0f\u3002 type\uff1a\u8bf7\u6c42\u65b9\u5f0f\uff0cPOST \u6216 GET (\u9ed8\u8ba4\u662f GET)\u3002 dataType\uff1a\u9884\u671f\u7684\u8fd4\u56de\u6570\u636e\u7684\u7c7b\u578b\uff0c\u53d6\u503c\u53ef\u4ee5\u662f xml, html, js, json, text\u7b49\u3002 success\uff1a\u8bf7\u6c42\u6210\u529f\u65f6\u8c03\u7528\u7684\u56de\u8c03\u51fd\u6570\u3002 error\uff1a\u8bf7\u6c42\u5931\u8d25\u65f6\u8c03\u7528\u7684\u56de\u8c03\u51fd\u6570\u3002","title":"1.7\u3001\u5c0f\u7ed3"},{"location":"ajax/#2json","text":"","title":"2\u3001JSON\u7684\u5904\u7406"},{"location":"ajax/#21json","text":"JSON(JavaScript Object Notation)\uff1a\u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u7684\u6570\u636e\u4ea4\u6362\u683c\u5f0f\u3002 \u5b83\u662f\u57fa\u4e8e ECMAScript \u89c4\u8303\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u91c7\u7528\u5b8c\u5168\u72ec\u7acb\u4e8e\u7f16\u7a0b\u8bed\u8a00\u7684\u6587\u672c\u683c\u5f0f\u6765\u5b58\u50a8\u548c\u8868\u793a\u6570\u636e\u3002 \u7b80\u6d01\u548c\u6e05\u6670\u7684\u5c42\u6b21\u7ed3\u6784\u4f7f\u5f97 JSON \u6210\u4e3a\u7406\u60f3\u7684\u6570\u636e\u4ea4\u6362\u8bed\u8a00\u3002\u6613\u4e8e\u4eba\u9605\u8bfb\u548c\u7f16\u5199\uff0c\u540c\u65f6\u4e5f\u6613\u4e8e\u8ba1\u7b97\u673a\u89e3\u6790\u548c\u751f\u6210\uff0c\u5e76\u6709\u6548\u7684 \u63d0\u5347\u7f51\u7edc\u4f20\u8f93\u6548\u7387\u3002 \u521b\u5efa\u683c\u5f0f \u5e38\u7528\u65b9\u6cd5","title":"2.1\u3001JSON\u56de\u987e"},{"location":"ajax/#22json","text":"\u6211\u4eec\u9664\u4e86\u53ef\u4ee5\u5728 JavaScript \u4e2d\u6765\u4f7f\u7528 JSON \u4ee5\u5916\uff0c\u5728 JAVA \u4e2d\u540c\u6837\u4e5f\u53ef\u4ee5\u4f7f\u7528 JSON\u3002 JSON \u7684\u8f6c\u6362\u5de5\u5177\u662f\u901a\u8fc7 JAVA \u5c01\u88c5\u597d\u7684\u4e00\u4e9b JAR \u5de5\u5177\u5305\u3002 \u53ef\u4ee5\u5c06 JAVA \u5bf9\u8c61\u6216\u96c6\u5408\u8f6c\u6362\u6210 JSON \u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u5c06 JSON \u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u8f6c\u6210 JAVA \u5bf9\u8c61\u3002 Jackson\uff1a\u5f00\u6e90\u514d\u8d39\u7684 JSON \u8f6c\u6362\u5de5\u5177\uff0cSpringMVC \u8f6c\u6362\u9ed8\u8ba4\u4f7f\u7528 Jackson\u3002 \u5bfc\u5165 jar \u5305\u3002 \u521b\u5efa\u6838\u5fc3\u5bf9\u8c61\u3002 \u8c03\u7528\u65b9\u6cd5\u5b8c\u6210\u8f6c\u6362\u3002 \u5e38\u7528\u7c7b ObjectMapper\u5e38\u7528\u65b9\u6cd5","title":"2.2\u3001JSON\u8f6c\u6362\u5de5\u5177\u7684\u4ecb\u7ecd"},{"location":"ajax/#23json","text":"\u5bf9\u8c61\u8f6c JSON, JSON \u8f6c\u5bf9\u8c61\u3002 ```java / JSON\u8f6c\u6362\u5de5\u5177\u7684\u4f7f\u7528 / public class ObjectMapperTest { private ObjectMapper mapper = new ObjectMapper(); / 1.User\u5bf9\u8c61\u8f6cjson, json\u8f6cUser\u5bf9\u8c61 json\u5b57\u7b26\u4e32 = {\"name\":\"\u5f20\u4e09\",\"age\":23} user\u5bf9\u8c61 = User{name='\u5f20\u4e09', age=23} / @Test public void test01() throws Exception{ //User\u5bf9\u8c61\u8f6cjson User user = new User(\"\u5f20\u4e09\",23); String json = mapper.writeValueAsString(user); System.out.println(\"json\u5b57\u7b26\u4e32\uff1a\" + json); //json\u8f6cUser\u5bf9\u8c61 User user2 = mapper.readValue(json, User.class); System.out.println(\"java\u5bf9\u8c61\uff1a\" + user2); } } ``` Map\u8f6c JSON, JSON \u8f6c Map\u3002 ```java / 2.map \u8f6cjson, json\u8f6cmap json\u5b57\u7b26\u4e32 = {\"\u59d3\u540d\":\"\u5f20\u4e09\",\"\u6027\u522b\":\"\u7537\"} map\u5bf9\u8c61 = {\u59d3\u540d=\u5f20\u4e09, \u6027\u522b=\u7537} / @Test public void test02() throws Exception{ //map \u8f6cjson HashMap map = new HashMap<>(); map.put(\"\u59d3\u540d\",\"\u5f20\u4e09\"); map.put(\"\u6027\u522b\",\"\u7537\"); String json = mapper.writeValueAsString(map); System.out.println(\"json\u5b57\u7b26\u4e32\uff1a\" + json); //json\u8f6cmap<String,String> HashMap<String,String> map2 = mapper.readValue(json, HashMap.class); System.out.println(\"java\u5bf9\u8c61\uff1a\" + map2); } ``` Map\u8f6c JSON, JSON \u8f6c Map\u3002 ```java / 3.map \u8f6cjson, json\u8f6cmap json\u5b57\u7b26\u4e32 = {\"\u9ed1\u9a6c\u4e00\u73ed\":{\"name\":\"\u5f20\u4e09\",\"age\":23},\"\u9ed1\u9a6c\u4e8c\u73ed\":{\"name\":\"\u674e\u56db\",\"age\":24}} map\u5bf9\u8c61 = {\u9ed1\u9a6c\u4e00\u73ed=User{name='\u5f20\u4e09', age=23}, \u9ed1\u9a6c\u4e8c\u73ed=User{name='\u674e\u56db', age=24}} / @Test public void test03() throws Exception{ //map \u8f6cjson HashMap map = new HashMap<>(); map.put(\"\u9ed1\u9a6c\u4e00\u73ed\",new User(\"\u5f20\u4e09\",23)); map.put(\"\u9ed1\u9a6c\u4e8c\u73ed\",new User(\"\u674e\u56db\",24)); String json = mapper.writeValueAsString(map); System.out.println(\"json\u5b57\u7b26\u4e32\uff1a\" + json); //json\u8f6cmap<String,User> HashMap<String,User> map2 = mapper.readValue(json,new TypeReference<HashMap<String,User>>(){}); System.out.println(\"java\u5bf9\u8c61\uff1a\" + map2); } ``` List\u8f6c JSON, JSON \u8f6c List\u3002 ```java / 4.List \u8f6cjson, json\u8f6c List json\u5b57\u7b26\u4e32 = [\"\u5f20\u4e09\",\"\u674e\u56db\"] list\u5bf9\u8c61 = [\u5f20\u4e09, \u674e\u56db] / @Test public void test04() throws Exception{ //List \u8f6cjson ArrayList list = new ArrayList<>(); list.add(\"\u5f20\u4e09\"); list.add(\"\u674e\u56db\"); String json = mapper.writeValueAsString(list); System.out.println(\"json\u5b57\u7b26\u4e32\uff1a\" + json); //json\u8f6c List<String> ArrayList<String> list2 = mapper.readValue(json,ArrayList.class); System.out.println(\"java\u5bf9\u8c61\uff1a\" + list2); } ``` List\u8f6c JSON, JSON \u8f6c List\u3002 ```java / 5.List \u8f6cjson, json\u8f6cList json\u5b57\u7b26\u4e32 = [{\"name\":\"\u5f20\u4e09\",\"age\":23},{\"name\":\"\u674e\u56db\",\"age\":24}] list\u5bf9\u8c61 = [User{name='\u5f20\u4e09', age=23}, User{name='\u674e\u56db', age=24}] / @Test public void test05() throws Exception{ //List \u8f6cjson ArrayList list = new ArrayList<>(); list.add(new User(\"\u5f20\u4e09\",23)); list.add(new User(\"\u674e\u56db\",24)); String json = mapper.writeValueAsString(list); System.out.println(\"json\u5b57\u7b26\u4e32\uff1a\" + json); //json\u8f6cList<User> ArrayList<User> list2 = mapper.readValue(json,new TypeReference<ArrayList<User>>(){}); System.out.println(\"java\u5bf9\u8c61\uff1a\" + list2); } ```","title":"2.3\u3001JSON\u8f6c\u6362\u7ec3\u4e60"},{"location":"ajax/#24","text":"Jackson\uff1a \u5f00\u6e90\u514d\u8d39\u7684 JSON \u8f6c\u6362\u5de5\u5177\uff0cSpringMVC \u8f6c\u6362\u9ed8\u8ba4\u4f7f\u7528 Jackson\u3002 \u53ef\u4ee5\u5c06 JAVA \u5bf9\u8c61\u6216\u96c6\u5408\u8f6c\u6362\u6210 JSON \u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u5c06 JSON \u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u8f6c\u6210 JAVA \u5bf9\u8c61\u3002 \u5e38\u7528\u7c7b","title":"2.4\u3001\u5c0f\u7ed3"},{"location":"ajax/#3","text":"\u6848\u4f8b\u6548\u679c\u548c\u73af\u5883\u4ecb\u7ecd \u6848\u4f8b\u5206\u6790 \u9875\u9762 \u4e3a\u7528\u6237\u540d\u8f93\u5165\u6846\u7ed1\u5b9a\u9f20\u6807\u70b9\u51fb\u4e8b\u4ef6\u3002 \u83b7\u53d6\u8f93\u5165\u7684\u7528\u6237\u540d\u6570\u636e\u3002 \u5224\u65ad\u7528\u6237\u540d\u662f\u5426\u4e3a\u7a7a\u3002 \u5982\u679c\u4e3a\u7a7a\uff0c\u5219\u5c06\u8054\u60f3\u63d0\u793a\u6846\u9690\u85cf\u3002 \u5982\u679c\u4e0d\u4e3a\u7a7a\uff0c\u5219\u53d1\u9001 AJAX \u8bf7\u6c42\uff0c\u5e76\u5c06\u54cd\u5e94\u7684\u6570\u636e\u663e\u793a\u5230\u8054\u60f3\u6846\u3002 \u63a7\u5236\u5c42 \u83b7\u53d6\u8bf7\u6c42\u53c2\u6570\u3002 \u8c03\u7528\u4e1a\u52a1\u5c42\u7684\u6a21\u7cca\u67e5\u8be2\u65b9\u6cd5\u3002 \u5c06\u8fd4\u56de\u7684\u6570\u636e\u8f6c\u6210 JSON\uff0c\u5e76\u54cd\u5e94\u7ed9\u5ba2\u6237\u7aef\u3002 \u4ee3\u7801\u5b9e\u73b0 html\u9875\u9762 ```html <!DOCTYPE html> \u7528\u6237\u641c\u7d22","title":"3\u3001\u7efc\u5408\u6848\u4f8b \u641c\u7d22\u8054\u60f3"},{"location":"docker/1/","text":"\u521d\u8bc6 Docker \u00b6 1.1\u5b89\u88c5docker \u00b6 Docker\u53ef\u4ee5\u8fd0\u884c\u5728MAC\u3001Windows\u3001CentOS\u3001UBUNTU\u7b49\u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u672c\u8bfe\u7a0b\u57fa\u4e8eCentOS 7 \u5b89\u88c5 Docker\u3002\u5b98\u7f51\uff1ahttps://www.docker.com # 1\u3001yum \u5305\u66f4\u65b0\u5230\u6700\u65b0 yum update # 2\u3001\u5b89\u88c5\u9700\u8981\u7684\u8f6f\u4ef6\u5305\uff0c yum-util \u63d0\u4f9byum-config-manager\u529f\u80fd\uff0c\u53e6\u5916\u4e24\u4e2a\u662fdevicemapper\u9a71\u52a8\u4f9d\u8d56\u7684 yum install -y yum-utils device-mapper-persistent-data lvm2 # 3\u3001 \u8bbe\u7f6eyum\u6e90 yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo # 4\u3001 \u5b89\u88c5docker\uff0c\u51fa\u73b0\u8f93\u5165\u7684\u754c\u9762\u90fd\u6309 y yum install -y docker-ce # 5\u3001 \u67e5\u770bdocker\u7248\u672c\uff0c\u9a8c\u8bc1\u662f\u5426\u9a8c\u8bc1\u6210\u529f docker -v 1.2\u914d\u7f6e Docker \u955c\u50cf\u52a0\u901f\u5668 \u00b6","title":"\u521d\u8bc6 Docker"},{"location":"docker/1/#docker","text":"","title":"\u521d\u8bc6 Docker"},{"location":"docker/1/#11docker","text":"Docker\u53ef\u4ee5\u8fd0\u884c\u5728MAC\u3001Windows\u3001CentOS\u3001UBUNTU\u7b49\u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u672c\u8bfe\u7a0b\u57fa\u4e8eCentOS 7 \u5b89\u88c5 Docker\u3002\u5b98\u7f51\uff1ahttps://www.docker.com # 1\u3001yum \u5305\u66f4\u65b0\u5230\u6700\u65b0 yum update # 2\u3001\u5b89\u88c5\u9700\u8981\u7684\u8f6f\u4ef6\u5305\uff0c yum-util \u63d0\u4f9byum-config-manager\u529f\u80fd\uff0c\u53e6\u5916\u4e24\u4e2a\u662fdevicemapper\u9a71\u52a8\u4f9d\u8d56\u7684 yum install -y yum-utils device-mapper-persistent-data lvm2 # 3\u3001 \u8bbe\u7f6eyum\u6e90 yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo # 4\u3001 \u5b89\u88c5docker\uff0c\u51fa\u73b0\u8f93\u5165\u7684\u754c\u9762\u90fd\u6309 y yum install -y docker-ce # 5\u3001 \u67e5\u770bdocker\u7248\u672c\uff0c\u9a8c\u8bc1\u662f\u5426\u9a8c\u8bc1\u6210\u529f docker -v","title":"1.1\u5b89\u88c5docker"},{"location":"docker/1/#12_docker","text":"","title":"1.2\u914d\u7f6e Docker \u955c\u50cf\u52a0\u901f\u5668"},{"location":"docker/2/","text":"docker\u547d\u4ee4 \u00b6 2.1 \u8fdb\u7a0b\u76f8\u5173\u547d\u4ee4 \u00b6 \u5173\u4e8e\u8fdb\u7a0b\u76f8\u5173\u7684\u547d\u4ee4 2.1.1 \u542f\u52a8docker\u670d\u52a1 \u00b6 systemctl start docker 2.1.2 \u505c\u6b62docker\u670d\u52a1 \u00b6 systemctl stop docker 2.1.3 \u91cd\u542fdocker\u670d\u52a1 \u00b6 systemctl restart docker 2.1.4 \u67e5\u770bdocker\u670d\u52a1\u72b6\u6001 \u00b6 systemctl status docker 2.1.5 \u5f00\u673a\u542f\u52a8docker\u670d\u52a1 \u00b6 systemctl enable docker 2.2 Docker \u955c\u50cf\u76f8\u5173\u547d\u4ee4 \u00b6 2.2.1 \u67e5\u770b\u955c\u50cf \u00b6 \u67e5\u770b\u672c\u5730\u6240\u6709\u7684\u955c\u50cf docker images docker images \u2013q # \u67e5\u770b\u6240\u7528\u955c\u50cf\u7684id REPOSITORY\uff1a\u955c\u50cf\u540d\u79f0 TAG\uff1a\u955c\u50cf\u6807\u7b7e IMAGE ID\uff1a\u955c\u50cfID CREATED\uff1a\u955c\u50cf\u7684\u521b\u5efa\u65e5\u671f SIZE\uff1a\u955c\u50cf\u5927\u5c0f 2.2.2 \u641c\u7d22\u955c\u50cf \u00b6 \u4ece\u7f51\u7edc\u4e2d\u67e5\u627e\u9700\u8981\u7684\u955c\u50cf docker search \u955c\u50cf\u540d\u79f0 NAME\uff1a\u955c\u50cf\u540d\u79f0 DESCRIPTION\uff1a\u955c\u50cf\u63cf\u8ff0 STARS\uff1a\u7528\u6237\u8bc4\u4ef7\uff0c\u53cd\u5e94\u4e00\u4e2a\u955c\u50cf\u7684\u53d7\u6b22\u8fce\u7a0b\u5ea6 OFFICIAL\uff1a\u662f\u5426\u5b98\u65b9 AUTOMATED\uff1a\u81ea\u52a8\u6784\u5efa\uff0c\u8868\u793a\u8be5\u955c\u50cf\u7531Docker Hub\u81ea\u52a8\u6784\u5efa\u6d41\u7a0b\u521b\u5efa\u7684 2.2.3 \u62c9\u53d6\u955c\u50cf \u00b6 \u4eceDocker\u4ed3\u5e93\u4e0b\u8f7d\u955c\u50cf\u5230\u672c\u5730\uff0c\u955c\u50cf\u540d\u79f0\u683c\u5f0f\u4e3a \u540d\u79f0:\u7248\u672c\u53f7\uff0c\u5982\u679c\u7248\u672c\u53f7\u4e0d\u6307\u5b9a\u5219\u662f\u6700\u65b0\u7684\u7248\u672c\u3002 \u5982\u679c\u4e0d\u77e5\u9053\u955c\u50cf\u7248\u672c\uff0c\u53ef\u4ee5\u53bbdocker hub \u641c\u7d22\u5bf9\u5e94\u955c\u50cf\u67e5\u770b\u3002 docker pull \u955c\u50cf\u540d\u79f0 2.2.4 \u5220\u9664\u955c\u50cf \u00b6 \u5220\u9664\u672c\u5730\u955c\u50cf docker rmi \u955c\u50cfid # \u5220\u9664\u6307\u5b9a\u672c\u5730\u955c\u50cf docker rmi ` docker images -q ` # \u5220\u9664\u6240\u6709\u672c\u5730\u955c\u50cf \u5173\u4e8edocker\u66f4\u591a\u547d\u4ee4\uff0c \u5927\u5bb6\u53ef\u4ee5\u83dc\u9e1f\u6559\u7a0b\u67e5\u770b, \u7f51\u5740\uff1a https://www.runoob.com/docker/docker-command-manual.html 2.3 \u5bb9\u5668\u76f8\u5173\u7684\u547d\u4ee4 \u00b6 2.3.1 \u67e5\u770b\u5bb9\u5668 \u00b6 docker ps # \u67e5\u770b\u6b63\u5728\u8fd0\u884c\u7684\u5bb9\u5668 docker ps -a # \u67e5\u770b\u6240\u6709\u5bb9\u5668\uff0c\u5305\u62ec\u6b63\u5728\u8fd0\u884c\u548c\u505c\u6b62\u7684\u5bb9\u5668 2.3.2 \u521b\u5efa\u5e76\u542f\u52a8\u5bb9\u5668 \u00b6 docker run \u53c2\u6570 \u53c2\u6570\u8bf4\u660e\uff1a \u2022 -i\uff1a\u4fdd\u6301\u5bb9\u5668\u8fd0\u884c\u3002\u901a\u5e38\u4e0e -t \u540c\u65f6\u4f7f\u7528\u3002\u52a0\u5165it\u8fd9\u4e24\u4e2a\u53c2\u6570\u540e\uff0c\u5bb9\u5668\u521b\u5efa\u540e\u81ea\u52a8\u8fdb\u5165\u5bb9\u5668\u4e2d\uff0c\u9000\u51fa\u5bb9\u5668\u540e\uff0c\u5bb9\u5668\u81ea\u52a8\u5173\u95ed\u3002 \u2022 -t\uff1a\u4e3a\u5bb9\u5668\u91cd\u65b0\u5206\u914d\u4e00\u4e2a\u4f2a\u8f93\u5165\u7ec8\u7aef\uff0c\u901a\u5e38\u4e0e -i \u540c\u65f6\u4f7f\u7528\u3002 \u2022 -d\uff1a\u4ee5\u5b88\u62a4\uff08\u540e\u53f0\uff09\u6a21\u5f0f\u8fd0\u884c\u5bb9\u5668\u3002\u521b\u5efa\u4e00\u4e2a\u5bb9\u5668\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u9700\u8981\u4f7f\u7528docker exec \u8fdb\u5165\u5bb9\u5668\u3002\u9000\u51fa\u540e\uff0c\u5bb9\u5668\u4e0d\u4f1a\u5173\u95ed\u3002 \u2022 -it \u521b\u5efa\u7684\u5bb9\u5668\u4e00\u822c\u79f0\u4e3a\u4ea4\u4e92\u5f0f\u5bb9\u5668\uff0c-id \u521b\u5efa\u7684\u5bb9\u5668\u4e00\u822c\u79f0\u4e3a\u5b88\u62a4\u5f0f\u5bb9\u5668 \u2022 --name\uff1a\u4e3a\u521b\u5efa\u7684\u5bb9\u5668\u547d\u540d\u3002 1\uff09\u4ea4\u4e92\u5f0f\u5bb9\u5668 \u4ee5 \u4ea4\u4e92\u5f0f \u65b9\u5f0f\u521b\u5efa\u5e76\u542f\u52a8\u5bb9\u5668\uff0c\u542f\u52a8\u5b8c\u6210\u540e\uff0c\u76f4\u63a5\u8fdb\u5165\u5f53\u524d\u5bb9\u5668\u3002\u4f7f\u7528exit\u547d\u4ee4\u9000\u51fa\u5bb9\u5668\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u4ee5\u6b64\u79cd\u65b9\u5f0f \u542f\u52a8\u5bb9\u5668\uff0c\u5982\u679c\u9000\u51fa\u5bb9\u5668\uff0c\u5219\u5bb9\u5668\u4f1a\u8fdb\u5165 \u505c\u6b62 \u72b6\u6001\u3002 # \u5148\u62c9\u53d6\u4e00\u4e2a\u955c\u50cf\uff1b\u8fd9\u4e00\u6b65\u4e0d\u662f\u6bcf\u6b21\u542f\u52a8\u5bb9\u5668\u90fd\u8981\u505a\u7684\uff0c\u800c\u662f\u56e0\u4e3a\u524d\u9762\u6211\u4eec\u5220\u9664\u4e86\u955c\u50cf\uff0c\u65e0\u955c\u50cf\u53ef\u7528\u6240\u4ee5\u624d\u518d\u62c9\u53d6\u4e00\u4e2a docker pull centos:7 #\u521b\u5efa\u5e76\u542f\u52a8\u540d\u79f0\u4e3a mycentos7 \u7684\u4ea4\u4e92\u5f0f\u5bb9\u5668\uff1b\u4e0b\u9762\u6307\u4ee4\u4e2d\u7684\u955c\u50cf\u540d\u79f0 centos:7 \u4e5f\u53ef\u4ee5\u4f7f\u7528\u955c\u50cfid docker run -it --name = mycentos7 centos:7 /bin/bash 2\uff09\u5b88\u62a4\u5f0f\u5bb9\u5668 \u521b\u5efa\u4e00\u4e2a\u5b88\u62a4\u5f0f\u5bb9\u5668\uff1b\u5982\u679c\u5bf9\u4e8e\u4e00\u4e2a\u9700\u8981\u957f\u671f\u8fd0\u884c\u7684\u5bb9\u5668\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5b88\u62a4\u5f0f\u5bb9\u5668\u3002\u547d\u4ee4\u5982\u4e0b\uff08\u5bb9\u5668\u540d\u79f0 \u4e0d\u80fd\u91cd\u590d\uff09\uff1a #\u521b\u5efa\u5e76\u542f\u52a8\u5b88\u62a4\u5f0f\u5bb9\u5668 docker run -di --name = mycentos2 centos:7 #\u767b\u5f55\u8fdb\u5165\u5bb9\u5668\u547d\u4ee4\u4e3a\uff1adocker exec -it container_name (\u6216\u8005 container_id) /bin/bash\uff08exit\u9000\u51fa \u65f6\uff0c\u5bb9\u5668\u4e0d\u4f1a\u505c\u6b62\uff09 docker exec -it mycentos2 /bin/bash 2.3.3 \u8fdb\u5165\u5bb9\u5668 \u00b6 docker exec \u53c2\u6570 # \u9000\u51fa\u5bb9\u5668\uff0c\u5bb9\u5668\u4e0d\u4f1a\u5173\u95ed eg: docker exec -it mycentos2 /bin/bash 2.3.4 \u505c\u6b62\u5bb9\u5668 \u00b6 docker stop \u5bb9\u5668\u540d\u79f0\u6216\u8005\u5bb9\u5668id 2.3.5 \u542f\u52a8\u5bb9\u5668 \u00b6 docker start \u5bb9\u5668\u540d\u79f0\u6216\u8005\u5bb9\u5668id 2.3.6 \u5220\u9664\u5bb9\u5668 \u00b6 #\u5220\u9664\u6307\u5b9a\u5bb9\u5668 docker rm \u5bb9\u5668\u540d\u79f0\u6216\u8005\u5bb9\u5668id # \u5220\u9664\u6240\u6709\u5bb9\u5668\uff1a docker rm ` docker ps -a -q ` \u6ce8\u610f\uff1a\u5982\u679c\u5bb9\u5668\u662f\u8fd0\u884c\u72b6\u6001\u5219\u5220\u9664\u5931\u8d25\uff0c\u9700\u8981\u505c\u6b62\u5bb9\u5668\u624d\u80fd\u5220\u9664 2.3. 7 \u67e5\u770b\u5bb9\u5668\u4fe1\u606f \u00b6 docker inspect \u5bb9\u5668\u540d\u79f0\u6216\u8005\u5bb9\u5668id \u8bf4\u660e\uff1a\u5bb9\u5668\u4e4b\u95f4\u5728\u4e00\u4e2a\u5c40\u57df\u7f51\u5185\uff0clinux\u5bbf\u4e3b\u673a\u5668\u53ef\u4ee5\u4e0e\u5bb9\u5668\u8fdb\u884c\u901a\u4fe1\uff1b\u4f46\u662f\u5916\u90e8\u7684\u7269\u7406\u673a\u7b14\u8bb0\u672c\u662f\u4e0d\u80fd\u4e0e\u5bb9\u5668\u76f4\u63a5\u901a\u4fe1\u7684\uff0c\u5982\u679c\u9700\u8981\u5219\u9700\u8981\u901a\u8fc7\u5bbf\u4e3b\u673a\u5668\u7aef\u53e3\u7684\u4ee3\u7406\u3002","title":"docker\u547d\u4ee4"},{"location":"docker/2/#docker","text":"","title":"docker\u547d\u4ee4"},{"location":"docker/2/#21","text":"\u5173\u4e8e\u8fdb\u7a0b\u76f8\u5173\u7684\u547d\u4ee4","title":"2.1 \u8fdb\u7a0b\u76f8\u5173\u547d\u4ee4"},{"location":"docker/2/#211_docker","text":"systemctl start docker","title":"2.1.1 \u542f\u52a8docker\u670d\u52a1"},{"location":"docker/2/#212_docker","text":"systemctl stop docker","title":"2.1.2 \u505c\u6b62docker\u670d\u52a1"},{"location":"docker/2/#213_docker","text":"systemctl restart docker","title":"2.1.3 \u91cd\u542fdocker\u670d\u52a1"},{"location":"docker/2/#214_docker","text":"systemctl status docker","title":"2.1.4 \u67e5\u770bdocker\u670d\u52a1\u72b6\u6001"},{"location":"docker/2/#215_docker","text":"systemctl enable docker","title":"2.1.5 \u5f00\u673a\u542f\u52a8docker\u670d\u52a1"},{"location":"docker/2/#22_docker","text":"","title":"2.2 Docker \u955c\u50cf\u76f8\u5173\u547d\u4ee4"},{"location":"docker/2/#221","text":"\u67e5\u770b\u672c\u5730\u6240\u6709\u7684\u955c\u50cf docker images docker images \u2013q # \u67e5\u770b\u6240\u7528\u955c\u50cf\u7684id REPOSITORY\uff1a\u955c\u50cf\u540d\u79f0 TAG\uff1a\u955c\u50cf\u6807\u7b7e IMAGE ID\uff1a\u955c\u50cfID CREATED\uff1a\u955c\u50cf\u7684\u521b\u5efa\u65e5\u671f SIZE\uff1a\u955c\u50cf\u5927\u5c0f","title":"2.2.1 \u67e5\u770b\u955c\u50cf"},{"location":"docker/2/#222","text":"\u4ece\u7f51\u7edc\u4e2d\u67e5\u627e\u9700\u8981\u7684\u955c\u50cf docker search \u955c\u50cf\u540d\u79f0 NAME\uff1a\u955c\u50cf\u540d\u79f0 DESCRIPTION\uff1a\u955c\u50cf\u63cf\u8ff0 STARS\uff1a\u7528\u6237\u8bc4\u4ef7\uff0c\u53cd\u5e94\u4e00\u4e2a\u955c\u50cf\u7684\u53d7\u6b22\u8fce\u7a0b\u5ea6 OFFICIAL\uff1a\u662f\u5426\u5b98\u65b9 AUTOMATED\uff1a\u81ea\u52a8\u6784\u5efa\uff0c\u8868\u793a\u8be5\u955c\u50cf\u7531Docker Hub\u81ea\u52a8\u6784\u5efa\u6d41\u7a0b\u521b\u5efa\u7684","title":"2.2.2 \u641c\u7d22\u955c\u50cf"},{"location":"docker/2/#223","text":"\u4eceDocker\u4ed3\u5e93\u4e0b\u8f7d\u955c\u50cf\u5230\u672c\u5730\uff0c\u955c\u50cf\u540d\u79f0\u683c\u5f0f\u4e3a \u540d\u79f0:\u7248\u672c\u53f7\uff0c\u5982\u679c\u7248\u672c\u53f7\u4e0d\u6307\u5b9a\u5219\u662f\u6700\u65b0\u7684\u7248\u672c\u3002 \u5982\u679c\u4e0d\u77e5\u9053\u955c\u50cf\u7248\u672c\uff0c\u53ef\u4ee5\u53bbdocker hub \u641c\u7d22\u5bf9\u5e94\u955c\u50cf\u67e5\u770b\u3002 docker pull \u955c\u50cf\u540d\u79f0","title":"2.2.3 \u62c9\u53d6\u955c\u50cf"},{"location":"docker/2/#224","text":"\u5220\u9664\u672c\u5730\u955c\u50cf docker rmi \u955c\u50cfid # \u5220\u9664\u6307\u5b9a\u672c\u5730\u955c\u50cf docker rmi ` docker images -q ` # \u5220\u9664\u6240\u6709\u672c\u5730\u955c\u50cf \u5173\u4e8edocker\u66f4\u591a\u547d\u4ee4\uff0c \u5927\u5bb6\u53ef\u4ee5\u83dc\u9e1f\u6559\u7a0b\u67e5\u770b, \u7f51\u5740\uff1a https://www.runoob.com/docker/docker-command-manual.html","title":"2.2.4 \u5220\u9664\u955c\u50cf"},{"location":"docker/2/#23","text":"","title":"2.3 \u5bb9\u5668\u76f8\u5173\u7684\u547d\u4ee4"},{"location":"docker/2/#231","text":"docker ps # \u67e5\u770b\u6b63\u5728\u8fd0\u884c\u7684\u5bb9\u5668 docker ps -a # \u67e5\u770b\u6240\u6709\u5bb9\u5668\uff0c\u5305\u62ec\u6b63\u5728\u8fd0\u884c\u548c\u505c\u6b62\u7684\u5bb9\u5668","title":"2.3.1 \u67e5\u770b\u5bb9\u5668"},{"location":"docker/2/#232","text":"docker run \u53c2\u6570 \u53c2\u6570\u8bf4\u660e\uff1a \u2022 -i\uff1a\u4fdd\u6301\u5bb9\u5668\u8fd0\u884c\u3002\u901a\u5e38\u4e0e -t \u540c\u65f6\u4f7f\u7528\u3002\u52a0\u5165it\u8fd9\u4e24\u4e2a\u53c2\u6570\u540e\uff0c\u5bb9\u5668\u521b\u5efa\u540e\u81ea\u52a8\u8fdb\u5165\u5bb9\u5668\u4e2d\uff0c\u9000\u51fa\u5bb9\u5668\u540e\uff0c\u5bb9\u5668\u81ea\u52a8\u5173\u95ed\u3002 \u2022 -t\uff1a\u4e3a\u5bb9\u5668\u91cd\u65b0\u5206\u914d\u4e00\u4e2a\u4f2a\u8f93\u5165\u7ec8\u7aef\uff0c\u901a\u5e38\u4e0e -i \u540c\u65f6\u4f7f\u7528\u3002 \u2022 -d\uff1a\u4ee5\u5b88\u62a4\uff08\u540e\u53f0\uff09\u6a21\u5f0f\u8fd0\u884c\u5bb9\u5668\u3002\u521b\u5efa\u4e00\u4e2a\u5bb9\u5668\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u9700\u8981\u4f7f\u7528docker exec \u8fdb\u5165\u5bb9\u5668\u3002\u9000\u51fa\u540e\uff0c\u5bb9\u5668\u4e0d\u4f1a\u5173\u95ed\u3002 \u2022 -it \u521b\u5efa\u7684\u5bb9\u5668\u4e00\u822c\u79f0\u4e3a\u4ea4\u4e92\u5f0f\u5bb9\u5668\uff0c-id \u521b\u5efa\u7684\u5bb9\u5668\u4e00\u822c\u79f0\u4e3a\u5b88\u62a4\u5f0f\u5bb9\u5668 \u2022 --name\uff1a\u4e3a\u521b\u5efa\u7684\u5bb9\u5668\u547d\u540d\u3002 1\uff09\u4ea4\u4e92\u5f0f\u5bb9\u5668 \u4ee5 \u4ea4\u4e92\u5f0f \u65b9\u5f0f\u521b\u5efa\u5e76\u542f\u52a8\u5bb9\u5668\uff0c\u542f\u52a8\u5b8c\u6210\u540e\uff0c\u76f4\u63a5\u8fdb\u5165\u5f53\u524d\u5bb9\u5668\u3002\u4f7f\u7528exit\u547d\u4ee4\u9000\u51fa\u5bb9\u5668\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u4ee5\u6b64\u79cd\u65b9\u5f0f \u542f\u52a8\u5bb9\u5668\uff0c\u5982\u679c\u9000\u51fa\u5bb9\u5668\uff0c\u5219\u5bb9\u5668\u4f1a\u8fdb\u5165 \u505c\u6b62 \u72b6\u6001\u3002 # \u5148\u62c9\u53d6\u4e00\u4e2a\u955c\u50cf\uff1b\u8fd9\u4e00\u6b65\u4e0d\u662f\u6bcf\u6b21\u542f\u52a8\u5bb9\u5668\u90fd\u8981\u505a\u7684\uff0c\u800c\u662f\u56e0\u4e3a\u524d\u9762\u6211\u4eec\u5220\u9664\u4e86\u955c\u50cf\uff0c\u65e0\u955c\u50cf\u53ef\u7528\u6240\u4ee5\u624d\u518d\u62c9\u53d6\u4e00\u4e2a docker pull centos:7 #\u521b\u5efa\u5e76\u542f\u52a8\u540d\u79f0\u4e3a mycentos7 \u7684\u4ea4\u4e92\u5f0f\u5bb9\u5668\uff1b\u4e0b\u9762\u6307\u4ee4\u4e2d\u7684\u955c\u50cf\u540d\u79f0 centos:7 \u4e5f\u53ef\u4ee5\u4f7f\u7528\u955c\u50cfid docker run -it --name = mycentos7 centos:7 /bin/bash 2\uff09\u5b88\u62a4\u5f0f\u5bb9\u5668 \u521b\u5efa\u4e00\u4e2a\u5b88\u62a4\u5f0f\u5bb9\u5668\uff1b\u5982\u679c\u5bf9\u4e8e\u4e00\u4e2a\u9700\u8981\u957f\u671f\u8fd0\u884c\u7684\u5bb9\u5668\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5b88\u62a4\u5f0f\u5bb9\u5668\u3002\u547d\u4ee4\u5982\u4e0b\uff08\u5bb9\u5668\u540d\u79f0 \u4e0d\u80fd\u91cd\u590d\uff09\uff1a #\u521b\u5efa\u5e76\u542f\u52a8\u5b88\u62a4\u5f0f\u5bb9\u5668 docker run -di --name = mycentos2 centos:7 #\u767b\u5f55\u8fdb\u5165\u5bb9\u5668\u547d\u4ee4\u4e3a\uff1adocker exec -it container_name (\u6216\u8005 container_id) /bin/bash\uff08exit\u9000\u51fa \u65f6\uff0c\u5bb9\u5668\u4e0d\u4f1a\u505c\u6b62\uff09 docker exec -it mycentos2 /bin/bash","title":"2.3.2 \u521b\u5efa\u5e76\u542f\u52a8\u5bb9\u5668"},{"location":"docker/2/#233","text":"docker exec \u53c2\u6570 # \u9000\u51fa\u5bb9\u5668\uff0c\u5bb9\u5668\u4e0d\u4f1a\u5173\u95ed eg: docker exec -it mycentos2 /bin/bash","title":"2.3.3 \u8fdb\u5165\u5bb9\u5668"},{"location":"docker/2/#234","text":"docker stop \u5bb9\u5668\u540d\u79f0\u6216\u8005\u5bb9\u5668id","title":"2.3.4 \u505c\u6b62\u5bb9\u5668"},{"location":"docker/2/#235","text":"docker start \u5bb9\u5668\u540d\u79f0\u6216\u8005\u5bb9\u5668id","title":"2.3.5 \u542f\u52a8\u5bb9\u5668"},{"location":"docker/2/#236","text":"#\u5220\u9664\u6307\u5b9a\u5bb9\u5668 docker rm \u5bb9\u5668\u540d\u79f0\u6216\u8005\u5bb9\u5668id # \u5220\u9664\u6240\u6709\u5bb9\u5668\uff1a docker rm ` docker ps -a -q ` \u6ce8\u610f\uff1a\u5982\u679c\u5bb9\u5668\u662f\u8fd0\u884c\u72b6\u6001\u5219\u5220\u9664\u5931\u8d25\uff0c\u9700\u8981\u505c\u6b62\u5bb9\u5668\u624d\u80fd\u5220\u9664","title":"2.3.6 \u5220\u9664\u5bb9\u5668"},{"location":"docker/2/#23_7","text":"docker inspect \u5bb9\u5668\u540d\u79f0\u6216\u8005\u5bb9\u5668id \u8bf4\u660e\uff1a\u5bb9\u5668\u4e4b\u95f4\u5728\u4e00\u4e2a\u5c40\u57df\u7f51\u5185\uff0clinux\u5bbf\u4e3b\u673a\u5668\u53ef\u4ee5\u4e0e\u5bb9\u5668\u8fdb\u884c\u901a\u4fe1\uff1b\u4f46\u662f\u5916\u90e8\u7684\u7269\u7406\u673a\u7b14\u8bb0\u672c\u662f\u4e0d\u80fd\u4e0e\u5bb9\u5668\u76f4\u63a5\u901a\u4fe1\u7684\uff0c\u5982\u679c\u9700\u8981\u5219\u9700\u8981\u901a\u8fc7\u5bbf\u4e3b\u673a\u5668\u7aef\u53e3\u7684\u4ee3\u7406\u3002","title":"2.3. 7 \u67e5\u770b\u5bb9\u5668\u4fe1\u606f"},{"location":"docker/3/","text":"docker\u5bb9\u5668\u7684\u6570\u636e\u5377 \u00b6 3.1 \u6570\u636e\u5377\u6982\u5ff5 \u00b6 \u601d\u8003\uff1a \u2022 Docker \u5bb9\u5668\u5220\u9664\u540e\uff0c\u5728\u5bb9\u5668\u4e2d\u4ea7\u751f\u7684\u6570\u636e\u4e5f\u4f1a\u968f\u4e4b\u9500\u6bc1 \u2022 Docker \u5bb9\u5668\u548c\u5916\u90e8\u673a\u5668\u53ef\u4ee5\u76f4\u63a5\u4ea4\u6362\u6587\u4ef6\u5417\uff1f \u2022 \u5bb9\u5668\u4e4b\u95f4\u60f3\u8981\u8fdb\u884c\u6570\u636e\u4ea4\u4e92\uff1f \u6570\u636e\u5377 \u6570\u636e\u5377\u662f\u5bbf\u4e3b\u673a\u4e2d\u7684\u4e00\u4e2a\u76ee\u5f55\u6216\u6587\u4ef6 \u5f53\u5bb9\u5668\u76ee\u5f55\u548c\u6570\u636e\u5377\u76ee\u5f55\u7ed1\u5b9a\u540e\uff0c\u5bf9\u65b9\u7684\u4fee\u6539\u4f1a\u7acb\u5373\u540c\u6b65 \u4e00\u4e2a\u6570\u636e\u5377\u53ef\u4ee5\u88ab\u591a\u4e2a\u5bb9\u5668\u540c\u65f6\u6302\u8f7d \u4e00\u4e2a\u5bb9\u5668\u4e5f\u53ef\u4ee5\u88ab\u6302\u8f7d\u591a\u4e2a\u6570\u636e\u5377 \u6570\u636e\u5377\u7684\u4f5c\u7528 \u2022 \u5bb9\u5668\u6570\u636e\u6301\u4e45\u5316 \u2022 \u5916\u90e8\u673a\u5668\u548c\u5bb9\u5668\u95f4\u63a5\u901a\u4fe1 \u2022 \u5bb9\u5668\u4e4b\u95f4\u6570\u636e\u4ea4\u6362 3.2 \u914d\u7f6e\u6570\u636e\u5377 \u00b6 \u521b\u5efa\u542f\u52a8\u5bb9\u5668\u65f6\uff0c\u4f7f\u7528 \u2013v \u53c2\u6570 \u8bbe\u7f6e\u6570\u636e\u5377 docker run ... -v \u5bbf\u4e3b\u673a\u76ee\u5f55 ( \u6587\u4ef6 ) :\u5bb9\u5668\u5185\u76ee\u5f55 ( \u6587\u4ef6 ) ... \u6ce8\u610f\u4e8b\u9879\uff1a \u76ee\u5f55\u5fc5\u987b\u662f\u7edd\u5bf9\u8def\u5f84 \u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u4f1a\u81ea\u52a8\u521b\u5efa \u4e00\u4e2a\u5bb9\u5668\u53ef\u4ee5\u6302\u8f7d\u591a\u4e2a\u6570\u636e\u5377 \u4e00\u4e2a\u6570\u636e\u5377\u4e5f\u53ef\u4ee5\u88ab\u591a\u4e2a\u5bb9\u5668\u6302\u8f7d \u4e24\u4e2a\u5bb9\u5668\u53ef\u4ee5\u6302\u8f7d\u540c\u4e00\u4e2a\u5bb9\u5668 \u5728\u5bbf\u4e3b\u673a\u4e2d\u5b9e\u73b0\u4e0e\u5bb9\u5668\u76ee\u5f55\u7684\u6302\u8f7d\uff1a \u6570\u636e\u5377\u7684\u6301\u4e45\u5316\uff1a \u200b \u5f53\u6211\u4eec\u628ac1\u5bb9\u5668\u5220\u9664\u540e\uff0c\u5bbf\u4e3b\u673a\u4e2d\u7684\u6570\u636e\u5377\u4f9d\u7136\u5b58\u5728\u3002 \u6240\u4ee5\u5f53\u6211\u4eec\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\u5bb9\u5668\u7684\u540c\u65f6\u4f9d\u7136\u53ef\u4ee5\u6302\u8f7d\u5bbf\u4e3b\u673a\u4e2d\u7684data\u6587\u4ef6\u5939\uff0c\u5bf9\u5e94data\u91cc\u7684\u6570\u636e\u4f9d\u7136\u540c\u6b65\u5230\u5bb9\u5668\u4e2d\u3002 \u4e00\u4e2a\u5bb9\u5668\u53ef\u4ee5\u6302\u8f7d\u591a\u4e2a\u6570\u636e\u5377 \u591a\u4e2a\u5bb9\u5668\u53ef\u4ee5\u6302\u8f7d\u540c\u4e00\u4e2a\u6570\u636e\u5377 \u5206\u522b\u521b\u5efa\u4e24\u4e2a\u5bb9\u5668\uff0c\u4e24\u4e2a\u5bb9\u5668\u90fd\u6302\u8f7d\u5bbf\u4e3b\u673a\u4e2ddata\u76ee\u5f55\uff0c\u5f53 \u4fee\u6539c3\u5bb9\u5668\u7684data\u76ee\u5f55c4\u4f1a\u5b9e\u73b0\u540c\u6b65\u3002 \u4ece\u800c\u5b9e\u73b0\u4e24\u4e2a\u5bb9\u5668\u4e4b\u95f4\u7684\u4ea4\u4e92\u3002 3.3 \u914d\u7f6e\u6570\u636e\u5377\u5bb9\u5668 \u00b6 \u591a\u5bb9\u5668\u8fdb\u884c\u6570\u636e\u4ea4\u6362 \u591a\u4e2a\u5bb9\u5668\u6302\u8f7d\u540c\u4e00\u4e2a\u6570\u636e\u5377 \u6570\u636e\u5377\u5bb9\u5668 \u6b65\u9aa4\uff1a 1.\u521b\u5efa\u542f\u52a8c3\u6570\u636e\u5377\u5bb9\u5668\uff0c\u4f7f\u7528 \u2013v \u53c2\u6570 \u8bbe\u7f6e\u6570\u636e\u5377 docker run \u2013it --name = c3 -v /volume centos:7 /bin/bash \u521b\u5efa\u542f\u52a8 c1 c2 \u5bb9\u5668\uff0c\u4f7f\u7528 \u2013-volumes-from \u53c2\u6570 \u8bbe\u7f6e\u6570\u636e\u5377 docker run \u2013it --name = c1 --volumes-from c3 centos:7 /bin/bash docker run \u2013it --name = c2 --volumes-from c3 centos:7 /bin/bash 3.4 \u6570\u636e\u5377\u5c0f\u7ed3 \u00b6 \u6570\u636e\u5377\u6982\u5ff5 \u2022\u5bbf\u4e3b\u673a\u7684\u4e00\u4e2a\u76ee\u5f55\u6216\u6587\u4ef6 \u6570\u636e\u5377\u4f5c\u7528 \u2022 \u5bb9\u5668\u6570\u636e\u6301\u4e45\u5316 \u2022 \u5ba2\u6237\u7aef\u548c\u5bb9\u5668\u6570\u636e\u4ea4\u6362 \u2022 \u5bb9\u5668\u95f4\u6570\u636e\u4ea4\u6362 \u6570\u636e\u5377\u5bb9\u5668 \u2022 \u521b\u5efa\u4e00\u4e2a\u5bb9\u5668\uff0c\u6302\u8f7d\u4e00\u4e2a\u76ee\u5f55\uff0c\u8ba9\u5176\u4ed6\u5bb9\u5668\u7ee7\u627f\u81ea\u8be5\u5bb9\u5668( --volume-from )\u3002 \u2022 \u901a\u8fc7\u7b80\u5355\u65b9\u5f0f\u5b9e\u73b0\u6570\u636e\u5377\u914d\u7f6e","title":"docker\u5bb9\u5668\u7684\u6570\u636e\u5377"},{"location":"docker/3/#docker","text":"","title":"docker\u5bb9\u5668\u7684\u6570\u636e\u5377"},{"location":"docker/3/#31","text":"\u601d\u8003\uff1a \u2022 Docker \u5bb9\u5668\u5220\u9664\u540e\uff0c\u5728\u5bb9\u5668\u4e2d\u4ea7\u751f\u7684\u6570\u636e\u4e5f\u4f1a\u968f\u4e4b\u9500\u6bc1 \u2022 Docker \u5bb9\u5668\u548c\u5916\u90e8\u673a\u5668\u53ef\u4ee5\u76f4\u63a5\u4ea4\u6362\u6587\u4ef6\u5417\uff1f \u2022 \u5bb9\u5668\u4e4b\u95f4\u60f3\u8981\u8fdb\u884c\u6570\u636e\u4ea4\u4e92\uff1f \u6570\u636e\u5377 \u6570\u636e\u5377\u662f\u5bbf\u4e3b\u673a\u4e2d\u7684\u4e00\u4e2a\u76ee\u5f55\u6216\u6587\u4ef6 \u5f53\u5bb9\u5668\u76ee\u5f55\u548c\u6570\u636e\u5377\u76ee\u5f55\u7ed1\u5b9a\u540e\uff0c\u5bf9\u65b9\u7684\u4fee\u6539\u4f1a\u7acb\u5373\u540c\u6b65 \u4e00\u4e2a\u6570\u636e\u5377\u53ef\u4ee5\u88ab\u591a\u4e2a\u5bb9\u5668\u540c\u65f6\u6302\u8f7d \u4e00\u4e2a\u5bb9\u5668\u4e5f\u53ef\u4ee5\u88ab\u6302\u8f7d\u591a\u4e2a\u6570\u636e\u5377 \u6570\u636e\u5377\u7684\u4f5c\u7528 \u2022 \u5bb9\u5668\u6570\u636e\u6301\u4e45\u5316 \u2022 \u5916\u90e8\u673a\u5668\u548c\u5bb9\u5668\u95f4\u63a5\u901a\u4fe1 \u2022 \u5bb9\u5668\u4e4b\u95f4\u6570\u636e\u4ea4\u6362","title":"3.1 \u6570\u636e\u5377\u6982\u5ff5"},{"location":"docker/3/#32","text":"\u521b\u5efa\u542f\u52a8\u5bb9\u5668\u65f6\uff0c\u4f7f\u7528 \u2013v \u53c2\u6570 \u8bbe\u7f6e\u6570\u636e\u5377 docker run ... -v \u5bbf\u4e3b\u673a\u76ee\u5f55 ( \u6587\u4ef6 ) :\u5bb9\u5668\u5185\u76ee\u5f55 ( \u6587\u4ef6 ) ... \u6ce8\u610f\u4e8b\u9879\uff1a \u76ee\u5f55\u5fc5\u987b\u662f\u7edd\u5bf9\u8def\u5f84 \u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u4f1a\u81ea\u52a8\u521b\u5efa \u4e00\u4e2a\u5bb9\u5668\u53ef\u4ee5\u6302\u8f7d\u591a\u4e2a\u6570\u636e\u5377 \u4e00\u4e2a\u6570\u636e\u5377\u4e5f\u53ef\u4ee5\u88ab\u591a\u4e2a\u5bb9\u5668\u6302\u8f7d \u4e24\u4e2a\u5bb9\u5668\u53ef\u4ee5\u6302\u8f7d\u540c\u4e00\u4e2a\u5bb9\u5668 \u5728\u5bbf\u4e3b\u673a\u4e2d\u5b9e\u73b0\u4e0e\u5bb9\u5668\u76ee\u5f55\u7684\u6302\u8f7d\uff1a \u6570\u636e\u5377\u7684\u6301\u4e45\u5316\uff1a \u200b \u5f53\u6211\u4eec\u628ac1\u5bb9\u5668\u5220\u9664\u540e\uff0c\u5bbf\u4e3b\u673a\u4e2d\u7684\u6570\u636e\u5377\u4f9d\u7136\u5b58\u5728\u3002 \u6240\u4ee5\u5f53\u6211\u4eec\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\u5bb9\u5668\u7684\u540c\u65f6\u4f9d\u7136\u53ef\u4ee5\u6302\u8f7d\u5bbf\u4e3b\u673a\u4e2d\u7684data\u6587\u4ef6\u5939\uff0c\u5bf9\u5e94data\u91cc\u7684\u6570\u636e\u4f9d\u7136\u540c\u6b65\u5230\u5bb9\u5668\u4e2d\u3002 \u4e00\u4e2a\u5bb9\u5668\u53ef\u4ee5\u6302\u8f7d\u591a\u4e2a\u6570\u636e\u5377 \u591a\u4e2a\u5bb9\u5668\u53ef\u4ee5\u6302\u8f7d\u540c\u4e00\u4e2a\u6570\u636e\u5377 \u5206\u522b\u521b\u5efa\u4e24\u4e2a\u5bb9\u5668\uff0c\u4e24\u4e2a\u5bb9\u5668\u90fd\u6302\u8f7d\u5bbf\u4e3b\u673a\u4e2ddata\u76ee\u5f55\uff0c\u5f53 \u4fee\u6539c3\u5bb9\u5668\u7684data\u76ee\u5f55c4\u4f1a\u5b9e\u73b0\u540c\u6b65\u3002 \u4ece\u800c\u5b9e\u73b0\u4e24\u4e2a\u5bb9\u5668\u4e4b\u95f4\u7684\u4ea4\u4e92\u3002","title":"3.2 \u914d\u7f6e\u6570\u636e\u5377"},{"location":"docker/3/#33","text":"\u591a\u5bb9\u5668\u8fdb\u884c\u6570\u636e\u4ea4\u6362 \u591a\u4e2a\u5bb9\u5668\u6302\u8f7d\u540c\u4e00\u4e2a\u6570\u636e\u5377 \u6570\u636e\u5377\u5bb9\u5668 \u6b65\u9aa4\uff1a 1.\u521b\u5efa\u542f\u52a8c3\u6570\u636e\u5377\u5bb9\u5668\uff0c\u4f7f\u7528 \u2013v \u53c2\u6570 \u8bbe\u7f6e\u6570\u636e\u5377 docker run \u2013it --name = c3 -v /volume centos:7 /bin/bash \u521b\u5efa\u542f\u52a8 c1 c2 \u5bb9\u5668\uff0c\u4f7f\u7528 \u2013-volumes-from \u53c2\u6570 \u8bbe\u7f6e\u6570\u636e\u5377 docker run \u2013it --name = c1 --volumes-from c3 centos:7 /bin/bash docker run \u2013it --name = c2 --volumes-from c3 centos:7 /bin/bash","title":"3.3 \u914d\u7f6e\u6570\u636e\u5377\u5bb9\u5668"},{"location":"docker/3/#34","text":"\u6570\u636e\u5377\u6982\u5ff5 \u2022\u5bbf\u4e3b\u673a\u7684\u4e00\u4e2a\u76ee\u5f55\u6216\u6587\u4ef6 \u6570\u636e\u5377\u4f5c\u7528 \u2022 \u5bb9\u5668\u6570\u636e\u6301\u4e45\u5316 \u2022 \u5ba2\u6237\u7aef\u548c\u5bb9\u5668\u6570\u636e\u4ea4\u6362 \u2022 \u5bb9\u5668\u95f4\u6570\u636e\u4ea4\u6362 \u6570\u636e\u5377\u5bb9\u5668 \u2022 \u521b\u5efa\u4e00\u4e2a\u5bb9\u5668\uff0c\u6302\u8f7d\u4e00\u4e2a\u76ee\u5f55\uff0c\u8ba9\u5176\u4ed6\u5bb9\u5668\u7ee7\u627f\u81ea\u8be5\u5bb9\u5668( --volume-from )\u3002 \u2022 \u901a\u8fc7\u7b80\u5355\u65b9\u5f0f\u5b9e\u73b0\u6570\u636e\u5377\u914d\u7f6e","title":"3.4 \u6570\u636e\u5377\u5c0f\u7ed3"},{"location":"docker/4/","text":"\u4e00\u3001\u90e8\u7f72MySQL \u00b6 \u641c\u7d22mysql\u955c\u50cf docker search mysql \u62c9\u53d6mysql\u955c\u50cf docker pull mysql:5.6 \u521b\u5efa\u5bb9\u5668\uff0c\u8bbe\u7f6e\u7aef\u53e3\u6620\u5c04\u3001\u76ee\u5f55\u6620\u5c04 # \u5728/root\u76ee\u5f55\u4e0b\u521b\u5efamysql\u76ee\u5f55\u7528\u4e8e\u5b58\u50a8mysql\u6570\u636e\u4fe1\u606f mkdir ~/mysql cd ~/mysql docker run -id \\ -p 3306 :3306 \\ --name = c_mysql1 \\ -v $PWD /conf:/etc/mysql/conf.d \\ -v $PWD /logs:/logs \\ -v $PWD /data:/var/lib/mysql \\ -e MYSQL_ROOT_PASSWORD = 123456 \\ mysql:5.6 \u53c2\u6570\u8bf4\u660e\uff1a -p 3307:3306 \uff1a\u5c06\u5bb9\u5668\u7684 3306 \u7aef\u53e3\u6620\u5c04\u5230\u5bbf\u4e3b\u673a\u7684 3307 \u7aef\u53e3\u3002 -v $PWD/conf:/etc/mysql/conf.d \uff1a\u5c06\u4e3b\u673a\u5f53\u524d\u76ee\u5f55\u4e0b\u7684 conf/my.cnf \u6302\u8f7d\u5230\u5bb9\u5668\u7684 /etc/mysql/my.cnf\u3002\u914d\u7f6e\u76ee\u5f55 -v $PWD/logs:/logs \uff1a\u5c06\u4e3b\u673a\u5f53\u524d\u76ee\u5f55\u4e0b\u7684 logs \u76ee\u5f55\u6302\u8f7d\u5230\u5bb9\u5668\u7684 /logs\u3002\u65e5\u5fd7\u76ee\u5f55 -v $PWD/data:/var/lib/mysql \uff1a\u5c06\u4e3b\u673a\u5f53\u524d\u76ee\u5f55\u4e0b\u7684data\u76ee\u5f55\u6302\u8f7d\u5230\u5bb9\u5668\u7684 /var/lib/mysql \u3002\u6570\u636e\u76ee\u5f55 -e MYSQL_ROOT_PASSWORD=123456\uff1a \u521d\u59cb\u5316 root \u7528\u6237\u7684\u5bc6\u7801\u3002 \u8fdb\u5165\u5bb9\u5668\uff0c\u64cd\u4f5cmysql docker exec \u2013it c_mysql /bin/bash \u4f7f\u7528\u5916\u90e8\u673a\u5668\u8fde\u63a5\u5bb9\u5668\u4e2d\u7684mysql \u4e8c\u3001\u90e8\u7f72Tomcat \u00b6 \u641c\u7d22tomcat\u955c\u50cf docker search tomcat \u62c9\u53d6tomcat\u955c\u50cf docker pull tomcat \u521b\u5efa\u5bb9\u5668\uff0c\u8bbe\u7f6e\u7aef\u53e3\u6620\u5c04\u3001\u76ee\u5f55\u6620\u5c04 # \u5728/root\u76ee\u5f55\u4e0b\u521b\u5efatomcat\u76ee\u5f55\u7528\u4e8e\u5b58\u50a8tomcat\u6570\u636e\u4fe1\u606f mkdir ~/tomcat cd ~/tomcat docker run -id --name = c_tomcat \\ -p 8080 :8080 \\ -v $PWD :/usr/local/tomcat/webapps \\ tomcat \u53c2\u6570\u8bf4\u660e\uff1a -p 8080:8080\uff1a \u5c06\u5bb9\u5668\u76848080\u7aef\u53e3\u6620\u5c04\u5230\u4e3b\u673a\u76848080\u7aef\u53e3 -v $PWD:/usr/local/tomcat/webapps\uff1a \u5c06\u4e3b\u673a\u4e2d\u5f53\u524d\u76ee\u5f55\u6302\u8f7d\u5230\u5bb9\u5668\u7684webapps \u4f7f\u7528\u5916\u90e8\u673a\u5668\u8bbf\u95eetomcat \u4e09\u3001\u90e8\u7f72Nginx \u00b6 \u641c\u7d22nginx\u955c\u50cf docker search nginx \u62c9\u53d6nginx\u955c\u50cf docker pull nginx \u521b\u5efa\u5bb9\u5668\uff0c\u8bbe\u7f6e\u7aef\u53e3\u6620\u5c04\u3001\u76ee\u5f55\u6620\u5c04 # \u5728/root\u76ee\u5f55\u4e0b\u521b\u5efanginx\u76ee\u5f55\u7528\u4e8e\u5b58\u50a8nginx\u6570\u636e\u4fe1\u606f mkdir ~/nginx cd ~/nginx mkdir conf cd conf # \u5728~/nginx/conf/\u4e0b\u521b\u5efanginx.conf\u6587\u4ef6,\u7c98\u8d34\u4e0b\u9762\u5185\u5bb9 vim nginx.conf user nginx ; worker_processes 1 ; error_log /var/log/nginx/error.log warn ; pid /var/run/nginx.pid ; events { worker_connections 1024 ; } http { include /etc/nginx/mime.types ; default_type application/octet-stream ; log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"' ; access_log /var/log/nginx/access.log main ; sendfile on ; #tcp_nopush on; keepalive_timeout 65 ; #gzip on; include /etc/nginx/conf.d/*.conf ; } docker run -id --name = c_nginx \\ -p 80 :80 \\ -v $PWD /conf/nginx.conf:/etc/nginx/nginx.conf \\ -v $PWD /logs:/var/log/nginx \\ -v $PWD /html:/usr/share/nginx/html \\ nginx \u53c2\u6570\u8bf4\u660e\uff1a -p 80:80 \uff1a\u5c06\u5bb9\u5668\u7684 80\u7aef\u53e3\u6620\u5c04\u5230\u5bbf\u4e3b\u673a\u7684 80 \u7aef\u53e3\u3002 -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \uff1a\u5c06\u4e3b\u673a\u5f53\u524d\u76ee\u5f55\u4e0b\u7684 /conf/nginx.conf \u6302\u8f7d\u5230\u5bb9\u5668\u7684 :/etc/nginx/nginx.conf\u3002\u914d\u7f6e\u76ee\u5f55 -v $PWD/logs:/var/log/nginx \uff1a\u5c06\u4e3b\u673a\u5f53\u524d\u76ee\u5f55\u4e0b\u7684 logs \u76ee\u5f55\u6302\u8f7d\u5230\u5bb9\u5668\u7684/var/log/nginx\u3002\u65e5\u5fd7\u76ee\u5f55 \u4f7f\u7528\u5916\u90e8\u673a\u5668\u8bbf\u95eenginx \u56db\u3001\u90e8\u7f72Redis \u00b6 \u641c\u7d22redis\u955c\u50cf docker search redis \u62c9\u53d6redis\u955c\u50cf docker pull redis:5.0 \u521b\u5efa\u5bb9\u5668\uff0c\u8bbe\u7f6e\u7aef\u53e3\u6620\u5c04 docker run -id --name = c_redis -p 6379 :6379 redis:5.0 \u4f7f\u7528\u5916\u90e8\u673a\u5668\u8fde\u63a5redis ./redis-cli.exe -h 192 .168.149.135 -p 6379","title":"docker\u90e8\u7f72\u5bb9\u5668"},{"location":"docker/4/#mysql","text":"\u641c\u7d22mysql\u955c\u50cf docker search mysql \u62c9\u53d6mysql\u955c\u50cf docker pull mysql:5.6 \u521b\u5efa\u5bb9\u5668\uff0c\u8bbe\u7f6e\u7aef\u53e3\u6620\u5c04\u3001\u76ee\u5f55\u6620\u5c04 # \u5728/root\u76ee\u5f55\u4e0b\u521b\u5efamysql\u76ee\u5f55\u7528\u4e8e\u5b58\u50a8mysql\u6570\u636e\u4fe1\u606f mkdir ~/mysql cd ~/mysql docker run -id \\ -p 3306 :3306 \\ --name = c_mysql1 \\ -v $PWD /conf:/etc/mysql/conf.d \\ -v $PWD /logs:/logs \\ -v $PWD /data:/var/lib/mysql \\ -e MYSQL_ROOT_PASSWORD = 123456 \\ mysql:5.6 \u53c2\u6570\u8bf4\u660e\uff1a -p 3307:3306 \uff1a\u5c06\u5bb9\u5668\u7684 3306 \u7aef\u53e3\u6620\u5c04\u5230\u5bbf\u4e3b\u673a\u7684 3307 \u7aef\u53e3\u3002 -v $PWD/conf:/etc/mysql/conf.d \uff1a\u5c06\u4e3b\u673a\u5f53\u524d\u76ee\u5f55\u4e0b\u7684 conf/my.cnf \u6302\u8f7d\u5230\u5bb9\u5668\u7684 /etc/mysql/my.cnf\u3002\u914d\u7f6e\u76ee\u5f55 -v $PWD/logs:/logs \uff1a\u5c06\u4e3b\u673a\u5f53\u524d\u76ee\u5f55\u4e0b\u7684 logs \u76ee\u5f55\u6302\u8f7d\u5230\u5bb9\u5668\u7684 /logs\u3002\u65e5\u5fd7\u76ee\u5f55 -v $PWD/data:/var/lib/mysql \uff1a\u5c06\u4e3b\u673a\u5f53\u524d\u76ee\u5f55\u4e0b\u7684data\u76ee\u5f55\u6302\u8f7d\u5230\u5bb9\u5668\u7684 /var/lib/mysql \u3002\u6570\u636e\u76ee\u5f55 -e MYSQL_ROOT_PASSWORD=123456\uff1a \u521d\u59cb\u5316 root \u7528\u6237\u7684\u5bc6\u7801\u3002 \u8fdb\u5165\u5bb9\u5668\uff0c\u64cd\u4f5cmysql docker exec \u2013it c_mysql /bin/bash \u4f7f\u7528\u5916\u90e8\u673a\u5668\u8fde\u63a5\u5bb9\u5668\u4e2d\u7684mysql","title":"\u4e00\u3001\u90e8\u7f72MySQL"},{"location":"docker/4/#tomcat","text":"\u641c\u7d22tomcat\u955c\u50cf docker search tomcat \u62c9\u53d6tomcat\u955c\u50cf docker pull tomcat \u521b\u5efa\u5bb9\u5668\uff0c\u8bbe\u7f6e\u7aef\u53e3\u6620\u5c04\u3001\u76ee\u5f55\u6620\u5c04 # \u5728/root\u76ee\u5f55\u4e0b\u521b\u5efatomcat\u76ee\u5f55\u7528\u4e8e\u5b58\u50a8tomcat\u6570\u636e\u4fe1\u606f mkdir ~/tomcat cd ~/tomcat docker run -id --name = c_tomcat \\ -p 8080 :8080 \\ -v $PWD :/usr/local/tomcat/webapps \\ tomcat \u53c2\u6570\u8bf4\u660e\uff1a -p 8080:8080\uff1a \u5c06\u5bb9\u5668\u76848080\u7aef\u53e3\u6620\u5c04\u5230\u4e3b\u673a\u76848080\u7aef\u53e3 -v $PWD:/usr/local/tomcat/webapps\uff1a \u5c06\u4e3b\u673a\u4e2d\u5f53\u524d\u76ee\u5f55\u6302\u8f7d\u5230\u5bb9\u5668\u7684webapps \u4f7f\u7528\u5916\u90e8\u673a\u5668\u8bbf\u95eetomcat","title":"\u4e8c\u3001\u90e8\u7f72Tomcat"},{"location":"docker/4/#nginx","text":"\u641c\u7d22nginx\u955c\u50cf docker search nginx \u62c9\u53d6nginx\u955c\u50cf docker pull nginx \u521b\u5efa\u5bb9\u5668\uff0c\u8bbe\u7f6e\u7aef\u53e3\u6620\u5c04\u3001\u76ee\u5f55\u6620\u5c04 # \u5728/root\u76ee\u5f55\u4e0b\u521b\u5efanginx\u76ee\u5f55\u7528\u4e8e\u5b58\u50a8nginx\u6570\u636e\u4fe1\u606f mkdir ~/nginx cd ~/nginx mkdir conf cd conf # \u5728~/nginx/conf/\u4e0b\u521b\u5efanginx.conf\u6587\u4ef6,\u7c98\u8d34\u4e0b\u9762\u5185\u5bb9 vim nginx.conf user nginx ; worker_processes 1 ; error_log /var/log/nginx/error.log warn ; pid /var/run/nginx.pid ; events { worker_connections 1024 ; } http { include /etc/nginx/mime.types ; default_type application/octet-stream ; log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"' ; access_log /var/log/nginx/access.log main ; sendfile on ; #tcp_nopush on; keepalive_timeout 65 ; #gzip on; include /etc/nginx/conf.d/*.conf ; } docker run -id --name = c_nginx \\ -p 80 :80 \\ -v $PWD /conf/nginx.conf:/etc/nginx/nginx.conf \\ -v $PWD /logs:/var/log/nginx \\ -v $PWD /html:/usr/share/nginx/html \\ nginx \u53c2\u6570\u8bf4\u660e\uff1a -p 80:80 \uff1a\u5c06\u5bb9\u5668\u7684 80\u7aef\u53e3\u6620\u5c04\u5230\u5bbf\u4e3b\u673a\u7684 80 \u7aef\u53e3\u3002 -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \uff1a\u5c06\u4e3b\u673a\u5f53\u524d\u76ee\u5f55\u4e0b\u7684 /conf/nginx.conf \u6302\u8f7d\u5230\u5bb9\u5668\u7684 :/etc/nginx/nginx.conf\u3002\u914d\u7f6e\u76ee\u5f55 -v $PWD/logs:/var/log/nginx \uff1a\u5c06\u4e3b\u673a\u5f53\u524d\u76ee\u5f55\u4e0b\u7684 logs \u76ee\u5f55\u6302\u8f7d\u5230\u5bb9\u5668\u7684/var/log/nginx\u3002\u65e5\u5fd7\u76ee\u5f55 \u4f7f\u7528\u5916\u90e8\u673a\u5668\u8bbf\u95eenginx","title":"\u4e09\u3001\u90e8\u7f72Nginx"},{"location":"docker/4/#redis","text":"\u641c\u7d22redis\u955c\u50cf docker search redis \u62c9\u53d6redis\u955c\u50cf docker pull redis:5.0 \u521b\u5efa\u5bb9\u5668\uff0c\u8bbe\u7f6e\u7aef\u53e3\u6620\u5c04 docker run -id --name = c_redis -p 6379 :6379 redis:5.0 \u4f7f\u7528\u5916\u90e8\u673a\u5668\u8fde\u63a5redis ./redis-cli.exe -h 192 .168.149.135 -p 6379","title":"\u56db\u3001\u90e8\u7f72Redis"},{"location":"docker/5/","text":"Docerfile \u00b6 \u524d\u9762\u7684\u8bfe\u7a0b\u4e2d\u5df2\u7ecf\u77e5\u9053\u4e86\uff0c\u8981\u83b7\u5f97\u955c\u50cf\uff0c\u53ef\u4ee5\u4eceDocker\u4ed3\u5e93\u4e2d\u8fdb\u884c\u4e0b\u8f7d\u3002\u90a3\u5982\u679c\u6211\u4eec\u60f3\u81ea\u5df1\u5f00\u53d1\u4e00\u4e2a\u955c\u50cf\uff0c\u90a3\u8be5\u5982 \u4f55\u505a\u5462\uff1f\u7b54\u6848\u662f\uff1aDockerfifile Dockerfifile\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u7531\u4e00\u7cfb\u5217\u547d\u4ee4\u548c\u53c2\u6570\u6784\u6210\uff0cDocker\u53ef\u4ee5\u8bfb\u53d6Dockerfifile\u6587\u4ef6\u5e76\u6839\u636eDockerfifile\u6587 \u4ef6\u7684\u63cf\u8ff0\u6765\u6784\u5efa\u955c\u50cf\u3002 \u5173\u952e\u5b57 \u4f5c\u7528 \u5907\u6ce8 FROM \u6307\u5b9a\u7236\u955c\u50cf \u6307\u5b9adockerfile\u57fa\u4e8e\u90a3\u4e2aimage\u6784\u5efa MAINTAINER \u4f5c\u8005\u4fe1\u606f \u7528\u6765\u6807\u660e\u8fd9\u4e2adockerfile\u8c01\u5199\u7684 LABEL \u6807\u7b7e \u7528\u6765\u6807\u660edockerfile\u7684\u6807\u7b7e \u53ef\u4ee5\u4f7f\u7528Label\u4ee3\u66ffMaintainer \u6700\u7ec8\u90fd\u662f\u5728docker image\u57fa\u672c\u4fe1\u606f\u4e2d\u53ef\u4ee5\u67e5\u770b RUN \u6267\u884c\u547d\u4ee4 \u6267\u884c\u4e00\u6bb5\u547d\u4ee4 \u9ed8\u8ba4\u662f/bin/sh \u683c\u5f0f: RUN command \u6216\u8005 RUN [\"command\" , \"param1\",\"param2\"] CMD \u5bb9\u5668\u542f\u52a8\u547d\u4ee4 \u63d0\u4f9b\u542f\u52a8\u5bb9\u5668\u65f6\u5019\u7684\u9ed8\u8ba4\u547d\u4ee4 \u548cENTRYPOINT\u914d\u5408\u4f7f\u7528.\u683c\u5f0f CMD command param1 param2 \u6216\u8005 CMD [\"command\" , \"param1\",\"param2\"] ENTRYPOINT \u5165\u53e3 \u4e00\u822c\u5728\u5236\u4f5c\u4e00\u4e9b\u6267\u884c\u5c31\u5173\u95ed\u7684\u5bb9\u5668\u4e2d\u4f1a\u4f7f\u7528 COPY \u590d\u5236\u6587\u4ef6 build\u7684\u65f6\u5019\u590d\u5236\u6587\u4ef6\u5230image\u4e2d ADD \u6dfb\u52a0\u6587\u4ef6 build\u7684\u65f6\u5019\u6dfb\u52a0\u6587\u4ef6\u5230image\u4e2d \u4e0d\u4ec5\u4ec5\u5c40\u9650\u4e8e\u5f53\u524dbuild\u4e0a\u4e0b\u6587 \u53ef\u4ee5\u6765\u6e90\u4e8e\u8fdc\u7a0b\u670d\u52a1 ENV \u73af\u5883\u53d8\u91cf \u6307\u5b9abuild\u65f6\u5019\u7684\u73af\u5883\u53d8\u91cf \u53ef\u4ee5\u5728\u542f\u52a8\u7684\u5bb9\u5668\u7684\u65f6\u5019 \u901a\u8fc7-e\u8986\u76d6 \u683c\u5f0fENV name=value ARG \u6784\u5efa\u53c2\u6570 \u6784\u5efa\u53c2\u6570 \u53ea\u5728\u6784\u5efa\u7684\u65f6\u5019\u4f7f\u7528\u7684\u53c2\u6570 \u5982\u679c\u6709ENV \u90a3\u4e48ENV\u7684\u76f8\u540c\u540d\u5b57\u7684\u503c\u59cb\u7ec8\u8986\u76d6arg\u7684\u53c2\u6570 VOLUME \u5b9a\u4e49\u5916\u90e8\u53ef\u4ee5\u6302\u8f7d\u7684\u6570\u636e\u5377 \u6307\u5b9abuild\u7684image\u90a3\u4e9b\u76ee\u5f55\u53ef\u4ee5\u542f\u52a8\u7684\u65f6\u5019\u6302\u8f7d\u5230\u6587\u4ef6\u7cfb\u7edf\u4e2d \u542f\u52a8\u5bb9\u5668\u7684\u65f6\u5019\u4f7f\u7528 -v \u7ed1\u5b9a \u683c\u5f0f VOLUME [\"\u76ee\u5f55\"] EXPOSE \u66b4\u9732\u7aef\u53e3 \u5b9a\u4e49\u5bb9\u5668\u8fd0\u884c\u7684\u65f6\u5019\u76d1\u542c\u7684\u7aef\u53e3 \u542f\u52a8\u5bb9\u5668\u7684\u4f7f\u7528-p\u6765\u7ed1\u5b9a\u66b4\u9732\u7aef\u53e3 \u683c\u5f0f: EXPOSE 8080 \u6216\u8005 EXPOSE 8080/udp WORKDIR \u5de5\u4f5c\u76ee\u5f55 \u6307\u5b9a\u5bb9\u5668\u5185\u90e8\u7684\u5de5\u4f5c\u76ee\u5f55 \u5982\u679c\u6ca1\u6709\u521b\u5efa\u5219\u81ea\u52a8\u521b\u5efa \u5982\u679c\u6307\u5b9a/ \u4f7f\u7528\u7684\u662f\u7edd\u5bf9\u5730\u5740 \u5982\u679c\u4e0d\u662f/\u5f00\u5934\u90a3\u4e48\u662f\u5728\u4e0a\u4e00\u6761workdir\u7684\u8def\u5f84\u7684\u76f8\u5bf9\u8def\u5f84 USER \u6307\u5b9a\u6267\u884c\u7528\u6237 \u6307\u5b9abuild\u6216\u8005\u542f\u52a8\u7684\u65f6\u5019 \u7528\u6237 \u5728RUN CMD ENTRYPONT\u6267\u884c\u7684\u65f6\u5019\u7684\u7528\u6237 HEALTHCHECK \u5065\u5eb7\u68c0\u67e5 \u6307\u5b9a\u76d1\u6d4b\u5f53\u524d\u5bb9\u5668\u7684\u5065\u5eb7\u76d1\u6d4b\u7684\u547d\u4ee4 \u57fa\u672c\u4e0a\u6ca1\u7528 \u56e0\u4e3a\u5f88\u591a\u65f6\u5019 \u5e94\u7528\u672c\u8eab\u6709\u5065\u5eb7\u76d1\u6d4b\u673a\u5236 ONBUILD \u89e6\u53d1\u5668 \u5f53\u5b58\u5728ONBUILD\u5173\u952e\u5b57\u7684\u955c\u50cf\u4f5c\u4e3a\u57fa\u7840\u955c\u50cf\u7684\u65f6\u5019 \u5f53\u6267\u884cFROM\u5b8c\u6210\u4e4b\u540e \u4f1a\u6267\u884c ONBUILD\u7684\u547d\u4ee4 \u4f46\u662f\u4e0d\u5f71\u54cd\u5f53\u524d\u955c\u50cf \u7528\u5904\u4e5f\u4e0d\u600e\u4e48\u5927 STOPSIGNAL \u53d1\u9001\u4fe1\u53f7\u91cf\u5230\u5bbf\u4e3b\u673a \u8be5STOPSIGNAL\u6307\u4ee4\u8bbe\u7f6e\u5c06\u53d1\u9001\u5230\u5bb9\u5668\u7684\u7cfb\u7edf\u8c03\u7528\u4fe1\u53f7\u4ee5\u9000\u51fa\u3002 SHELL \u6307\u5b9a\u6267\u884c\u811a\u672c\u7684shell \u6307\u5b9aRUN CMD ENTRYPOINT \u6267\u884c\u547d\u4ee4\u7684\u65f6\u5019 \u4f7f\u7528\u7684shell","title":"Docerfile"},{"location":"docker/5/#docerfile","text":"\u524d\u9762\u7684\u8bfe\u7a0b\u4e2d\u5df2\u7ecf\u77e5\u9053\u4e86\uff0c\u8981\u83b7\u5f97\u955c\u50cf\uff0c\u53ef\u4ee5\u4eceDocker\u4ed3\u5e93\u4e2d\u8fdb\u884c\u4e0b\u8f7d\u3002\u90a3\u5982\u679c\u6211\u4eec\u60f3\u81ea\u5df1\u5f00\u53d1\u4e00\u4e2a\u955c\u50cf\uff0c\u90a3\u8be5\u5982 \u4f55\u505a\u5462\uff1f\u7b54\u6848\u662f\uff1aDockerfifile Dockerfifile\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u7531\u4e00\u7cfb\u5217\u547d\u4ee4\u548c\u53c2\u6570\u6784\u6210\uff0cDocker\u53ef\u4ee5\u8bfb\u53d6Dockerfifile\u6587\u4ef6\u5e76\u6839\u636eDockerfifile\u6587 \u4ef6\u7684\u63cf\u8ff0\u6765\u6784\u5efa\u955c\u50cf\u3002 \u5173\u952e\u5b57 \u4f5c\u7528 \u5907\u6ce8 FROM \u6307\u5b9a\u7236\u955c\u50cf \u6307\u5b9adockerfile\u57fa\u4e8e\u90a3\u4e2aimage\u6784\u5efa MAINTAINER \u4f5c\u8005\u4fe1\u606f \u7528\u6765\u6807\u660e\u8fd9\u4e2adockerfile\u8c01\u5199\u7684 LABEL \u6807\u7b7e \u7528\u6765\u6807\u660edockerfile\u7684\u6807\u7b7e \u53ef\u4ee5\u4f7f\u7528Label\u4ee3\u66ffMaintainer \u6700\u7ec8\u90fd\u662f\u5728docker image\u57fa\u672c\u4fe1\u606f\u4e2d\u53ef\u4ee5\u67e5\u770b RUN \u6267\u884c\u547d\u4ee4 \u6267\u884c\u4e00\u6bb5\u547d\u4ee4 \u9ed8\u8ba4\u662f/bin/sh \u683c\u5f0f: RUN command \u6216\u8005 RUN [\"command\" , \"param1\",\"param2\"] CMD \u5bb9\u5668\u542f\u52a8\u547d\u4ee4 \u63d0\u4f9b\u542f\u52a8\u5bb9\u5668\u65f6\u5019\u7684\u9ed8\u8ba4\u547d\u4ee4 \u548cENTRYPOINT\u914d\u5408\u4f7f\u7528.\u683c\u5f0f CMD command param1 param2 \u6216\u8005 CMD [\"command\" , \"param1\",\"param2\"] ENTRYPOINT \u5165\u53e3 \u4e00\u822c\u5728\u5236\u4f5c\u4e00\u4e9b\u6267\u884c\u5c31\u5173\u95ed\u7684\u5bb9\u5668\u4e2d\u4f1a\u4f7f\u7528 COPY \u590d\u5236\u6587\u4ef6 build\u7684\u65f6\u5019\u590d\u5236\u6587\u4ef6\u5230image\u4e2d ADD \u6dfb\u52a0\u6587\u4ef6 build\u7684\u65f6\u5019\u6dfb\u52a0\u6587\u4ef6\u5230image\u4e2d \u4e0d\u4ec5\u4ec5\u5c40\u9650\u4e8e\u5f53\u524dbuild\u4e0a\u4e0b\u6587 \u53ef\u4ee5\u6765\u6e90\u4e8e\u8fdc\u7a0b\u670d\u52a1 ENV \u73af\u5883\u53d8\u91cf \u6307\u5b9abuild\u65f6\u5019\u7684\u73af\u5883\u53d8\u91cf \u53ef\u4ee5\u5728\u542f\u52a8\u7684\u5bb9\u5668\u7684\u65f6\u5019 \u901a\u8fc7-e\u8986\u76d6 \u683c\u5f0fENV name=value ARG \u6784\u5efa\u53c2\u6570 \u6784\u5efa\u53c2\u6570 \u53ea\u5728\u6784\u5efa\u7684\u65f6\u5019\u4f7f\u7528\u7684\u53c2\u6570 \u5982\u679c\u6709ENV \u90a3\u4e48ENV\u7684\u76f8\u540c\u540d\u5b57\u7684\u503c\u59cb\u7ec8\u8986\u76d6arg\u7684\u53c2\u6570 VOLUME \u5b9a\u4e49\u5916\u90e8\u53ef\u4ee5\u6302\u8f7d\u7684\u6570\u636e\u5377 \u6307\u5b9abuild\u7684image\u90a3\u4e9b\u76ee\u5f55\u53ef\u4ee5\u542f\u52a8\u7684\u65f6\u5019\u6302\u8f7d\u5230\u6587\u4ef6\u7cfb\u7edf\u4e2d \u542f\u52a8\u5bb9\u5668\u7684\u65f6\u5019\u4f7f\u7528 -v \u7ed1\u5b9a \u683c\u5f0f VOLUME [\"\u76ee\u5f55\"] EXPOSE \u66b4\u9732\u7aef\u53e3 \u5b9a\u4e49\u5bb9\u5668\u8fd0\u884c\u7684\u65f6\u5019\u76d1\u542c\u7684\u7aef\u53e3 \u542f\u52a8\u5bb9\u5668\u7684\u4f7f\u7528-p\u6765\u7ed1\u5b9a\u66b4\u9732\u7aef\u53e3 \u683c\u5f0f: EXPOSE 8080 \u6216\u8005 EXPOSE 8080/udp WORKDIR \u5de5\u4f5c\u76ee\u5f55 \u6307\u5b9a\u5bb9\u5668\u5185\u90e8\u7684\u5de5\u4f5c\u76ee\u5f55 \u5982\u679c\u6ca1\u6709\u521b\u5efa\u5219\u81ea\u52a8\u521b\u5efa \u5982\u679c\u6307\u5b9a/ \u4f7f\u7528\u7684\u662f\u7edd\u5bf9\u5730\u5740 \u5982\u679c\u4e0d\u662f/\u5f00\u5934\u90a3\u4e48\u662f\u5728\u4e0a\u4e00\u6761workdir\u7684\u8def\u5f84\u7684\u76f8\u5bf9\u8def\u5f84 USER \u6307\u5b9a\u6267\u884c\u7528\u6237 \u6307\u5b9abuild\u6216\u8005\u542f\u52a8\u7684\u65f6\u5019 \u7528\u6237 \u5728RUN CMD ENTRYPONT\u6267\u884c\u7684\u65f6\u5019\u7684\u7528\u6237 HEALTHCHECK \u5065\u5eb7\u68c0\u67e5 \u6307\u5b9a\u76d1\u6d4b\u5f53\u524d\u5bb9\u5668\u7684\u5065\u5eb7\u76d1\u6d4b\u7684\u547d\u4ee4 \u57fa\u672c\u4e0a\u6ca1\u7528 \u56e0\u4e3a\u5f88\u591a\u65f6\u5019 \u5e94\u7528\u672c\u8eab\u6709\u5065\u5eb7\u76d1\u6d4b\u673a\u5236 ONBUILD \u89e6\u53d1\u5668 \u5f53\u5b58\u5728ONBUILD\u5173\u952e\u5b57\u7684\u955c\u50cf\u4f5c\u4e3a\u57fa\u7840\u955c\u50cf\u7684\u65f6\u5019 \u5f53\u6267\u884cFROM\u5b8c\u6210\u4e4b\u540e \u4f1a\u6267\u884c ONBUILD\u7684\u547d\u4ee4 \u4f46\u662f\u4e0d\u5f71\u54cd\u5f53\u524d\u955c\u50cf \u7528\u5904\u4e5f\u4e0d\u600e\u4e48\u5927 STOPSIGNAL \u53d1\u9001\u4fe1\u53f7\u91cf\u5230\u5bbf\u4e3b\u673a \u8be5STOPSIGNAL\u6307\u4ee4\u8bbe\u7f6e\u5c06\u53d1\u9001\u5230\u5bb9\u5668\u7684\u7cfb\u7edf\u8c03\u7528\u4fe1\u53f7\u4ee5\u9000\u51fa\u3002 SHELL \u6307\u5b9a\u6267\u884c\u811a\u672c\u7684shell \u6307\u5b9aRUN CMD ENTRYPOINT \u6267\u884c\u547d\u4ee4\u7684\u65f6\u5019 \u4f7f\u7528\u7684shell","title":"Docerfile"},{"location":"docker/6/","text":"\u670d\u52a1\u7f16\u6392 \u00b6 6.1 \u670d\u52a1\u7f16\u6392\u6982\u5ff5 \u00b6 \u5fae\u670d\u52a1\u67b6\u6784\u7684\u5e94\u7528\u7cfb\u7edf\u4e2d\u4e00\u822c\u5305\u542b\u82e5\u5e72\u4e2a\u5fae\u670d\u52a1\uff0c\u6bcf\u4e2a\u5fae\u670d\u52a1\u4e00\u822c\u90fd\u4f1a\u90e8\u7f72\u591a\u4e2a\u5b9e\u4f8b\uff0c\u5982\u679c\u6bcf\u4e2a\u5fae\u670d\u52a1\u90fd\u8981\u624b\u52a8\u542f\u505c\uff0c\u7ef4\u62a4\u7684\u5de5\u4f5c\u91cf\u4f1a\u5f88\u5927\u3002 \u8981\u4eceDockerfile build image \u6216\u8005\u53bbdockerhub\u62c9\u53d6image \u8981\u521b\u5efa\u591a\u4e2acontainer \u8981\u7ba1\u7406\u8fd9\u4e9bcontainer\uff08\u542f\u52a8\u505c\u6b62\u5220\u9664\uff09 \u670d\u52a1\u7f16\u6392\uff1a \u6309\u7167\u4e00\u5b9a\u7684\u4e1a\u52a1\u89c4\u5219\u6279\u91cf\u7ba1\u7406\u5bb9\u5668 6.2 Docker Compose \u6982\u8ff0 \u00b6 6.2.1 Docker Compose \u00b6 Docker Compose\u662f\u4e00\u4e2a\u7f16\u6392\u591a\u5bb9\u5668\u5206\u5e03\u5f0f\u90e8\u7f72\u7684\u5de5\u5177\uff0c\u63d0\u4f9b\u547d\u4ee4\u96c6\u7ba1\u7406\u5bb9\u5668\u5316\u5e94\u7528\u7684\u5b8c\u6574\u5f00\u53d1\u5468\u671f\uff0c\u5305\u62ec\u670d\u52a1\u6784\u5efa \uff0c\u542f\u52a8\u548c\u505c\u6b62\u3002\u4f7f\u7528\u6b65\u9aa4\uff1a \u5229\u7528 Dockerfile \u5b9a\u4e49\u8fd0\u884c\u73af\u5883\u955c\u50cf \u4f7f\u7528 docker-compose.yml \u5b9a\u4e49\u7ec4\u6210\u5e94\u7528\u7684\u5404\u670d\u52a1 \u8fd0\u884c docker-compose up \u542f\u52a8\u5e94\u7528 6.2.2 Docker Compose \u5b89\u88c5\u4f7f\u7528 \u00b6 Docker Compose \u00b6 \u4e00\u3001\u5b89\u88c5Docker Compose \u00b6 # Compose\u76ee\u524d\u5df2\u7ecf\u5b8c\u5168\u652f\u6301Linux\u3001Mac OS\u548cWindows\uff0c\u5728\u6211\u4eec\u5b89\u88c5Compose\u4e4b\u524d\uff0c\u9700\u8981\u5148\u5b89\u88c5Docker\u3002\u4e0b\u9762\u6211 \u4eec\u4ee5\u7f16\u8bd1\u597d\u7684\u4e8c\u8fdb\u5236\u5305\u65b9\u5f0f\u5b89\u88c5\u5728Linux\u7cfb\u7edf\u4e2d\u3002 curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose- ` uname -s ` - ` uname -m ` -o /usr/local/bin/docker-compose # \u8bbe\u7f6e\u6587\u4ef6\u53ef\u6267\u884c\u6743\u9650 chmod +x /usr/local/bin/docker-compose # \u67e5\u770b\u7248\u672c\u4fe1\u606f docker-compose -version \u4e8c\u3001\u5378\u8f7dDocker Compose \u00b6 # \u4e8c\u8fdb\u5236\u5305\u65b9\u5f0f\u5b89\u88c5\u7684\uff0c\u5220\u9664\u4e8c\u8fdb\u5236\u6587\u4ef6\u5373\u53ef rm /usr/local/bin/docker-compose \u4e09\u3001 \u4f7f\u7528docker compose\u7f16\u6392nginx+springboot\u9879\u76ee \u00b6 \u521b\u5efadocker-compose\u76ee\u5f55 mkdir ~/docker-compose cd ~/docker-compose \u7f16\u5199 docker-compose.yml \u6587\u4ef6 version: '3' services: nginx: image: nginx ports: - 80 :80 links: - app volumes: - ./nginx/conf.d:/etc/nginx/conf.d app: image: app expose: - \"8080\" \u521b\u5efa./nginx/conf.d\u76ee\u5f55 mkdir -p ./nginx/conf.d \u5728./nginx/conf.d\u76ee\u5f55\u4e0b \u7f16\u5199itheima.conf\u6587\u4ef6 server { listen 80 ; access_log off ; location / { proxy_pass http://app:8080 ; } } \u5728~/docker-compose \u76ee\u5f55\u4e0b \u4f7f\u7528docker-compose \u542f\u52a8\u5bb9\u5668 docker-compose up \u6d4b\u8bd5\u8bbf\u95ee http://192.168.149.135/hello","title":"\u670d\u52a1\u7f16\u6392"},{"location":"docker/6/#_1","text":"","title":"\u670d\u52a1\u7f16\u6392"},{"location":"docker/6/#61","text":"\u5fae\u670d\u52a1\u67b6\u6784\u7684\u5e94\u7528\u7cfb\u7edf\u4e2d\u4e00\u822c\u5305\u542b\u82e5\u5e72\u4e2a\u5fae\u670d\u52a1\uff0c\u6bcf\u4e2a\u5fae\u670d\u52a1\u4e00\u822c\u90fd\u4f1a\u90e8\u7f72\u591a\u4e2a\u5b9e\u4f8b\uff0c\u5982\u679c\u6bcf\u4e2a\u5fae\u670d\u52a1\u90fd\u8981\u624b\u52a8\u542f\u505c\uff0c\u7ef4\u62a4\u7684\u5de5\u4f5c\u91cf\u4f1a\u5f88\u5927\u3002 \u8981\u4eceDockerfile build image \u6216\u8005\u53bbdockerhub\u62c9\u53d6image \u8981\u521b\u5efa\u591a\u4e2acontainer \u8981\u7ba1\u7406\u8fd9\u4e9bcontainer\uff08\u542f\u52a8\u505c\u6b62\u5220\u9664\uff09 \u670d\u52a1\u7f16\u6392\uff1a \u6309\u7167\u4e00\u5b9a\u7684\u4e1a\u52a1\u89c4\u5219\u6279\u91cf\u7ba1\u7406\u5bb9\u5668","title":"6.1 \u670d\u52a1\u7f16\u6392\u6982\u5ff5"},{"location":"docker/6/#62_docker_compose","text":"","title":"6.2 Docker Compose \u6982\u8ff0"},{"location":"docker/6/#621_docker_compose","text":"Docker Compose\u662f\u4e00\u4e2a\u7f16\u6392\u591a\u5bb9\u5668\u5206\u5e03\u5f0f\u90e8\u7f72\u7684\u5de5\u5177\uff0c\u63d0\u4f9b\u547d\u4ee4\u96c6\u7ba1\u7406\u5bb9\u5668\u5316\u5e94\u7528\u7684\u5b8c\u6574\u5f00\u53d1\u5468\u671f\uff0c\u5305\u62ec\u670d\u52a1\u6784\u5efa \uff0c\u542f\u52a8\u548c\u505c\u6b62\u3002\u4f7f\u7528\u6b65\u9aa4\uff1a \u5229\u7528 Dockerfile \u5b9a\u4e49\u8fd0\u884c\u73af\u5883\u955c\u50cf \u4f7f\u7528 docker-compose.yml \u5b9a\u4e49\u7ec4\u6210\u5e94\u7528\u7684\u5404\u670d\u52a1 \u8fd0\u884c docker-compose up \u542f\u52a8\u5e94\u7528","title":"6.2.1 Docker Compose"},{"location":"docker/6/#622_docker_compose","text":"","title":"6.2.2  Docker Compose \u5b89\u88c5\u4f7f\u7528"},{"location":"docker/6/#docker_compose","text":"","title":"Docker Compose"},{"location":"docker/6/#docker_compose_1","text":"# Compose\u76ee\u524d\u5df2\u7ecf\u5b8c\u5168\u652f\u6301Linux\u3001Mac OS\u548cWindows\uff0c\u5728\u6211\u4eec\u5b89\u88c5Compose\u4e4b\u524d\uff0c\u9700\u8981\u5148\u5b89\u88c5Docker\u3002\u4e0b\u9762\u6211 \u4eec\u4ee5\u7f16\u8bd1\u597d\u7684\u4e8c\u8fdb\u5236\u5305\u65b9\u5f0f\u5b89\u88c5\u5728Linux\u7cfb\u7edf\u4e2d\u3002 curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose- ` uname -s ` - ` uname -m ` -o /usr/local/bin/docker-compose # \u8bbe\u7f6e\u6587\u4ef6\u53ef\u6267\u884c\u6743\u9650 chmod +x /usr/local/bin/docker-compose # \u67e5\u770b\u7248\u672c\u4fe1\u606f docker-compose -version","title":"\u4e00\u3001\u5b89\u88c5Docker Compose"},{"location":"docker/6/#docker_compose_2","text":"# \u4e8c\u8fdb\u5236\u5305\u65b9\u5f0f\u5b89\u88c5\u7684\uff0c\u5220\u9664\u4e8c\u8fdb\u5236\u6587\u4ef6\u5373\u53ef rm /usr/local/bin/docker-compose","title":"\u4e8c\u3001\u5378\u8f7dDocker Compose"},{"location":"docker/6/#docker_composenginxspringboot","text":"\u521b\u5efadocker-compose\u76ee\u5f55 mkdir ~/docker-compose cd ~/docker-compose \u7f16\u5199 docker-compose.yml \u6587\u4ef6 version: '3' services: nginx: image: nginx ports: - 80 :80 links: - app volumes: - ./nginx/conf.d:/etc/nginx/conf.d app: image: app expose: - \"8080\" \u521b\u5efa./nginx/conf.d\u76ee\u5f55 mkdir -p ./nginx/conf.d \u5728./nginx/conf.d\u76ee\u5f55\u4e0b \u7f16\u5199itheima.conf\u6587\u4ef6 server { listen 80 ; access_log off ; location / { proxy_pass http://app:8080 ; } } \u5728~/docker-compose \u76ee\u5f55\u4e0b \u4f7f\u7528docker-compose \u542f\u52a8\u5bb9\u5668 docker-compose up \u6d4b\u8bd5\u8bbf\u95ee http://192.168.149.135/hello","title":"\u4e09\u3001 \u4f7f\u7528docker compose\u7f16\u6392nginx+springboot\u9879\u76ee"},{"location":"docker/7/","text":"\u4e00\u3001\u79c1\u6709\u4ed3\u5e93\u642d\u5efa \u00b6 # 1\u3001\u62c9\u53d6\u79c1\u6709\u4ed3\u5e93\u955c\u50cf docker pull registry # 2\u3001\u542f\u52a8\u79c1\u6709\u4ed3\u5e93\u5bb9\u5668 docker run -id --name = registry -p 5000 :5000 registry # 3\u3001\u6253\u5f00\u6d4f\u89c8\u5668 \u8f93\u5165\u5730\u5740http://\u79c1\u6709\u4ed3\u5e93\u670d\u52a1\u5668ip:5000/v2/_catalog\uff0c\u770b\u5230{\"repositories\":[]} \u8868\u793a\u79c1\u6709\u4ed3\u5e93 \u642d\u5efa\u6210\u529f # 4\u3001\u4fee\u6539daemon.json vim /etc/docker/daemon.json # \u5728\u4e0a\u8ff0\u6587\u4ef6\u4e2d\u6dfb\u52a0\u4e00\u4e2akey\uff0c\u4fdd\u5b58\u9000\u51fa\u3002\u6b64\u6b65\u7528\u4e8e\u8ba9 docker \u4fe1\u4efb\u79c1\u6709\u4ed3\u5e93\u5730\u5740\uff1b\u6ce8\u610f\u5c06\u79c1\u6709\u4ed3\u5e93\u670d\u52a1\u5668ip\u4fee\u6539\u4e3a\u81ea\u5df1\u79c1\u6709\u4ed3\u5e93\u670d\u52a1\u5668\u771f\u5b9eip { \"insecure-registries\" : [ \"\u79c1\u6709\u4ed3\u5e93\u670d\u52a1\u5668ip:5000\" ]} # 5\u3001\u91cd\u542fdocker \u670d\u52a1 systemctl restart docker docker start registry \u4e8c\u3001\u5c06\u955c\u50cf\u4e0a\u4f20\u81f3\u79c1\u6709\u4ed3\u5e93 \u00b6 # 1\u3001\u6807\u8bb0\u955c\u50cf\u4e3a\u79c1\u6709\u4ed3\u5e93\u7684\u955c\u50cf docker tag centos:7 \u79c1\u6709\u4ed3\u5e93\u670d\u52a1\u5668IP:5000/centos:7 # 2\u3001\u4e0a\u4f20\u6807\u8bb0\u7684\u955c\u50cf docker push \u79c1\u6709\u4ed3\u5e93\u670d\u52a1\u5668IP:5000/centos:7 \u4e09\u3001 \u4ece\u79c1\u6709\u4ed3\u5e93\u62c9\u53d6\u955c\u50cf \u00b6 #\u62c9\u53d6\u955c\u50cf docker pull \u79c1\u6709\u4ed3\u5e93\u670d\u52a1\u5668ip:5000/centos:7","title":"\u79c1\u6709\u4ed3\u5e93"},{"location":"docker/7/#_1","text":"# 1\u3001\u62c9\u53d6\u79c1\u6709\u4ed3\u5e93\u955c\u50cf docker pull registry # 2\u3001\u542f\u52a8\u79c1\u6709\u4ed3\u5e93\u5bb9\u5668 docker run -id --name = registry -p 5000 :5000 registry # 3\u3001\u6253\u5f00\u6d4f\u89c8\u5668 \u8f93\u5165\u5730\u5740http://\u79c1\u6709\u4ed3\u5e93\u670d\u52a1\u5668ip:5000/v2/_catalog\uff0c\u770b\u5230{\"repositories\":[]} \u8868\u793a\u79c1\u6709\u4ed3\u5e93 \u642d\u5efa\u6210\u529f # 4\u3001\u4fee\u6539daemon.json vim /etc/docker/daemon.json # \u5728\u4e0a\u8ff0\u6587\u4ef6\u4e2d\u6dfb\u52a0\u4e00\u4e2akey\uff0c\u4fdd\u5b58\u9000\u51fa\u3002\u6b64\u6b65\u7528\u4e8e\u8ba9 docker \u4fe1\u4efb\u79c1\u6709\u4ed3\u5e93\u5730\u5740\uff1b\u6ce8\u610f\u5c06\u79c1\u6709\u4ed3\u5e93\u670d\u52a1\u5668ip\u4fee\u6539\u4e3a\u81ea\u5df1\u79c1\u6709\u4ed3\u5e93\u670d\u52a1\u5668\u771f\u5b9eip { \"insecure-registries\" : [ \"\u79c1\u6709\u4ed3\u5e93\u670d\u52a1\u5668ip:5000\" ]} # 5\u3001\u91cd\u542fdocker \u670d\u52a1 systemctl restart docker docker start registry","title":"\u4e00\u3001\u79c1\u6709\u4ed3\u5e93\u642d\u5efa"},{"location":"docker/7/#_2","text":"# 1\u3001\u6807\u8bb0\u955c\u50cf\u4e3a\u79c1\u6709\u4ed3\u5e93\u7684\u955c\u50cf docker tag centos:7 \u79c1\u6709\u4ed3\u5e93\u670d\u52a1\u5668IP:5000/centos:7 # 2\u3001\u4e0a\u4f20\u6807\u8bb0\u7684\u955c\u50cf docker push \u79c1\u6709\u4ed3\u5e93\u670d\u52a1\u5668IP:5000/centos:7","title":"\u4e8c\u3001\u5c06\u955c\u50cf\u4e0a\u4f20\u81f3\u79c1\u6709\u4ed3\u5e93"},{"location":"docker/7/#_3","text":"#\u62c9\u53d6\u955c\u50cf docker pull \u79c1\u6709\u4ed3\u5e93\u670d\u52a1\u5668ip:5000/centos:7","title":"\u4e09\u3001 \u4ece\u79c1\u6709\u4ed3\u5e93\u62c9\u53d6\u955c\u50cf"},{"location":"interview/e.g.1.0.0/","text":"\u4e00\u3001Java\u57fa\u7840 \u00b6 1.Java\u57fa\u7840\u77e5\u8bc6 \u00b6 1.1\u9762\u5411\u5bf9\u8c61\u7684\u7279\u5f81\uff08\u4e86\u89e3\uff09 \u00b6 \u5c01\u88c5, \u7c7b\u7684\u79c1\u6709\u5316 \u7ee7\u627f, \u591a\u6001 \u7236\u7c7b/\u7236\u63a5\u53e3\u5f15\u7528\u6307\u5411\u5b50\u7c7b\u5bf9\u8c61 1.2Java\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u6709\u54ea\u4e9b\uff08\u4e86\u89e3\uff09 \u00b6 8\u79cd 1.3JDKJREJVM\u7684\u533a\u522b\uff08\u5fc5\u4f1a\uff09 \u00b6 1.4\u91cd\u8f7d\u548c\u91cd\u5199\u7684\u533a\u522b\uff08\u5fc5\u4f1a\uff09 \u00b6 \u91cd\u8f7d\uff1a \u53d1\u751f\u5728\u540c\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u65b9\u6cd5\u540d\u5fc5\u987b\u76f8\u540c\uff0c\u53c2\u6570\u7c7b\u578b\u4e0d\u540c.\u4e2a\u6570\u4e0d\u540c. \u987a\u5e8f\u4e0d\u540c\uff0c\u65b9\u6cd5\u8fd4\u56de\u503c\u548c\u8bbf\u95ee\u4fee\u9970\u7b26\u53ef\u4ee5\u4e0d\u540c\uff0c\u53d1\u751f\u5728\u7f16\u8bd1\u65f6\u3002 \u91cd\u5199\uff1a \u53d1\u751f\u5728\u7236\u5b50\u7c7b\u4e2d\uff0c\u65b9\u6cd5\u540d.\u53c2\u6570\u5217\u8868\u5fc5\u987b\u76f8\u540c\uff0c\u8fd4\u56de\u503c\u8303\u56f4\u5c0f\u4e8e \u7b49\u4e8e\u7236\u7c7b\uff0c\u629b\u51fa\u7684\u5f02\u5e38\u8303\u56f4\u5c0f\u4e8e\u7b49\u4e8e\u7236\u7c7b\uff0c \u8bbf\u95ee\u4fee\u9970\u7b26\u8303\u56f4\u5927\u4e8e\u7b49\u4e8e\u7236\u7c7b\uff1b\u5982\u679c\u7236\u7c7b\u65b9\u6cd5\u8bbf\u95ee\u4fee\u9970\u7b26\u4e3a private \u5219 \u5b50\u7c7b\u5c31\u4e0d\u80fd\u91cd\u5199\u8be5\u65b9\u6cd5\u3002 1.5Java\u4e2d==\u548cequals\u7684\u533a\u522b\uff08\u5fc5\u4f1a\uff09 \u00b6 1.6String\u3001StringBuffer\u3001StringBuilder\u4e09\u8005\u4e4b\u95f4\u7684\u533a\u522b\uff08\u5fc5\u4f1a\uff09 \u00b6 1.7\u63a5\u53e3\u548c\u62bd\u8c61\u7c7b\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1f\uff08\u5fc5\u4f1a\uff09 \u00b6 1.8string\u5e38\u7528\u7684\u65b9\u6cd5\u6709\u54ea\u4e9b\uff1f\uff08\u4e86\u89e3\uff09 \u00b6 1.9\u4ec0\u4e48\u662f\u5355\u4f8b\u6a21\u5f0f\uff1f\u6709\u51e0\u79cd\uff1f\uff08\u5fc5\u4f1a\uff09 \u00b6 1.10\u53cd\u5c04\uff08\u4e86\u89e3\uff09 \u00b6 1.11jdk1.8\u7684\u65b0\u7279\u6027\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 1.12Java\u7684\u5f02\u5e38\uff08\u5fc5\u4f1a\uff09 \u00b6 1.13BIO\u3001NIO\u3001AIO\u6709\u4ec0\u4e48\u533a\u522b\uff1f\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 1.14Threadloal\u7684\u539f\u7406\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 1.16\u540c\u6b65\u9501\u3001\u6b7b\u9501\u3001\u4e50\u89c2\u9501\u3001\u60b2\u89c2\u9501\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 1.17\u8bf4\u4e00\u4e0bsynchronized\u5e95\u5c42\u5b9e\u73b0\u539f\u7406\uff1f\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 1.18synchronized\u548cvolatile\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1f\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 1.19synchronized\u548cLock \u6709\u4ec0\u4e48\u533a\u522b\uff1f\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 1.20\u624b\u5199\u5192\u6ce1\u6392\u5e8f\uff1f\uff08\u5fc5\u4f1a\uff09 \u00b6 2.\u96c6\u5408\uff08\u5fc5\u4f1a\uff09 \u00b6 2.1\u5e38\u89c1\u7684\u6570\u636e\u7ed3\u6784\uff08\u4e86\u89e3\uff09 \u00b6 2.2\u96c6\u5408\u548c\u6570\u7ec4\u7684\u533a\u522b\uff08\u4e86\u89e3\uff09 \u00b6 2.3List\u548cMap\u3001Set\u7684\u533a\u522b\uff08\u5fc5\u4f1a\uff09 \u00b6 2.4List\u548cMap\u3001Set\u7684\u5b9e\u73b0\u7c7b\uff08\u5fc5\u4f1a\uff09 \u00b6 2.5Hashmap\u7684\u5e95\u5c42\u539f\u7406\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 2.6Hashmap\u548chashtable ConcurrentHashMap\u533a\u522b\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 3.\u591a\u7ebf\u7a0b\uff08\u5fc5\u4f1a\uff09 \u00b6 3.1\u4ec0\u4e48\u662f\u7ebf\u7a0b\uff1f\u7ebf\u7a0b\u548c\u8fdb\u7a0b\u7684\u533a\u522b\uff1f\uff08\u4e86\u89e3\uff09 \u00b6 3.2\u521b\u5efa\u7ebf\u7a0b\u6709\u51e0\u79cd\u65b9\u5f0f\uff08\u5fc5\u4f1a\uff09 \u00b6 3.3Runnable\u548cCallable\u7684\u533a\u522b\uff1f\uff08\u5fc5\u4f1a\uff09 \u00b6 3.4\u5982\u4f55\u542f\u52a8\u4e00\u4e2a\u65b0\u7ebf\u7a0b\u3001\u8c03\u7528start\u548crun\u65b9\u6cd5\u7684\u533a\u522b\uff1f\uff08\u5fc5\u4f1a\uff09 \u00b6 3.5\u7ebf\u7a0b\u6709\u54ea\u51e0\u79cd\u72b6\u6001\u4ee5\u53ca\u5404\u79cd\u72b6\u6001\u4e4b\u95f4\u7684\u8f6c\u6362\uff1f\uff08\u5fc5\u4f1a\uff09 \u00b6 3.6\u7ebf\u7a0b\u76f8\u5173\u7684\u57fa\u672c\u65b9\u6cd5\uff1f\uff08\u5fc5\u4f1a\uff09 \u00b6 3.7 wait\uff08\uff09\u548csleep\uff08\uff09\u7684\u533a\u522b\uff1f\uff08\u5fc5\u4f1a\uff09 \u00b6 4.\u7ebf\u7a0b\u6c60 \u00b6 4.1\u4e3a\u4ec0\u4e48\u9700\u8981\u7ebf\u7a0b\u6c60\uff08\u4e86\u89e3\uff09 \u00b6 4.2\u7ebf\u7a0b\u6c60\u7684\u5206\u7c7b\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 4.3\u6838\u5fc3\u53c2\u6570\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 4.4\u7ebf\u7a0b\u6c60\u7684\u539f\u7406\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 4.5\u62d2\u7edd\u7b56\u7565\uff08\u4e86\u89e3\uff09 \u00b6 4.6\u7ebf\u7a0b\u6c60\u7684\u5173\u95ed\uff08\u4e86\u89e3\uff09 \u00b6 6.Jvm \u00b6 6.2JDK1.8\u5806\u5185\u5b58\u7ed3\u6784\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 6.3Gc\u5783\u573e\u56de\u6536\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 6.4JVM\u8c03\u4f18\u53c2\u6570\uff08\u4e86\u89e3\uff09 \u00b6 \u4e8c\u3001Web \u00b6 1.\u7f51\u7edc\u901a\u8baf\u90e8\u5206 \u00b6 1.1TCP\u4e0eUDP\u533a\u522b\uff1f\uff08\u4e86\u89e3\uff09 \u00b6 1.2\u4ec0\u4e48\u662fHTTP\u534f\u8bae\uff1f \u00b6 1.3TCP\u7684\u4e09\u6b21\u63e1\u624b1.4HTTP\u4e2d\u91cd\u5b9a\u5411\u548c\u8bf7\u6c42\u8f6c\u53d1\u7684\u533a\u522b\uff1f \u00b6 1.5Get\u548cPost\u7684\u533a\u522b\uff1f \u00b6 2.cookie\u548csession\u7684\u533a\u522b\uff1f\uff08\u5fc5\u4f1a\uff09 \u00b6 3.Jsp\u548cServlet\uff08\u4e86\u89e3\uff09 \u00b6 1.Jsp\u548cServlet\u7684\u533a\u522b\uff1f \u00b6 2.Servlet\u7684\u751f\u547d\u5468\u671f \u00b6 3.JSP\u4e5d\u5927\u5185\u7f6e\u5bf9\u8c61 \u00b6 4.Ajax\u7684\u4ecb\u7ecd\uff08\u5fc5\u4f1a\uff09 \u00b6 \u4e09\u3001\u6570\u636e\u5e93 \u00b6 1.\u8fde\u63a5\u67e5\u8be2\uff08\u5fc5\u4f1a\uff09 \u00b6 2.\u805a\u5408\u51fd\u6570\uff08\u5fc5\u4f1a\uff09 \u00b6 3.SQL\u5173\u952e\u5b57\uff08\u5fc5\u4f1a\uff09 \u00b6 4.SQL Select \u8bed\u53e5\u5b8c\u6574\u7684\u6267\u884c\u987a\u5e8f\uff1a\uff08\u5fc5\u4f1a\uff09 \u00b6 5.\u6570\u636e\u5e93\u4e09\u8303\u5f0f\uff08\u5fc5\u4f1a\uff09 \u00b6 6.\u5b58\u50a8\u5f15\u64ce\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 1.MyISAM\u5b58\u50a8\u5f15\u64ce \u00b6 2.InnoDB\u5b58\u50a8\u5f15\u64ce \u00b6 7.\u6570\u636e\u5e93\u4e8b\u52a1\uff08\u5fc5\u4f1a\uff09 \u00b6 1.\u4e8b\u52a1\u7279\u6027 \u00b6 2.\u9694\u79bb\u7ea7\u522b \u00b6 8.\u7d22\u5f15 \u00b6 1.\u7d22\u5f15\u7684\u6982\u5ff5\u548c\u4f18\u70b9\uff08\u4e86\u89e3\uff09 \u00b6 2.\u7d22\u5f15\u7684\u5206\u7c7b\uff08\u5fc5\u4f1a\uff09 \u00b6 3.\u7d22\u5f15\u7684\u5e95\u5c42\u5b9e\u73b0\u539f\u7406\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 4.\u5982\u4f55\u907f\u514d\u7d22\u5f15\u5931\u6548\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 9.\u6570\u636e\u5e93\u9501\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 1.\u884c\u9501\u548c\u8868\u9501 \u00b6 2.\u60b2\u89c2\u9501\u548c\u4e50\u89c2\u9501 \u00b6 10.MySql\u4f18\u5316\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 1\uff09\u5b9a\u4f4d\u6267\u884c\u6548\u7387\u6162\u7684sql\u8bed\u53e5.\uff08\u4e86\u89e3\uff09 \u00b6 2\uff09\u4f18\u5316\u7d22\u5f15\uff08\u9ad8\u85aa\uff09 \u00b6 3\uff09Sql\u8bed\u53e5\u8c03\u4f18\uff08\u9ad8\u85aa\uff09 \u00b6 4\uff09\u5408\u7406\u7684\u6570\u636e\u5e93\u8bbe\u8ba1\uff08\u4e86\u89e3\uff09 \u00b6 \u56db\u3001\u6846\u67b6 \u00b6 1.Mybatis\u6846\u67b6 \u00b6 1.1\u8c08\u4e00\u8c08\u4f60\u5bf9Mybatis\u6846\u67b6\u7684\u7406\u89e3\uff08\u4e86\u89e3\uff09 \u00b6 1.2\u5728mybatis\u4e2d\uff0c$}\u548c##}\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1f\uff08\u5fc5\u4f1a\uff09 \u00b6 1.3MyBatis\u7f16\u7a0b\u6b65\u9aa4\u662f\u4ec0\u4e48\u6837\u7684\uff1f\uff08\u4e86\u89e3\uff09 \u00b6 1.4\u5728mybatis\u4e2d\uff0cresultType\u548cResultMap\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1f\uff08\u5fc5\u4f1a\uff09 \u00b6 1.5\u5728Mybatis\u4e2d\u4f60\u77e5\u9053\u7684\u52a8\u6001SQL\u7684\u6807\u7b7e\u6709\u54ea\u4e9b\uff1f\u4f5c\u7528\u5206\u522b\u662f\u4ec0\u4e48\uff1f\uff08\u2026 \u00b6 1.6\u8c08\u4e00\u4e0b\u4f60\u5bf9mybatis\u7f13\u5b58\u673a\u5236\u7684\u7406\u89e3\uff1f\uff08\u4e86\u89e3\uff09 \u00b6 2.Spring\u6846\u67b6 \u00b6 2.1Spring\u7684\u4e24\u5927\u6838\u5fc3\u662f\u4ec0\u4e48\uff1f\u8c08\u4e00\u8c08\u4f60\u5bf9IOC\u7684\u7406\u89e3\uff1f\u8c08\u4e00\u8c08\u4f60\u5bf9\u2026 \u00b6 IOC\u548cAOP ioc \u63a7\u5236\u7ffb\u8f6c\uff0cSpring\u53cd\u5411\u63a7\u5236\u5e94\u7528\u7a0b\u5e8f\u6240\u9700\u8981\u4f7f\u7528\u7684\u5916\u90e8\u8d44\u6e90 2.2Spring\u7684\u751f\u547d\u5468\u671f\uff1f\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 2.3Spring\u652f\u6301bean\u7684\u4f5c\u7528\u57df\u6709\u51e0\u79cd\u5417\uff1f\u6bcf\u79cd\u4f5c\u7528\u57df\u662f\u4ec0\u4e48\u6837\u7684\uff1f\uff08\u2026 \u00b6 2.4BeanFactory\u548cApplicationContext\u6709\u4ec0\u4e48\u533a\u522b\uff08\u4e86\u89e3\uff09 \u00b6 2.5Spring\u6846\u67b6\u4e2d\u90fd\u7528\u5230\u4e86\u54ea\u4e9b\u8bbe\u8ba1\u6a21\u5f0f\uff1f\uff08\u5fc5\u4f1a\uff09 \u00b6 2.6Spring\u4e8b\u52a1\u7684\u5b9e\u73b0\u65b9\u5f0f\u548c\u5b9e\u73b0\u539f\u7406\uff08\u5fc5\u4f1a\uff09 \u00b6 2.6\u4f60\u77e5\u9053\u7684Spring\u7684\u901a\u77e5\u7c7b\u578b\u6709\u54ea\u4e9b\uff0c\u5206\u522b\u5728\u4ec0\u4e48\u65f6\u5019\u6267\u884c\uff1f\uff08\u4e86\u89e3\uff09 \u00b6 2.7Spring\u7684\u5bf9\u8c61\u9ed8\u8ba4\u662f\u5355\u4f8b\u7684\u8fd8\u662f\u591a\u4f8b\u7684\uff1f\u5355\u4f8bbean\u5b58\u4e0d\u5b58\u5728\u7ebf.\u2026 \u00b6 2.8@Resource\u548c@Autowired\u4f9d\u8d56\u6ce8\u5165\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1f@Qualifie... \u00b6 2.8Spring\u7684\u5e38\u7528\u6ce8\u89e3\uff08\u5fc5\u4f1a\uff09 \u00b6 2.9Spring\u7684\u4e8b\u52a1\u4f20\u64ad\u884c\u4e3a\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 2.10Spring\u4e2d\u7684\u9694\u79bb\u7ea7\u522b\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 3.SpringMVC\u6846\u67b6 \u00b6 3.1\u8c08\u4e00\u4e0b\u4f60\u5bf9SpringMVC\u6846\u67b6\u7684\u7406\u89e3\uff08\u4e86\u89e3\uff09 \u00b6 3.2SpringMVC\u4e3b\u8981\u7ec4\u4ef6\uff08\u5fc5\u4f1a\uff09 \u00b6 3.3\u8c08\u4e00\u4e0bSpringMVC\u7684\u6267\u884c\u6d41\u7a0b\u4ee5\u53ca\u5404\u4e2a\u7ec4\u4ef6\u7684\u4f5c\u7528\uff08\u5fc5\u4f1a\uff09 \u00b6 3.4\u8bf4\u4e00\u4e0bSpringMVC\u652f\u6301\u7684\u8f6c\u53d1\u548c\u91cd\u5b9a\u5411\u7684\u5199\u6cd5\uff08\u5fc5\u4f1a\uff09 \u00b6 3.5 SpringMVC\u7684\u5e38\u7528\u6ce8\u89e3\uff08\u5fc5\u4f1a\uff09 \u00b6 3.6\u8c08\u4e00\u4e0bSpringMVC\u7edf\u4e00\u5f02\u5e38\u5904\u7406\u7684\u601d\u60f3\u548c\u5b9e\u73b0\u65b9\u5f0f\uff08\u5fc5\u4f1a\uff09 \u00b6 3.7\u5728SpringMVC\u4e2d\uff0c\u5982\u679c\u60f3\u901a\u8fc7\u8f6c\u53d1\u5c06\u6570\u636e\u4f20\u9012\u5230\u524d\u53f0\uff0c\u6709\u51e0\u79cd\u5199.\u2026 \u00b6 3.8\u5728SpringMVC\u4e2d\u62e6\u622a\u5668\u7684\u4f7f\u7528\u6b65\u9aa4\u662f\u4ec0\u4e48\u6837\u7684\uff1f\uff08\u5fc5\u4f1a\uff09 \u00b6 3.9\u5728SpringMVC\u4e2d\u6587\u4ef6\u4e0a\u4f20\u7684\u4f7f\u7528\u6b65\u9aa4\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u524d\u53f0\u4e09\u8981\u7d20\u2026 \u00b6 3.10SpringMVC\u4e2d\u5982\u4f55\u89e3\u51b3GETIPOST\u8bf7\u6c42\u4e2d\u6587\u4e71\u7801\u95ee\u9898\uff1f\uff08\u4e86\u89e3\uff09 \u00b6 4.Dubbo \u00b6 4.1\u4ec0\u4e48\u662fdubbo\uff08\u5fc5\u4f1a\uff09 \u00b6 4.2Dubbo\u7684\u5b9e\u73b0\u539f\u7406\uff08\u5fc5\u4f1a\uff09 \u00b6 4.3\u8282\u70b9\u89d2\u8272\u8bf4\u660e\uff08\u5fc5\u4f1a\uff09 \u00b6 4.4\u8c03\u7528\u5173\u7cfb\u8bf4\u660e\uff08\u5fc5\u4f1a\uff09 \u00b6 4.5\u5728\u5b9e\u9645\u5f00\u53d1\u7684\u573a\u666f\u4e2d\u5e94\u8be5\u5982\u4f55\u9009\u62e9RPC\u6846\u67b6\uff08\u4e86\u89e3\uff09 \u00b6 5.Zookeeper \u00b6 1.Zookeeper\u662f\u4ec0\u4e48\uff08\u4e86\u89e3\uff09 \u00b6 2.Zookeeper\u7684\u6570\u636e\u6a21\u578b\uff08\u5fc5\u4f1a\uff09 \u00b6 3.Zookeeper\u7684watch\u76d1\u542c\u673a\u5236\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 3.1\u76d1\u542c\u5668\u539f\u7406 \u00b6 3.2\u76d1\u542c\u5668\u5b9e\u9645\u5e94\u7528 \u00b6 4.Zookeeper\u7684\u5e94\u7528\u573a\u666f\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 4.1\u7edf\u4e00\u547d\u540d\u670d\u52a1 \u00b6 4.2\u7edf\u4e00\u914d\u7f6e\u7ba1\u7406 \u00b6 4.3\u7edf\u4e00\u96c6\u7fa4\u7ba1\u7406 \u00b6 4.4\u96c6\u7fa4\u9009\u4e3b \u00b6 4.5\u5206\u5e03\u5f0f\u9501 \u00b6 5.Zookeeper\u96c6\u7fa4[\u9ad8\u7ea7]\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 5.1ZK\u96c6\u7fa4\u4ecb\u7ecd \u00b6 5.2\u6570\u636e\u4e00\u81f4\u6027\u5904\u7406 \u00b6 5.2.1\u96c6\u7fa4\u89d2\u8272 \u00b6 5.2.2Zookeeper\u7684\u7279\u6027 \u00b6 5.2.3ZAB\u534f\u8bae \u00b6 5.2.4ZK\u96c6\u7fa4\u5199\u6570\u636e\u6d41\u7a0b \u00b6 5.3ZK\u96c6\u7fa4\u9009\u4e3e\u673a\u5236 \u00b6 5.3.1\u96c6\u7fa4\u542f\u52a8\u5668\u7684\u9009\u4e3e\u673a\u5236 \u00b6 5.3.2\u670d\u52a1\u5668\u8fd0\u884c\u65f6\u671f\u7684Leader\u9009\u4e3e \u00b6 6.\u4e3a\u4ec0\u4e48zookeeper\u96c6\u7fa4\u7684\u6570\u76ee\uff0c\u4e00\u822c\u4e3a\u5947\u6570\u4e2a\uff1f\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 6.SpringBoot \u00b6 6.1SpringBoot\u662f\u4ec0\u4e48\uff08\u4e86\u89e3\uff09 \u00b6 6.2SpringBoot\u7684\u4f18\u70b9\uff08\u5fc5\u4f1a\uff09 \u00b6 6.3\u8fd0\u884cSpringBoot\u9879\u76ee\u7684\u65b9\u5f0f\uff08\u5fc5\u4f1a\uff09 \u00b6 6.4SpringBoot\u7684\u542f\u52a8\u5668starter\uff08\u5fc5\u4f1a\uff09 \u00b6 6.5SpringBoot\u8fd0\u884c\u539f\u7406\u5256\u6790\uff08\u5fc5\u4f1a\uff09 \u00b6 6.6SpringBoot\u70ed\u90e8\u7f72\uff08\u4e86\u89e3\uff09 \u00b6 6.7 SpringBoot\u4e2d\u7684\u914d\u7f6e\u6587\u4ef6\uff08\u5fc5\u4f1a\uff09 \u00b6 6.8SpringBoot\u652f\u6301\u54ea\u4e9b\u65e5\u5fd7\u6846\u67b6\uff08\u4e86\u89e3\uff09 \u00b6 6.9SpringBoot\u5e38\u7528\u6ce8\u89e3\uff08\u5fc5\u4f1a\uff09 \u00b6 7.SpringCloud \u00b6 7.1SOA\u548c\u5fae\u670d\u52a1\u7684\u533a\u522b\uff1f\uff08\u5fc5\u4f1a\uff09 \u00b6 7.2 SpringCloud\u662f\u4ec0\u4e48\uff1f\uff08\u4e86\u89e3\uff09 \u00b6 7.3SpringCloud\u7684\u4f18\u52bf\uff1f\uff08\u4e86\u89e3\uff09 \u00b6 7.4SpringCloud\u6709\u54ea\u4e9b\u6838\u5fc3\u7ec4\u4ef6\uff1f\uff08\u5fc5\u4f1a\uff09 \u00b6 7.5SpringBoot\u548cSpringCloud\u7684\u5173\u7cfb\uff08\u5fc5\u4f1a\uff09 \u00b6 7.6SpringCloud\u548cDubbo\u7684\u533a\u522b\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 7.7 Eureka\u548cZookeeper\u7684\u533a\u522b\uff08\u9ad8\u85aa\u5e38\u95ee\uff09 \u00b6 \u4e94\u3001\u6280\u672f\u70b9 \u00b6 1.Redis \u00b6 1.1Redis\u662f\u4ec0\u4e48\uff1f \u00b6 1.2Redis\u7684\u5b58\u50a8\u7ed3\u6784\u6709\u54ea\u4e9b\uff1f \u00b6 1.3Redis\u7684\u4f18\u70b9\uff1f \u00b6 1.4\u4e3a\u4ec0\u4e48\u8981\u7528Redis \u00b6 1.5redis\u7684\u6301\u4e45\u5316 \u00b6 1.6Redis\u7684\u7f3a\u70b9 \u00b6 1.7Redis\u96c6\u7fa4 \u00b6 1.7.1\u4e3b\u4ece\u590d\u5236 \u00b6 1.7.2\u54e8\u5175\u6a21\u5f0f \u00b6 1.7.3 Redis-Cluster \u96c6\u7fa4 \u00b6 1.8Redis\u7684\u5206\u5e03\u5f0f\u9501 \u00b6 2.RocketMQ \u00b6 2.1\u6d88\u606f\u4e2d\u95f4\u4ef6\u7684\u533a\u522b\uff1f \u00b6 2.2\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528MQ\uff1f \u00b6 2.3RocketMQ\u7531\u54ea\u4e9b\u89d2\u8272\u7ec4\u6210\uff0c\u6bcf\u4e2a\u89d2\u8272\u4f5c\u7528\u548c\u7279\u70b9\u662f\u4ec0\u4e48\uff1f \u00b6 2.4RocketMQ\u6d88\u8d39\u6a21\u5f0f\u6709\u51e0\u79cd\uff1f \u00b6 2.5RocketMQ\u5982\u4f55\u505a\u8d1f\u8f7d\u5747\u8861\uff1f \u00b6 2.6\u6d88\u606f\u91cd\u590d\u6d88\u8d39\u5982\u4f55\u89e3\u51b3\uff1f \u00b6 2.7\u5982\u4f55\u8ba9RocketMQ\u4fdd\u8bc1\u6d88\u606f\u7684\u987a\u5e8f\u6d88\u8d39 \u00b6 2.8RocketMQ\u5982\u4f55\u4fdd\u8bc1\u6d88\u606f\u4e0d\u4e22\u5931 \u00b6 2.9RocketMQ\u7684\u6d88\u606f\u5806\u79ef\u5982\u4f55\u5904\u7406 \u00b6 2.10RocketMQ\u5982\u4f55\u5b9e\u73b0\u5206\u5e03\u5f0f\u4e8b\u52a1\uff1f \u00b6 2.11\u4efb\u4f55\u4e00\u53f0Broker\u7a81\u7136\u5b95\u673a\u4e86\u600e\u4e48\u529e\uff1f \u00b6 3.MongoDb \u00b6 3.1MongoDB\u662f\u4ec0\u4e48\uff1f \u00b6 3.2MongoDB\u548c\u5173\u7cfb\u578b\u6570\u636e\u5e93mysql\u533a\u522b \u00b6 3.3MongoDB\u67093\u4e2a\u6570\u636e\u5e93 \u00b6 3.4Mongo\u4e2d\u7684\u6570\u636e\u7c7b\u578b \u00b6 3.5MongoDB\u9002\u7528\u4e1a\u52a1\u573a\u666f \u00b6 4.Nginx \u00b6 4.1Nginx\u662f\u4ec0\u4e48\uff1f \u00b6 4.2Nginx\u7684\u4f5c\u7528\uff1f \u00b6 4.3Nginx\u7684\u4f18\u52bf\uff1f \u00b6 4.4\u4ec0\u4e48\u662f\u53cd\u5411\u4ee3\u7406\uff1f \u00b6 4.5\u4ec0\u4e48\u662f\u6b63\u5411\u4ee3\u7406\uff1f \u00b6 4.6\u4ec0\u4e48\u662f\u8d1f\u8f7d\u5747\u8861\uff1f \u00b6 4.7Nginx\u662f\u5982\u4f55\u5904\u7406\u4e00\u4e2a\u8bf7\u6c42\u7684\uff1f \u00b6 4.8\u4e3a\u4ec0\u4e48Nginx\u6027\u80fd\u8fd9\u4e48\u9ad8\uff1f \u00b6 5.FastDFS \u00b6 5.1FastDFS\u662f\u4ec0\u4e48\uff1f \u00b6 5.2 FastDFS\u7ec4\u6210 \u00b6 5.3FastDFS\u7684\u6d41\u7a0b \u00b6 5.4FastDFS\u5982\u4f55\u73b0\u5728\u7ec4\u5185\u7684\u591a\u4e2a storage server\u7684\u6570\u636e\u540c\u6b65\uff1f \u00b6 6.JWT \u00b6 6.1\u7ec4\u6210 \u00b6 6.2\u4f7f\u7528\u573a\u666f \u00b6 6.3\u9762\u8bd5\u95ee\u9898\uff1a \u00b6 1.JWT token \u6cc4\u9732\u4e86\u600e\u4e48\u529e\uff1f\uff08\u5e38\u95ee\uff09 \u00b6 \u4f7f\u7528https\u52a0\u5bc6\u4f60\u7684\u5e94\u7528\uff0c\u8fd4\u56dejwt\u7ed9\u5ba2\u6237\u7aef\u65f6\u8bbe\u7f6ehttpOnly=true\u5e76\u4e14\u4f7f\u7528cookie\u800c\u4e0d\u662fLocalStorage\u5b58\u50a8jwt\uff0c\u8fd9\u6837\u53ef\u4ee5\u9632\u6b62XSS\u653b\u51fb\u548cCSRF\u653b\u51fb\u3002 2.Secret\u5982\u4f55\u8bbe\u8ba1\uff1f \u00b6 jwt\u552f\u4e00\u5b58\u50a8\u5728\u670d\u52a1\u7aef\u7684\u53ea\u6709\u4e00\u4e2asecret\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u4e2asecret\u5e94\u8be5\u8bbe\u8ba1\u6210\u548c\u7528\u6237\u76f8\u5173\u7684\u5c5e\u6027\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u6240\u6709\u7528\u6237\u516c\u7528\u7684\u7edf\u4e00\u503c\u3002\u8fd9\u6837\u53ef\u4ee5\u6709\u6548\u7684\u907f\u514d\u4e00\u4e9b\u6ce8\u9500\u548c\u4fee\u6539\u5bc6\u7801\u65f6\u9047\u5230\u7684\u7a98\u5883\u3002 3.\u6ce8\u9500\u548c\u4fee\u6539\u5bc6\u7801\uff1f \u00b6 \u4f20\u7edf\u7684session+cookie\u65b9\u6848\u7528\u6237\u70b9\u51fb\u6ce8\u9500\uff0c\u670d\u52a1\u7aef\u6e05\u7a7asession\u5373\u53ef\uff0c\u56e0\u4e3a\u72b6\u6001\u4fdd\u5b58\u5728\u670d\u52a1\u7aef\u3002\u4f46jwt\u7684\u65b9\u6848\u5c31\u6bd4\u8f83\u96be\u529e\u4e86\uff0c\u56e0\u4e3ajwt\u662f\u65e0\u72b6\u6001\u7684\uff0c\u670d\u52a1\u7aef\u901a\u8fc7\u8ba1\u7b97\u6765\u6821\u9a8c\u6709\u6548\u6027\u3002\u6ca1\u6709\u5b58\u50a8\u8d77\u6765\uff0c\u6240\u4ee5\u5373\u4f7f\u5ba2\u6237\u7aef\u5220\u9664\u4e86jwt\uff0c\u4f46\u662f\u8be5jwt\u8fd8\u662f\u5728\u6709\u6548\u671f\u5185\uff0c\u53ea\u4e0d\u8fc7\u5904\u4e8e\u4e00\u4e2a\u6e38\u79bb\u72b6\u6001\u3002\u5206\u6790\u4e0b\u75db\u70b9\uff1a\u6ce8\u9500\u53d8\u5f97\u590d\u6742\u7684\u539f\u56e0\u5728\u4e8ejwt\u7684\u65e0\u72b6\u6001\u3002\u63d0\u4f9b\u51e0\u4e2a\u65b9\u6848\uff0c\u89c6\u5177\u4f53\u7684\u4e1a\u52a1\u6765\u51b3\u5b9a\u80fd\u4e0d\u80fd\u63a5\u53d7\uff1a\u4ec5\u4ec5\u6e05\u7a7a\u5ba2\u6237\u7aefcookie\uff0c\u8fd9\u6837\u7528\u6237\u8bbf\u95ee\u65f6\u5c31\u4e0d\u4f1a\u643a\u5e26jwt\uff0c\u670d\u52a1\u7aef\u5c31\u8ba4\u4e3a\u7528\u6237\u9700\u8981 \u516d\u3001\u63a2\u82b1\u4ea4\u53cb \u00b6 \u4e03\u3001\u9ed1\u9a6c\u5934\u6761 \u00b6","title":"e.g.1.0.0"},{"location":"interview/e.g.1.0.0/#java","text":"","title":"\u4e00\u3001Java\u57fa\u7840"},{"location":"interview/e.g.1.0.0/#1java","text":"","title":"1.Java\u57fa\u7840\u77e5\u8bc6"},{"location":"interview/e.g.1.0.0/#11","text":"\u5c01\u88c5, \u7c7b\u7684\u79c1\u6709\u5316 \u7ee7\u627f, \u591a\u6001 \u7236\u7c7b/\u7236\u63a5\u53e3\u5f15\u7528\u6307\u5411\u5b50\u7c7b\u5bf9\u8c61","title":"1.1\u9762\u5411\u5bf9\u8c61\u7684\u7279\u5f81\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#12java","text":"8\u79cd","title":"1.2Java\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u6709\u54ea\u4e9b\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#13jdkjrejvm","text":"","title":"1.3JDKJREJVM\u7684\u533a\u522b\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#14","text":"\u91cd\u8f7d\uff1a \u53d1\u751f\u5728\u540c\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u65b9\u6cd5\u540d\u5fc5\u987b\u76f8\u540c\uff0c\u53c2\u6570\u7c7b\u578b\u4e0d\u540c.\u4e2a\u6570\u4e0d\u540c. \u987a\u5e8f\u4e0d\u540c\uff0c\u65b9\u6cd5\u8fd4\u56de\u503c\u548c\u8bbf\u95ee\u4fee\u9970\u7b26\u53ef\u4ee5\u4e0d\u540c\uff0c\u53d1\u751f\u5728\u7f16\u8bd1\u65f6\u3002 \u91cd\u5199\uff1a \u53d1\u751f\u5728\u7236\u5b50\u7c7b\u4e2d\uff0c\u65b9\u6cd5\u540d.\u53c2\u6570\u5217\u8868\u5fc5\u987b\u76f8\u540c\uff0c\u8fd4\u56de\u503c\u8303\u56f4\u5c0f\u4e8e \u7b49\u4e8e\u7236\u7c7b\uff0c\u629b\u51fa\u7684\u5f02\u5e38\u8303\u56f4\u5c0f\u4e8e\u7b49\u4e8e\u7236\u7c7b\uff0c \u8bbf\u95ee\u4fee\u9970\u7b26\u8303\u56f4\u5927\u4e8e\u7b49\u4e8e\u7236\u7c7b\uff1b\u5982\u679c\u7236\u7c7b\u65b9\u6cd5\u8bbf\u95ee\u4fee\u9970\u7b26\u4e3a private \u5219 \u5b50\u7c7b\u5c31\u4e0d\u80fd\u91cd\u5199\u8be5\u65b9\u6cd5\u3002","title":"1.4\u91cd\u8f7d\u548c\u91cd\u5199\u7684\u533a\u522b\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#15javaequals","text":"","title":"1.5Java\u4e2d==\u548cequals\u7684\u533a\u522b\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#16stringstringbufferstringbuilder","text":"","title":"1.6String\u3001StringBuffer\u3001StringBuilder\u4e09\u8005\u4e4b\u95f4\u7684\u533a\u522b\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#17","text":"","title":"1.7\u63a5\u53e3\u548c\u62bd\u8c61\u7c7b\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1f\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#18string","text":"","title":"1.8string\u5e38\u7528\u7684\u65b9\u6cd5\u6709\u54ea\u4e9b\uff1f\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#19","text":"","title":"1.9\u4ec0\u4e48\u662f\u5355\u4f8b\u6a21\u5f0f\uff1f\u6709\u51e0\u79cd\uff1f\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#110","text":"","title":"1.10\u53cd\u5c04\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#111jdk18","text":"","title":"1.11jdk1.8\u7684\u65b0\u7279\u6027\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#112java","text":"","title":"1.12Java\u7684\u5f02\u5e38\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#113bionioaio","text":"","title":"1.13BIO\u3001NIO\u3001AIO\u6709\u4ec0\u4e48\u533a\u522b\uff1f\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#114threadloal","text":"","title":"1.14Threadloal\u7684\u539f\u7406\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#116","text":"","title":"1.16\u540c\u6b65\u9501\u3001\u6b7b\u9501\u3001\u4e50\u89c2\u9501\u3001\u60b2\u89c2\u9501\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#117synchronized","text":"","title":"1.17\u8bf4\u4e00\u4e0bsynchronized\u5e95\u5c42\u5b9e\u73b0\u539f\u7406\uff1f\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#118synchronizedvolatile","text":"","title":"1.18synchronized\u548cvolatile\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1f\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#119synchronizedlock","text":"","title":"1.19synchronized\u548cLock \u6709\u4ec0\u4e48\u533a\u522b\uff1f\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#120","text":"","title":"1.20\u624b\u5199\u5192\u6ce1\u6392\u5e8f\uff1f\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#2","text":"","title":"2.\u96c6\u5408\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#21","text":"","title":"2.1\u5e38\u89c1\u7684\u6570\u636e\u7ed3\u6784\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#22","text":"","title":"2.2\u96c6\u5408\u548c\u6570\u7ec4\u7684\u533a\u522b\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#23listmapset","text":"","title":"2.3List\u548cMap\u3001Set\u7684\u533a\u522b\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#24listmapset","text":"","title":"2.4List\u548cMap\u3001Set\u7684\u5b9e\u73b0\u7c7b\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#25hashmap","text":"","title":"2.5Hashmap\u7684\u5e95\u5c42\u539f\u7406\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#26hashmaphashtable_concurrenthashmap","text":"","title":"2.6Hashmap\u548chashtable ConcurrentHashMap\u533a\u522b\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#3","text":"","title":"3.\u591a\u7ebf\u7a0b\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#31","text":"","title":"3.1\u4ec0\u4e48\u662f\u7ebf\u7a0b\uff1f\u7ebf\u7a0b\u548c\u8fdb\u7a0b\u7684\u533a\u522b\uff1f\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#32","text":"","title":"3.2\u521b\u5efa\u7ebf\u7a0b\u6709\u51e0\u79cd\u65b9\u5f0f\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#33runnablecallable","text":"","title":"3.3Runnable\u548cCallable\u7684\u533a\u522b\uff1f\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#34startrun","text":"","title":"3.4\u5982\u4f55\u542f\u52a8\u4e00\u4e2a\u65b0\u7ebf\u7a0b\u3001\u8c03\u7528start\u548crun\u65b9\u6cd5\u7684\u533a\u522b\uff1f\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#35","text":"","title":"3.5\u7ebf\u7a0b\u6709\u54ea\u51e0\u79cd\u72b6\u6001\u4ee5\u53ca\u5404\u79cd\u72b6\u6001\u4e4b\u95f4\u7684\u8f6c\u6362\uff1f\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#36","text":"","title":"3.6\u7ebf\u7a0b\u76f8\u5173\u7684\u57fa\u672c\u65b9\u6cd5\uff1f\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#37_waitsleep","text":"","title":"3.7 wait\uff08\uff09\u548csleep\uff08\uff09\u7684\u533a\u522b\uff1f\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#4","text":"","title":"4.\u7ebf\u7a0b\u6c60"},{"location":"interview/e.g.1.0.0/#41","text":"","title":"4.1\u4e3a\u4ec0\u4e48\u9700\u8981\u7ebf\u7a0b\u6c60\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#42","text":"","title":"4.2\u7ebf\u7a0b\u6c60\u7684\u5206\u7c7b\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#43","text":"","title":"4.3\u6838\u5fc3\u53c2\u6570\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#44","text":"","title":"4.4\u7ebf\u7a0b\u6c60\u7684\u539f\u7406\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#45","text":"","title":"4.5\u62d2\u7edd\u7b56\u7565\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#46","text":"","title":"4.6\u7ebf\u7a0b\u6c60\u7684\u5173\u95ed\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#6jvm","text":"","title":"6.Jvm"},{"location":"interview/e.g.1.0.0/#62jdk18","text":"","title":"6.2JDK1.8\u5806\u5185\u5b58\u7ed3\u6784\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#63gc","text":"","title":"6.3Gc\u5783\u573e\u56de\u6536\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#64jvm","text":"","title":"6.4JVM\u8c03\u4f18\u53c2\u6570\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#web","text":"","title":"\u4e8c\u3001Web"},{"location":"interview/e.g.1.0.0/#1","text":"","title":"1.\u7f51\u7edc\u901a\u8baf\u90e8\u5206"},{"location":"interview/e.g.1.0.0/#11tcpudp","text":"","title":"1.1TCP\u4e0eUDP\u533a\u522b\uff1f\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#12http","text":"","title":"1.2\u4ec0\u4e48\u662fHTTP\u534f\u8bae\uff1f"},{"location":"interview/e.g.1.0.0/#13tcp14http","text":"","title":"1.3TCP\u7684\u4e09\u6b21\u63e1\u624b1.4HTTP\u4e2d\u91cd\u5b9a\u5411\u548c\u8bf7\u6c42\u8f6c\u53d1\u7684\u533a\u522b\uff1f"},{"location":"interview/e.g.1.0.0/#15getpost","text":"","title":"1.5Get\u548cPost\u7684\u533a\u522b\uff1f"},{"location":"interview/e.g.1.0.0/#2cookiesession","text":"","title":"2.cookie\u548csession\u7684\u533a\u522b\uff1f\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#3jspservlet","text":"","title":"3.Jsp\u548cServlet\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#1jspservlet","text":"","title":"1.Jsp\u548cServlet\u7684\u533a\u522b\uff1f"},{"location":"interview/e.g.1.0.0/#2servlet","text":"","title":"2.Servlet\u7684\u751f\u547d\u5468\u671f"},{"location":"interview/e.g.1.0.0/#3jsp","text":"","title":"3.JSP\u4e5d\u5927\u5185\u7f6e\u5bf9\u8c61"},{"location":"interview/e.g.1.0.0/#4ajax","text":"","title":"4.Ajax\u7684\u4ecb\u7ecd\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#_1","text":"","title":"\u4e09\u3001\u6570\u636e\u5e93"},{"location":"interview/e.g.1.0.0/#1_1","text":"","title":"1.\u8fde\u63a5\u67e5\u8be2\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#2_1","text":"","title":"2.\u805a\u5408\u51fd\u6570\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#3sql","text":"","title":"3.SQL\u5173\u952e\u5b57\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#4sql_select","text":"","title":"4.SQL Select \u8bed\u53e5\u5b8c\u6574\u7684\u6267\u884c\u987a\u5e8f\uff1a\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#5","text":"","title":"5.\u6570\u636e\u5e93\u4e09\u8303\u5f0f\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#6","text":"","title":"6.\u5b58\u50a8\u5f15\u64ce\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#1myisam","text":"","title":"1.MyISAM\u5b58\u50a8\u5f15\u64ce"},{"location":"interview/e.g.1.0.0/#2innodb","text":"","title":"2.InnoDB\u5b58\u50a8\u5f15\u64ce"},{"location":"interview/e.g.1.0.0/#7","text":"","title":"7.\u6570\u636e\u5e93\u4e8b\u52a1\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#1_2","text":"","title":"1.\u4e8b\u52a1\u7279\u6027"},{"location":"interview/e.g.1.0.0/#2_2","text":"","title":"2.\u9694\u79bb\u7ea7\u522b"},{"location":"interview/e.g.1.0.0/#8","text":"","title":"8.\u7d22\u5f15"},{"location":"interview/e.g.1.0.0/#1_3","text":"","title":"1.\u7d22\u5f15\u7684\u6982\u5ff5\u548c\u4f18\u70b9\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#2_3","text":"","title":"2.\u7d22\u5f15\u7684\u5206\u7c7b\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#3_1","text":"","title":"3.\u7d22\u5f15\u7684\u5e95\u5c42\u5b9e\u73b0\u539f\u7406\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#4_1","text":"","title":"4.\u5982\u4f55\u907f\u514d\u7d22\u5f15\u5931\u6548\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#9","text":"","title":"9.\u6570\u636e\u5e93\u9501\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#1_4","text":"","title":"1.\u884c\u9501\u548c\u8868\u9501"},{"location":"interview/e.g.1.0.0/#2_4","text":"","title":"2.\u60b2\u89c2\u9501\u548c\u4e50\u89c2\u9501"},{"location":"interview/e.g.1.0.0/#10mysql","text":"","title":"10.MySql\u4f18\u5316\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#1sql","text":"","title":"1\uff09\u5b9a\u4f4d\u6267\u884c\u6548\u7387\u6162\u7684sql\u8bed\u53e5.\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#2_5","text":"","title":"2\uff09\u4f18\u5316\u7d22\u5f15\uff08\u9ad8\u85aa\uff09"},{"location":"interview/e.g.1.0.0/#3sql_1","text":"","title":"3\uff09Sql\u8bed\u53e5\u8c03\u4f18\uff08\u9ad8\u85aa\uff09"},{"location":"interview/e.g.1.0.0/#4_2","text":"","title":"4\uff09\u5408\u7406\u7684\u6570\u636e\u5e93\u8bbe\u8ba1\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#_2","text":"","title":"\u56db\u3001\u6846\u67b6"},{"location":"interview/e.g.1.0.0/#1mybatis","text":"","title":"1.Mybatis\u6846\u67b6"},{"location":"interview/e.g.1.0.0/#11mybatis","text":"","title":"1.1\u8c08\u4e00\u8c08\u4f60\u5bf9Mybatis\u6846\u67b6\u7684\u7406\u89e3\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#12mybatis","text":"","title":"1.2\u5728mybatis\u4e2d\uff0c$}\u548c##}\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1f\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#13mybatis","text":"","title":"1.3MyBatis\u7f16\u7a0b\u6b65\u9aa4\u662f\u4ec0\u4e48\u6837\u7684\uff1f\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#14mybatisresulttyperesultmap","text":"","title":"1.4\u5728mybatis\u4e2d\uff0cresultType\u548cResultMap\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1f\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#15mybatissql","text":"","title":"1.5\u5728Mybatis\u4e2d\u4f60\u77e5\u9053\u7684\u52a8\u6001SQL\u7684\u6807\u7b7e\u6709\u54ea\u4e9b\uff1f\u4f5c\u7528\u5206\u522b\u662f\u4ec0\u4e48\uff1f\uff08\u2026"},{"location":"interview/e.g.1.0.0/#16mybatis","text":"","title":"1.6\u8c08\u4e00\u4e0b\u4f60\u5bf9mybatis\u7f13\u5b58\u673a\u5236\u7684\u7406\u89e3\uff1f\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#2spring","text":"","title":"2.Spring\u6846\u67b6"},{"location":"interview/e.g.1.0.0/#21springioc","text":"IOC\u548cAOP ioc \u63a7\u5236\u7ffb\u8f6c\uff0cSpring\u53cd\u5411\u63a7\u5236\u5e94\u7528\u7a0b\u5e8f\u6240\u9700\u8981\u4f7f\u7528\u7684\u5916\u90e8\u8d44\u6e90","title":"2.1Spring\u7684\u4e24\u5927\u6838\u5fc3\u662f\u4ec0\u4e48\uff1f\u8c08\u4e00\u8c08\u4f60\u5bf9IOC\u7684\u7406\u89e3\uff1f\u8c08\u4e00\u8c08\u4f60\u5bf9\u2026"},{"location":"interview/e.g.1.0.0/#22spring","text":"","title":"2.2Spring\u7684\u751f\u547d\u5468\u671f\uff1f\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#23springbean","text":"","title":"2.3Spring\u652f\u6301bean\u7684\u4f5c\u7528\u57df\u6709\u51e0\u79cd\u5417\uff1f\u6bcf\u79cd\u4f5c\u7528\u57df\u662f\u4ec0\u4e48\u6837\u7684\uff1f\uff08\u2026"},{"location":"interview/e.g.1.0.0/#24beanfactoryapplicationcontext","text":"","title":"2.4BeanFactory\u548cApplicationContext\u6709\u4ec0\u4e48\u533a\u522b\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#25spring","text":"","title":"2.5Spring\u6846\u67b6\u4e2d\u90fd\u7528\u5230\u4e86\u54ea\u4e9b\u8bbe\u8ba1\u6a21\u5f0f\uff1f\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#26spring","text":"","title":"2.6Spring\u4e8b\u52a1\u7684\u5b9e\u73b0\u65b9\u5f0f\u548c\u5b9e\u73b0\u539f\u7406\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#26spring_1","text":"","title":"2.6\u4f60\u77e5\u9053\u7684Spring\u7684\u901a\u77e5\u7c7b\u578b\u6709\u54ea\u4e9b\uff0c\u5206\u522b\u5728\u4ec0\u4e48\u65f6\u5019\u6267\u884c\uff1f\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#27springbean","text":"","title":"2.7Spring\u7684\u5bf9\u8c61\u9ed8\u8ba4\u662f\u5355\u4f8b\u7684\u8fd8\u662f\u591a\u4f8b\u7684\uff1f\u5355\u4f8bbean\u5b58\u4e0d\u5b58\u5728\u7ebf.\u2026"},{"location":"interview/e.g.1.0.0/#28resourceautowiredqualifie","text":"","title":"2.8@Resource\u548c@Autowired\u4f9d\u8d56\u6ce8\u5165\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1f@Qualifie..."},{"location":"interview/e.g.1.0.0/#28spring","text":"","title":"2.8Spring\u7684\u5e38\u7528\u6ce8\u89e3\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#29spring","text":"","title":"2.9Spring\u7684\u4e8b\u52a1\u4f20\u64ad\u884c\u4e3a\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#210spring","text":"","title":"2.10Spring\u4e2d\u7684\u9694\u79bb\u7ea7\u522b\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#3springmvc","text":"","title":"3.SpringMVC\u6846\u67b6"},{"location":"interview/e.g.1.0.0/#31springmvc","text":"","title":"3.1\u8c08\u4e00\u4e0b\u4f60\u5bf9SpringMVC\u6846\u67b6\u7684\u7406\u89e3\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#32springmvc","text":"","title":"3.2SpringMVC\u4e3b\u8981\u7ec4\u4ef6\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#33springmvc","text":"","title":"3.3\u8c08\u4e00\u4e0bSpringMVC\u7684\u6267\u884c\u6d41\u7a0b\u4ee5\u53ca\u5404\u4e2a\u7ec4\u4ef6\u7684\u4f5c\u7528\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#34springmvc","text":"","title":"3.4\u8bf4\u4e00\u4e0bSpringMVC\u652f\u6301\u7684\u8f6c\u53d1\u548c\u91cd\u5b9a\u5411\u7684\u5199\u6cd5\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#35_springmvc","text":"","title":"3.5 SpringMVC\u7684\u5e38\u7528\u6ce8\u89e3\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#36springmvc","text":"","title":"3.6\u8c08\u4e00\u4e0bSpringMVC\u7edf\u4e00\u5f02\u5e38\u5904\u7406\u7684\u601d\u60f3\u548c\u5b9e\u73b0\u65b9\u5f0f\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#37springmvc","text":"","title":"3.7\u5728SpringMVC\u4e2d\uff0c\u5982\u679c\u60f3\u901a\u8fc7\u8f6c\u53d1\u5c06\u6570\u636e\u4f20\u9012\u5230\u524d\u53f0\uff0c\u6709\u51e0\u79cd\u5199.\u2026"},{"location":"interview/e.g.1.0.0/#38springmvc","text":"","title":"3.8\u5728SpringMVC\u4e2d\u62e6\u622a\u5668\u7684\u4f7f\u7528\u6b65\u9aa4\u662f\u4ec0\u4e48\u6837\u7684\uff1f\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#39springmvc","text":"","title":"3.9\u5728SpringMVC\u4e2d\u6587\u4ef6\u4e0a\u4f20\u7684\u4f7f\u7528\u6b65\u9aa4\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u524d\u53f0\u4e09\u8981\u7d20\u2026"},{"location":"interview/e.g.1.0.0/#310springmvcgetipost","text":"","title":"3.10SpringMVC\u4e2d\u5982\u4f55\u89e3\u51b3GETIPOST\u8bf7\u6c42\u4e2d\u6587\u4e71\u7801\u95ee\u9898\uff1f\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#4dubbo","text":"","title":"4.Dubbo"},{"location":"interview/e.g.1.0.0/#41dubbo","text":"","title":"4.1\u4ec0\u4e48\u662fdubbo\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#42dubbo","text":"","title":"4.2Dubbo\u7684\u5b9e\u73b0\u539f\u7406\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#43_1","text":"","title":"4.3\u8282\u70b9\u89d2\u8272\u8bf4\u660e\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#44_1","text":"","title":"4.4\u8c03\u7528\u5173\u7cfb\u8bf4\u660e\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#45rpc","text":"","title":"4.5\u5728\u5b9e\u9645\u5f00\u53d1\u7684\u573a\u666f\u4e2d\u5e94\u8be5\u5982\u4f55\u9009\u62e9RPC\u6846\u67b6\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#5zookeeper","text":"","title":"5.Zookeeper"},{"location":"interview/e.g.1.0.0/#1zookeeper","text":"","title":"1.Zookeeper\u662f\u4ec0\u4e48\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#2zookeeper","text":"","title":"2.Zookeeper\u7684\u6570\u636e\u6a21\u578b\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#3zookeeperwatch","text":"","title":"3.Zookeeper\u7684watch\u76d1\u542c\u673a\u5236\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#31_1","text":"","title":"3.1\u76d1\u542c\u5668\u539f\u7406"},{"location":"interview/e.g.1.0.0/#32_1","text":"","title":"3.2\u76d1\u542c\u5668\u5b9e\u9645\u5e94\u7528"},{"location":"interview/e.g.1.0.0/#4zookeeper","text":"","title":"4.Zookeeper\u7684\u5e94\u7528\u573a\u666f\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#41_1","text":"","title":"4.1\u7edf\u4e00\u547d\u540d\u670d\u52a1"},{"location":"interview/e.g.1.0.0/#42_1","text":"","title":"4.2\u7edf\u4e00\u914d\u7f6e\u7ba1\u7406"},{"location":"interview/e.g.1.0.0/#43_2","text":"","title":"4.3\u7edf\u4e00\u96c6\u7fa4\u7ba1\u7406"},{"location":"interview/e.g.1.0.0/#44_2","text":"","title":"4.4\u96c6\u7fa4\u9009\u4e3b"},{"location":"interview/e.g.1.0.0/#45_1","text":"","title":"4.5\u5206\u5e03\u5f0f\u9501"},{"location":"interview/e.g.1.0.0/#5zookeeper_1","text":"","title":"5.Zookeeper\u96c6\u7fa4[\u9ad8\u7ea7]\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#51zk","text":"","title":"5.1ZK\u96c6\u7fa4\u4ecb\u7ecd"},{"location":"interview/e.g.1.0.0/#52","text":"","title":"5.2\u6570\u636e\u4e00\u81f4\u6027\u5904\u7406"},{"location":"interview/e.g.1.0.0/#521","text":"","title":"5.2.1\u96c6\u7fa4\u89d2\u8272"},{"location":"interview/e.g.1.0.0/#522zookeeper","text":"","title":"5.2.2Zookeeper\u7684\u7279\u6027"},{"location":"interview/e.g.1.0.0/#523zab","text":"","title":"5.2.3ZAB\u534f\u8bae"},{"location":"interview/e.g.1.0.0/#524zk","text":"","title":"5.2.4ZK\u96c6\u7fa4\u5199\u6570\u636e\u6d41\u7a0b"},{"location":"interview/e.g.1.0.0/#53zk","text":"","title":"5.3ZK\u96c6\u7fa4\u9009\u4e3e\u673a\u5236"},{"location":"interview/e.g.1.0.0/#531","text":"","title":"5.3.1\u96c6\u7fa4\u542f\u52a8\u5668\u7684\u9009\u4e3e\u673a\u5236"},{"location":"interview/e.g.1.0.0/#532leader","text":"","title":"5.3.2\u670d\u52a1\u5668\u8fd0\u884c\u65f6\u671f\u7684Leader\u9009\u4e3e"},{"location":"interview/e.g.1.0.0/#6zookeeper","text":"","title":"6.\u4e3a\u4ec0\u4e48zookeeper\u96c6\u7fa4\u7684\u6570\u76ee\uff0c\u4e00\u822c\u4e3a\u5947\u6570\u4e2a\uff1f\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#6springboot","text":"","title":"6.SpringBoot"},{"location":"interview/e.g.1.0.0/#61springboot","text":"","title":"6.1SpringBoot\u662f\u4ec0\u4e48\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#62springboot","text":"","title":"6.2SpringBoot\u7684\u4f18\u70b9\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#63springboot","text":"","title":"6.3\u8fd0\u884cSpringBoot\u9879\u76ee\u7684\u65b9\u5f0f\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#64springbootstarter","text":"","title":"6.4SpringBoot\u7684\u542f\u52a8\u5668starter\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#65springboot","text":"","title":"6.5SpringBoot\u8fd0\u884c\u539f\u7406\u5256\u6790\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#66springboot","text":"","title":"6.6SpringBoot\u70ed\u90e8\u7f72\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#67_springboot","text":"","title":"6.7 SpringBoot\u4e2d\u7684\u914d\u7f6e\u6587\u4ef6\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#68springboot","text":"","title":"6.8SpringBoot\u652f\u6301\u54ea\u4e9b\u65e5\u5fd7\u6846\u67b6\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#69springboot","text":"","title":"6.9SpringBoot\u5e38\u7528\u6ce8\u89e3\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#7springcloud","text":"","title":"7.SpringCloud"},{"location":"interview/e.g.1.0.0/#71soa","text":"","title":"7.1SOA\u548c\u5fae\u670d\u52a1\u7684\u533a\u522b\uff1f\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#72_springcloud","text":"","title":"7.2 SpringCloud\u662f\u4ec0\u4e48\uff1f\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#73springcloud","text":"","title":"7.3SpringCloud\u7684\u4f18\u52bf\uff1f\uff08\u4e86\u89e3\uff09"},{"location":"interview/e.g.1.0.0/#74springcloud","text":"","title":"7.4SpringCloud\u6709\u54ea\u4e9b\u6838\u5fc3\u7ec4\u4ef6\uff1f\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#75springbootspringcloud","text":"","title":"7.5SpringBoot\u548cSpringCloud\u7684\u5173\u7cfb\uff08\u5fc5\u4f1a\uff09"},{"location":"interview/e.g.1.0.0/#76springclouddubbo","text":"","title":"7.6SpringCloud\u548cDubbo\u7684\u533a\u522b\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#77_eurekazookeeper","text":"","title":"7.7 Eureka\u548cZookeeper\u7684\u533a\u522b\uff08\u9ad8\u85aa\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#_3","text":"","title":"\u4e94\u3001\u6280\u672f\u70b9"},{"location":"interview/e.g.1.0.0/#1redis","text":"","title":"1.Redis"},{"location":"interview/e.g.1.0.0/#11redis","text":"","title":"1.1Redis\u662f\u4ec0\u4e48\uff1f"},{"location":"interview/e.g.1.0.0/#12redis","text":"","title":"1.2Redis\u7684\u5b58\u50a8\u7ed3\u6784\u6709\u54ea\u4e9b\uff1f"},{"location":"interview/e.g.1.0.0/#13redis","text":"","title":"1.3Redis\u7684\u4f18\u70b9\uff1f"},{"location":"interview/e.g.1.0.0/#14redis","text":"","title":"1.4\u4e3a\u4ec0\u4e48\u8981\u7528Redis"},{"location":"interview/e.g.1.0.0/#15redis","text":"","title":"1.5redis\u7684\u6301\u4e45\u5316"},{"location":"interview/e.g.1.0.0/#16redis","text":"","title":"1.6Redis\u7684\u7f3a\u70b9"},{"location":"interview/e.g.1.0.0/#17redis","text":"","title":"1.7Redis\u96c6\u7fa4"},{"location":"interview/e.g.1.0.0/#171","text":"","title":"1.7.1\u4e3b\u4ece\u590d\u5236"},{"location":"interview/e.g.1.0.0/#172","text":"","title":"1.7.2\u54e8\u5175\u6a21\u5f0f"},{"location":"interview/e.g.1.0.0/#173_redis-cluster","text":"","title":"1.7.3 Redis-Cluster \u96c6\u7fa4"},{"location":"interview/e.g.1.0.0/#18redis","text":"","title":"1.8Redis\u7684\u5206\u5e03\u5f0f\u9501"},{"location":"interview/e.g.1.0.0/#2rocketmq","text":"","title":"2.RocketMQ"},{"location":"interview/e.g.1.0.0/#21_1","text":"","title":"2.1\u6d88\u606f\u4e2d\u95f4\u4ef6\u7684\u533a\u522b\uff1f"},{"location":"interview/e.g.1.0.0/#22mq","text":"","title":"2.2\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528MQ\uff1f"},{"location":"interview/e.g.1.0.0/#23rocketmq","text":"","title":"2.3RocketMQ\u7531\u54ea\u4e9b\u89d2\u8272\u7ec4\u6210\uff0c\u6bcf\u4e2a\u89d2\u8272\u4f5c\u7528\u548c\u7279\u70b9\u662f\u4ec0\u4e48\uff1f"},{"location":"interview/e.g.1.0.0/#24rocketmq","text":"","title":"2.4RocketMQ\u6d88\u8d39\u6a21\u5f0f\u6709\u51e0\u79cd\uff1f"},{"location":"interview/e.g.1.0.0/#25rocketmq","text":"","title":"2.5RocketMQ\u5982\u4f55\u505a\u8d1f\u8f7d\u5747\u8861\uff1f"},{"location":"interview/e.g.1.0.0/#26","text":"","title":"2.6\u6d88\u606f\u91cd\u590d\u6d88\u8d39\u5982\u4f55\u89e3\u51b3\uff1f"},{"location":"interview/e.g.1.0.0/#27rocketmq","text":"","title":"2.7\u5982\u4f55\u8ba9RocketMQ\u4fdd\u8bc1\u6d88\u606f\u7684\u987a\u5e8f\u6d88\u8d39"},{"location":"interview/e.g.1.0.0/#28rocketmq","text":"","title":"2.8RocketMQ\u5982\u4f55\u4fdd\u8bc1\u6d88\u606f\u4e0d\u4e22\u5931"},{"location":"interview/e.g.1.0.0/#29rocketmq","text":"","title":"2.9RocketMQ\u7684\u6d88\u606f\u5806\u79ef\u5982\u4f55\u5904\u7406"},{"location":"interview/e.g.1.0.0/#210rocketmq","text":"","title":"2.10RocketMQ\u5982\u4f55\u5b9e\u73b0\u5206\u5e03\u5f0f\u4e8b\u52a1\uff1f"},{"location":"interview/e.g.1.0.0/#211broker","text":"","title":"2.11\u4efb\u4f55\u4e00\u53f0Broker\u7a81\u7136\u5b95\u673a\u4e86\u600e\u4e48\u529e\uff1f"},{"location":"interview/e.g.1.0.0/#3mongodb","text":"","title":"3.MongoDb"},{"location":"interview/e.g.1.0.0/#31mongodb","text":"","title":"3.1MongoDB\u662f\u4ec0\u4e48\uff1f"},{"location":"interview/e.g.1.0.0/#32mongodbmysql","text":"","title":"3.2MongoDB\u548c\u5173\u7cfb\u578b\u6570\u636e\u5e93mysql\u533a\u522b"},{"location":"interview/e.g.1.0.0/#33mongodb3","text":"","title":"3.3MongoDB\u67093\u4e2a\u6570\u636e\u5e93"},{"location":"interview/e.g.1.0.0/#34mongo","text":"","title":"3.4Mongo\u4e2d\u7684\u6570\u636e\u7c7b\u578b"},{"location":"interview/e.g.1.0.0/#35mongodb","text":"","title":"3.5MongoDB\u9002\u7528\u4e1a\u52a1\u573a\u666f"},{"location":"interview/e.g.1.0.0/#4nginx","text":"","title":"4.Nginx"},{"location":"interview/e.g.1.0.0/#41nginx","text":"","title":"4.1Nginx\u662f\u4ec0\u4e48\uff1f"},{"location":"interview/e.g.1.0.0/#42nginx","text":"","title":"4.2Nginx\u7684\u4f5c\u7528\uff1f"},{"location":"interview/e.g.1.0.0/#43nginx","text":"","title":"4.3Nginx\u7684\u4f18\u52bf\uff1f"},{"location":"interview/e.g.1.0.0/#44_3","text":"","title":"4.4\u4ec0\u4e48\u662f\u53cd\u5411\u4ee3\u7406\uff1f"},{"location":"interview/e.g.1.0.0/#45_2","text":"","title":"4.5\u4ec0\u4e48\u662f\u6b63\u5411\u4ee3\u7406\uff1f"},{"location":"interview/e.g.1.0.0/#46_1","text":"","title":"4.6\u4ec0\u4e48\u662f\u8d1f\u8f7d\u5747\u8861\uff1f"},{"location":"interview/e.g.1.0.0/#47nginx","text":"","title":"4.7Nginx\u662f\u5982\u4f55\u5904\u7406\u4e00\u4e2a\u8bf7\u6c42\u7684\uff1f"},{"location":"interview/e.g.1.0.0/#48nginx","text":"","title":"4.8\u4e3a\u4ec0\u4e48Nginx\u6027\u80fd\u8fd9\u4e48\u9ad8\uff1f"},{"location":"interview/e.g.1.0.0/#5fastdfs","text":"","title":"5.FastDFS"},{"location":"interview/e.g.1.0.0/#51fastdfs","text":"","title":"5.1FastDFS\u662f\u4ec0\u4e48\uff1f"},{"location":"interview/e.g.1.0.0/#52_fastdfs","text":"","title":"5.2 FastDFS\u7ec4\u6210"},{"location":"interview/e.g.1.0.0/#53fastdfs","text":"","title":"5.3FastDFS\u7684\u6d41\u7a0b"},{"location":"interview/e.g.1.0.0/#54fastdfs_storage_server","text":"","title":"5.4FastDFS\u5982\u4f55\u73b0\u5728\u7ec4\u5185\u7684\u591a\u4e2a storage server\u7684\u6570\u636e\u540c\u6b65\uff1f"},{"location":"interview/e.g.1.0.0/#6jwt","text":"","title":"6.JWT"},{"location":"interview/e.g.1.0.0/#61","text":"","title":"6.1\u7ec4\u6210"},{"location":"interview/e.g.1.0.0/#62","text":"","title":"6.2\u4f7f\u7528\u573a\u666f"},{"location":"interview/e.g.1.0.0/#63","text":"","title":"6.3\u9762\u8bd5\u95ee\u9898\uff1a"},{"location":"interview/e.g.1.0.0/#1jwt_token","text":"\u4f7f\u7528https\u52a0\u5bc6\u4f60\u7684\u5e94\u7528\uff0c\u8fd4\u56dejwt\u7ed9\u5ba2\u6237\u7aef\u65f6\u8bbe\u7f6ehttpOnly=true\u5e76\u4e14\u4f7f\u7528cookie\u800c\u4e0d\u662fLocalStorage\u5b58\u50a8jwt\uff0c\u8fd9\u6837\u53ef\u4ee5\u9632\u6b62XSS\u653b\u51fb\u548cCSRF\u653b\u51fb\u3002","title":"1.JWT token \u6cc4\u9732\u4e86\u600e\u4e48\u529e\uff1f\uff08\u5e38\u95ee\uff09"},{"location":"interview/e.g.1.0.0/#2secret","text":"jwt\u552f\u4e00\u5b58\u50a8\u5728\u670d\u52a1\u7aef\u7684\u53ea\u6709\u4e00\u4e2asecret\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u4e2asecret\u5e94\u8be5\u8bbe\u8ba1\u6210\u548c\u7528\u6237\u76f8\u5173\u7684\u5c5e\u6027\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u6240\u6709\u7528\u6237\u516c\u7528\u7684\u7edf\u4e00\u503c\u3002\u8fd9\u6837\u53ef\u4ee5\u6709\u6548\u7684\u907f\u514d\u4e00\u4e9b\u6ce8\u9500\u548c\u4fee\u6539\u5bc6\u7801\u65f6\u9047\u5230\u7684\u7a98\u5883\u3002","title":"2.Secret\u5982\u4f55\u8bbe\u8ba1\uff1f"},{"location":"interview/e.g.1.0.0/#3_2","text":"\u4f20\u7edf\u7684session+cookie\u65b9\u6848\u7528\u6237\u70b9\u51fb\u6ce8\u9500\uff0c\u670d\u52a1\u7aef\u6e05\u7a7asession\u5373\u53ef\uff0c\u56e0\u4e3a\u72b6\u6001\u4fdd\u5b58\u5728\u670d\u52a1\u7aef\u3002\u4f46jwt\u7684\u65b9\u6848\u5c31\u6bd4\u8f83\u96be\u529e\u4e86\uff0c\u56e0\u4e3ajwt\u662f\u65e0\u72b6\u6001\u7684\uff0c\u670d\u52a1\u7aef\u901a\u8fc7\u8ba1\u7b97\u6765\u6821\u9a8c\u6709\u6548\u6027\u3002\u6ca1\u6709\u5b58\u50a8\u8d77\u6765\uff0c\u6240\u4ee5\u5373\u4f7f\u5ba2\u6237\u7aef\u5220\u9664\u4e86jwt\uff0c\u4f46\u662f\u8be5jwt\u8fd8\u662f\u5728\u6709\u6548\u671f\u5185\uff0c\u53ea\u4e0d\u8fc7\u5904\u4e8e\u4e00\u4e2a\u6e38\u79bb\u72b6\u6001\u3002\u5206\u6790\u4e0b\u75db\u70b9\uff1a\u6ce8\u9500\u53d8\u5f97\u590d\u6742\u7684\u539f\u56e0\u5728\u4e8ejwt\u7684\u65e0\u72b6\u6001\u3002\u63d0\u4f9b\u51e0\u4e2a\u65b9\u6848\uff0c\u89c6\u5177\u4f53\u7684\u4e1a\u52a1\u6765\u51b3\u5b9a\u80fd\u4e0d\u80fd\u63a5\u53d7\uff1a\u4ec5\u4ec5\u6e05\u7a7a\u5ba2\u6237\u7aefcookie\uff0c\u8fd9\u6837\u7528\u6237\u8bbf\u95ee\u65f6\u5c31\u4e0d\u4f1a\u643a\u5e26jwt\uff0c\u670d\u52a1\u7aef\u5c31\u8ba4\u4e3a\u7528\u6237\u9700\u8981","title":"3.\u6ce8\u9500\u548c\u4fee\u6539\u5bc6\u7801\uff1f"},{"location":"interview/e.g.1.0.0/#_4","text":"","title":"\u516d\u3001\u63a2\u82b1\u4ea4\u53cb"},{"location":"interview/e.g.1.0.0/#_5","text":"","title":"\u4e03\u3001\u9ed1\u9a6c\u5934\u6761"},{"location":"jquery/","text":"1\u3001JQuery\u5feb\u901f\u5165\u95e8 1.1\u3001JQuery\u4ecb\u7ecd \u00b6 jQuery \u662f\u4e00\u4e2a JavaScript \u5e93\u3002 \u6240\u8c13\u7684\u5e93\uff0c\u5c31\u662f\u4e00\u4e2a JS \u6587\u4ef6\uff0c\u91cc\u9762\u5c01\u88c5\u4e86\u5f88\u591a\u9884\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u6bd4\u5982\u83b7\u53d6\u5143\u7d20\uff0c\u6267\u884c\u9690\u85cf\u3001\u79fb\u52a8\u7b49\uff0c\u76ee\u7684\u5c31 \u662f\u5728\u4f7f\u7528\u65f6\u76f4\u63a5\u8c03\u7528\uff0c\u4e0d\u9700\u8981\u518d\u91cd\u590d\u5b9a\u4e49\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6781\u5927\u5730\u7b80\u5316\u4e86 JavaScript \u7f16\u7a0b\u3002 jQuery \u5b98\u7f51\uff1ahttps://www.jquery.com 1.2\u3001JQuery\u5feb\u901f\u5165\u95e8 \u00b6 \u5f00\u53d1\u601d\u8def \u7f16\u5199 HTML \u6587\u6863\u3002 \u5f15\u5165 jQuery \u6587\u4ef6\u3002 \u4f7f\u7528 jQuery \u83b7\u53d6\u5143\u7d20\u3002 \u4f7f\u7528\u6d4f\u89c8\u5668\u6d4b\u8bd5\u3002 \u4ee3\u7801\u5b9e\u73b0 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > \u5feb\u901f\u5165\u95e8 </ title > </ head > < body > < div id = \"div\" > \u6211\u662fdiv </ div > </ body > <!--\u5f15\u5165 jQuery \u6587\u4ef6--> < script src = \"js/jquery-3.3.1.min.js\" ></ script > < script > // JS\u65b9\u5f0f\uff0c\u901a\u8fc7id\u5c5e\u6027\u503c\u6765\u83b7\u53d6div\u5143\u7d20 let jsDiv = document . getElementById ( \"div\" ); //alert(jsDiv); //alert(jsDiv.innerHTML); // jQuery\u65b9\u5f0f\uff0c\u901a\u8fc7id\u5c5e\u6027\u503c\u6765\u83b7\u53d6div\u5143\u7d20 let jqDiv = $ ( \"#div\" ); alert ( jqDiv ); alert ( jqDiv . html ()); </ script > </ html > 1.3\u3001\u5c0f\u7ed3 \u00b6 jQuery \u662f\u4e00\u4e2a JavaScript \u5e93\u3002 \u8bf4\u767d\u4e86\u5c31\u662f\u5b9a\u4e49\u597d\u7684\u4e00\u4e2a JS \u6587\u4ef6\uff0c\u5185\u90e8\u5c01\u88c5\u4e86\u5f88\u591a\u529f\u80fd\uff0c\u53ef\u4ee5\u5927\u5927\u7b80\u5316\u6211\u4eec\u7684 JS \u64cd\u4f5c\u6b65\u9aa4\u3002 jQuery \u5b98\u7f51\uff1ahttps://www.jquery.com\u3002 \u8981\u60f3\u4f7f\u7528\uff0c\u5fc5\u987b\u8981\u5f15\u5165\u8be5\u6587\u4ef6\u3002 jQuery \u7684\u6838\u5fc3\u8bed\u6cd5 $(); 2\u3001JQuery\u57fa\u672c\u8bed\u6cd5 \u00b6 2.1\u3001JS\u5bf9\u8c61\u548cJQuery\u5bf9\u8c61\u8f6c\u6362 \u00b6 jQuery \u672c\u8d28\u4e0a\u867d\u7136\u4e5f\u662f JS\uff0c\u4f46\u5982\u679c\u60f3\u4f7f\u7528 jQuery \u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u90a3\u4e48\u5fc5\u987b\u4fdd\u8bc1\u5bf9\u8c61\u662f jQuery \u5bf9\u8c61\uff0c\u800c\u4e0d\u662f JS \u65b9\u5f0f\u83b7\u5f97\u7684 DOM \u5bf9\u8c61\uff0c\u4e8c\u8005\u7684 API \u65b9\u6cd5\u4e0d\u80fd\u6df7\u5408\u4f7f\u7528\uff0c\u82e5\u60f3\u4f7f\u7528\u5bf9\u65b9\u7684 API\uff0c\u9700\u8981\u8fdb\u884c\u5bf9\u8c61\u7684\u8f6c\u6362\u3002 JS \u7684 DOM \u5bf9\u8c61\u8f6c\u6362\u6210 jQuery \u5bf9\u8c61 ```js //$(JS \u7684 DOM \u5bf9\u8c61); // JS\u65b9\u5f0f\uff0c\u901a\u8fc7id\u5c5e\u6027\u503c\u83b7\u53d6div\u5143\u7d20 let jsDiv = document.getElementById(\"div\"); alert(jsDiv.innerHTML); //alert(jsDiv.html()); JS\u5bf9\u8c61\u65e0\u6cd5\u4f7f\u7528jQuery\u91cc\u9762\u7684\u529f\u80fd // \u5c06 JS \u5bf9\u8c61\u8f6c\u6362\u4e3ajQuery\u5bf9\u8c61 let jq = $(jsDiv); alert(jq.html()); ``` jQuery \u5bf9\u8c61\u8f6c\u6362\u6210 JS \u5bf9\u8c61 ```js / jQuery \u5bf9\u8c61[\u7d22\u5f15]; jQuery \u5bf9\u8c61.get(\u7d22\u5f15); / // jQuery\u65b9\u5f0f\uff0c\u901a\u8fc7id\u5c5e\u6027\u503c\u83b7\u53d6div\u5143\u7d20 let jqDiv = $(\"#div\"); alert(jqDiv.html()); // alert(jqDiv.innerHTML); jQuery\u5bf9\u8c61\u65e0\u6cd5\u4f7f\u7528JS\u91cc\u9762\u7684\u529f\u80fd // \u5c06 jQuery\u5bf9\u8c61\u8f6c\u6362\u4e3aJS\u5bf9\u8c61 let js = jqDiv[0]; alert(js.innerHTML); ``` 2.2\u3001\u4e8b\u4ef6\u7684\u57fa\u672c\u4f7f\u7528 \u00b6 \u5e38\u7528\u7684\u4e8b\u4ef6 \u5728 jQuery \u4e2d\u5c06\u4e8b\u4ef6\u5c01\u88c5\u6210\u4e86\u5bf9\u5e94\u7684\u65b9\u6cd5\u3002\u53bb\u6389\u4e86 JS \u4e2d\u7684 .on \u8bed\u6cd5\u3002 \u4ee3\u7801\u5b9e\u73b0 ```html \u4e8b\u4ef6\u7684\u4f7f\u7528 //\u5355\u51fb\u4e8b\u4ef6 $(\"#btn\").click(function(){ alert(\"\u70b9\u6211\u5e72\u561b?\"); }); //\u83b7\u53d6\u7126\u70b9\u4e8b\u4ef6 // $(\"#input\").focus(function(){ // alert(\"\u4f60\u8981\u8f93\u5165\u6570\u636e\u5566...\"); // }); //\u5931\u53bb\u7126\u70b9\u4e8b\u4ef6 $(\"#input\").blur(function(){ alert(\"\u4f60\u8f93\u5165\u5b8c\u6210\u5566...\"); }); ``` 2.3\u3001\u4e8b\u4ef6\u7684\u7ed1\u5b9a\u548c\u89e3\u7ed1 \u00b6 \u7ed1\u5b9a\u4e8b\u4ef6 //jQuery \u5bf9\u8c61.on(\u4e8b\u4ef6\u540d\u79f0,\u6267\u884c\u7684\u529f\u80fd); js //\u7ed9btn1\u6309\u94ae\u7ed1\u5b9a\u5355\u51fb\u4e8b\u4ef6 $(\"#btn1\").on(\"click\",function(){ alert(\"\u70b9\u6211\u5e72\u561b?\"); }); \u89e3\u7ed1\u4e8b\u4ef6 \u5982\u679c\u4e0d\u6307\u5b9a\u4e8b\u4ef6\u540d\u79f0\uff0c\u5219\u4f1a\u628a\u8be5\u5bf9\u8c61\u7ed1\u5b9a\u7684\u6240\u6709\u4e8b\u4ef6\u90fd\u89e3\u7ed1 //jQuery \u5bf9\u8c61.off(\u4e8b\u4ef6\u540d\u79f0); js //\u901a\u8fc7btn2\u89e3\u7ed1btn1\u7684\u5355\u51fb\u4e8b\u4ef6 $(\"#btn2\").on(\"click\",function(){ $(\"#btn1\").off(\"click\"); }); 2.4\u3001\u4e8b\u4ef6\u7684\u5207\u6362 \u00b6 \u4e8b\u4ef6\u7684\u5207\u6362\uff1a\u9700\u8981\u7ed9\u540c\u4e00\u4e2a\u5bf9\u8c61\u7ed1\u5b9a\u591a\u4e2a\u4e8b\u4ef6\uff0c\u800c\u4e14\u591a\u4e2a\u4e8b\u4ef6\u8fd8\u6709\u5148\u540e\u987a\u5e8f\u5173\u7cfb\u3002 \u65b9\u5f0f\u4e00\uff1a\u5355\u72ec\u5b9a\u4e49 $(\u5143\u7d20).\u4e8b\u4ef6\u65b9\u6cd5\u540d1(\u8981\u6267\u884c\u7684\u529f\u80fd); $(\u5143\u7d20).\u4e8b\u4ef6\u65b9\u6cd5\u540d2(\u8981\u6267\u884c\u7684\u529f\u80fd); js //\u65b9\u5f0f\u4e00 \u5355\u72ec\u5b9a\u4e49 $(\"#div\").mouseover(function(){ //\u80cc\u666f\u8272\uff1a\u7ea2\u8272 //$(\"#div\").css(\"background\",\"red\"); $(this).css(\"background\",\"red\"); }); $(\"#div\").mouseout(function(){ //\u80cc\u666f\u8272\uff1a\u84dd\u8272 //$(\"#div\").css(\"background\",\"blue\"); $(this).css(\"background\",\"blue\"); }); \u65b9\u5f0f\u4e8c\uff1a\u94fe\u5f0f\u5b9a\u4e49 $(\u5143\u7d20).\u4e8b\u4ef6\u65b9\u6cd5\u540d1(\u8981\u6267\u884c\u7684\u529f\u80fd) .\u4e8b\u4ef6\u65b9\u6cd5\u540d2(\u8981\u6267\u884c\u7684\u529f\u80fd); js //\u65b9\u5f0f\u4e8c \u94fe\u5f0f\u5b9a\u4e49 $(\"#div\").mouseover(function(){ $(this).css(\"background\",\"red\"); }).mouseout(function(){ $(this).css(\"background\",\"blue\"); }); 2.5\u3001\u904d\u5386\u64cd\u4f5c \u00b6 \u65b9\u5f0f\u4e00\uff1a\u4f20\u7edf\u65b9\u5f0f tex for(let i = 0; i < \u5bb9\u5668\u5bf9\u8c61\u957f\u5ea6; i++){ \u6267\u884c\u529f\u80fd; } js //\u65b9\u5f0f\u4e00\uff1a\u4f20\u7edf\u65b9\u5f0f $(\"#btn\").click(function(){ let lis = $(\"li\"); for(let i = 0 ; i < lis.length; i++) { alert(i + \":\" + lis[i].innerHTML); } }); \u65b9\u5f0f\u4e8c\uff1a\u5bf9\u8c61.each()\u65b9\u6cd5 tex \u5bb9\u5668\u5bf9\u8c61.each(function(index,ele){ \u6267\u884c\u529f\u80fd; }); js //\u65b9\u5f0f\u4e8c\uff1a\u5bf9\u8c61.each()\u65b9\u6cd5 $(\"#btn\").click(function(){ let lis = $(\"li\"); lis.each(function(index,ele){ alert(index + \":\" + ele.innerHTML); }); }); \u65b9\u5f0f\u4e09\uff1a$.each()\u65b9\u6cd5 tex $.each(\u5bb9\u5668\u5bf9\u8c61,function(index,ele){ \u6267\u884c\u529f\u80fd; }); js //\u65b9\u5f0f\u4e09\uff1a$.each()\u65b9\u6cd5 $(\"#btn\").click(function(){ let lis = $(\"li\"); $.each(lis,function(index,ele){ alert(index + \":\" + ele.innerHTML); }); }); \u65b9\u5f0f\u56db\uff1afor of\u8bed\u53e5 tex for(ele of \u5bb9\u5668\u5bf9\u8c61){ \u6267\u884c\u529f\u80fd; } js //\u65b9\u5f0f\u56db\uff1afor of \u8bed\u53e5\u904d\u5386: \u7c7b\u4f3c\u4e8ejava \u7684\u589e\u5f3afor \u5faa\u73af, \u662f\u539f\u59cbJS \u63d0\u4f9b\u7684\u529f\u80fd $(\"#btn\").click(function(){ let lis = $(\"li\"); for(ele of lis){ alert(ele.innerHTML); } }); 2.6\u3001\u5c0f\u7ed3 \u00b6 JS \u5bf9\u8c61\u548c jQuery \u5bf9\u8c61\u76f8\u4e92\u8f6c\u6362 $(JS \u7684 DOM \u5bf9\u8c61)\uff1a\u5c06 JS \u5bf9\u8c61\u8f6c\u4e3a jQuery \u5bf9\u8c61\u3002 jQuery \u5bf9\u8c61[\u7d22\u5f15] jQuery \u5bf9\u8c61.get(\u7d22\u5f15)\uff1a\u5c06 jQuery \u5bf9\u8c61\u8f6c\u4e3a JS \u5bf9\u8c61\u3002 \u4e8b\u4ef6 \u5728 jQuery \u4e2d\u5c06\u4e8b\u4ef6\u5c01\u88c5\u6210\u4e86\u5bf9\u5e94\u7684\u65b9\u6cd5\u3002\u53bb\u6389\u4e86 JS \u4e2d\u7684 .on \u8bed\u6cd5\u3002 on(\u4e8b\u4ef6\u540d\u79f0,\u6267\u884c\u7684\u529f\u80fd)\uff1a\u7ed1\u5b9a\u4e8b\u4ef6\u3002 off(\u4e8b\u4ef6\u540d\u79f0)\uff1a\u89e3\u7ed1\u4e8b\u4ef6\u3002 \u904d\u5386 \u4f20\u7edf\u65b9\u5f0f\u3002 \u5bf9\u8c61.each() \u65b9\u6cd5\u3002 $.each() \u65b9\u6cd5\u3002 for of \u8bed\u53e5\u3002 3\u3001JQuery\u9009\u62e9\u5668 \u00b6 3.1\u3001\u57fa\u672c\u9009\u62e9\u5668 \u00b6 \u9009\u62e9\u5668\uff1a\u7c7b\u4f3c\u4e8e CSS \u7684\u9009\u62e9\u5668\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u83b7\u53d6\u5143\u7d20\u3002 \u4f8b\u5982\uff1aid \u9009\u62e9\u5668\u3001\u7c7b\u9009\u62e9\u5668\u3001\u5143\u7d20\u9009\u62e9\u5668\u3001\u5c5e\u6027\u9009\u62e9\u5668\u7b49\u7b49\u3002 jQuery \u4e2d\u9009\u62e9\u5668\u7684\u8bed\u6cd5\uff1a$(); \u4ee3\u7801\u5b9e\u73b0 ```html \u57fa\u672c\u9009\u62e9\u5668 div1 div2 div3 //1.\u5143\u7d20\u9009\u62e9\u5668 $(\"\u5143\u7d20\u7684\u540d\u79f0\") let divs = $(\"div\"); //alert(divs.length); //2.id\u9009\u62e9\u5668 $(\"#id\u7684\u5c5e\u6027\u503c\") let div1 = $(\"#div1\"); //alert(div1); //3.\u7c7b\u9009\u62e9\u5668 $(\".class\u7684\u5c5e\u6027\u503c\") let cls = $(\".cls\"); alert(cls.length); ``` 3.2\u3001\u5c42\u7ea7\u9009\u62e9\u5668 \u00b6 \u4ee3\u7801\u5b9e\u73b0 ```html \u5c42\u7ea7\u9009\u62e9\u5668 s1 s1-1 s1-2 s2 p1 p2 // 1. \u540e\u4ee3\u9009\u62e9\u5668 $(\"A B\"); A\u4e0b\u7684\u6240\u6709B(\u5305\u62ecB\u7684\u5b50\u7ea7) let spans1 = $(\"div span\"); //alert(spans1.length); // 2. \u5b50\u9009\u62e9\u5668 $(\"A > B\"); A\u4e0b\u7684\u6240\u6709B(\u4e0d\u5305\u62ecB\u7684\u5b50\u7ea7) let spans2 = $(\"div > span\"); //alert(spans2.length); // 3. \u5144\u5f1f\u9009\u62e9\u5668 $(\"A + B\"); A\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2aB let ps1 = $(\"div + p\"); //alert(ps1.length); // 4. \u5144\u5f1f\u9009\u62e9\u5668 $(\"A ~ B\"); A\u76f8\u90bb\u7684\u6240\u6709B let ps2 = $(\"div ~ p\"); alert(ps2.length); ``` 3.3\u3001\u5c5e\u6027\u9009\u62e9\u5668 \u00b6 \u4ee3\u7801\u5b9e\u73b0 ```html \u5c5e\u6027\u9009\u62e9\u5668 //1.\u5c5e\u6027\u540d\u9009\u62e9\u5668 $(\"\u5143\u7d20[\u5c5e\u6027\u540d]\") let in1 = $(\"input[type]\"); //alert(in1.length); //2.\u5c5e\u6027\u503c\u9009\u62e9\u5668 $(\"\u5143\u7d20[\u5c5e\u6027\u540d=\u5c5e\u6027\u503c]\") let in2 = $(\"input[type='password']\"); alert(in2.length); ``` 3.4\u3001\u8fc7\u6ee4\u5668\u9009\u62e9\u5668 \u00b6 \u4ee3\u7801\u5b9e\u73b0 ```html \u8fc7\u6ee4\u5668\u9009\u62e9\u5668 div1 div2 div3 div4 // 1.\u9996\u5143\u7d20\u9009\u62e9\u5668 $(\"A:first\"); let div1 = $(\"div:first\"); //alert(div1.html()); // 2.\u5c3e\u5143\u7d20\u9009\u62e9\u5668 $(\"A:last\"); let div4 = $(\"div:last\"); //alert(div4.html()); // 3.\u975e\u5143\u7d20\u9009\u62e9\u5668 $(\"A:not(B)\"); let divs1 = $(\"div:not(#div2)\"); //alert(divs1.length); // 4.\u5076\u6570\u9009\u62e9\u5668 $(\"A:even\"); let divs2 = $(\"div:even\"); //alert(divs2.length); //alert(divs2[0].innerHTML); //alert(divs2[1].innerHTML); // 5.\u5947\u6570\u9009\u62e9\u5668 $(\"A:odd\"); let divs3 = $(\"div:odd\"); //alert(divs3.length); //alert(divs3[0].innerHTML); //alert(divs3[1].innerHTML); // 6.\u7b49\u4e8e\u7d22\u5f15\u9009\u62e9\u5668 $(\"A:eq(index)\"); let div3 = $(\"div:eq(2)\"); //alert(div3.html()); // 7.\u5927\u4e8e\u7d22\u5f15\u9009\u62e9\u5668 $(\"A:gt(index)\"); let divs4 = $(\"div:gt(1)\"); //alert(divs4.length); //alert(divs4[0].innerHTML); //alert(divs4[1].innerHTML); // 8.\u5c0f\u4e8e\u7d22\u5f15\u9009\u62e9\u5668 $(\"A:lt(index)\"); let divs5 = $(\"div:lt(2)\"); alert(divs5.length); alert(divs5[0].innerHTML); alert(divs5[1].innerHTML); ``` 3.5\u3001\u8868\u5355\u5c5e\u6027\u9009\u62e9\u5668 \u00b6 \u4ee3\u7801\u5b9e\u73b0 ```html \u8868\u5355\u5c5e\u6027\u9009\u62e9\u5668 \u7537 \u5973 \u5b66\u4e60 \u7761\u89c9 ---\u8bf7\u9009\u62e9--- \u672c\u79d1 \u4e13\u79d1 // 1.\u53ef\u7528\u5143\u7d20\u9009\u62e9\u5668 $(\"A:enabled\"); let ins1 = $(\"input:enabled\"); //alert(ins1.length); // 2.\u4e0d\u53ef\u7528\u5143\u7d20\u9009\u62e9\u5668 $(\"A:disabled\"); let ins2 = $(\"input:disabled\"); //alert(ins2.length); // 3.\u5355\u9009/\u590d\u9009\u6846\u88ab\u9009\u4e2d\u7684\u5143\u7d20 $(\"A:checked\"); let ins3 = $(\"input:checked\"); //alert(ins3.length); //alert(ins3[0].value); //alert(ins3[1].value); //alert(ins3[2].value); // 4.\u4e0b\u62c9\u6846\u88ab\u9009\u4e2d\u7684\u5143\u7d20 $(\"A:selected\"); let select = $(\"select option:selected\"); alert(select.html()); ``` 3.6\u3001\u5c0f\u7ed3 \u00b6 \u9009\u62e9\u5668\uff1a\u7c7b\u4f3c\u4e8e CSS \u7684\u9009\u62e9\u5668\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u83b7\u53d6\u5143\u7d20\u3002 jQuery \u4e2d\u9009\u62e9\u5668\u7684\u8bed\u6cd5\uff1a$(); \u57fa\u672c\u9009\u62e9\u5668 $(\"\u5143\u7d20\u7684\u540d\u79f0\"); $(\"#id\u7684\u5c5e\u6027\u503c\"); $(\".class\u7684\u5c5e\u6027\u503c\"); \u5c42\u7ea7\u9009\u62e9\u5668 $(\"A B\"); $(\"A > B\"); \u5c5e\u6027\u9009\u62e9\u5668 $(\"A[\u5c5e\u6027\u540d]\"); $(\"A[\u5c5e\u6027\u540d=\u5c5e\u6027\u503c]\"); \u8fc7\u6ee4\u5668\u9009\u62e9\u5668 $(\"A:even\"); $(\"A:odd\"); \u8868\u5355\u5c5e\u6027\u9009\u62e9\u5668 $(\"A:disabled\"); $(\"A:checked\"); $(\"A:selected\"); 4\u3001JQuery DOM \u00b6 4.1\u3001\u64cd\u4f5c\u6587\u672c \u00b6 \u5e38\u7528\u65b9\u6cd5 \u4ee3\u7801\u5b9e\u73b0 ```html \u64cd\u4f5c\u6587\u672c \u6211\u662fdiv //1. html() \u83b7\u53d6\u6807\u7b7e\u7684\u6587\u672c\u5185\u5bb9 $(\"#btn1\").click(function(){ //\u83b7\u53d6div\u6807\u7b7e\u7684\u6587\u672c\u5185\u5bb9 let value = $(\"#div\").html(); alert(value); }); //2. html(value) \u8bbe\u7f6e\u6807\u7b7e\u7684\u6587\u672c\u5185\u5bb9\uff0c\u89e3\u6790\u6807\u7b7e $(\"#btn2\").click(function(){ //\u8bbe\u7f6ediv\u6807\u7b7e\u7684\u6587\u672c\u5185\u5bb9 //$(\"#div\").html(\"\u6211\u771f\u7684\u662fdiv\"); $(\"#div\").html(\"<b>\u6211\u771f\u7684\u662fdiv</b>\"); }); ``` 4.2\u3001\u64cd\u4f5c\u5bf9\u8c61 \u00b6 \u5e38\u7528\u65b9\u6cd5 \u4ee3\u7801\u5b9e\u73b0 ```html \u64cd\u4f5c\u5bf9\u8c61 \u5317\u4eac \u4e0a\u6d77 \u5e7f\u5dde \u6df1\u5733 \u52a0\u6cb9 \u96c4\u8d77 /* 1. $(\"\u5143\u7d20\") \u521b\u5efa\u6307\u5b9a\u5143\u7d20 2. append(element) \u6dfb\u52a0\u6210\u6700\u540e\u4e00\u4e2a\u5b50\u5143\u7d20\uff0c\u7531\u6dfb\u52a0\u8005\u5bf9\u8c61\u8c03\u7528 3. appendTo(element) \u6dfb\u52a0\u6210\u6700\u540e\u4e00\u4e2a\u5b50\u5143\u7d20\uff0c\u7531\u88ab\u6dfb\u52a0\u8005\u5bf9\u8c61\u8c03\u7528 4. prepend(element) \u6dfb\u52a0\u6210\u7b2c\u4e00\u4e2a\u5b50\u5143\u7d20\uff0c\u7531\u6dfb\u52a0\u8005\u5bf9\u8c61\u8c03\u7528 5. prependTo(element) \u6dfb\u52a0\u6210\u7b2c\u4e00\u4e2a\u5b50\u5143\u7d20\uff0c\u7531\u88ab\u6dfb\u52a0\u8005\u5bf9\u8c61\u8c03\u7528 6. before(element) \u6dfb\u52a0\u5230\u5f53\u524d\u5143\u7d20\u7684\u524d\u9762\uff0c\u4e24\u8005\u4e4b\u95f4\u662f\u5144\u5f1f\u5173\u7cfb\uff0c\u7531\u6dfb\u52a0\u8005\u5bf9\u8c61\u8c03\u7528 7. after(element) \u6dfb\u52a0\u5230\u5f53\u524d\u5143\u7d20\u7684\u540e\u9762\uff0c\u4e24\u8005\u4e4b\u95f4\u662f\u5144\u5f1f\u5173\u7cfb\uff0c\u7531\u6dfb\u52a0\u8005\u5bf9\u8c61\u8c03\u7528 8. remove() \u5220\u9664\u6307\u5b9a\u5143\u7d20(\u81ea\u5df1\u79fb\u9664\u81ea\u5df1) 9. empty() \u6e05\u7a7a\u6307\u5b9a\u5143\u7d20\u7684\u6240\u6709\u5b50\u5143\u7d20 */ // \u6309\u94ae\u4e00\uff1a\u6dfb\u52a0\u4e00\u4e2aspan\u5230div $(\"#btn1\").click(function(){ let span = $(\"<span>span</span>\"); $(\"#div\").append(span); }); //\u6309\u94ae\u4e8c\uff1a\u5c06\u52a0\u6cb9\u6dfb\u52a0\u5230\u57ce\u5e02\u5217\u8868\u6700\u4e0b\u65b9 $(\"#btn2\").click(function(){ //$(\"#city\").append($(\"#jy\")); $(\"#jy\").appendTo($(\"#city\")); }); //\u6309\u94ae\u4e09\uff1a\u5c06\u52a0\u6cb9\u6dfb\u52a0\u5230\u57ce\u5e02\u5217\u8868\u6700\u4e0a\u65b9 $(\"#btn3\").click(function(){ //$(\"#city\").prepend($(\"#jy\")); $(\"#jy\").prependTo($(\"#city\")); }); //\u6309\u94ae\u56db\uff1a\u5c06\u96c4\u8d77\u6dfb\u52a0\u5230\u4e0a\u6d77\u4e0b\u65b9 $(\"#btn4\").click(function(){ $(\"#sh\").after($(\"#xq\")); }); //\u6309\u94ae\u4e94\uff1a\u5c06\u96c4\u8d77\u6dfb\u52a0\u5230\u4e0a\u6d77\u4e0a\u65b9 $(\"#btn5\").click(function(){ $(\"#sh\").before($(\"#xq\")); }); //\u6309\u94ae\u516d\uff1a\u5c06\u96c4\u8d77\u5220\u9664 $(\"#btn6\").click(function(){ $(\"#xq\").remove(); }); //\u6309\u94ae\u4e03\uff1a\u5c06\u63cf\u8ff0\u5217\u8868\u5168\u90e8\u5220\u9664 $(\"#btn7\").click(function(){ $(\"#desc\").empty(); }); ``` 4.3\u3001\u64cd\u4f5c\u6837\u5f0f \u00b6 \u5e38\u7528\u65b9\u6cd5 \u4ee3\u7801\u5b9e\u73b0 ```html \u64cd\u4f5c\u6837\u5f0f .cls1{ background: pink; height: 30px; } \u6211\u662fdiv // 1.css(name) \u83b7\u53d6css\u6837\u5f0f $(\"#btn1\").click(function(){ alert($(\"#div\").css(\"border\")); }); // 2.css(name,value) \u8bbe\u7f6eCSS\u6837\u5f0f $(\"#btn2\").click(function(){ $(\"#div\").css(\"background\",\"blue\"); }); // 3.addClass(value) \u7ed9\u6307\u5b9a\u7684\u5bf9\u8c61\u6dfb\u52a0\u6837\u5f0f\u7c7b\u540d $(\"#btn3\").click(function(){ $(\"#div\").addClass(\"cls1\"); }); // 4.removeClass(value) \u7ed9\u6307\u5b9a\u7684\u5bf9\u8c61\u5220\u9664\u6837\u5f0f\u7c7b\u540d $(\"#btn4\").click(function(){ $(\"#div\").removeClass(\"cls1\"); }); // 5.toggleClass(value) \u5982\u679c\u6ca1\u6709\u6837\u5f0f\u7c7b\u540d\uff0c\u5219\u6dfb\u52a0\u3002\u5982\u679c\u6709\uff0c\u5219\u5220\u9664 $(\"#btn5\").click(function(){ $(\"#div\").toggleClass(\"cls1\"); }); ``` 4.4\u3001\u64cd\u4f5c\u5c5e\u6027 \u00b6 \u5e38\u7528\u65b9\u6cd5 \u4ee3\u7801\u5b9e\u73b0 ```html \u64cd\u4f5c\u5c5e\u6027 \u7537 \u5973 ---\u8bf7\u9009\u62e9--- \u672c\u79d1 \u4e13\u79d1 // 1.attr(name,[value]) \u83b7\u5f97/\u8bbe\u7f6e\u5c5e\u6027\u7684\u503c //\u6309\u94ae\u4e00\uff1a\u83b7\u53d6\u8f93\u5165\u6846\u7684id\u5c5e\u6027 $(\"#btn1\").click(function(){ alert($(\"#username\").attr(\"id\")); }); //\u6309\u94ae\u4e8c\uff1a\u7ed9\u8f93\u5165\u6846\u8bbe\u7f6evalue\u5c5e\u6027 $(\"#btn2\").click(function(){ $(\"#username\").attr(\"value\",\"hello...\"); }); // 2.prop(name,[value]) \u83b7\u5f97/\u8bbe\u7f6e\u5c5e\u6027\u7684\u503c(checked\uff0cselected) //\u6309\u94ae\u4e09\uff1a\u9009\u4e2d\u5973 $(\"#btn3\").click(function(){ $(\"#gender2\").prop(\"checked\",true); }); //\u6309\u94ae\u56db\uff1a\u9009\u4e2d\u672c\u79d1 $(\"#btn4\").click(function(){ $(\"#bk\").prop(\"selected\",true); }); ``` 4.5\u3001\u5c0f\u7ed3 \u00b6 \u64cd\u4f5c\u6587\u672c html() html(\u2026)\uff1a\u83b7\u53d6\u6216\u8bbe\u7f6e\u6807\u7b7e\u7684\u6587\u672c\uff0c\u89e3\u6790\u6807\u7b7e\u3002 \u64cd\u4f5c\u5bf9\u8c61 $(\u201c\u5143\u7d20\u201d)\uff1a\u521b\u5efa\u6307\u5b9a\u5143\u7d20\u3002 append(element)\uff1a\u6dfb\u52a0\u6210\u6700\u540e\u4e00\u4e2a\u5b50\u5143\u7d20\uff0c\u7531\u6dfb\u52a0\u8005\u5bf9\u8c61\u8c03\u7528\u3002 prepend(element)\uff1a\u6dfb\u52a0\u6210\u7b2c\u4e00\u4e2a\u5b50\u5143\u7d20\uff0c\u7531\u6dfb\u52a0\u8005\u5bf9\u8c61\u8c03\u7528\u3002 before(element)\uff1a\u6dfb\u52a0\u5230\u5f53\u524d\u5143\u7d20\u7684\u524d\u9762\uff0c\u4e24\u8005\u4e4b\u95f4\u662f\u5144\u5f1f\u5173\u7cfb\uff0c\u7531\u6dfb\u52a0\u8005\u5bf9\u8c61\u8c03\u7528\u3002 after(element)\uff1a\u6dfb\u52a0\u5230\u5f53\u524d\u5143\u7d20\u7684\u540e\u9762\uff0c\u4e24\u8005\u4e4b\u95f4\u662f\u5144\u5f1f\u5173\u7cfb\uff0c\u7531\u6dfb\u52a0\u8005\u5bf9\u8c61\u8c03\u7528\u3002 remove()\uff1a\u5220\u9664\u6307\u5b9a\u5143\u7d20(\u81ea\u5df1\u79fb\u9664\u81ea\u5df1)\u3002 \u64cd\u4f5c\u6837\u5f0f addClass(value)\uff1a\u7ed9\u6307\u5b9a\u7684\u5bf9\u8c61\u6dfb\u52a0\u6837\u5f0f\u7c7b\u540d\u3002 removeClass(value)\uff1a\u7ed9\u6307\u5b9a\u7684\u5bf9\u8c61\u5220\u9664\u6837\u5f0f\u7c7b\u540d\u3002 \u64cd\u4f5c\u5c5e\u6027 attr(name,[value])\uff1a\u83b7\u5f97/\u8bbe\u7f6e\u5c5e\u6027\u7684\u503c\u3002 prop(name,[value])\uff1a\u83b7\u5f97/\u8bbe\u7f6e\u5c5e\u6027\u7684\u503c(checked\uff0cselected)\u3002 5\u3001\u7efc\u5408\u6848\u4f8b \u590d\u9009\u6846 \u00b6 5.1\u3001\u6848\u4f8b\u6548\u679c \u00b6 5.2\u3001\u5206\u6790\u548c\u5b9e\u73b0 \u00b6 \u529f\u80fd\u5206\u6790 \u5168\u9009 \u4e3a\u5168\u9009\u6309\u94ae\u7ed1\u5b9a\u5355\u51fb\u4e8b\u4ef6\u3002 \u83b7\u53d6\u6240\u6709\u7684\u5546\u54c1\u9879\u590d\u9009\u6846\u5143\u7d20\uff0c\u4e3a\u5176\u6dfb\u52a0 checked \u5c5e\u6027\uff0c\u5c5e\u6027\u503c\u4e3a true\u3002 \u5168\u4e0d\u9009 \u4e3a\u5168\u4e0d\u9009\u6309\u94ae\u7ed1\u5b9a\u5355\u51fb\u4e8b\u4ef6\u3002 \u83b7\u53d6\u6240\u6709\u7684\u5546\u54c1\u9879\u590d\u9009\u6846\u5143\u7d20\uff0c\u4e3a\u5176\u6dfb\u52a0 checked \u5c5e\u6027\uff0c\u5c5e\u6027\u503c\u4e3a false\u3002 \u53cd\u9009 \u4e3a\u53cd\u9009\u6309\u94ae\u7ed1\u5b9a\u5355\u51fb\u4e8b\u4ef6 \u83b7\u53d6\u6240\u6709\u7684\u5546\u54c1\u9879\u590d\u9009\u6846\u5143\u7d20\uff0c\u4e3a\u5176\u6dfb\u52a0 checked \u5c5e\u6027\uff0c\u5c5e\u6027\u503c\u662f\u76ee\u524d\u76f8\u53cd\u7684\u72b6\u6001\u3002 \u4ee3\u7801\u5b9e\u73b0 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > \u590d\u9009\u6846 </ title > </ head > < body > < table id = \"tab1\" border = \"1\" width = \"800\" align = \"center\" > < tr > < th style = \"text-align: left\" > < input style = \"background:lightgreen\" id = \"selectAll\" type = \"button\" value = \"\u5168\u9009\" > < input style = \"background:lightgreen\" id = \"selectNone\" type = \"button\" value = \"\u5168\u4e0d\u9009\" > < input style = \"background:lightgreen\" id = \"reverse\" type = \"button\" value = \"\u53cd\u9009\" > </ th > < th > \u5206\u7c7bID </ th > < th > \u5206\u7c7b\u540d\u79f0 </ th > < th > \u5206\u7c7b\u63cf\u8ff0 </ th > < th > \u64cd\u4f5c </ th > </ tr > < tr > < td >< input type = \"checkbox\" class = \"item\" ></ td > < td > 1 </ td > < td > \u624b\u673a\u6570\u7801 </ td > < td > \u624b\u673a\u6570\u7801\u7c7b\u5546\u54c1 </ td > < td >< a href = \"\" > \u4fee\u6539 </ a > | < a href = \"\" > \u5220\u9664 </ a ></ td > </ tr > < tr > < td >< input type = \"checkbox\" class = \"item\" ></ td > < td > 2 </ td > < td > \u7535\u8111\u529e\u516c </ td > < td > \u7535\u8111\u529e\u516c\u7c7b\u5546\u54c1 </ td > < td >< a href = \"\" > \u4fee\u6539 </ a > | < a href = \"\" > \u5220\u9664 </ a ></ td > </ tr > < tr > < td >< input type = \"checkbox\" class = \"item\" ></ td > < td > 3 </ td > < td > \u978b\u9774\u7bb1\u5305 </ td > < td > \u978b\u9774\u7bb1\u5305\u7c7b\u5546\u54c1 </ td > < td >< a href = \"\" > \u4fee\u6539 </ a > | < a href = \"\" > \u5220\u9664 </ a ></ td > </ tr > < tr > < td >< input type = \"checkbox\" class = \"item\" ></ td > < td > 4 </ td > < td > \u5bb6\u5c45\u9970\u54c1 </ td > < td > \u5bb6\u5c45\u9970\u54c1\u7c7b\u5546\u54c1 </ td > < td >< a href = \"\" > \u4fee\u6539 </ a > | < a href = \"\" > \u5220\u9664 </ a ></ td > </ tr > </ table > </ body > < script src = \"js/jquery-3.3.1.min.js\" ></ script > < script > //\u5168\u9009 //1.\u4e3a\u5168\u9009\u6309\u94ae\u6dfb\u52a0\u5355\u51fb\u4e8b\u4ef6 $ ( \"#selectAll\" ). click ( function (){ //2.\u83b7\u53d6\u6240\u6709\u7684\u5546\u54c1\u590d\u9009\u6846\u5143\u7d20\uff0c\u4e3a\u5176\u6dfb\u52a0checked\u5c5e\u6027\uff0c\u5c5e\u6027\u503ctrue $ ( \".item\" ). prop ( \"checked\" , true ); }); //\u5168\u4e0d\u9009 //1.\u4e3a\u5168\u4e0d\u9009\u6309\u94ae\u6dfb\u52a0\u5355\u51fb\u4e8b\u4ef6 $ ( \"#selectNone\" ). click ( function (){ //2.\u83b7\u53d6\u6240\u6709\u7684\u5546\u54c1\u590d\u9009\u6846\u5143\u7d20\uff0c\u4e3a\u5176\u6dfb\u52a0checked\u5c5e\u6027\uff0c\u5c5e\u6027\u503cfalse $ ( \".item\" ). prop ( \"checked\" , false ); }); //\u53cd\u9009 //1.\u4e3a\u53cd\u9009\u6309\u94ae\u6dfb\u52a0\u5355\u51fb\u4e8b\u4ef6 $ ( \"#reverse\" ). click ( function (){ //2.\u83b7\u53d6\u6240\u6709\u7684\u5546\u54c1\u590d\u9009\u6846\u5143\u7d20\uff0c\u4e3a\u5176\u6dfb\u52a0checked\u5c5e\u6027\uff0c\u5c5e\u6027\u503c\u662f\u76ee\u524d\u76f8\u53cd\u7684\u72b6\u6001 let items = $ ( \".item\" ); items . each ( function (){ $ ( this ). prop ( \"checked\" , ! $ ( this ). prop ( \"checked\" )); }); }); </ script > </ html > 6\u3001\u7efc\u5408\u6848\u4f8b \u968f\u673a\u56fe\u7247 \u00b6 6.1\u3001\u6848\u4f8b\u6548\u679c \u00b6 6.2\u3001\u52a8\u6001\u5207\u6362\u5c0f\u56fe\u7684\u5206\u6790\u548c\u5b9e\u73b0 \u00b6 \u529f\u80fd\u5206\u6790 \u51c6\u5907\u4e00\u4e2a\u6570\u7ec4 \u5b9a\u4e49\u8ba1\u6570\u5668 \u5b9a\u4e49\u5b9a\u65f6\u5668\u5bf9\u8c61 \u5b9a\u4e49\u56fe\u7247\u8def\u5f84\u53d8\u91cf \u4e3a\u5f00\u59cb\u6309\u94ae\u7ed1\u5b9a\u5355\u51fb\u4e8b\u4ef6 \u8bbe\u7f6e\u6309\u94ae\u72b6\u6001 \u8bbe\u7f6e\u5b9a\u65f6\u5668\uff0c\u5faa\u73af\u663e\u793a\u56fe\u7247 \u5faa\u73af\u83b7\u53d6\u56fe\u7247\u8def\u5f84 \u5c06\u5f53\u524d\u56fe\u7247\u663e\u793a\u5230\u5c0f\u56fe\u7247\u4e0a \u8ba1\u6570\u5668\u81ea\u589e \u4ee3\u7801\u5b9e\u73b0 ```html \u968f\u673a\u56fe\u7247 //1.\u51c6\u5907\u4e00\u4e2a\u6570\u7ec4 let imgs = [ \"img/01.jpg\", \"img/02.jpg\", \"img/03.jpg\", \"img/04.jpg\", \"img/05.jpg\", \"img/06.jpg\", \"img/07.jpg\", \"img/08.jpg\", \"img/09.jpg\", \"img/10.jpg\"]; //2.\u5b9a\u4e49\u8ba1\u6570\u5668\u53d8\u91cf let count = 0; //3.\u58f0\u660e\u5b9a\u65f6\u5668\u5bf9\u8c61 let time = null; //4.\u58f0\u660e\u56fe\u7247\u8def\u5f84\u53d8\u91cf let imgSrc = \"\"; //5.\u4e3a\u5f00\u59cb\u6309\u94ae\u7ed1\u5b9a\u5355\u51fb\u4e8b\u4ef6 $(\"#startBtn\").click(function(){ //6.\u8bbe\u7f6e\u6309\u94ae\u72b6\u6001 //\u7981\u7528\u5f00\u59cb\u6309\u94ae $(\"#startBtn\").prop(\"disabled\",true); //\u542f\u7528\u505c\u6b62\u6309\u94ae $(\"#stopBtn\").prop(\"disabled\",false); //7.\u8bbe\u7f6e\u5b9a\u65f6\u5668\uff0c\u5faa\u73af\u663e\u793a\u56fe\u7247 time = setInterval(function(){ //8.\u5faa\u73af\u83b7\u53d6\u56fe\u7247\u8def\u5f84 let index = count % imgs.length; // 0%10=0 1%10=1 2%10=2 .. 9%10=9 10%10=0 //9.\u5c06\u5f53\u524d\u56fe\u7247\u663e\u793a\u5230\u5c0f\u56fe\u7247\u4e0a imgSrc = imgs[index]; $(\"#small\").prop(\"src\",imgSrc); //10.\u8ba1\u6570\u5668\u81ea\u589e count++; },10); }); ``` 6.3\u3001\u663e\u793a\u5927\u56fe\u7684\u5206\u6790\u548c\u5b9e\u73b0 \u00b6 \u529f\u80fd\u5206\u6790 \u4e3a\u505c\u6b62\u6309\u94ae\u7ed1\u5b9a\u5355\u51fb\u4e8b\u4ef6 \u53d6\u6d88\u5b9a\u65f6\u5668 \u8bbe\u7f6e\u6309\u94ae\u72b6\u6001 \u5c06\u56fe\u7247\u663e\u793a\u5230\u5927\u56fe\u7247\u4e0a \u4ee3\u7801\u5b9e\u73b0 ```js //11.\u4e3a\u505c\u6b62\u6309\u94ae\u7ed1\u5b9a\u5355\u51fb\u4e8b\u4ef6 $(\"#stopBtn\").click(function(){ //12.\u53d6\u6d88\u5b9a\u65f6\u5668 clearInterval(time); // 13 . \u8bbe\u7f6e\u6309\u94ae\u72b6\u6001 // \u542f\u7528\u5f00\u59cb\u6309\u94ae $( \"#startBtn\" ) . prop ( \"disabled\" , false ); // \u7981\u7528\u505c\u6b62\u6309\u94ae $( \"#stopBtn\" ) . prop ( \"disabled\" , true ); // 14 . \u5c06\u56fe\u7247\u663e\u793a\u5230\u5927\u56fe\u7247\u4e0a $( \"#big\" ) . prop ( \"src\" , imgSrc ); $( \"#big\" ) . prop ( \"style\" , \"width: 400px; height: 400px;\" ); }); ```","title":"JQuery"},{"location":"jquery/#11jquery","text":"jQuery \u662f\u4e00\u4e2a JavaScript \u5e93\u3002 \u6240\u8c13\u7684\u5e93\uff0c\u5c31\u662f\u4e00\u4e2a JS \u6587\u4ef6\uff0c\u91cc\u9762\u5c01\u88c5\u4e86\u5f88\u591a\u9884\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u6bd4\u5982\u83b7\u53d6\u5143\u7d20\uff0c\u6267\u884c\u9690\u85cf\u3001\u79fb\u52a8\u7b49\uff0c\u76ee\u7684\u5c31 \u662f\u5728\u4f7f\u7528\u65f6\u76f4\u63a5\u8c03\u7528\uff0c\u4e0d\u9700\u8981\u518d\u91cd\u590d\u5b9a\u4e49\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6781\u5927\u5730\u7b80\u5316\u4e86 JavaScript \u7f16\u7a0b\u3002 jQuery \u5b98\u7f51\uff1ahttps://www.jquery.com","title":"1.1\u3001JQuery\u4ecb\u7ecd"},{"location":"jquery/#12jquery","text":"\u5f00\u53d1\u601d\u8def \u7f16\u5199 HTML \u6587\u6863\u3002 \u5f15\u5165 jQuery \u6587\u4ef6\u3002 \u4f7f\u7528 jQuery \u83b7\u53d6\u5143\u7d20\u3002 \u4f7f\u7528\u6d4f\u89c8\u5668\u6d4b\u8bd5\u3002 \u4ee3\u7801\u5b9e\u73b0 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > \u5feb\u901f\u5165\u95e8 </ title > </ head > < body > < div id = \"div\" > \u6211\u662fdiv </ div > </ body > <!--\u5f15\u5165 jQuery \u6587\u4ef6--> < script src = \"js/jquery-3.3.1.min.js\" ></ script > < script > // JS\u65b9\u5f0f\uff0c\u901a\u8fc7id\u5c5e\u6027\u503c\u6765\u83b7\u53d6div\u5143\u7d20 let jsDiv = document . getElementById ( \"div\" ); //alert(jsDiv); //alert(jsDiv.innerHTML); // jQuery\u65b9\u5f0f\uff0c\u901a\u8fc7id\u5c5e\u6027\u503c\u6765\u83b7\u53d6div\u5143\u7d20 let jqDiv = $ ( \"#div\" ); alert ( jqDiv ); alert ( jqDiv . html ()); </ script > </ html >","title":"1.2\u3001JQuery\u5feb\u901f\u5165\u95e8"},{"location":"jquery/#13","text":"jQuery \u662f\u4e00\u4e2a JavaScript \u5e93\u3002 \u8bf4\u767d\u4e86\u5c31\u662f\u5b9a\u4e49\u597d\u7684\u4e00\u4e2a JS \u6587\u4ef6\uff0c\u5185\u90e8\u5c01\u88c5\u4e86\u5f88\u591a\u529f\u80fd\uff0c\u53ef\u4ee5\u5927\u5927\u7b80\u5316\u6211\u4eec\u7684 JS \u64cd\u4f5c\u6b65\u9aa4\u3002 jQuery \u5b98\u7f51\uff1ahttps://www.jquery.com\u3002 \u8981\u60f3\u4f7f\u7528\uff0c\u5fc5\u987b\u8981\u5f15\u5165\u8be5\u6587\u4ef6\u3002 jQuery \u7684\u6838\u5fc3\u8bed\u6cd5 $();","title":"1.3\u3001\u5c0f\u7ed3"},{"location":"jquery/#2jquery","text":"","title":"2\u3001JQuery\u57fa\u672c\u8bed\u6cd5"},{"location":"jquery/#21jsjquery","text":"jQuery \u672c\u8d28\u4e0a\u867d\u7136\u4e5f\u662f JS\uff0c\u4f46\u5982\u679c\u60f3\u4f7f\u7528 jQuery \u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u90a3\u4e48\u5fc5\u987b\u4fdd\u8bc1\u5bf9\u8c61\u662f jQuery \u5bf9\u8c61\uff0c\u800c\u4e0d\u662f JS \u65b9\u5f0f\u83b7\u5f97\u7684 DOM \u5bf9\u8c61\uff0c\u4e8c\u8005\u7684 API \u65b9\u6cd5\u4e0d\u80fd\u6df7\u5408\u4f7f\u7528\uff0c\u82e5\u60f3\u4f7f\u7528\u5bf9\u65b9\u7684 API\uff0c\u9700\u8981\u8fdb\u884c\u5bf9\u8c61\u7684\u8f6c\u6362\u3002 JS \u7684 DOM \u5bf9\u8c61\u8f6c\u6362\u6210 jQuery \u5bf9\u8c61 ```js //$(JS \u7684 DOM \u5bf9\u8c61); // JS\u65b9\u5f0f\uff0c\u901a\u8fc7id\u5c5e\u6027\u503c\u83b7\u53d6div\u5143\u7d20 let jsDiv = document.getElementById(\"div\"); alert(jsDiv.innerHTML); //alert(jsDiv.html()); JS\u5bf9\u8c61\u65e0\u6cd5\u4f7f\u7528jQuery\u91cc\u9762\u7684\u529f\u80fd // \u5c06 JS \u5bf9\u8c61\u8f6c\u6362\u4e3ajQuery\u5bf9\u8c61 let jq = $(jsDiv); alert(jq.html()); ``` jQuery \u5bf9\u8c61\u8f6c\u6362\u6210 JS \u5bf9\u8c61 ```js / jQuery \u5bf9\u8c61[\u7d22\u5f15]; jQuery \u5bf9\u8c61.get(\u7d22\u5f15); / // jQuery\u65b9\u5f0f\uff0c\u901a\u8fc7id\u5c5e\u6027\u503c\u83b7\u53d6div\u5143\u7d20 let jqDiv = $(\"#div\"); alert(jqDiv.html()); // alert(jqDiv.innerHTML); jQuery\u5bf9\u8c61\u65e0\u6cd5\u4f7f\u7528JS\u91cc\u9762\u7684\u529f\u80fd // \u5c06 jQuery\u5bf9\u8c61\u8f6c\u6362\u4e3aJS\u5bf9\u8c61 let js = jqDiv[0]; alert(js.innerHTML); ```","title":"2.1\u3001JS\u5bf9\u8c61\u548cJQuery\u5bf9\u8c61\u8f6c\u6362"},{"location":"jquery/#22","text":"\u5e38\u7528\u7684\u4e8b\u4ef6 \u5728 jQuery \u4e2d\u5c06\u4e8b\u4ef6\u5c01\u88c5\u6210\u4e86\u5bf9\u5e94\u7684\u65b9\u6cd5\u3002\u53bb\u6389\u4e86 JS \u4e2d\u7684 .on \u8bed\u6cd5\u3002 \u4ee3\u7801\u5b9e\u73b0 ```html \u4e8b\u4ef6\u7684\u4f7f\u7528 //\u5355\u51fb\u4e8b\u4ef6 $(\"#btn\").click(function(){ alert(\"\u70b9\u6211\u5e72\u561b?\"); }); //\u83b7\u53d6\u7126\u70b9\u4e8b\u4ef6 // $(\"#input\").focus(function(){ // alert(\"\u4f60\u8981\u8f93\u5165\u6570\u636e\u5566...\"); // }); //\u5931\u53bb\u7126\u70b9\u4e8b\u4ef6 $(\"#input\").blur(function(){ alert(\"\u4f60\u8f93\u5165\u5b8c\u6210\u5566...\"); }); ```","title":"2.2\u3001\u4e8b\u4ef6\u7684\u57fa\u672c\u4f7f\u7528"},{"location":"jquery/#23","text":"\u7ed1\u5b9a\u4e8b\u4ef6 //jQuery \u5bf9\u8c61.on(\u4e8b\u4ef6\u540d\u79f0,\u6267\u884c\u7684\u529f\u80fd); js //\u7ed9btn1\u6309\u94ae\u7ed1\u5b9a\u5355\u51fb\u4e8b\u4ef6 $(\"#btn1\").on(\"click\",function(){ alert(\"\u70b9\u6211\u5e72\u561b?\"); }); \u89e3\u7ed1\u4e8b\u4ef6 \u5982\u679c\u4e0d\u6307\u5b9a\u4e8b\u4ef6\u540d\u79f0\uff0c\u5219\u4f1a\u628a\u8be5\u5bf9\u8c61\u7ed1\u5b9a\u7684\u6240\u6709\u4e8b\u4ef6\u90fd\u89e3\u7ed1 //jQuery \u5bf9\u8c61.off(\u4e8b\u4ef6\u540d\u79f0); js //\u901a\u8fc7btn2\u89e3\u7ed1btn1\u7684\u5355\u51fb\u4e8b\u4ef6 $(\"#btn2\").on(\"click\",function(){ $(\"#btn1\").off(\"click\"); });","title":"2.3\u3001\u4e8b\u4ef6\u7684\u7ed1\u5b9a\u548c\u89e3\u7ed1"},{"location":"jquery/#24","text":"\u4e8b\u4ef6\u7684\u5207\u6362\uff1a\u9700\u8981\u7ed9\u540c\u4e00\u4e2a\u5bf9\u8c61\u7ed1\u5b9a\u591a\u4e2a\u4e8b\u4ef6\uff0c\u800c\u4e14\u591a\u4e2a\u4e8b\u4ef6\u8fd8\u6709\u5148\u540e\u987a\u5e8f\u5173\u7cfb\u3002 \u65b9\u5f0f\u4e00\uff1a\u5355\u72ec\u5b9a\u4e49 $(\u5143\u7d20).\u4e8b\u4ef6\u65b9\u6cd5\u540d1(\u8981\u6267\u884c\u7684\u529f\u80fd); $(\u5143\u7d20).\u4e8b\u4ef6\u65b9\u6cd5\u540d2(\u8981\u6267\u884c\u7684\u529f\u80fd); js //\u65b9\u5f0f\u4e00 \u5355\u72ec\u5b9a\u4e49 $(\"#div\").mouseover(function(){ //\u80cc\u666f\u8272\uff1a\u7ea2\u8272 //$(\"#div\").css(\"background\",\"red\"); $(this).css(\"background\",\"red\"); }); $(\"#div\").mouseout(function(){ //\u80cc\u666f\u8272\uff1a\u84dd\u8272 //$(\"#div\").css(\"background\",\"blue\"); $(this).css(\"background\",\"blue\"); }); \u65b9\u5f0f\u4e8c\uff1a\u94fe\u5f0f\u5b9a\u4e49 $(\u5143\u7d20).\u4e8b\u4ef6\u65b9\u6cd5\u540d1(\u8981\u6267\u884c\u7684\u529f\u80fd) .\u4e8b\u4ef6\u65b9\u6cd5\u540d2(\u8981\u6267\u884c\u7684\u529f\u80fd); js //\u65b9\u5f0f\u4e8c \u94fe\u5f0f\u5b9a\u4e49 $(\"#div\").mouseover(function(){ $(this).css(\"background\",\"red\"); }).mouseout(function(){ $(this).css(\"background\",\"blue\"); });","title":"2.4\u3001\u4e8b\u4ef6\u7684\u5207\u6362"},{"location":"jquery/#25","text":"\u65b9\u5f0f\u4e00\uff1a\u4f20\u7edf\u65b9\u5f0f tex for(let i = 0; i < \u5bb9\u5668\u5bf9\u8c61\u957f\u5ea6; i++){ \u6267\u884c\u529f\u80fd; } js //\u65b9\u5f0f\u4e00\uff1a\u4f20\u7edf\u65b9\u5f0f $(\"#btn\").click(function(){ let lis = $(\"li\"); for(let i = 0 ; i < lis.length; i++) { alert(i + \":\" + lis[i].innerHTML); } }); \u65b9\u5f0f\u4e8c\uff1a\u5bf9\u8c61.each()\u65b9\u6cd5 tex \u5bb9\u5668\u5bf9\u8c61.each(function(index,ele){ \u6267\u884c\u529f\u80fd; }); js //\u65b9\u5f0f\u4e8c\uff1a\u5bf9\u8c61.each()\u65b9\u6cd5 $(\"#btn\").click(function(){ let lis = $(\"li\"); lis.each(function(index,ele){ alert(index + \":\" + ele.innerHTML); }); }); \u65b9\u5f0f\u4e09\uff1a$.each()\u65b9\u6cd5 tex $.each(\u5bb9\u5668\u5bf9\u8c61,function(index,ele){ \u6267\u884c\u529f\u80fd; }); js //\u65b9\u5f0f\u4e09\uff1a$.each()\u65b9\u6cd5 $(\"#btn\").click(function(){ let lis = $(\"li\"); $.each(lis,function(index,ele){ alert(index + \":\" + ele.innerHTML); }); }); \u65b9\u5f0f\u56db\uff1afor of\u8bed\u53e5 tex for(ele of \u5bb9\u5668\u5bf9\u8c61){ \u6267\u884c\u529f\u80fd; } js //\u65b9\u5f0f\u56db\uff1afor of \u8bed\u53e5\u904d\u5386: \u7c7b\u4f3c\u4e8ejava \u7684\u589e\u5f3afor \u5faa\u73af, \u662f\u539f\u59cbJS \u63d0\u4f9b\u7684\u529f\u80fd $(\"#btn\").click(function(){ let lis = $(\"li\"); for(ele of lis){ alert(ele.innerHTML); } });","title":"2.5\u3001\u904d\u5386\u64cd\u4f5c"},{"location":"jquery/#26","text":"JS \u5bf9\u8c61\u548c jQuery \u5bf9\u8c61\u76f8\u4e92\u8f6c\u6362 $(JS \u7684 DOM \u5bf9\u8c61)\uff1a\u5c06 JS \u5bf9\u8c61\u8f6c\u4e3a jQuery \u5bf9\u8c61\u3002 jQuery \u5bf9\u8c61[\u7d22\u5f15] jQuery \u5bf9\u8c61.get(\u7d22\u5f15)\uff1a\u5c06 jQuery \u5bf9\u8c61\u8f6c\u4e3a JS \u5bf9\u8c61\u3002 \u4e8b\u4ef6 \u5728 jQuery \u4e2d\u5c06\u4e8b\u4ef6\u5c01\u88c5\u6210\u4e86\u5bf9\u5e94\u7684\u65b9\u6cd5\u3002\u53bb\u6389\u4e86 JS \u4e2d\u7684 .on \u8bed\u6cd5\u3002 on(\u4e8b\u4ef6\u540d\u79f0,\u6267\u884c\u7684\u529f\u80fd)\uff1a\u7ed1\u5b9a\u4e8b\u4ef6\u3002 off(\u4e8b\u4ef6\u540d\u79f0)\uff1a\u89e3\u7ed1\u4e8b\u4ef6\u3002 \u904d\u5386 \u4f20\u7edf\u65b9\u5f0f\u3002 \u5bf9\u8c61.each() \u65b9\u6cd5\u3002 $.each() \u65b9\u6cd5\u3002 for of \u8bed\u53e5\u3002","title":"2.6\u3001\u5c0f\u7ed3"},{"location":"jquery/#3jquery","text":"","title":"3\u3001JQuery\u9009\u62e9\u5668"},{"location":"jquery/#31","text":"\u9009\u62e9\u5668\uff1a\u7c7b\u4f3c\u4e8e CSS \u7684\u9009\u62e9\u5668\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u83b7\u53d6\u5143\u7d20\u3002 \u4f8b\u5982\uff1aid \u9009\u62e9\u5668\u3001\u7c7b\u9009\u62e9\u5668\u3001\u5143\u7d20\u9009\u62e9\u5668\u3001\u5c5e\u6027\u9009\u62e9\u5668\u7b49\u7b49\u3002 jQuery \u4e2d\u9009\u62e9\u5668\u7684\u8bed\u6cd5\uff1a$(); \u4ee3\u7801\u5b9e\u73b0 ```html \u57fa\u672c\u9009\u62e9\u5668 div1 div2 div3 //1.\u5143\u7d20\u9009\u62e9\u5668 $(\"\u5143\u7d20\u7684\u540d\u79f0\") let divs = $(\"div\"); //alert(divs.length); //2.id\u9009\u62e9\u5668 $(\"#id\u7684\u5c5e\u6027\u503c\") let div1 = $(\"#div1\"); //alert(div1); //3.\u7c7b\u9009\u62e9\u5668 $(\".class\u7684\u5c5e\u6027\u503c\") let cls = $(\".cls\"); alert(cls.length); ```","title":"3.1\u3001\u57fa\u672c\u9009\u62e9\u5668"},{"location":"jquery/#32","text":"\u4ee3\u7801\u5b9e\u73b0 ```html \u5c42\u7ea7\u9009\u62e9\u5668 s1 s1-1 s1-2 s2 p1 p2 // 1. \u540e\u4ee3\u9009\u62e9\u5668 $(\"A B\"); A\u4e0b\u7684\u6240\u6709B(\u5305\u62ecB\u7684\u5b50\u7ea7) let spans1 = $(\"div span\"); //alert(spans1.length); // 2. \u5b50\u9009\u62e9\u5668 $(\"A > B\"); A\u4e0b\u7684\u6240\u6709B(\u4e0d\u5305\u62ecB\u7684\u5b50\u7ea7) let spans2 = $(\"div > span\"); //alert(spans2.length); // 3. \u5144\u5f1f\u9009\u62e9\u5668 $(\"A + B\"); A\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2aB let ps1 = $(\"div + p\"); //alert(ps1.length); // 4. \u5144\u5f1f\u9009\u62e9\u5668 $(\"A ~ B\"); A\u76f8\u90bb\u7684\u6240\u6709B let ps2 = $(\"div ~ p\"); alert(ps2.length); ```","title":"3.2\u3001\u5c42\u7ea7\u9009\u62e9\u5668"},{"location":"jquery/#33","text":"\u4ee3\u7801\u5b9e\u73b0 ```html \u5c5e\u6027\u9009\u62e9\u5668 //1.\u5c5e\u6027\u540d\u9009\u62e9\u5668 $(\"\u5143\u7d20[\u5c5e\u6027\u540d]\") let in1 = $(\"input[type]\"); //alert(in1.length); //2.\u5c5e\u6027\u503c\u9009\u62e9\u5668 $(\"\u5143\u7d20[\u5c5e\u6027\u540d=\u5c5e\u6027\u503c]\") let in2 = $(\"input[type='password']\"); alert(in2.length); ```","title":"3.3\u3001\u5c5e\u6027\u9009\u62e9\u5668"},{"location":"jquery/#34","text":"\u4ee3\u7801\u5b9e\u73b0 ```html \u8fc7\u6ee4\u5668\u9009\u62e9\u5668 div1 div2 div3 div4 // 1.\u9996\u5143\u7d20\u9009\u62e9\u5668 $(\"A:first\"); let div1 = $(\"div:first\"); //alert(div1.html()); // 2.\u5c3e\u5143\u7d20\u9009\u62e9\u5668 $(\"A:last\"); let div4 = $(\"div:last\"); //alert(div4.html()); // 3.\u975e\u5143\u7d20\u9009\u62e9\u5668 $(\"A:not(B)\"); let divs1 = $(\"div:not(#div2)\"); //alert(divs1.length); // 4.\u5076\u6570\u9009\u62e9\u5668 $(\"A:even\"); let divs2 = $(\"div:even\"); //alert(divs2.length); //alert(divs2[0].innerHTML); //alert(divs2[1].innerHTML); // 5.\u5947\u6570\u9009\u62e9\u5668 $(\"A:odd\"); let divs3 = $(\"div:odd\"); //alert(divs3.length); //alert(divs3[0].innerHTML); //alert(divs3[1].innerHTML); // 6.\u7b49\u4e8e\u7d22\u5f15\u9009\u62e9\u5668 $(\"A:eq(index)\"); let div3 = $(\"div:eq(2)\"); //alert(div3.html()); // 7.\u5927\u4e8e\u7d22\u5f15\u9009\u62e9\u5668 $(\"A:gt(index)\"); let divs4 = $(\"div:gt(1)\"); //alert(divs4.length); //alert(divs4[0].innerHTML); //alert(divs4[1].innerHTML); // 8.\u5c0f\u4e8e\u7d22\u5f15\u9009\u62e9\u5668 $(\"A:lt(index)\"); let divs5 = $(\"div:lt(2)\"); alert(divs5.length); alert(divs5[0].innerHTML); alert(divs5[1].innerHTML); ```","title":"3.4\u3001\u8fc7\u6ee4\u5668\u9009\u62e9\u5668"},{"location":"jquery/#35","text":"\u4ee3\u7801\u5b9e\u73b0 ```html \u8868\u5355\u5c5e\u6027\u9009\u62e9\u5668 \u7537 \u5973 \u5b66\u4e60 \u7761\u89c9 ---\u8bf7\u9009\u62e9--- \u672c\u79d1 \u4e13\u79d1 // 1.\u53ef\u7528\u5143\u7d20\u9009\u62e9\u5668 $(\"A:enabled\"); let ins1 = $(\"input:enabled\"); //alert(ins1.length); // 2.\u4e0d\u53ef\u7528\u5143\u7d20\u9009\u62e9\u5668 $(\"A:disabled\"); let ins2 = $(\"input:disabled\"); //alert(ins2.length); // 3.\u5355\u9009/\u590d\u9009\u6846\u88ab\u9009\u4e2d\u7684\u5143\u7d20 $(\"A:checked\"); let ins3 = $(\"input:checked\"); //alert(ins3.length); //alert(ins3[0].value); //alert(ins3[1].value); //alert(ins3[2].value); // 4.\u4e0b\u62c9\u6846\u88ab\u9009\u4e2d\u7684\u5143\u7d20 $(\"A:selected\"); let select = $(\"select option:selected\"); alert(select.html()); ```","title":"3.5\u3001\u8868\u5355\u5c5e\u6027\u9009\u62e9\u5668"},{"location":"jquery/#36","text":"\u9009\u62e9\u5668\uff1a\u7c7b\u4f3c\u4e8e CSS \u7684\u9009\u62e9\u5668\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u83b7\u53d6\u5143\u7d20\u3002 jQuery \u4e2d\u9009\u62e9\u5668\u7684\u8bed\u6cd5\uff1a$(); \u57fa\u672c\u9009\u62e9\u5668 $(\"\u5143\u7d20\u7684\u540d\u79f0\"); $(\"#id\u7684\u5c5e\u6027\u503c\"); $(\".class\u7684\u5c5e\u6027\u503c\"); \u5c42\u7ea7\u9009\u62e9\u5668 $(\"A B\"); $(\"A > B\"); \u5c5e\u6027\u9009\u62e9\u5668 $(\"A[\u5c5e\u6027\u540d]\"); $(\"A[\u5c5e\u6027\u540d=\u5c5e\u6027\u503c]\"); \u8fc7\u6ee4\u5668\u9009\u62e9\u5668 $(\"A:even\"); $(\"A:odd\"); \u8868\u5355\u5c5e\u6027\u9009\u62e9\u5668 $(\"A:disabled\"); $(\"A:checked\"); $(\"A:selected\");","title":"3.6\u3001\u5c0f\u7ed3"},{"location":"jquery/#4jquery_dom","text":"","title":"4\u3001JQuery DOM"},{"location":"jquery/#41","text":"\u5e38\u7528\u65b9\u6cd5 \u4ee3\u7801\u5b9e\u73b0 ```html \u64cd\u4f5c\u6587\u672c \u6211\u662fdiv //1. html() \u83b7\u53d6\u6807\u7b7e\u7684\u6587\u672c\u5185\u5bb9 $(\"#btn1\").click(function(){ //\u83b7\u53d6div\u6807\u7b7e\u7684\u6587\u672c\u5185\u5bb9 let value = $(\"#div\").html(); alert(value); }); //2. html(value) \u8bbe\u7f6e\u6807\u7b7e\u7684\u6587\u672c\u5185\u5bb9\uff0c\u89e3\u6790\u6807\u7b7e $(\"#btn2\").click(function(){ //\u8bbe\u7f6ediv\u6807\u7b7e\u7684\u6587\u672c\u5185\u5bb9 //$(\"#div\").html(\"\u6211\u771f\u7684\u662fdiv\"); $(\"#div\").html(\"<b>\u6211\u771f\u7684\u662fdiv</b>\"); }); ```","title":"4.1\u3001\u64cd\u4f5c\u6587\u672c"},{"location":"jquery/#42","text":"\u5e38\u7528\u65b9\u6cd5 \u4ee3\u7801\u5b9e\u73b0 ```html \u64cd\u4f5c\u5bf9\u8c61 \u5317\u4eac \u4e0a\u6d77 \u5e7f\u5dde \u6df1\u5733 \u52a0\u6cb9 \u96c4\u8d77 /* 1. $(\"\u5143\u7d20\") \u521b\u5efa\u6307\u5b9a\u5143\u7d20 2. append(element) \u6dfb\u52a0\u6210\u6700\u540e\u4e00\u4e2a\u5b50\u5143\u7d20\uff0c\u7531\u6dfb\u52a0\u8005\u5bf9\u8c61\u8c03\u7528 3. appendTo(element) \u6dfb\u52a0\u6210\u6700\u540e\u4e00\u4e2a\u5b50\u5143\u7d20\uff0c\u7531\u88ab\u6dfb\u52a0\u8005\u5bf9\u8c61\u8c03\u7528 4. prepend(element) \u6dfb\u52a0\u6210\u7b2c\u4e00\u4e2a\u5b50\u5143\u7d20\uff0c\u7531\u6dfb\u52a0\u8005\u5bf9\u8c61\u8c03\u7528 5. prependTo(element) \u6dfb\u52a0\u6210\u7b2c\u4e00\u4e2a\u5b50\u5143\u7d20\uff0c\u7531\u88ab\u6dfb\u52a0\u8005\u5bf9\u8c61\u8c03\u7528 6. before(element) \u6dfb\u52a0\u5230\u5f53\u524d\u5143\u7d20\u7684\u524d\u9762\uff0c\u4e24\u8005\u4e4b\u95f4\u662f\u5144\u5f1f\u5173\u7cfb\uff0c\u7531\u6dfb\u52a0\u8005\u5bf9\u8c61\u8c03\u7528 7. after(element) \u6dfb\u52a0\u5230\u5f53\u524d\u5143\u7d20\u7684\u540e\u9762\uff0c\u4e24\u8005\u4e4b\u95f4\u662f\u5144\u5f1f\u5173\u7cfb\uff0c\u7531\u6dfb\u52a0\u8005\u5bf9\u8c61\u8c03\u7528 8. remove() \u5220\u9664\u6307\u5b9a\u5143\u7d20(\u81ea\u5df1\u79fb\u9664\u81ea\u5df1) 9. empty() \u6e05\u7a7a\u6307\u5b9a\u5143\u7d20\u7684\u6240\u6709\u5b50\u5143\u7d20 */ // \u6309\u94ae\u4e00\uff1a\u6dfb\u52a0\u4e00\u4e2aspan\u5230div $(\"#btn1\").click(function(){ let span = $(\"<span>span</span>\"); $(\"#div\").append(span); }); //\u6309\u94ae\u4e8c\uff1a\u5c06\u52a0\u6cb9\u6dfb\u52a0\u5230\u57ce\u5e02\u5217\u8868\u6700\u4e0b\u65b9 $(\"#btn2\").click(function(){ //$(\"#city\").append($(\"#jy\")); $(\"#jy\").appendTo($(\"#city\")); }); //\u6309\u94ae\u4e09\uff1a\u5c06\u52a0\u6cb9\u6dfb\u52a0\u5230\u57ce\u5e02\u5217\u8868\u6700\u4e0a\u65b9 $(\"#btn3\").click(function(){ //$(\"#city\").prepend($(\"#jy\")); $(\"#jy\").prependTo($(\"#city\")); }); //\u6309\u94ae\u56db\uff1a\u5c06\u96c4\u8d77\u6dfb\u52a0\u5230\u4e0a\u6d77\u4e0b\u65b9 $(\"#btn4\").click(function(){ $(\"#sh\").after($(\"#xq\")); }); //\u6309\u94ae\u4e94\uff1a\u5c06\u96c4\u8d77\u6dfb\u52a0\u5230\u4e0a\u6d77\u4e0a\u65b9 $(\"#btn5\").click(function(){ $(\"#sh\").before($(\"#xq\")); }); //\u6309\u94ae\u516d\uff1a\u5c06\u96c4\u8d77\u5220\u9664 $(\"#btn6\").click(function(){ $(\"#xq\").remove(); }); //\u6309\u94ae\u4e03\uff1a\u5c06\u63cf\u8ff0\u5217\u8868\u5168\u90e8\u5220\u9664 $(\"#btn7\").click(function(){ $(\"#desc\").empty(); }); ```","title":"4.2\u3001\u64cd\u4f5c\u5bf9\u8c61"},{"location":"jquery/#43","text":"\u5e38\u7528\u65b9\u6cd5 \u4ee3\u7801\u5b9e\u73b0 ```html \u64cd\u4f5c\u6837\u5f0f .cls1{ background: pink; height: 30px; } \u6211\u662fdiv // 1.css(name) \u83b7\u53d6css\u6837\u5f0f $(\"#btn1\").click(function(){ alert($(\"#div\").css(\"border\")); }); // 2.css(name,value) \u8bbe\u7f6eCSS\u6837\u5f0f $(\"#btn2\").click(function(){ $(\"#div\").css(\"background\",\"blue\"); }); // 3.addClass(value) \u7ed9\u6307\u5b9a\u7684\u5bf9\u8c61\u6dfb\u52a0\u6837\u5f0f\u7c7b\u540d $(\"#btn3\").click(function(){ $(\"#div\").addClass(\"cls1\"); }); // 4.removeClass(value) \u7ed9\u6307\u5b9a\u7684\u5bf9\u8c61\u5220\u9664\u6837\u5f0f\u7c7b\u540d $(\"#btn4\").click(function(){ $(\"#div\").removeClass(\"cls1\"); }); // 5.toggleClass(value) \u5982\u679c\u6ca1\u6709\u6837\u5f0f\u7c7b\u540d\uff0c\u5219\u6dfb\u52a0\u3002\u5982\u679c\u6709\uff0c\u5219\u5220\u9664 $(\"#btn5\").click(function(){ $(\"#div\").toggleClass(\"cls1\"); }); ```","title":"4.3\u3001\u64cd\u4f5c\u6837\u5f0f"},{"location":"jquery/#44","text":"\u5e38\u7528\u65b9\u6cd5 \u4ee3\u7801\u5b9e\u73b0 ```html \u64cd\u4f5c\u5c5e\u6027 \u7537 \u5973 ---\u8bf7\u9009\u62e9--- \u672c\u79d1 \u4e13\u79d1 // 1.attr(name,[value]) \u83b7\u5f97/\u8bbe\u7f6e\u5c5e\u6027\u7684\u503c //\u6309\u94ae\u4e00\uff1a\u83b7\u53d6\u8f93\u5165\u6846\u7684id\u5c5e\u6027 $(\"#btn1\").click(function(){ alert($(\"#username\").attr(\"id\")); }); //\u6309\u94ae\u4e8c\uff1a\u7ed9\u8f93\u5165\u6846\u8bbe\u7f6evalue\u5c5e\u6027 $(\"#btn2\").click(function(){ $(\"#username\").attr(\"value\",\"hello...\"); }); // 2.prop(name,[value]) \u83b7\u5f97/\u8bbe\u7f6e\u5c5e\u6027\u7684\u503c(checked\uff0cselected) //\u6309\u94ae\u4e09\uff1a\u9009\u4e2d\u5973 $(\"#btn3\").click(function(){ $(\"#gender2\").prop(\"checked\",true); }); //\u6309\u94ae\u56db\uff1a\u9009\u4e2d\u672c\u79d1 $(\"#btn4\").click(function(){ $(\"#bk\").prop(\"selected\",true); }); ```","title":"4.4\u3001\u64cd\u4f5c\u5c5e\u6027"},{"location":"jquery/#45","text":"\u64cd\u4f5c\u6587\u672c html() html(\u2026)\uff1a\u83b7\u53d6\u6216\u8bbe\u7f6e\u6807\u7b7e\u7684\u6587\u672c\uff0c\u89e3\u6790\u6807\u7b7e\u3002 \u64cd\u4f5c\u5bf9\u8c61 $(\u201c\u5143\u7d20\u201d)\uff1a\u521b\u5efa\u6307\u5b9a\u5143\u7d20\u3002 append(element)\uff1a\u6dfb\u52a0\u6210\u6700\u540e\u4e00\u4e2a\u5b50\u5143\u7d20\uff0c\u7531\u6dfb\u52a0\u8005\u5bf9\u8c61\u8c03\u7528\u3002 prepend(element)\uff1a\u6dfb\u52a0\u6210\u7b2c\u4e00\u4e2a\u5b50\u5143\u7d20\uff0c\u7531\u6dfb\u52a0\u8005\u5bf9\u8c61\u8c03\u7528\u3002 before(element)\uff1a\u6dfb\u52a0\u5230\u5f53\u524d\u5143\u7d20\u7684\u524d\u9762\uff0c\u4e24\u8005\u4e4b\u95f4\u662f\u5144\u5f1f\u5173\u7cfb\uff0c\u7531\u6dfb\u52a0\u8005\u5bf9\u8c61\u8c03\u7528\u3002 after(element)\uff1a\u6dfb\u52a0\u5230\u5f53\u524d\u5143\u7d20\u7684\u540e\u9762\uff0c\u4e24\u8005\u4e4b\u95f4\u662f\u5144\u5f1f\u5173\u7cfb\uff0c\u7531\u6dfb\u52a0\u8005\u5bf9\u8c61\u8c03\u7528\u3002 remove()\uff1a\u5220\u9664\u6307\u5b9a\u5143\u7d20(\u81ea\u5df1\u79fb\u9664\u81ea\u5df1)\u3002 \u64cd\u4f5c\u6837\u5f0f addClass(value)\uff1a\u7ed9\u6307\u5b9a\u7684\u5bf9\u8c61\u6dfb\u52a0\u6837\u5f0f\u7c7b\u540d\u3002 removeClass(value)\uff1a\u7ed9\u6307\u5b9a\u7684\u5bf9\u8c61\u5220\u9664\u6837\u5f0f\u7c7b\u540d\u3002 \u64cd\u4f5c\u5c5e\u6027 attr(name,[value])\uff1a\u83b7\u5f97/\u8bbe\u7f6e\u5c5e\u6027\u7684\u503c\u3002 prop(name,[value])\uff1a\u83b7\u5f97/\u8bbe\u7f6e\u5c5e\u6027\u7684\u503c(checked\uff0cselected)\u3002","title":"4.5\u3001\u5c0f\u7ed3"},{"location":"jquery/#5","text":"","title":"5\u3001\u7efc\u5408\u6848\u4f8b \u590d\u9009\u6846"},{"location":"jquery/#51","text":"","title":"5.1\u3001\u6848\u4f8b\u6548\u679c"},{"location":"jquery/#52","text":"\u529f\u80fd\u5206\u6790 \u5168\u9009 \u4e3a\u5168\u9009\u6309\u94ae\u7ed1\u5b9a\u5355\u51fb\u4e8b\u4ef6\u3002 \u83b7\u53d6\u6240\u6709\u7684\u5546\u54c1\u9879\u590d\u9009\u6846\u5143\u7d20\uff0c\u4e3a\u5176\u6dfb\u52a0 checked \u5c5e\u6027\uff0c\u5c5e\u6027\u503c\u4e3a true\u3002 \u5168\u4e0d\u9009 \u4e3a\u5168\u4e0d\u9009\u6309\u94ae\u7ed1\u5b9a\u5355\u51fb\u4e8b\u4ef6\u3002 \u83b7\u53d6\u6240\u6709\u7684\u5546\u54c1\u9879\u590d\u9009\u6846\u5143\u7d20\uff0c\u4e3a\u5176\u6dfb\u52a0 checked \u5c5e\u6027\uff0c\u5c5e\u6027\u503c\u4e3a false\u3002 \u53cd\u9009 \u4e3a\u53cd\u9009\u6309\u94ae\u7ed1\u5b9a\u5355\u51fb\u4e8b\u4ef6 \u83b7\u53d6\u6240\u6709\u7684\u5546\u54c1\u9879\u590d\u9009\u6846\u5143\u7d20\uff0c\u4e3a\u5176\u6dfb\u52a0 checked \u5c5e\u6027\uff0c\u5c5e\u6027\u503c\u662f\u76ee\u524d\u76f8\u53cd\u7684\u72b6\u6001\u3002 \u4ee3\u7801\u5b9e\u73b0 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > \u590d\u9009\u6846 </ title > </ head > < body > < table id = \"tab1\" border = \"1\" width = \"800\" align = \"center\" > < tr > < th style = \"text-align: left\" > < input style = \"background:lightgreen\" id = \"selectAll\" type = \"button\" value = \"\u5168\u9009\" > < input style = \"background:lightgreen\" id = \"selectNone\" type = \"button\" value = \"\u5168\u4e0d\u9009\" > < input style = \"background:lightgreen\" id = \"reverse\" type = \"button\" value = \"\u53cd\u9009\" > </ th > < th > \u5206\u7c7bID </ th > < th > \u5206\u7c7b\u540d\u79f0 </ th > < th > \u5206\u7c7b\u63cf\u8ff0 </ th > < th > \u64cd\u4f5c </ th > </ tr > < tr > < td >< input type = \"checkbox\" class = \"item\" ></ td > < td > 1 </ td > < td > \u624b\u673a\u6570\u7801 </ td > < td > \u624b\u673a\u6570\u7801\u7c7b\u5546\u54c1 </ td > < td >< a href = \"\" > \u4fee\u6539 </ a > | < a href = \"\" > \u5220\u9664 </ a ></ td > </ tr > < tr > < td >< input type = \"checkbox\" class = \"item\" ></ td > < td > 2 </ td > < td > \u7535\u8111\u529e\u516c </ td > < td > \u7535\u8111\u529e\u516c\u7c7b\u5546\u54c1 </ td > < td >< a href = \"\" > \u4fee\u6539 </ a > | < a href = \"\" > \u5220\u9664 </ a ></ td > </ tr > < tr > < td >< input type = \"checkbox\" class = \"item\" ></ td > < td > 3 </ td > < td > \u978b\u9774\u7bb1\u5305 </ td > < td > \u978b\u9774\u7bb1\u5305\u7c7b\u5546\u54c1 </ td > < td >< a href = \"\" > \u4fee\u6539 </ a > | < a href = \"\" > \u5220\u9664 </ a ></ td > </ tr > < tr > < td >< input type = \"checkbox\" class = \"item\" ></ td > < td > 4 </ td > < td > \u5bb6\u5c45\u9970\u54c1 </ td > < td > \u5bb6\u5c45\u9970\u54c1\u7c7b\u5546\u54c1 </ td > < td >< a href = \"\" > \u4fee\u6539 </ a > | < a href = \"\" > \u5220\u9664 </ a ></ td > </ tr > </ table > </ body > < script src = \"js/jquery-3.3.1.min.js\" ></ script > < script > //\u5168\u9009 //1.\u4e3a\u5168\u9009\u6309\u94ae\u6dfb\u52a0\u5355\u51fb\u4e8b\u4ef6 $ ( \"#selectAll\" ). click ( function (){ //2.\u83b7\u53d6\u6240\u6709\u7684\u5546\u54c1\u590d\u9009\u6846\u5143\u7d20\uff0c\u4e3a\u5176\u6dfb\u52a0checked\u5c5e\u6027\uff0c\u5c5e\u6027\u503ctrue $ ( \".item\" ). prop ( \"checked\" , true ); }); //\u5168\u4e0d\u9009 //1.\u4e3a\u5168\u4e0d\u9009\u6309\u94ae\u6dfb\u52a0\u5355\u51fb\u4e8b\u4ef6 $ ( \"#selectNone\" ). click ( function (){ //2.\u83b7\u53d6\u6240\u6709\u7684\u5546\u54c1\u590d\u9009\u6846\u5143\u7d20\uff0c\u4e3a\u5176\u6dfb\u52a0checked\u5c5e\u6027\uff0c\u5c5e\u6027\u503cfalse $ ( \".item\" ). prop ( \"checked\" , false ); }); //\u53cd\u9009 //1.\u4e3a\u53cd\u9009\u6309\u94ae\u6dfb\u52a0\u5355\u51fb\u4e8b\u4ef6 $ ( \"#reverse\" ). click ( function (){ //2.\u83b7\u53d6\u6240\u6709\u7684\u5546\u54c1\u590d\u9009\u6846\u5143\u7d20\uff0c\u4e3a\u5176\u6dfb\u52a0checked\u5c5e\u6027\uff0c\u5c5e\u6027\u503c\u662f\u76ee\u524d\u76f8\u53cd\u7684\u72b6\u6001 let items = $ ( \".item\" ); items . each ( function (){ $ ( this ). prop ( \"checked\" , ! $ ( this ). prop ( \"checked\" )); }); }); </ script > </ html >","title":"5.2\u3001\u5206\u6790\u548c\u5b9e\u73b0"},{"location":"jquery/#6","text":"","title":"6\u3001\u7efc\u5408\u6848\u4f8b \u968f\u673a\u56fe\u7247"},{"location":"jquery/#61","text":"","title":"6.1\u3001\u6848\u4f8b\u6548\u679c"},{"location":"jquery/#62","text":"\u529f\u80fd\u5206\u6790 \u51c6\u5907\u4e00\u4e2a\u6570\u7ec4 \u5b9a\u4e49\u8ba1\u6570\u5668 \u5b9a\u4e49\u5b9a\u65f6\u5668\u5bf9\u8c61 \u5b9a\u4e49\u56fe\u7247\u8def\u5f84\u53d8\u91cf \u4e3a\u5f00\u59cb\u6309\u94ae\u7ed1\u5b9a\u5355\u51fb\u4e8b\u4ef6 \u8bbe\u7f6e\u6309\u94ae\u72b6\u6001 \u8bbe\u7f6e\u5b9a\u65f6\u5668\uff0c\u5faa\u73af\u663e\u793a\u56fe\u7247 \u5faa\u73af\u83b7\u53d6\u56fe\u7247\u8def\u5f84 \u5c06\u5f53\u524d\u56fe\u7247\u663e\u793a\u5230\u5c0f\u56fe\u7247\u4e0a \u8ba1\u6570\u5668\u81ea\u589e \u4ee3\u7801\u5b9e\u73b0 ```html \u968f\u673a\u56fe\u7247 //1.\u51c6\u5907\u4e00\u4e2a\u6570\u7ec4 let imgs = [ \"img/01.jpg\", \"img/02.jpg\", \"img/03.jpg\", \"img/04.jpg\", \"img/05.jpg\", \"img/06.jpg\", \"img/07.jpg\", \"img/08.jpg\", \"img/09.jpg\", \"img/10.jpg\"]; //2.\u5b9a\u4e49\u8ba1\u6570\u5668\u53d8\u91cf let count = 0; //3.\u58f0\u660e\u5b9a\u65f6\u5668\u5bf9\u8c61 let time = null; //4.\u58f0\u660e\u56fe\u7247\u8def\u5f84\u53d8\u91cf let imgSrc = \"\"; //5.\u4e3a\u5f00\u59cb\u6309\u94ae\u7ed1\u5b9a\u5355\u51fb\u4e8b\u4ef6 $(\"#startBtn\").click(function(){ //6.\u8bbe\u7f6e\u6309\u94ae\u72b6\u6001 //\u7981\u7528\u5f00\u59cb\u6309\u94ae $(\"#startBtn\").prop(\"disabled\",true); //\u542f\u7528\u505c\u6b62\u6309\u94ae $(\"#stopBtn\").prop(\"disabled\",false); //7.\u8bbe\u7f6e\u5b9a\u65f6\u5668\uff0c\u5faa\u73af\u663e\u793a\u56fe\u7247 time = setInterval(function(){ //8.\u5faa\u73af\u83b7\u53d6\u56fe\u7247\u8def\u5f84 let index = count % imgs.length; // 0%10=0 1%10=1 2%10=2 .. 9%10=9 10%10=0 //9.\u5c06\u5f53\u524d\u56fe\u7247\u663e\u793a\u5230\u5c0f\u56fe\u7247\u4e0a imgSrc = imgs[index]; $(\"#small\").prop(\"src\",imgSrc); //10.\u8ba1\u6570\u5668\u81ea\u589e count++; },10); }); ```","title":"6.2\u3001\u52a8\u6001\u5207\u6362\u5c0f\u56fe\u7684\u5206\u6790\u548c\u5b9e\u73b0"},{"location":"jquery/#63","text":"\u529f\u80fd\u5206\u6790 \u4e3a\u505c\u6b62\u6309\u94ae\u7ed1\u5b9a\u5355\u51fb\u4e8b\u4ef6 \u53d6\u6d88\u5b9a\u65f6\u5668 \u8bbe\u7f6e\u6309\u94ae\u72b6\u6001 \u5c06\u56fe\u7247\u663e\u793a\u5230\u5927\u56fe\u7247\u4e0a \u4ee3\u7801\u5b9e\u73b0 ```js //11.\u4e3a\u505c\u6b62\u6309\u94ae\u7ed1\u5b9a\u5355\u51fb\u4e8b\u4ef6 $(\"#stopBtn\").click(function(){ //12.\u53d6\u6d88\u5b9a\u65f6\u5668 clearInterval(time); // 13 . \u8bbe\u7f6e\u6309\u94ae\u72b6\u6001 // \u542f\u7528\u5f00\u59cb\u6309\u94ae $( \"#startBtn\" ) . prop ( \"disabled\" , false ); // \u7981\u7528\u505c\u6b62\u6309\u94ae $( \"#stopBtn\" ) . prop ( \"disabled\" , true ); // 14 . \u5c06\u56fe\u7247\u663e\u793a\u5230\u5927\u56fe\u7247\u4e0a $( \"#big\" ) . prop ( \"src\" , imgSrc ); $( \"#big\" ) . prop ( \"style\" , \"width: 400px; height: 400px;\" ); }); ```","title":"6.3\u3001\u663e\u793a\u5927\u56fe\u7684\u5206\u6790\u548c\u5b9e\u73b0"},{"location":"redis/day01/","text":"1. Redis \u7b80\u4ecb \u00b6 Redis \u7684\u4e0b\u8f7d\u4e0e\u5b89\u88c5 \u00b6 \u672c\u8bfe\u7a0b\u6240\u793a\uff0c\u5747\u57fa\u4e8eCenter OS7\u5b89\u88c5Redis\u3002 0 ) \u5982\u679c wget \u547d\u4ee4\u627e\u4e0d\u5230 yum - y install wget 0 ) \u5982\u679cmake \u62a5\u9519 \u5b89\u88c5 c \u8bed\u8a00\u7f16\u8bd1\u73af\u5883 yum install gcc - c ++ (1)\u4e0b\u8f7dRedis \u4e0b\u8f7d\u5b89\u88c5\u5305\uff1a wget http://download.redis.io/releases/redis-5.0.0.tar.gz \u89e3\u538b\u5b89\u88c5\u5305\uff1a tar -xvf redis-5.0.0.tar.gz \u7f16\u8bd1\uff08\u5728\u89e3\u538b\u7684\u76ee\u5f55\u4e2d\u6267\u884c\uff09\uff1a make \u5b89\u88c5\uff08\u5728\u89e3\u538b\u7684\u76ee\u5f55\u4e2d\u6267\u884c\uff09\uff1a make install \uff082\uff09\u5b89\u88c5 Redis redis-server\uff0c\u670d\u52a1\u5668\u542f\u52a8\u547d\u4ee4 \u5ba2\u6237\u7aef\u542f\u52a8\u547d\u4ee4 redis-cli\uff0credis\u6838\u5fc3\u914d\u7f6e\u6587\u4ef6 redis.conf\uff0cRDB\u6587\u4ef6\u68c0\u67e5\u5de5\u5177\uff08\u5feb\u7167\u6301\u4e45\u5316\u6587\u4ef6\uff09 redis-check-dump\uff0cAOF\u6587\u4ef6\u4fee\u590d\u5de5\u5177 redis-check-aof Redis\u670d\u52a1\u5668\u542f\u52a8 \u00b6 Redis\u670d\u52a1\u5668\u542f\u52a8 \u00b6 \u542f\u52a8\u670d\u52a1\u5668\u2014\u2014\u53c2\u6570\u542f\u52a8 redis-server [ --port port ] \u8303\u4f8b redis-server --port 6379 \u542f\u52a8\u670d\u52a1\u5668\u2014\u2014\u914d\u7f6e\u6587\u4ef6\u542f\u52a8 redis-server config_file_name \u8303\u4f8b redis-server redis.conf Redis\u5ba2\u6237\u7aef\u542f\u52a8 \u00b6 \u542f\u52a8\u5ba2\u6237\u7aef redis-cli [ -h host ] [ -p port ] \u8303 \u4f8b redis-cli -h 61 .129.65.248 -p 6384 \u6ce8\u610f\uff1a\u670d\u52a1\u5668\u542f\u52a8\u6307\u5b9a\u7aef\u53e3\u4f7f\u7528\u7684\u662f--port\uff0c\u5ba2\u6237\u7aef\u542f\u52a8\u6307\u5b9a\u7aef\u53e3\u4f7f\u7528\u7684\u662f-p\u3002-\u7684\u6570\u91cf\u4e0d\u540c\u3002 Redis\u57fa\u7840\u73af\u5883\u8bbe\u7f6e\u7ea6\u5b9a \u00b6 \u521b\u5efa\u914d\u7f6e\u6587\u4ef6\u5b58\u50a8\u76ee\u5f55 mkdir conf \u521b\u5efa\u670d\u52a1\u5668\u6587\u4ef6\u5b58\u50a8\u76ee\u5f55\uff08\u5305\u542b\u65e5\u5fd7\u3001\u6570\u636e\u3001\u4e34\u65f6\u914d\u7f6e\u6587\u4ef6\u7b49\uff09 mkdir data \u521b\u5efa\u5feb\u901f\u8bbf\u95ee\u94fe\u63a5 ln -s redis-5.0.0 redis \u914d\u7f6e\u6587\u4ef6\u542f\u52a8\u4e0e\u5e38\u7528\u914d\u7f6e \u00b6 # \u67e5\u770b\u914d\u7f6e\u547d\u4ee4 cat redis.conf | grep -v '#' | grep -v '^$' # \u90a3\u4e9bip \u80fd\u8bbf\u95eeredis #bind 127.0.0.1 # \u7aef\u53e3\u53f7 port 6379 # \u8d85\u65f6\u65f6\u95f4 #timeout 0 # \u662f\u5426\u540e\u53f0\u542f\u52a8 daemonize yes # \u65e5\u5fd7\u6587\u4ef6 logfile \"log_6379.log\" # \u6570\u636e\u6587\u4ef6\u4f4d\u7f6e dir /usr/local/redis/data \u670d\u52a1\u5668\u7aef\u8bbe\u5b9a \u00b6 \u8bbe\u7f6e\u670d\u52a1\u5668\u4ee5\u5b88\u62a4\u8fdb\u7a0b\u7684\u65b9\u5f0f\u8fd0\u884c\uff0c\u5f00\u542f\u540e\u670d\u52a1\u5668\u63a7\u5236\u53f0\u4e2d\u5c06\u6253\u5370\u670d\u52a1\u5668\u8fd0\u884c\u4fe1\u606f\uff08\u540c\u65e5\u5fd7\u5185\u5bb9\u76f8\u540c\uff09 daemonize yes | no \u7ed1\u5b9a\u4e3b\u673a\u5730\u5740 bind ip \u8bbe\u7f6e\u670d\u52a1\u5668\u7aef\u53e3 port port \u8bbe\u7f6e\u670d\u52a1\u5668\u6587\u4ef6\u4fdd\u5b58\u5730\u5740 dir path \u5ba2\u6237\u7aef\u914d\u7f6e \u00b6 \u670d\u52a1\u5668\u5141\u8bb8\u5ba2\u6237\u7aef\u8fde\u63a5\u6700\u5927\u6570\u91cf\uff0c\u9ed8\u8ba40\uff0c\u8868\u793a\u65e0\u9650\u5236\u3002\u5f53\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u8fbe\u4e0a\u9650\u540e\uff0cRedis\u4f1a\u62d2\u7edd\u65b0\u7684\u8fde\u63a5 maxclients count \u5ba2\u6237\u7aef\u95f2\u7f6e\u7b49\u5f85\u6700\u5927\u65f6\u957f\uff0c\u8fbe\u5230\u6700\u5927\u503c\u540e\u5173\u95ed\u5bf9\u5e94\u8fde\u63a5\u3002\u5982\u9700\u5173\u95ed\u8be5\u529f\u80fd\uff0c\u8bbe\u7f6e\u4e3a 0 timeout seconds \u65e5\u5fd7\u914d\u7f6e \u00b6 \u8bbe\u7f6e\u670d\u52a1\u5668\u4ee5\u6307\u5b9a\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b loglevel debug | verbose | notice | warning \u65e5\u5fd7\u8bb0\u5f55\u6587\u4ef6\u540d logfile filename \u6ce8\u610f\uff1a\u65e5\u5fd7\u7ea7\u522b\u5f00\u53d1\u671f\u8bbe\u7f6e\u4e3averbose\u5373\u53ef\uff0c\u751f\u4ea7\u73af\u5883\u4e2d\u914d\u7f6e\u4e3anotice\uff0c\u7b80\u5316\u65e5\u5fd7\u8f93\u51fa\u91cf\uff0c\u964d\u4f4e\u5199\u65e5\u5fd7IO\u7684\u9891\u5ea6\u3002 Redis\u57fa\u672c\u64cd\u4f5c \u00b6 \u547d\u4ee4\u884c\u6a21\u5f0f\u5de5\u5177\u4f7f\u7528\u601d\u8003 \u00b6 \u529f\u80fd\u6027\u547d\u4ee4 \u5e2e\u52a9\u4fe1\u606f\u67e5\u9605 \u9000\u51fa\u6307\u4ee4 \u6e05\u9664\u5c4f\u5e55\u4fe1\u606f \u4fe1\u606f\u8bfb\u5199 \u00b6 \u8bbe\u7f6e key\uff0cvalue \u6570\u636e set key value \u8303\u4f8b set name itheima \u6839\u636e key \u67e5\u8be2\u5bf9\u5e94\u7684 value\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de\u7a7a\uff08nil\uff09 get key \u8303\u4f8b get name \u5e2e\u52a9\u4fe1\u606f \u00b6 \u83b7\u53d6\u547d\u4ee4\u5e2e\u52a9\u6587\u6863 help [ command ] \u8303\u4f8b help set \u83b7\u53d6\u7ec4\u4e2d\u6240\u6709\u547d\u4ee4\u4fe1\u606f\u540d\u79f0 help [ @group-name ] \u8303\u4f8b help @string \u9000\u51fa\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\u6a21\u5f0f \u9000\u51fa\u5ba2\u6237\u7aef quit exit \u5feb\u6377\u952e Ctrl+C 1.6.4 redis\u5165\u95e8\u603b\u7ed3 \u00b6 \u5230\u8fd9\u91cc\uff0cRedis \u5165\u95e8\u7684\u76f8\u5173\u77e5\u8bc6\uff0c\u6211\u4eec\u5c31\u5168\u90e8\u5b66\u4e60\u5b8c\u4e86\uff0c\u518d\u6765\u56de\u987e\u4e00\u4e0b\uff0c\u8fd9\u4e2a\u90e8\u5206\u6211\u4eec\u4e3b\u8981\u8bb2\u89e3\u4e86\u54ea\u4e9b\u5185\u5bb9\u5462\uff1f \u9996\u5148\uff0c\u6211\u4eec\u5bf9Redis\u8fdb\u884c\u4e86\u4e00\u4e2a\u7b80\u5355\u4ecb\u7ecd\uff0c\u5305\u62ecNoSQL\u7684\u6982\u5ff5\u3001Redis\u7684\u6982\u5ff5\u7b49\u3002 \u7136\u540e\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86Redis \u7684\u4e0b\u8f7d\u4e0e\u5b89\u88c5\u3002\u5305\u62ec\u4e0b\u8f7d\u4e0e\u5b89\u88c5\u3001\u670d\u52a1\u5668\u4e0e\u5ba2\u6237\u7aef\u542f\u52a8\u3001\u4ee5\u53ca\u76f8\u5173\u914d\u7f6e\u6587\u4ef6\uff083\u7c7b\uff09\u3002 \u6700\u540e\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86Redis \u7684\u57fa\u672c\u64cd\u4f5c\u3002\u5305\u62ec\u6570\u636e\u8bfb\u5199\u3001\u9000\u51fa\u4e0e\u5e2e\u52a9\u4fe1\u606f\u83b7\u53d6\u3002 2. \u6570\u636e\u7c7b\u578b \u00b6 2.1 Redis \u6570\u636e\u7c7b\u578b(5\u79cd\u5e38\u7528) \u00b6 \u57fa\u4e8e\u4ee5\u4e0a\u6570\u636e\u7279\u5f81\u6211\u4eec\u8fdb\u884c\u5206\u6790\uff0c\u6700\u7ec8\u5f97\u51fa\u6765\u6211\u4eec\u7684Redis\u4e2d\u8981\u8bbe\u8ba15\u79cd \u6570\u636e\u7c7b\u578b\uff1a string\u3001hash\u3001list\u3001set\u3001sorted_set/zset\uff08\u5e94\u7528\u6027\u8f83\u4f4e\uff09 2.2 string\u6570\u636e\u7c7b\u578b \u00b6 \u5728\u5b66\u4e60\u7b2c\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\u4e4b\u524d\uff0c\u5148\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u4e00\u4e0b\uff0c\u5728\u968f\u540e\u8fd9\u90e8\u5206\u5185\u5bb9\u7684\u5b66\u4e60\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u6bcf\u4e00\u79cd\u6570\u636e\u7c7b\u578b\u90fd\u5206\u6210\u4e09\u5757\u6765\u8bb2\uff1a\u9996\u5148\u662f\u8bb2\u4e0b\u5b83\u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u63a5\u4e0b\u6765\u8bb2\u4e00\u4e9b\u5b83\u7684\u6269\u5c55\u64cd\u4f5c\uff0c\u6700\u540e\u6211\u4eec\u4f1a\u53bb\u505a\u4e00\u4e2a\u5c0f\u7684\u6848\u4f8b\u5206\u6790\u3002 2.2.1Redis \u6570\u636e\u5b58\u50a8\u683c\u5f0f \u00b6 \u5728\u5b66\u4e60string\u8fd9\u4e2a\u6570\u636e\u5f62\u5f0f\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u8981\u660e\u767dstring\u5230\u5e95\u662f\u4fee\u9970\u4ec0\u4e48\u7684\u3002\u6211\u4eec\u77e5\u9053redis \u81ea\u8eab\u662f\u4e00\u4e2a Map\uff0c\u5176\u4e2d\u6240\u6709\u7684\u6570\u636e\u90fd\u662f\u91c7\u7528 key : value \u7684\u5f62\u5f0f\u5b58\u50a8\u3002 \u5bf9\u4e8e\u8fd9\u79cd\u7ed3\u6784\u6765\u8bf4\uff0c\u6211\u4eec\u7528\u6765\u5b58\u50a8\u6570\u636e\u4e00\u5b9a\u662f\u4e00\u4e2a\u503c\u524d\u9762\u5bf9\u5e94\u4e00\u4e2a\u540d\u79f0\u3002\u6211\u4eec\u901a\u8fc7\u540d\u79f0\u6765\u8bbf\u95ee\u540e\u9762\u7684\u503c\u3002\u6309\u7167\u8fd9\u79cd\u5f62\u52bf\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u51fa\u6765\u6211\u4eec\u7684\u5b58\u50a8\u683c\u5f0f\u3002\u524d\u9762\u8fd9\u4e00\u90e8\u5206\u6211\u4eec\u79f0\u4e3akey\u3002\u540e\u9762\u7684\u4e00\u90e8\u5206\u79f0\u4e3avalue\uff0c\u800c\u6211\u4eec\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4ed6\u4e00\u5b9a\u662f\u4fee\u9970value\u7684\u3002 \u6570\u636e\u7c7b\u578b\u6307\u7684\u662f\u5b58\u50a8\u7684\u6570\u636e\u7684\u7c7b\u578b\uff0c\u4e5f\u5c31\u662f value \u90e8\u5206\u7684\u7c7b\u578b\uff0ckey \u90e8\u5206\u6c38\u8fdc\u90fd\u662f\u5b57\u7b26\u4e32\u3002 2.2.2 string \u7c7b\u578b \u00b6 \uff081\uff09\u5b58\u50a8\u7684\u6570\u636e\uff1a\u5355\u4e2a\u6570\u636e\uff0c\u6700\u7b80\u5355\u7684\u6570\u636e\u5b58\u50a8\u7c7b\u578b\uff0c\u4e5f\u662f\u6700\u5e38\u7528\u7684\u6570\u636e\u5b58\u50a8\u7c7b\u578b\u3002 string\uff0c\u4ed6\u5c31\u662f\u5b58\u4e00\u4e2a\u5b57\u7b26\u4e32\u513f\uff0c\u6ce8\u610f\u662fvalue\u90a3\u4e00\u90e8\u5206\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b83\u662fredis\u4e2d\u6700\u57fa\u672c\u3001\u6700\u7b80\u5355\u7684\u5b58\u50a8\u6570\u636e\u7684\u683c\u5f0f\u3002 \uff082\uff09\u5b58\u50a8\u6570\u636e\u7684\u683c\u5f0f\uff1a\u4e00\u4e2a\u5b58\u50a8\u7a7a\u95f4\u4fdd\u5b58\u4e00\u4e2a\u6570\u636e \u6bcf\u4e00\u4e2a\u7a7a\u95f4\u4e2d\u53ea\u80fd\u4fdd\u5b58\u4e00\u4e2a\u5b57\u7b26\u4e32\u4fe1\u606f\uff0c\u8fd9\u4e2a\u4fe1\u606f\u91cc\u8fb9\u5982\u679c\u662f\u5b58\u7684\u7eaf\u6570\u5b57\uff0c\u4ed6\u4e5f\u80fd\u5f53\u6570\u5b57\u4f7f\u7528\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b\uff0c\u8fd9\u662f\u6211\u4eec\u7684\u6570\u636e\u7684\u5b58\u50a8\u7a7a\u95f4\u3002 \uff083\uff09\u5b58\u50a8\u5185\u5bb9\uff1a\u901a\u5e38\u4f7f\u7528\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u5b57\u7b26\u4e32\u4ee5\u6574\u6570\u7684\u5f62\u5f0f\u5c55\u793a\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u6570\u5b57\u64cd\u4f5c\u4f7f\u7528. \u4e00\u4e2akey\u5bf9\u4e00\u4e2avalue\uff0c\u800c\u8fd9\u4e2aitheima\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684string\u7c7b\u578b\uff0c\u5f53\u7136\u5b83\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u7eaf\u6570\u5b57\u7684\u683c\u5f0f\u3002 2.2.3 string \u7c7b\u578b\u6570\u636e\u7684\u57fa\u672c\u64cd\u4f5c \u00b6 \uff081\uff09\u57fa\u7840\u6307\u4ee4 \u6dfb\u52a0/\u4fee\u6539\u6570\u636e\u6dfb\u52a0/\u4fee\u6539\u6570\u636e set key value \u83b7\u53d6\u6570\u636e get key \u5220\u9664\u6570\u636e del key \u5224\u5b9a\u6027\u6dfb\u52a0\u6570\u636e setnx key value \u6dfb\u52a0/\u4fee\u6539\u591a\u4e2a\u6570\u636e mset key1 value1 key2 value2 \u2026 \u83b7\u53d6\u591a\u4e2a\u6570\u636e mget key1 key2 \u2026 \u83b7\u53d6\u6570\u636e\u5b57\u7b26\u4e2a\u6570\uff08\u5b57\u7b26\u4e32\u957f\u5ea6\uff09 strlen key \u8ffd\u52a0\u4fe1\u606f\u5230\u539f\u59cb\u4fe1\u606f\u540e\u90e8\uff08\u5982\u679c\u539f\u59cb\u4fe1\u606f\u5b58\u5728\u5c31\u8ffd\u52a0\uff0c\u5426\u5219\u65b0\u5efa\uff09 append key value \uff082\uff09\u5355\u6570\u636e\u64cd\u4f5c\u4e0e\u591a\u6570\u636e\u64cd\u4f5c\u7684\u9009\u62e9\u4e4b\u60d1 \u5373set \u4e0emset\u7684\u5173\u7cfb\u3002\u8fd9\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u6765\u8bf4\uff0c\u6ca1\u6709\u4ec0\u4e48\u4f60\u5e94\u8be5\u9009\u54ea\u4e2a\uff0c\u800c\u662f\u4ed6\u4eec\u81ea\u5df1\u7684\u7279\u5f81\u662f\u4ec0\u4e48\uff0c\u4f60\u8981\u6839\u636e\u8fd9\u4e2a\u7279\u5f81\u53bb\u6bd4\u5bf9\u4f60\u7684\u4e1a\u52a1\uff0c\u770b\u770b\u7a76\u7adf\u9002\u7528\u4e8e\u54ea\u4e2a\u3002 \u5047\u5982\u8bf4\u8fd9\u662f\u6211\u4eec\u73b0\u5728\u7684\u670d\u52a1\u5668\uff0c\u4ed6\u8981\u5411redis\u8981\u6570\u636e\u7684\u8bdd\uff0c\u5b83\u4f1a\u53d1\u51fa\u4e00\u6761\u6307\u4ee4\u3002\u90a3\u4e48\u5f53\u8fd9\u6761\u6307\u4ee4\u53d1\u8fc7\u6765\u7684\u65f6\u5019\uff0c\u6bd4\u5982\u8bf4\u662f\u8fd9\u4e2aset\u6307\u4ee4\u8fc7\u6765\uff0c\u90a3\u4e48\u5b83\u4f1a\u628a\u8fd9\u4e2a\u7ed3\u679c\u8fd4\u56de\u7ed9\u4f60\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u8981\u601d\u8003\u8fd9\u91cc\u8fb9\u4e00\u5171\u7ecf\u8fc7\u4e86\u591a\u957f\u65f6\u95f4\u3002 \u9996\u5148\uff0c\u53d1\u9001set\u6307\u4ee4\u8981\u65f6\u95f4\uff0c\u8fd9\u662f\u7f51\u7edc\u7684\u4e00\u4e2a\u65f6\u95f4\uff0c\u63a5\u4e0b\u6765redis\u8981\u53bb\u8fd0\u884c\u8fd9\u4e2a\u6307\u4ee4\u8981\u6d88\u8017\u65f6\u95f4\uff0c\u6700\u7ec8\u628a\u8fd9\u4e2a\u7ed3\u679c\u8fd4\u56de\u7ed9\u4f60\u53c8\u6709\u4e00\u4e2a\u65f6\u95f4\uff0c\u8fd9\u4e2a\u65f6\u95f4\u53c8\u662f\u4e00\u4e2a\u7f51\u7edc\u7684\u65f6\u95f4\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a\u4e00\u4e2a\u6307\u4ee4\u53d1\u9001\u7684\u8fc7\u7a0b\u4e2d\u9700\u8981\u6d88\u8017\u8fd9\u6837\u7684\u65f6\u95f4. \u4f46\u662f\u5982\u679c\u8bf4\u73b0\u5728\u4e0d\u662f\u4e00\u6761\u6307\u4ee4\u4e86\uff0c\u4f60\u8981\u53d13\u4e2aset\u7684\u8bdd\uff0c\u8fd8\u8981\u591a\u957f\u65f6\u95f4\u5462\uff1f\u5bf9\u5e94\u7684\u53d1\u9001\u65f6\u95f4\u8981\u4e583\u4e86\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e09\u4e2a\u5355\u6761\u6307\u4ee4,\u800c\u8fd0\u884c\u7684\u64cd\u4f5c\u65f6\u95f4\u5462\uff0c\u5b83\u4e5f\u8981\u4e583\u4e86\uff0c\u4f46\u6700\u7ec8\u8fd4\u56de\u7684\u4e5f\u8981\u53d13\u6b21\uff0c\u6240\u4ee5\u8fd9\u8fb9\u4e5f\u8981\u4e583\u3002 \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u7ed3\u8bba\uff1a\u5355\u6307\u4ee4\u53d13\u6761\u5b83\u9700\u8981\u7684\u65f6\u95f4\uff0c\u5047\u5b9a\u4ed6\u4eec\u4e24\u4e2a\u4e00\u6837\uff0c\u662f6\u4e2a\u7f51\u7edc\u65f6\u95f4\u52a03\u4e2a\u5904\u7406\u65f6\u95f4\uff0c\u5982\u679c\u6211\u4eec\u628a\u5b83\u5408\u6210\u4e00\u4e2amset\u5462\uff0c\u6211\u4eec\u60f3\u4e00\u60f3\u3002 \u5047\u5982\u8bf4\u7528\u591a\u6307\u4ee4\u53d13\u4e2a\u6307\u4ee4\u7684\u8bdd\uff0c\u5176\u5b9e\u53ea\u9700\u8981\u53d1\u4e00\u6b21\u5c31\u884c\u4e86\u3002\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u7ed3\u8bba\uff0c\u591a\u6307\u4ee4\u53d13\u4e2a\u6307\u4ee4\u7684\u8bdd\uff0c\u5176\u5b9e\u5b83\u662f\u4e24\u4e2a\u7f51\u7edc\u65f6\u95f4\u52a0\u4e0a3\u4e2aredis\u7684\u64cd\u4f5c\u65f6\u95f4\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u5199\u4e00\u4e2a\u5c0f\u52a0\u53f7\u5462\uff0c\u5c31\u662f\u56e0\u4e3a\u6bd5\u7adf\u53d1\u7684\u4fe1\u606f\u91cf\u53d8\u5927\u4e86\uff0c\u6240\u4ee5\u7f51\u7edc\u65f6\u95f4\u6709\u53ef\u80fd\u4f1a\u53d8\u957f\u3002 \u90a3\u4e48\u901a\u8fc7\u8fd9\u5f20\u56fe\uff0c\u4f60\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u7ed3\u8bba\uff0c\u6211\u4eec\u5355\u6307\u4ee4\u548c\u591a\u6307\u4ee4\u4ed6\u4eec\u7684\u5dee\u522b\u5c31\u5728\u4e8e\u4f60\u53d1\u9001\u7684\u6b21\u6570\u662f\u591a\u8fd8\u662f\u5c11\u3002\u5f53\u4f60\u5f71\u54cd\u7684\u6570\u636e\u6bd4\u8f83\u5c11\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u4ee5\u7528\u5355\u6307\u4ee4\uff0c\u4e5f\u53ef\u4ee5\u7528\u591a\u6307\u4ee4\u3002\u4f46\u662f\u4e00\u65e6\u8fd9\u4e2a\u91cf\u5927\u4e86\uff0c\u4f60\u5c31\u8981\u9009\u62e9\u591a\u6307\u4ee4\u4e86\uff0c\u4ed6\u7684\u6548\u7387\u4f1a\u9ad8\u4e00\u4e9b\u3002 2.3 string \u7c7b\u578b\u6570\u636e\u7684\u6269\u5c55\u64cd\u4f5c \u00b6 2.3.1 string \u7c7b\u578b\u6570\u636e\u7684\u6269\u5c55\u64cd\u4f5c \u00b6 \u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00string\u7684\u6269\u5c55\u64cd\u4f5c\uff0c\u5206\u6210\u4e24\u5927\u5757\uff1a\u4e00\u5757\u662f\u5bf9\u6570\u5b57\u8fdb\u884c\u64cd\u4f5c\u7684\uff0c\u7b2c\u4e8c\u5757\u662f\u5bf9\u6211\u4eec\u7684key\u7684\u65f6\u95f4\u8fdb\u884c\u64cd\u4f5c\u7684\u3002 \u8bbe\u7f6e\u6570\u503c\u6570\u636e\u589e\u52a0\u6307\u5b9a\u8303\u56f4\u7684\u503c incr key incrby key increment incrbyfloat key increment \u8bbe\u7f6e\u6570\u503c\u6570\u636e\u51cf\u5c11\u6307\u5b9a\u8303\u56f4\u7684\u503c decr key decrby key increment \u8bbe\u7f6e\u6570\u636e\u5177\u6709\u6307\u5b9a\u7684\u751f\u547d\u5468\u671f setex key seconds value psetex key milliseconds value 2.3.2 string \u7c7b\u578b\u6570\u636e\u64cd\u4f5c\u7684\u6ce8\u610f\u4e8b\u9879 \u00b6 (1)\u6570\u636e\u64cd\u4f5c\u4e0d\u6210\u529f\u7684\u53cd\u9988\u4e0e\u6570\u636e\u6b63\u5e38\u64cd\u4f5c\u4e4b\u95f4\u7684\u5dee\u5f02 \u8868\u793a\u8fd0\u884c\u7ed3\u679c\u662f\u5426\u6210\u529f (integer) 0 \u2192 false \u5931\u8d25 (integer) 1 \u2192 true \u6210\u529f \u8868\u793a\u8fd0\u884c\u7ed3\u679c\u503c (integer) 3 \u2192 3 3\u4e2a (integer) 1 \u2192 1 1\u4e2a (2)\u6570\u636e\u672a\u83b7\u53d6\u5230\u65f6\uff0c\u5bf9\u5e94\u7684\u6570\u636e\u4e3a\uff08nil\uff09\uff0c\u7b49\u540c\u4e8enull (3)\u6570\u636e\u6700\u5927\u5b58\u50a8\u91cf\uff1a512MB (4)string\u5728redis\u5185\u90e8\u5b58\u50a8\u9ed8\u8ba4\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5f53\u9047\u5230\u589e\u51cf\u7c7b\u64cd\u4f5cincr\uff0cdecr\u65f6\u4f1a\u8f6c\u6210\u6570\u503c\u578b\u8fdb\u884c\u8ba1\u7b97 (5)\u6309\u6570\u503c\u8fdb\u884c\u64cd\u4f5c\u7684\u6570\u636e\uff0c\u5982\u679c\u539f\u59cb\u6570\u636e\u4e0d\u80fd\u8f6c\u6210\u6570\u503c\uff0c\u6216\u8d85\u8d8a\u4e86redis \u6570\u503c\u4e0a\u9650\u8303\u56f4\uff0c\u5c06\u62a5\u9519 9223372036854775807\uff08java\u4e2dLong\u578b\u6570\u636e\u6700\u5927\u503c\uff0cLong.MAX_VALUE\uff09 (6)redis\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u662f\u539f\u5b50\u6027\u7684\uff0c\u91c7\u7528\u5355\u7ebf\u7a0b\u5904\u7406\u6240\u6709\u4e1a\u52a1\uff0c\u547d\u4ee4\u662f\u4e00\u4e2a\u4e00\u4e2a\u6267\u884c\u7684\uff0c\u56e0\u6b64\u65e0\u9700\u8003\u8651\u5e76\u53d1\u5e26\u6765\u7684\u6570\u636e\u5f71\u54cd. 2.4string\u5e94\u7528\u573a\u666f\u4e0ekey\u547d\u540d\u7ea6\u5b9a \u00b6 2.4.1 \u5e94\u7528\u573a\u666f \u00b6 \u5b83\u7684\u5e94\u7528\u573a\u666f\u5728\u4e8e\uff1a\u4e3b\u9875\u9ad8\u9891\u8bbf\u95ee\u4fe1\u606f\u663e\u793a\u63a7\u5236\uff0c\u4f8b\u5982\u65b0\u6d6a\u5fae\u535a\u5927V\u4e3b\u9875\u663e\u793a\u7c89\u4e1d\u6570\u4e0e\u5fae\u535a\u6570\u91cf\u3002 \u6211\u4eec\u6765\u601d\u8003\u4e00\u4e0b\uff1a\u8fd9\u4e9b\u4fe1\u606f\u662f\u4e0d\u662f\u4f60\u8fdb\u5165\u5927V\u7684\u9875\u9762\u513f\u4ee5\u540e\u5c31\u8981\u8bfb\u53d6\u8fd9\u5199\u4fe1\u606f\u7684\u554a\uff0c\u90a3\u8fd9\u79cd\u4fe1\u606f\u4e00\u5b9a\u8981\u5b58\u50a8\u5230\u6211\u4eec\u7684redis\u4e2d\uff0c\u56e0\u4e3a\u4ed6\u7684\u8bbf\u95ee\u91cf\u592a\u9ad8\u4e86\uff01\u90a3\u8fd9\u79cd\u6570\u636e\u5e94\u8be5\u600e\u4e48\u5b58\u5462\uff1f\u6211\u4eec\u6765\u4e00\u5757\u513f\u770b\u4e00\u4e0b\u65b9\u6848\uff01 2.4.2 \u89e3\u51b3\u65b9\u6848 \u00b6 \uff081\uff09\u5728redis\u4e2d\u4e3a\u5927V\u7528\u6237\u8bbe\u5b9a\u7528\u6237\u4fe1\u606f\uff0c\u4ee5\u7528\u6237\u4e3b\u952e\u548c\u5c5e\u6027\u503c\u4f5c\u4e3akey\uff0c\u540e\u53f0\u8bbe\u5b9a\u5b9a\u65f6\u5237\u65b0\u7b56\u7565\u5373\u53ef\u3002 eg: user:id:3506728370:fans \u2192 12210947 eg: user:id:3506728370:blogs \u2192 6164 eg: user:id:3506728370:focuses \u2192 83 \uff082\uff09\u4e5f\u53ef\u4ee5\u4f7f\u7528json\u683c\u5f0f\u4fdd\u5b58\u6570\u636e eg: user:id:3506728370 \u2192 {\u201cfans\u201d\uff1a12210947\uff0c\u201cblogs\u201d\uff1a6164\uff0c\u201c focuses \u201d\uff1a83 } \uff083\uff09 key \u7684\u8bbe\u7f6e\u7ea6\u5b9a \u6570\u636e\u5e93\u4e2d\u7684\u70ed\u70b9\u6570\u636ekey\u547d\u540d\u60ef\u4f8b \u8868\u540d \u4e3b\u952e\u540d \u4e3b\u952e\u503c \u5b57\u6bb5\u540d eg1\uff1a order id 29437595 name eg2\uff1a equip id 390472345 type eg3\uff1a news id 202004150 title 2.5 hash\u7684\u57fa\u672c\u64cd\u4f5c \u00b6 \u4e0b\u9762\u6211\u4eec\u6765\u5b66\u4e60\u7b2c\u4e8c\u4e2a\u6570\u636e\u7c7b\u578bhash\u3002 2.5.1 \u6570\u636e\u5b58\u50a8\u7684\u56f0\u60d1 \u00b6 \u5bf9\u8c61\u7c7b\u6570\u636e\u7684\u5b58\u50a8\u5982\u679c\u5177\u6709\u8f83\u9891\u7e41\u7684\u66f4\u65b0\u9700\u6c42\u64cd\u4f5c\u4f1a\u663e\u5f97\u7b28\u91cd\uff01 \u5728\u6b63\u5f0f\u5b66\u4e60\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e2a\u5173\u4e8e\u6570\u636e\u5b58\u50a8\u7684\u56f0\u60d1\uff1a \u6bd4\u5982\u8bf4\u524d\u9762\u6211\u4eec\u7528\u4ee5\u4e0a\u5f62\u5f0f\u5b58\u4e86\u6570\u636e\uff0c\u5982\u679c\u6211\u4eec\u7528\u5355\u6761\u53bb\u5b58\u7684\u8bdd\uff0c\u5b83\u5b58\u7684\u6761\u6570\u4f1a\u5f88\u591a\u3002\u4f46\u5982\u679c\u6211\u4eec\u7528json\u683c\u5f0f\uff0c\u5b83\u5b58\u4e00\u6761\u6570\u636e\u5c31\u591f\u4e86\u3002\u95ee\u9898\u6765\u4e86\uff0c\u5047\u5982\u8bf4\u73b0\u5728\u7c89\u4e1d\u6570\u91cf\u53d1\u751f\u53d8\u5316\u4e86\uff0c\u4f60\u8981\u628a\u6574\u4e2a\u503c\u90fd\u6539\u4e86\u3002\u4f46\u662f\u7528\u5355\u6761\u5b58\u7684\u8bdd\u5c31\u4e0d\u5b58\u5728\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ea\u9700\u8981\u6539\u5176\u4e2d\u4e00\u4e2a\u5c31\u884c\u4e86\u3002\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u60f3\uff0c\u6709\u6ca1\u6709\u4e00\u79cd\u65b0\u7684\u5b58\u50a8\u7ed3\u6784\uff0c\u80fd\u5e2e\u6211\u4eec\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462\u3002 \u6211\u4eec\u4e00\u5757\u513f\u6765\u5206\u6790\u4e00\u4e0b\uff1a \u5982\u4e0a\u56fe\u6240\u793a\uff1a\u5355\u6761\u7684\u8bdd\u662f\u5bf9\u5e94\u7684\u6570\u636e\u5728\u540e\u9762\u653e\u7740\u3002\u4ed4\u7ec6\u89c2\u5bdf\uff1a\u6211\u4eec\u770b\u5de6\u8fb9\u662f\u4e0d\u662f\u957f\u5f97\u90fd\u4e00\u6a21\u4e00\u6837\u554a\uff0c\u90fd\u662f\u5bf9\u5e94\u7684\u8868\u540d\u3001ID\u7b49\u7684\u4e00\u7cfb\u5217\u7684\u4e1c\u897f\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u53f3\u8fb9\u7ea2\u6846\u4e2d\u7684\u8fd9\u4e2a\u533a\u57df\u7ed9\u4ed6\u5c01\u8d77\u6765\u3002 \u90a3\u5982\u679c\u8981\u662f\u8fd9\u6837\u7684\u5f62\u5f0f\u7684\u8bdd\uff0c\u5982\u4e0b\u56fe\uff0c\u6211\u4eec\u628a\u5b83\u4e00\u5408\u5e76\uff0c\u5e76\u628a\u53f3\u8fb9\u7684\u4e1c\u897f\u7ed9\u4ed6\u53d8\u6210\u8fd9\u4e2a\u683c\u5f0f\uff0c\u8fd9\u4e0d\u5c31\u884c\u4e86\u5417\uff1f \u8fd9\u4e2a\u56fe\u5176\u5b9e\u5927\u5bb6\u5e76\u4e0d\u964c\u751f\uff0c\u7b2c\u4e00\uff0c\u4f60\u524d\u9762\u5b66\u8fc7\u4e00\u4e2a\u4e1c\u897f\u53ebhashmap\u4e0d\u5c31\u8fd9\u683c\u5f0f\u5417\uff1f\u7b2c\u4e8c\uff0credis\u81ea\u8eab\u4e0d\u4e5f\u662f\u8fd9\u683c\u5f0f\u5417\uff1f\u90a3\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u6ce8\u610f\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u8981\u8bb2\u7684\u7b2c\u4e8c\u79cd\u683c\u5f0f\uff0chash\u3002 \u5728\u53f3\u8fb9\u5bf9\u5e94\u7684\u503c\uff0c\u6211\u4eec\u5c31\u5b58\u5177\u4f53\u7684\u503c\uff0c\u90a3\u5de6\u8fb9\u513f\u8fd9\u5c31\u662f\u6211\u4eec\u7684key\u3002\u95ee\u9898\u6765\u4e86\uff0c\u90a3\u4e2d\u95f4\u7684\u8fd9\u4e00\u5757\u53eb\u4ec0\u4e48\u5462\uff1f\u8fd9\u4e2a\u4e1c\u897f\u6211\u4eec\u7ed9\u4ed6\u8d77\u4e2a\u540d\u513f\uff0c\u53eb\u505afield\u5b57\u6bb5\u3002\u90a3\u4e48\u53f3\u8fb9\u513f\u6574\u4f53\u8fd9\u5757\u513f\u7a7a\u95f4\u6211\u4eec\u5c31\u79f0\u4e3ahash\uff0c\u4e5f\u5c31\u662f\u8bf4hash\u662f\u5b58\u4e86\u4e00\u4e2akey value\u7684\u5b58\u50a8\u7a7a\u95f4\u3002 2.5.2 hash \u7c7b\u578b \u00b6 \u65b0\u7684\u5b58\u50a8\u9700\u6c42\uff1a\u5bf9\u4e00\u7cfb\u5217\u5b58\u50a8\u7684\u6570\u636e\u8fdb\u884c\u7f16\u7ec4\uff0c\u65b9\u4fbf\u7ba1\u7406\uff0c\u5178\u578b\u5e94\u7528\u5b58\u50a8\u5bf9\u8c61\u4fe1\u606f \u9700\u8981\u7684\u5b58\u50a8\u7ed3\u6784\uff1a\u4e00\u4e2a\u5b58\u50a8\u7a7a\u95f4\u4fdd\u5b58\u591a\u4e2a\u952e\u503c\u5bf9\u6570\u636e hash\u7c7b\u578b\uff1a\u5e95\u5c42\u4f7f\u7528\u54c8\u5e0c\u8868\u7ed3\u6784\u5b9e\u73b0\u6570\u636e\u5b58\u50a8 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u8fd9\u79cd\u7ed3\u6784\u53eb\u505ahash\uff0c\u5de6\u8fb9\u4e00\u4e2akey\uff0c\u5bf9\u53f3\u8fb9\u4e00\u4e2a\u5b58\u50a8\u7a7a\u95f4\u3002\u8fd9\u91cc\u8981\u660e\u786e\u4e00\u70b9\uff0c\u53f3\u8fb9\u8fd9\u5757\u513f\u5b58\u50a8\u7a7a\u95f4\u53ebhash\uff0c\u4e5f\u5c31\u662f\u8bf4hash\u662f\u6307\u7684\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\uff0c\u4ed6\u6307\u7684\u4e0d\u662f\u4e00\u4e2a\u6570\u636e\uff0c\u662f\u8fd9\u91cc\u8fb9\u7684\u4e00\u5806\u6570\u636e\uff0c\u90a3\u4e48\u5b83\u5e95\u5c42\u5462\uff0c\u662f\u7528hash\u8868\u7684\u7ed3\u6784\u6765\u5b9e\u73b0\u7684\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff1a \u5982\u679cfield\u6570\u91cf\u8f83\u5c11\uff0c\u5b58\u50a8\u7ed3\u6784\u4f18\u5316\u4e3a\u7c7b\u6570\u7ec4\u7ed3\u6784 \u5982\u679cfield\u6570\u91cf\u8f83\u591a\uff0c\u5b58\u50a8\u7ed3\u6784\u4f7f\u7528HashMap\u7ed3\u6784 2.5.3 hash \u7c7b\u578b\u6570\u636e\u7684\u57fa\u672c\u64cd\u4f5c \u00b6 \u6dfb\u52a0/\u4fee\u6539\u6570\u636e hset key field value \u83b7\u53d6\u6570\u636e hget key field hgetall key \u5220\u9664\u6570\u636e hdel key field1 [ field2 ] \u8bbe\u7f6efield\u7684\u503c\uff0c\u5982\u679c\u8be5field\u5b58\u5728\u5219\u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c hsetnx key field value \u6dfb\u52a0/\u4fee\u6539\u591a\u4e2a\u6570\u636e hmset key field1 value1 field2 value2 \u2026 \u83b7\u53d6\u591a\u4e2a\u6570\u636e hmget key field1 field2 \u2026 \u83b7\u53d6\u54c8\u5e0c\u8868\u4e2d\u5b57\u6bb5\u7684\u6570\u91cf hlen key \u83b7\u53d6\u54c8\u5e0c\u8868\u4e2d\u662f\u5426\u5b58\u5728\u6307\u5b9a\u7684\u5b57\u6bb5 hexists key field 2.6 hash\u7684\u62d3\u5c55\u64cd\u4f5c \u00b6 \u5728\u770b\u5b8chash\u7684\u57fa\u672c\u64cd\u4f5c\u540e\uff0c\u6211\u4eec\u518d\u6765\u770b\u4ed6\u7684\u62d3\u5c55\u64cd\u4f5c\uff0c\u4ed6\u7684\u62d3\u5c55\u64cd\u4f5c\u76f8\u5bf9\u6bd4\u8f83\u7b80\u5355\uff1a 2.6.1 hash \u7c7b\u578b\u6570\u636e\u6269\u5c55\u64cd\u4f5c \u00b6 \u83b7\u53d6\u54c8\u5e0c\u8868\u4e2d\u6240\u6709\u7684\u5b57\u6bb5\u540d\u6216\u5b57\u6bb5\u503c hkeys key hvals key \u8bbe\u7f6e\u6307\u5b9a\u5b57\u6bb5\u7684\u6570\u503c\u6570\u636e\u589e\u52a0\u6307\u5b9a\u8303\u56f4\u7684\u503c hincrby key field increment hincrbyfloat key field increment 2.6.2 hash\u7c7b\u578b\u6570\u636e\u64cd\u4f5c\u7684\u6ce8\u610f\u4e8b\u9879 \u00b6 (1)hash\u7c7b\u578b\u4e2dvalue\u53ea\u80fd\u5b58\u50a8\u5b57\u7b26\u4e32\uff0c\u4e0d\u5141\u8bb8\u5b58\u50a8\u5176\u4ed6\u6570\u636e\u7c7b\u578b\uff0c\u4e0d\u5b58\u5728\u5d4c\u5957\u73b0\u8c61\u3002\u5982\u679c\u6570\u636e\u672a\u83b7\u53d6\u5230\uff0c\u5bf9\u5e94\u7684\u503c\u4e3a\uff08nil\uff09\u3002 (2\uff09\u6bcf\u4e2a hash \u53ef\u4ee5\u5b58\u50a8 2^32 - 1 \u4e2a\u952e\u503c\u5bf9 hash\u7c7b\u578b\u5341\u5206\u8d34\u8fd1\u5bf9\u8c61\u7684\u6570\u636e\u5b58\u50a8\u5f62\u5f0f\uff0c\u5e76\u4e14\u53ef\u4ee5\u7075\u6d3b\u6dfb\u52a0\u5220\u9664\u5bf9\u8c61\u5c5e\u6027\u3002\u4f46hash\u8bbe\u8ba1\u521d\u8877\u4e0d\u662f\u4e3a\u4e86\u5b58\u50a8\u5927\u91cf\u5bf9\u8c61\u800c\u8bbe\u8ba1 \u7684\uff0c\u5207\u8bb0\u4e0d\u53ef\u6ee5\u7528\uff0c\u66f4\u4e0d\u53ef\u4ee5\u5c06hash\u4f5c\u4e3a\u5bf9\u8c61\u5217\u8868\u4f7f\u7528\u3002 (3)hgetall \u64cd\u4f5c\u53ef\u4ee5\u83b7\u53d6\u5168\u90e8\u5c5e\u6027\uff0c\u5982\u679c\u5185\u90e8field\u8fc7\u591a\uff0c\u904d\u5386\u6574\u4f53\u6570\u636e\u6548\u7387\u5c31\u5f88\u4f1a\u4f4e\uff0c\u6709\u53ef\u80fd\u6210\u4e3a\u6570\u636e\u8bbf\u95ee\u74f6\u9888\u3002 2.7 hash\u5e94\u7528\u573a\u666f \u00b6 2.7.1 \u5e94\u7528\u573a\u666f \u00b6 \u53cc11\u6d3b\u52a8\u65e5\uff0c\u9500\u552e\u624b\u673a\u5145\u503c\u5361\u7684\u5546\u5bb6\u5bf9\u79fb\u52a8\u3001\u8054\u901a\u3001\u7535\u4fe1\u768430\u5143\u300150\u5143\u3001100\u5143\u5546\u54c1\u63a8\u51fa\u62a2\u8d2d\u6d3b\u52a8\uff0c\u6bcf\u79cd\u5546\u54c1\u62a2\u8d2d\u4e0a\u96501000 \u5f20\u3002 \u4e5f\u5c31\u662f\u5546\u5bb6\u6709\u4e86\uff0c\u5546\u54c1\u6709\u4e86\uff0c\u6570\u91cf\u6709\u4e86\u3002\u6700\u7ec8\u6211\u4eec\u7684\u7528\u6237\u4e70\u4e1c\u897f\u5c31\u662f\u5728\u6539\u53d8\u8fd9\u4e2a\u6570\u91cf\u3002\u90a3\u4f60\u8bf4\u8fd9\u4e2a\u7ed3\u6784\u5e94\u8be5\u600e\u4e48\u5b58\u5462\uff1f\u5bf9\u5e94\u7684\u5546\u5bb6\u7684ID\u4f5c\u4e3akey\uff0c\u7136\u540e\u8fd9\u4e9b\u5145\u503c\u5361\u7684ID\u4f5c\u4e3afield\uff0c\u6700\u540e\u8fd9\u4e9b\u6570\u91cf\u4f5c\u4e3avalue\u3002\u800c\u6211\u4eec\u6240\u8c13\u7684\u64cd\u4f5c\u662f\u5176\u5b9e\u5c31\u662fincrea\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u53ea\u4e0d\u8fc7\u4f60\u4f20\u8d1f\u503c\u5c31\u884c\u4e86\u3002\u770b\u4e00\u770b\u5bf9\u5e94\u7684\u89e3\u51b3\u65b9\u6848\uff1a 2.7.2 \u89e3\u51b3\u65b9\u6848 \u00b6 \u4ee5\u5546\u5bb6id\u4f5c\u4e3akey \u5c06\u53c2\u4e0e\u62a2\u8d2d\u7684\u5546\u54c1id\u4f5c\u4e3afield \u5c06\u53c2\u4e0e\u62a2\u8d2d\u7684\u5546\u54c1\u6570\u91cf\u4f5c\u4e3a\u5bf9\u5e94\u7684value \u62a2\u8d2d\u65f6\u4f7f\u7528\u964d\u503c\u7684\u65b9\u5f0f\u63a7\u5236\u4ea7\u54c1\u6570\u91cf \u6ce8\u610f\uff1a\u5b9e\u9645\u4e1a\u52a1\u4e2d\u8fd8\u6709\u8d85\u5356\u7b49\u5b9e\u9645\u95ee\u9898\uff0c\u8fd9\u91cc\u4e0d\u505a\u8ba8\u8bba 2.8 list\u57fa\u672c\u64cd\u4f5c \u00b6 \u524d\u9762\u6211\u4eec\u5b58\u6570\u636e\u7684\u65f6\u5019\u5462\uff0c\u5355\u4e2a\u6570\u636e\u4e5f\u80fd\u5b58\uff0c\u591a\u4e2a\u6570\u636e\u4e5f\u80fd\u5b58\uff0c\u4f46\u662f\u8fd9\u91cc\u9762\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5b58\u591a\u4e2a\u6570\u636e\u7528hash\u7684\u65f6\u5019\u5b83\u662f\u6ca1\u6709\u987a\u5e8f\u7684\u3002\u6211\u4eec\u5e73\u65f6\u64cd\u4f5c\uff0c\u5b9e\u9645\u4e0a\u6570\u636e\u5f88\u591a\u60c5\u51b5\u4e0b\u90fd\u662f\u6709\u987a\u5e8f\u7684\uff0c\u90a3\u6709\u6ca1\u6709\u4e00\u79cd\u80fd\u591f\u7528\u6765\u5b58\u50a8\u5e26\u6709\u987a\u5e8f\u7684\u8fd9\u79cd\u6570\u636e\u6a21\u578b\u5462\uff0clist\u5c31\u4e13\u95e8\u6765\u5e72\u8fd9\u4e8b\u513f\u3002 2.8.1 list \u7c7b\u578b \u00b6 \u6570\u636e\u5b58\u50a8\u9700\u6c42\uff1a\u5b58\u50a8\u591a\u4e2a\u6570\u636e\uff0c\u5e76\u5bf9\u6570\u636e\u8fdb\u5165\u5b58\u50a8\u7a7a\u95f4\u7684\u987a\u5e8f\u8fdb\u884c\u533a\u5206 \u9700\u8981\u7684\u5b58\u50a8\u7ed3\u6784\uff1a\u4e00\u4e2a\u5b58\u50a8\u7a7a\u95f4\u4fdd\u5b58\u591a\u4e2a\u6570\u636e\uff0c\u4e14\u901a\u8fc7\u6570\u636e\u53ef\u4ee5\u4f53\u73b0\u8fdb\u5165\u987a\u5e8f list\u7c7b\u578b\uff1a\u4fdd\u5b58\u591a\u4e2a\u6570\u636e\uff0c\u5e95\u5c42\u4f7f\u7528\u53cc\u5411\u94fe\u8868\u5b58\u50a8\u7ed3\u6784\u5b9e\u73b0 \u5148\u6765\u901a\u8fc7\u4e00\u5f20\u56fe\uff0c\u56de\u5fc6\u4e00\u4e0b\u987a\u5e8f\u8868\u3001\u94fe\u8868\u3001\u53cc\u5411\u94fe\u8868\u3002 list\u5bf9\u5e94\u7684\u5b58\u50a8\u7ed3\u6784\u662f\u4ec0\u4e48\u5462\uff1f\u91cc\u8fb9\u5b58\u7684\u8fd9\u4e2a\u4e1c\u897f\u662f\u4e2a\u5217\u8868\uff0c\u4ed6\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u540d\u79f0\u3002\u5c31\u662fkey\u5b58\u4e00\u4e2alist\u7684\u8fd9\u6837\u7ed3\u6784\u3002\u5bf9\u5e94\u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u4f60\u5176\u5b9e\u662f\u53ef\u4ee5\u60f3\u5230\u7684\u3002 \u6765\u770b\u4e00\u4e0b\uff0c\u56e0\u4e3a\u5b83\u662f\u53cc\u5411\u7684\uff0c\u6240\u4ee5\u4ed6\u5de6\u8fb9\u53f3\u8fb9\u90fd\u80fd\u64cd\u4f5c\uff0c\u5b83\u5bf9\u5e94\u7684\u64cd\u4f5c\u7ed3\u6784\u4e24\u8fb9\u90fd\u80fd\u8fdb\u6570\u636e\u3002\u8fd9\u5c31\u662f\u94fe\u8868\u7684\u4e00\u4e2a\u5b58\u50a8\u7ed3\u6784\u3002\u5f80\u5916\u62ff\u6570\u636e\u7684\u65f6\u5019\u600e\u4e48\u62ff\u5462\uff1f\u901a\u5e38\u662f\u4ece\u4e00\u7aef\u62ff\uff0c\u5f53\u7136\u53e6\u4e00\u7aef\u4e5f\u80fd\u62ff\u3002\u5982\u679c\u4e24\u7aef\u90fd\u80fd\u62ff\u7684\u8bdd\uff0c\u8fd9\u5c31\u662f\u4e2a\u53cc\u7aef\u961f\u5217\uff0c\u4e24\u8fb9\u513f\u90fd\u80fd\u64cd\u4f5c\u3002\u5982\u679c\u53ea\u80fd\u4ece\u4e00\u7aef\u8fdb\u4e00\u7aef\u51fa\uff0c\u8fd9\u4e2a\u6a21\u578b\u54b1\u4eec\u524d\u9762\u4e86\u89e3\u8fc7\uff0c\u53eb\u505a\u6808\u3002 2.8.2 list \u7c7b\u578b\u6570\u636e\u57fa\u672c\u64cd\u4f5c \u00b6 \u6700\u540e\u770b\u4e00\u4e0b\u4ed6\u7684\u57fa\u672c\u64cd\u4f5c \u6dfb\u52a0/\u4fee\u6539\u6570\u636e lpush key value1 [ value2 ] \u2026\u2026 rpush key value1 [ value2 ] \u2026\u2026 \u83b7\u53d6\u6570\u636e lrange key start stop lindex key index llen key \u83b7\u53d6\u5e76\u79fb\u9664\u6570\u636e lpop key rpop key 2.9 list\u6269\u5c55\u64cd\u4f5c \u00b6 2.9.1 list \u7c7b\u578b\u6570\u636e\u6269\u5c55\u64cd\u4f5c \u00b6 \u79fb\u9664\u6307\u5b9a\u6570\u636e lrem key count value \u89c4\u5b9a\u65f6\u95f4\u5185\u83b7\u53d6\u5e76\u79fb\u9664\u6570\u636e blpop key1 [ key2 ] timeout brpop key1 [ key2 ] timeout brpoplpush source destination timeout 2.9.2 list \u7c7b\u578b\u6570\u636e\u64cd\u4f5c\u6ce8\u610f\u4e8b\u9879 \u00b6 \uff081\uff09list\u4e2d\u4fdd\u5b58\u7684\u6570\u636e\u90fd\u662fstring\u7c7b\u578b\u7684\uff0c\u6570\u636e\u603b\u5bb9\u91cf\u662f\u6709\u9650\u7684\uff0c\u6700\u591a2^32 - 1 \u4e2a\u5143\u7d20(4294967295)\u3002 \uff082\uff09list\u5177\u6709\u7d22\u5f15\u7684\u6982\u5ff5\uff0c\u4f46\u662f\u64cd\u4f5c\u6570\u636e\u65f6\u901a\u5e38\u4ee5\u961f\u5217\u7684\u5f62\u5f0f\u8fdb\u884c\u5165\u961f\u51fa\u961f\u64cd\u4f5c\uff0c\u6216\u4ee5\u6808\u7684\u5f62\u5f0f\u8fdb\u884c\u5165\u6808\u51fa\u6808\u64cd\u4f5c \uff083\uff09\u83b7\u53d6\u5168\u90e8\u6570\u636e\u64cd\u4f5c\u7ed3\u675f\u7d22\u5f15\u8bbe\u7f6e\u4e3a-1 \uff084\uff09list\u53ef\u4ee5\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u9875\u64cd\u4f5c\uff0c\u901a\u5e38\u7b2c\u4e00\u9875\u7684\u4fe1\u606f\u6765\u81ea\u4e8elist\uff0c\u7b2c2\u9875\u53ca\u66f4\u591a\u7684\u4fe1\u606f\u901a\u8fc7\u6570\u636e\u5e93\u7684\u5f62\u5f0f\u52a0\u8f7d 2.10 list \u5e94\u7528\u573a\u666f \u00b6 2.10.1 \u5e94\u7528\u573a\u666f \u00b6 \u4f01\u4e1a\u8fd0\u8425\u8fc7\u7a0b\u4e2d\uff0c\u7cfb\u7edf\u5c06\u4ea7\u751f\u51fa\u5927\u91cf\u7684\u8fd0\u8425\u6570\u636e\uff0c\u5982\u4f55\u4fdd\u969c\u591a\u53f0\u670d\u52a1\u5668\u64cd\u4f5c\u65e5\u5fd7\u7684\u7edf\u4e00\u987a\u5e8f\u8f93\u51fa\uff1f \u5047\u5982\u73b0\u5728\u4f60\u6709\u591a\u53f0\u670d\u52a1\u5668\uff0c\u6bcf\u4e00\u53f0\u670d\u52a1\u5668\u90fd\u4f1a\u4ea7\u751f\u5b83\u7684\u65e5\u5fd7\uff0c\u5047\u8bbe\u4f60\u662f\u4e00\u4e2a\u8fd0\u7ef4\u4eba\u5458\uff0c\u4f60\u60f3\u770b\u5b83\u7684\u64cd\u4f5c\u65e5\u5fd7\uff0c\u4f60\u600e\u4e48\u770b\u5462\uff1f\u6253\u5f00A\u673a\u5668\u7684\u65e5\u5fd7\u770b\u4e00\u770b\uff0c\u6253\u5f00B\u673a\u5668\u7684\u65e5\u5fd7\u518d\u770b\u4e00\u770b\u5417\uff1f\u8fd9\u6837\u7684\u8bdd\u4f60\u4f1a\u53ef\u80fd\u4f1a\u75af\u6389\u7684\uff01\u56e0\u4e3a\u5de6\u8fb9\u770b\u7684\u6709\u53ef\u80fd\u5b83\u7684\u65f6\u95f4\u662f11:01\uff0c\u53f3\u8fb911:02\uff0c\u7136\u540e\u518d\u770b\u5de6\u8fb911:03\uff0c\u5b83\u4eec\u672c\u8eab\u662f\u8fde\u7eed\u7684\uff0c\u4f46\u662f\u4f60\u5728\u770b\u7684\u65f6\u5019\u5c31\u5206\u6210\u56db\u4e2a\u6587\u4ef6\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f60\u770b\u8d77\u6765\u5c31\u4f1a\u5f88\u9ebb\u70e6\u3002\u80fd\u4e0d\u80fd\u628a\u4ed6\u4eec\u5408\u5e76\u5462\uff1f\u7b54\u6848\u662f\u53ef\u4ee5\u7684\uff01\u600e\u4e48\u505a\u5462\uff1f\u5efa\u7acb\u8d77redis\u670d\u52a1\u5668\u3002\u5f53\u4ed6\u4eec\u9700\u8981\u8bb0\u65e5\u5fd7\u7684\u65f6\u5019\uff0c\u8bb0\u5728\u54ea\u513f,\u5168\u90e8\u53d1\u7ed9redis\u3002\u7b49\u5230\u4f60\u60f3\u770b\u7684\u65f6\u5019\uff0c\u901a\u8fc7\u670d\u52a1\u5668\u8bbf\u95eeredis\u83b7\u53d6\u65e5\u5fd7\u3002\u7136\u540e\u5f97\u5230\u4ee5\u540e\uff0c\u5c31\u4f1a\u5f97\u5230\u4e00\u4e2a\u5b8c\u6574\u7684\u65e5\u5fd7\u4fe1\u606f\u3002\u90a3\u4e48\u8fd9\u91cc\u9762\u5c31\u53ef\u4ee5\u83b7\u53d6\u5230\u5b8c\u6574\u7684\u65e5\u5fd7\u4e86\uff0c\u4f9d\u9760\u4ec0\u4e48\u6765\u5b9e\u73b0\u5462\uff1f\u5c31\u4f9d\u9760\u6211\u4eec\u7684list\u7684\u6a21\u578b\u7684\u987a\u5e8f\u6765\u5b9e\u73b0\u3002\u8fdb\u6765\u4e00\u7ec4\u6570\u636e\u5c31\u5f80\u91cc\u52a0\uff0c\u8c01\u5148\u8fdb\u6765\u8c01\u5148\u52a0\u8fdb\u53bb\uff0c\u5b83\u662f\u6709\u4e00\u5b9a\u7684\u987a\u5e8f\u7684\u3002 2.10.2 \u89e3\u51b3\u65b9\u6848 \u00b6 \u4f9d\u8d56list\u7684\u6570\u636e\u5177\u6709\u987a\u5e8f\u7684\u7279\u5f81\u5bf9\u4fe1\u606f\u8fdb\u884c\u7ba1\u7406 \u4f7f\u7528\u961f\u5217\u6a21\u578b\u89e3\u51b3\u591a\u8def\u4fe1\u606f\u6c47\u603b\u5408\u5e76\u7684\u95ee\u9898 \u4f7f\u7528\u6808\u6a21\u578b\u89e3\u51b3\u6700\u65b0\u6d88\u606f\u7684\u95ee\u9898 2.11 set \u57fa\u672c\u64cd\u4f5c \u00b6 2.11.1 set\u7c7b\u578b \u00b6 \u65b0\u7684\u5b58\u50a8\u9700\u6c42\uff1a\u5b58\u50a8\u5927\u91cf\u7684\u6570\u636e\uff0c\u5728\u67e5\u8be2\u65b9\u9762\u63d0\u4f9b\u66f4\u9ad8\u7684\u6548\u7387 \u9700\u8981\u7684\u5b58\u50a8\u7ed3\u6784\uff1a\u80fd\u591f\u4fdd\u5b58\u5927\u91cf\u7684\u6570\u636e\uff0c\u9ad8\u6548\u7684\u5185\u90e8\u5b58\u50a8\u673a\u5236\uff0c\u4fbf\u4e8e\u67e5\u8be2 set\u7c7b\u578b\uff1a\u4e0ehash\u5b58\u50a8\u7ed3\u6784\u5b8c\u5168\u76f8\u540c\uff0c\u4ec5\u5b58\u50a8\u952e\uff0c\u4e0d\u5b58\u50a8\u503c\uff08nil\uff09\uff0c\u5e76\u4e14\u503c\u662f\u4e0d\u5141\u8bb8\u91cd\u590d\u7684 \u901a\u8fc7\u8fd9\u4e2a\u540d\u79f0\uff0c\u5927\u5bb6\u4e5f\u57fa\u672c\u4e0a\u80fd\u591f\u8ba4\u8bc6\u5230\u548c\u6211\u4eecJava\u4e2d\u7684set\u5b8c\u5168\u4e00\u6837\u3002\u6211\u4eec\u73b0\u5728\u8981\u5b58\u50a8\u5927\u91cf\u7684\u6570\u636e\uff0c\u5e76\u4e14\u8981\u6c42\u63d0\u9ad8\u5b83\u7684\u67e5\u8be2\u6548\u7387\u3002\u7528list\u8fd9\u79cd\u94fe\u8868\u5f62\u5f0f\uff0c\u5b83\u7684\u67e5\u8be2\u6548\u7387\u662f\u4e0d\u9ad8\u7684\uff0c\u90a3\u600e\u4e48\u529e\u5462\uff1f\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u60f3\uff0c\u6709\u6ca1\u6709\u9ad8\u6548\u7684\u5b58\u50a8\u673a\u5236\u3002\u5176\u5b9e\u524d\u9762\u54b1\u8bb2Java\u7684\u65f6\u5019\u8bf4\u8fc7hash\u8868\u7684\u7ed3\u6784\u5c31\u975e\u5e38\u7684\u597d\uff0c\u4f46\u662f\u8fd9\u91cc\u8fb9\u6211\u4eec\u5df2\u7ecf\u6709hash\u4e86\uff0c\u4ed6\u505a\u4e86\u8fd9\u4e48\u4e00\u4e2a\u8bbe\u5b9a\uff0c\u5e72\u561b\u5462\uff0c\u4ed6\u628ahash\u7684\u5b58\u50a8\u7a7a\u95f4\u7ed9\u6539\u4e00\u4e0b\uff0c\u53f3\u8fb9\u4f60\u539f\u6765\u5b58\u6570\u636e\u6539\u6389,\u5168\u90e8\u5b58\u7a7a\uff0c\u90a3\u4f60\u8bf4\u6570\u636e\u653e\u54ea\u513f\u4e86\uff1f\u653e\u5230\u539f\u6765\u7684filed\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u5728\u8fd9\u91cc\u8fb9\u5b58\u771f\u6b63\u7684\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6a21\u578b\u5c31\u662f\u6211\u4eec\u7684set \u6a21\u578b\u3002 set\u7c7b\u578b\uff1a\u4e0ehash\u5b58\u50a8\u7ed3\u6784\u5b8c\u5168\u76f8\u540c\uff0c\u4ec5\u5b58\u50a8\u952e\uff0c\u4e0d\u5b58\u50a8\u503c\uff08nil\uff09\uff0c\u5e76\u4e14\u503c\u662f\u4e0d\u5141\u8bb8\u91cd\u590d\u7684\u3002 \u770b\u4e00\u4e0b\u5b83\u7684\u6574\u4e2a\u7ed3\u6784\uff1a 2.11.2 set\u7c7b\u578b\u6570\u636e\u7684\u57fa\u672c\u64cd\u4f5c \u00b6 \u6dfb\u52a0\u6570\u636e sadd key member1 [ member2 ] \u83b7\u53d6\u5168\u90e8\u6570\u636e smembers key \u5220\u9664\u6570\u636e srem key member1 [ member2 ] \u83b7\u53d6\u96c6\u5408\u6570\u636e\u603b\u91cf scard key \u5224\u65ad\u96c6\u5408\u4e2d\u662f\u5426\u5305\u542b\u6307\u5b9a\u6570\u636e sismember key member \u968f\u673a\u83b7\u53d6\u96c6\u5408\u4e2d\u6307\u5b9a\u6570\u91cf\u7684\u6570\u636e srandmember key [ count ] \u968f\u673a\u83b7\u53d6\u96c6\u4e2d\u7684\u67d0\u4e2a\u6570\u636e\u5e76\u5c06\u8be5\u6570\u636e\u79fb\u9664\u96c6\u5408 spop key [ count ] 2.12 set \u7c7b\u578b\u6570\u636e\u7684\u6269\u5c55\u64cd\u4f5c \u00b6 2.12.1 set \u7c7b\u578b\u6570\u636e\u7684\u6269\u5c55\u64cd\u4f5c \u00b6 \u6c42\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u3001\u5e76\u3001\u5dee\u96c6 sinter key1 [key2 \u2026] sunion key1 [key2 \u2026] sdiff key1 [key2 \u2026] \u6c42\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u3001\u5e76\u3001\u5dee\u96c6\u5e76\u5b58\u50a8\u5230\u6307\u5b9a\u96c6\u5408\u4e2d sinterstore destination key1 [key2 \u2026] sunionstore destination key1 [key2 \u2026] sdiffstore destination key1 [key2 \u2026] \u5c06\u6307\u5b9a\u6570\u636e\u4ece\u539f\u59cb\u96c6\u5408\u4e2d\u79fb\u52a8\u5230\u76ee\u6807\u96c6\u5408\u4e2d smove source destination member \u901a\u8fc7\u4e0b\u9762\u4e00\u5f20\u56fe\u56de\u5fc6\u4e00\u4e0b\u4ea4\u3001\u5e76\u3001\u5dee 2.12.2 set \u7c7b\u578b\u6570\u636e\u64cd\u4f5c\u7684\u6ce8\u610f\u4e8b\u9879 \u00b6 set \u7c7b\u578b\u4e0d\u5141\u8bb8\u6570\u636e\u91cd\u590d\uff0c\u5982\u679c\u6dfb\u52a0\u7684\u6570\u636e\u5728 set \u4e2d\u5df2\u7ecf\u5b58\u5728\uff0c\u5c06\u53ea\u4fdd\u7559\u4e00\u4efd\u3002 set \u867d\u7136\u4e0ehash\u7684\u5b58\u50a8\u7ed3\u6784\u76f8\u540c\uff0c\u4f46\u662f\u65e0\u6cd5\u542f\u7528hash\u4e2d\u5b58\u50a8\u503c\u7684\u7a7a\u95f4\u3002 2.13 set\u5e94\u7528\u573a\u666f \u00b6 2.13.1 set\u5e94\u7528\u573a\u666f \u00b6 \uff081\uff09\u9ed1\u540d\u5355 \u8d44\u8baf\u7c7b\u4fe1\u606f\u7c7b\u7f51\u7ad9\u8ffd\u6c42\u9ad8\u8bbf\u95ee\u91cf\uff0c\u4f46\u662f\u7531\u4e8e\u5176\u4fe1\u606f\u7684\u4ef7\u503c\uff0c\u5f80\u5f80\u5bb9\u6613\u88ab\u4e0d\u6cd5\u5206\u5b50\u5229\u7528\uff0c\u901a\u8fc7\u722c\u866b\u6280\u672f\uff0c \u5feb\u901f\u83b7\u53d6\u4fe1\u606f\uff0c\u4e2a\u522b\u7279\u79cd\u884c\u4e1a\u7f51\u7ad9\u4fe1\u606f\u901a\u8fc7\u722c\u866b\u83b7\u53d6\u5206\u6790\u540e\uff0c\u53ef\u4ee5\u8f6c\u6362\u6210\u5546\u4e1a\u673a\u5bc6\u8fdb\u884c\u51fa\u552e\u3002\u4f8b\u5982\u7b2c\u4e09\u65b9\u706b \u8f66\u7968\u3001\u673a\u7968\u3001\u9152\u5e97\u5237\u7968\u4ee3\u8d2d\u8f6f\u4ef6\uff0c\u7535\u5546\u5237\u8bc4\u8bba\u3001\u5237\u597d\u8bc4\u3002 \u540c\u65f6\u722c\u866b\u5e26\u6765\u7684\u4f2a\u6d41\u91cf\u4e5f\u4f1a\u7ed9\u7ecf\u8425\u8005\u5e26\u6765\u9519\u89c9\uff0c\u4ea7\u751f\u9519\u8bef\u7684\u51b3\u7b56\uff0c\u6709\u6548\u907f\u514d\u7f51\u7ad9\u88ab\u722c\u866b\u53cd\u590d\u722c\u53d6\u6210\u4e3a\u6bcf\u4e2a\u7f51\u7ad9\u90fd\u8981\u8003\u8651\u7684\u57fa\u672c\u95ee\u9898\u3002\u5728\u57fa\u4e8e\u6280\u672f\u5c42\u9762\u533a\u5206\u51fa\u722c\u866b\u7528\u6237\u540e\uff0c\u9700\u8981\u5c06\u6b64\u7c7b\u7528\u6237\u8fdb\u884c\u6709\u6548\u7684\u5c4f\u853d\uff0c\u8fd9\u5c31\u662f\u9ed1\u540d\u5355\u7684\u5178\u578b\u5e94\u7528\u3002 ps:\u4e0d\u662f\u8bf4\u722c\u866b\u4e00\u5b9a\u505a\u6467\u6bc1\u6027\u7684\u5de5\u4f5c\uff0c\u6709\u4e9b\u5c0f\u578b\u7f51\u7ad9\u9700\u8981\u722c\u866b\u4e3a\u5176\u5e26\u6765\u4e00\u4e9b\u6d41\u91cf\u3002 \uff082\uff09\u767d\u540d\u5355 \u5bf9\u4e8e\u5b89\u5168\u6027\u66f4\u9ad8\u7684\u5e94\u7528\u8bbf\u95ee\uff0c\u4ec5\u4ec5\u9760\u9ed1\u540d\u5355\u662f\u4e0d\u80fd\u89e3\u51b3\u5b89\u5168\u95ee\u9898\u7684\uff0c\u6b64\u65f6\u9700\u8981\u8bbe\u5b9a\u53ef\u8bbf\u95ee\u7684\u7528\u6237\u7fa4\u4f53\uff0c \u4f9d\u8d56\u767d\u540d\u5355\u505a\u66f4\u4e3a\u82db\u523b\u7684\u8bbf\u95ee\u9a8c\u8bc1\u3002 2.13.2 \u89e3\u51b3\u65b9\u6848 \u00b6 \u57fa\u4e8e\u7ecf\u8425\u6218\u7565\u8bbe\u5b9a\u95ee\u9898\u7528\u6237\u53d1\u73b0\u3001\u9274\u522b\u89c4\u5219 \u5468\u671f\u6027\u66f4\u65b0\u6ee1\u8db3\u89c4\u5219\u7684\u7528\u6237\u9ed1\u540d\u5355\uff0c\u52a0\u5165set\u96c6\u5408 \u7528\u6237\u884c\u4e3a\u4fe1\u606f\u8fbe\u5230\u540e\u4e0e\u9ed1\u540d\u5355\u8fdb\u884c\u6bd4\u5bf9\uff0c\u786e\u8ba4\u884c\u4e3a\u53bb\u5411 \u9ed1\u540d\u5355\u8fc7\u6ee4IP\u5730\u5740\uff1a\u5e94\u7528\u4e8e\u5f00\u653e\u6e38\u5ba2\u8bbf\u95ee\u6743\u9650\u7684\u4fe1\u606f\u6e90 \u9ed1\u540d\u5355\u8fc7\u6ee4\u8bbe\u5907\u4fe1\u606f\uff1a\u5e94\u7528\u4e8e\u9650\u5b9a\u8bbf\u95ee\u8bbe\u5907\u7684\u4fe1\u606f\u6e90 \u9ed1\u540d\u5355\u8fc7\u6ee4\u7528\u6237\uff1a\u5e94\u7528\u4e8e\u57fa\u4e8e\u8bbf\u95ee\u6743\u9650\u7684\u4fe1\u606f\u6e90 2.14 \u5b9e\u8df5\u6848\u4f8b \u00b6 2.14.1\u4e1a\u52a1\u573a\u666f \u00b6 \u4f7f\u7528\u5fae\u4fe1\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u5fae\u4fe1\u63a5\u6536\u6d88\u606f\u540e\uff0c\u4f1a\u9ed8\u8ba4\u5c06\u6700\u8fd1\u63a5\u6536\u7684\u6d88\u606f\u7f6e\u9876\uff0c\u5f53\u591a\u4e2a\u597d\u53cb\u53ca\u5173\u6ce8\u7684\u8ba2\u9605\u53f7\u540c\u65f6\u53d1 \u9001\u6d88\u606f\u65f6\uff0c\u8be5\u6392\u5e8f\u4f1a\u4e0d\u505c\u7684\u8fdb\u884c\u4ea4\u66ff\u3002\u540c\u65f6\u8fd8\u53ef\u4ee5\u5c06\u91cd\u8981\u7684\u4f1a\u8bdd\u8bbe\u7f6e\u4e3a\u7f6e\u9876\u3002\u4e00\u65e6\u7528\u6237\u79bb\u7ebf\u540e\uff0c\u518d\u6b21\u6253\u5f00\u5fae\u4fe1\u65f6\uff0c\u6d88\u606f\u8be5\u6309\u7167\u4ec0\u4e48\u6837\u7684\u987a\u5e8f\u663e\u793a\u3002 \u6211\u4eec\u5206\u6790\u4e00\u4e0b\uff1a 100\u8fd9\u53f0\u624b\u673a\u4ee3\u8868\u4f60\u3002\u800c200\u3001300\u3001400\u8fd9\u4e09\u53f0\u4ee3\u8868\u4f60\u597d\u53cb\u7684\u624b\u673a\u3002\u5728\u8fd9\u91cc\u6709\u4e00\u4e9b\u4e1c\u897f\u9700\u8981\u4ea4\u4ee3\u4e00\u4e0b\uff0c\u56e0\u4e3a\u6211\u4eec\u6bcf\u4e2a\u4eba\u7684\u90fd\u4f1a\u5bf9\u81ea\u5df1\u7684\u5fae\u4fe1\u4e2d\u7684\u4e00\u4e9b\u6bd4\u8f83\u91cd\u8981\u7684\u4eba\u8bbe\u7f6e\u4f1a\u8bdd\u7f6e\u9876\uff0c\u5c06\u4ed6\u7684\u90a3\u6761\u5bf9\u8bdd\u653e\u5728\u6700\u4e0a\u9762\u3002\u6211\u4eec\u5047\u5b9a\u8fd9\u4e2a\u4eba\u6709\u4e24\u4e2a\u4f1a\u8bdd\u7f6e\u9876\u7684\u597d\u53cb\uff0c\u5206\u522b\u662f400\u548c500\uff0c\u800c\u8fd9\u91cc\u8fb9\u5c31\u5305\u542b400. \u4e0b\u9762\u5462\uff0c\u6211\u4eec\u5c31\u6765\u53d1\u8fd9\u4e2a\u6d88\u606f\uff0c\u7b2c\u4e00\u4e2a\u53d1\u6d88\u606f\u7684\u662f300\uff0c\u4ed6\u53d1\u4e86\u4e2a\u6d88\u606f\u7ed9100\u3002\u53d1\u5b8c\u4ee5\u540e\uff0c\u8fd9\u4e2a\u4e1c\u897f\u5e94\u8be5\u600e\u4e48\u5b58\u50a8\u5462\uff1f\u5728\u8fd9\u91cc\u9762\u4e00\u5b9a\u8981\u5206\u5f00\uff0c\u8bb0\u5f55\u7f6e\u9876\u7684\u8fd9\u4e9b\u4eba\u7684\u4f1a\u8bdd\uff0c\u5bf9\u5e94\u7684\u4f1a\u8bdd\u663e\u793a\u987a\u5e8f\u548c\u975e\u7f6e\u9876\u7684\u4e00\u5b9a\u8981\u5206\u4e24\u3002 \u8fd9\u91cc\u9762\u6211\u4eec\u521b\u5efa\u4e24\u4e2a\u6a21\u578b\uff0c\u4e00\u4e2a\u662f\u666e\u901a\u7684\uff0c\u4e00\u4e2a\u662f\u7f6e\u9876\u7684\uff0c\u800c\u4e0a\u9762\u7684\u8fd9\u4e2a\u7f6e\u9876\u7684\u7528\u6237\u5462\uff0c\u6211\u4eec\u7528set\u6765\u5b58\u50a8\uff0c\u56e0\u4e3a\u4e0d\u91cd\u590d\u3002\u800c\u4e0b\u9762\u8fd9\u4e9b\u56e0\u4e3a\u6709\u987a\u5e8f\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u7528list\u53bb\u5b58\u50a8,\u4e0d\u7136\u4f60\u600e\u4e48\u8868\u8fbe\u987a\u5e8f\u5462\uff1f \u90a3\u5f53300\u53d1\u7ed9\u6d88\u606f\u7ed9100\u4ee5\u540e\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5148\u5224\u5b9a\u4f60\u5728\u7f6e\u9876\u4eba\u7fa4\u4e2d\u5417\uff1f\u4e0d\u5728,\u90a3\u597d\uff0c300\u7684\u6d88\u606f\u5bf9\u5e94\u7684\u987a\u5e8f\u5c31\u5e94\u8be5\u653e\u5728\u666e\u901a\u7684\u5217\u8868\u91cc\u8fb9\u3002\u800c\u5728\u8fd9\u91cc\u8fb9\uff0c\u6211\u4eec\u628a300\u52a0\u8fdb\u53bb\u3002\u7b2c\u4e00\u4e2a\u6570\u636e\u4e5f\u5c31\u662f\u73b0\u5728300\u3002 \u63a5\u4e0b\u6765400\uff0c\u53d1\u4e86\u4e2a\u6d88\u606f\u3002\u5224\u65ad\u4e00\u4e0b\uff0c\u4ed6\u662f\u9700\u8981\u7f6e\u9876\u7684\uff0c\u6240\u4ee5400\u5c06\u8fdb\u5165list\u7684\u7f6e\u9876\u91cc\u8fb9\u653e\u7740\u3002\u5f53\u524d\u8fd8\u6ca1\u6709\u7279\u6b8a\u7684\u5730\u65b9\u3002 \u518d\u6765200\u53d1\u6d88\u606f\u4e86\uff0c\u548c\u521a\u624d\u7684\u5224\u5b9a\u65b9\u6cd5\u4e00\u6837\uff0c\u5148\u770b\u5728\u4e0d\u5728\u7f6e\u9876\u91cc\uff0c\u4e0d\u5728\u7684\u8bdd\u8fdb\u666e\u901a\uff0c\u7136\u540e\u5728\u666e\u901a\u91cc\u8fb9\u628a200\u52a0\u5165\u5c31\u884c\u4e86\uff0cOK\uff0c\u5230\u8fd9\u91cc\u76ee\u524d\u8fd8\u6ca1\u6709\u987a\u5e8f\u53d8\u5316\u3002 \u63a5\u4e0b\u6765200\u53c8\u53d1\u6d88\u606f\u8fc7\u6765\uff0c\u540c\u4e00\u4e2a\u4eba\u7ed9\u4f60\u8fde\u53d1\u4e86\u4e24\u6761\uff0c\u90a3\u8fd9\u4e2a\u65f6\u5019200\u7684\u6d88\u606f\u5230\u8fbe\u4ee5\u540e\uff0c\u5148\u5224\u65ad\u662f\u5426\u5728\u7f6e\u9876\u8303\u56f4\uff0c\u4e0d\u5728\uff0c\u63a5\u4e0b\u6765\u4ed6\u8981\u653e\u5728list\u666e\u901a\u4e2d\uff0c\u8fd9\u91cc\u4f60\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u56e0\u4e3a\u8fd9\u91cc\u8fb9\u5df2\u7ecf\u6709200\uff0c\u6240\u4ee5\u8fdb\u6765\u4ee5\u540e\u5148\u5e72\u4e00\u4ef6\u4e8b\u513f\uff0c\u628a200\u6740\u6389\uff0c\u6ca1\u6709200\uff0c\u7136\u540e\u518d\u628a200\u52a0\u8fdb\u6765\uff0c\u90a3\u4f60\u60f3\u4e00\u4e0b\uff0c\u73b0\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u987a\u5e8f\u662f\u4ec0\u4e48\u5462\uff1f\u5c31\u662f\u65b0\u7684\u90fd\u5728\u53f3\u8fb9\uff0c\u5bf9\u4e0d\u5bf9\uff1f \u8fd8\u8bb0\u5f97\u6211\u4eec\u8bf4list\u6a21\u578b\uff0c\u5982\u679c\u662f\u4e00\u4e2a\u53cc\u7aef\u961f\u5217\uff0c\u5b83\u662f\u53ef\u4ee5\u4e24\u5934\u8fdb\u4e24\u5934\u51fa\u3002\u5f53\u7136\u6211\u4eec\u53cc\u7aef\u4ece\u4e00\u5934\u8fdb\u4e00\u5934\u51fa\uff0c\u8fd9\u5c31\u662f\u6808\u6a21\u578b\uff0c\u73b0\u5728\u54b1\u4eec\u8fd0\u7528\u7684\u5c31\u662flist\u6a21\u578b\u4e2d\u7684\u6808\u6a21\u578b\u3002 \u73b0\u5728300\u53d1\u6d88\u606f\uff0c\u5148\u5224\u5b9a\u4ed6\u5728\u4e0d\u5728\uff0c\u4e0d\u5728\uff0c\u7528\u666e\u901a\u7684\u961f\u5217\uff0c\u63a5\u4e0b\u6765\u6309\u7167\u521a\u624d\u7684\u64cd\u4f5c\uff0c\u4e0d\u7ba1\u4f60\u91cc\u8fb9\u539f\u6765\u6709\u6ca1\u6709300\uff0c\u6211\u5148\u628a300\u6740\u6389\uff0c\u6ca1\u4e86\uff0c200\u81ea\u7136\u5c31\u586b\u5230300\u7684\u4f4d\u7f6e\u4e86\uff0c\u4ed6\u73b0\u5728\u662flist\u91cc\u9762\u552f\u4e00\u4e00\u4e2a\uff0c\u7136\u540e\u8ba9300\u8fdb\u6765\uff0c\u6ce8\u610f\u662f\u4ece\u53f3\u4fa7\u8fdb\u6765\u7684\uff0c\u90a3\u4e48\u73b0\u5728300\u5c31\u662f\u6700\u65b0\u7684\u3002 \u90a3\u4e48\u5230\u8fd9\u91cc\u5462\uff0c\u6211\u4eec\u8ba9100\u6765\u8bfb\u53d6\u6d88\u606f\u3002\u4f60\u89c9\u5f97\u8fd9\u4e2a\u6d88\u606f\u987a\u5e8f\u5e94\u8be5\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u9996\u5148\u7f6e\u9876\u7684400\u6709\u4e00\u4e2a\uff0c\u4ed6\u8dd1\u5728\u6700\u4e0a\u9762\uff0c\u7136\u540elist\u666e\u901a\u5982\u679c\u51fa\u6765\u7684\u8bdd\uff0c300\u662f\u6700\u65b0\u7684\u6d88\u606f\uff0c\u800c200\u5728\u4ed6\u540e\u9762\u7684\u3002\u7528\u8fd9\u79cd\u5f62\u5f0f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u505a\u51fa\u6765\u4ed6\u7684\u6d88\u606f\u987a\u5e8f\u6765\u3002 2.14.2 \u89e3\u51b3\u65b9\u6848 \u00b6 \u770b\u4e00\u4e0b\u6700\u7ec8\u7684\u89e3\u51b3\u65b9\u6848\uff1a \u4f9d\u8d56list\u7684\u6570\u636e\u5177\u6709\u987a\u5e8f\u7684\u7279\u5f81\u5bf9\u6d88\u606f\u8fdb\u884c\u7ba1\u7406\uff0c\u5c06list\u7ed3\u6784\u4f5c\u4e3a\u6808\u4f7f\u7528 \u7f6e\u9876\u4e0e\u666e\u901a\u4f1a\u8bdd\u5206\u522b\u521b\u5efa\u72ec\u7acb\u7684list\u5206\u522b\u7ba1\u7406 \u5f53\u67d0\u4e2alist\u4e2d\u63a5\u6536\u5230\u7528\u6237\u6d88\u606f\u540e\uff0c\u5c06\u6d88\u606f\u53d1\u9001\u65b9\u7684id\u4ecelist\u7684\u4e00\u4fa7\u52a0\u5165list\uff08\u6b64\u5904\u8bbe\u5b9a\u5de6\u4fa7\uff09 \u591a\u4e2a\u76f8\u540cid\u53d1\u51fa\u7684\u6d88\u606f\u53cd\u590d\u5165\u6808\u4f1a\u51fa\u73b0\u95ee\u9898\uff0c\u5728\u5165\u6808\u4e4b\u524d\u65e0\u8bba\u662f\u5426\u5177\u6709\u5f53\u524did\u5bf9\u5e94\u7684\u6d88\u606f\uff0c\u5148\u5220\u9664\u5bf9\u5e94id \u63a8\u9001\u6d88\u606f\u65f6\u5148\u63a8\u9001\u7f6e\u9876\u4f1a\u8bddlist\uff0c\u518d\u63a8\u9001\u666e\u901a\u4f1a\u8bddlist\uff0c\u63a8\u9001\u5b8c\u6210\u7684list\u6e05\u9664\u6240\u6709\u6570\u636e \u6d88\u606f\u7684\u6570\u91cf\uff0c\u4e5f\u5c31\u662f\u5fae\u4fe1\u7528\u6237\u5bf9\u8bdd\u6570\u91cf\u91c7\u7528\u8ba1\u6570\u5668\u7684\u601d\u60f3\u53e6\u884c\u8bb0\u5f55\uff0c\u4f34\u968flist\u64cd\u4f5c\u540c\u6b65\u66f4\u65b0 2.14.3 \u6570\u636e\u7c7b\u578b\u603b\u7ed3 \u00b6 \u603b\u7ed3\u4e00\u4e0b\uff0c\u5728\u6574\u4e2a\u6570\u636e\u7c7b\u578b\u7684\u90e8\u5206\uff0c\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd\u4e86\u54ea\u4e9b\u5185\u5bb9\uff1a \u9996\u5148\u6211\u4eec\u4e86\u89e3\u4e86\u4e00\u4e0b\u6570\u636e\u7c7b\u578b\uff0c\u63a5\u4e0b\u6765\u9488\u5bf9\u7740\u6211\u4eec\u8981\u5b66\u4e60\u7684\u6570\u636e\u7c7b\u578b\uff0c\u8fdb\u884c\u9010\u4e00\u8bb2\u89e3\u4e86string\u3001hash\u3001list\u3001set\u7b49\uff0c\u6700\u540e\u901a\u8fc7\u4e00\u4e2a\u6848\u4f8b\u603b\u7ed3\u4e86\u4e00\u4e0b\u524d\u9762\u7684\u6570\u636e\u7c7b\u578b\u7684\u4f7f\u7528\u573a\u666f\u3002 3. \u5e38\u7528\u6307\u4ee4 \u00b6 \u5728\u8fd9\u90e8\u5206\u4e2d\u5462\uff0c\u6211\u4eec\u5bb6\u5b66\u4e60\u4e24\u4e2a\u77e5\u8bc6\uff0c\u7b2c\u4e00\u4e2a\u662fkey\u7684\u5e38\u7528\u6307\u4ee4\uff0c\u7b2c\u4e8c\u4e2a\u662f\u6570\u636e\u5e93\u7684\u5e38\u7528\u6307\u4ee4\u3002\u548c\u524d\u9762\u6211\u4eec\u5b66\u6570\u636e\u7c7b\u578b\u505a\u4e00\u4e0b\u533a\u5206\uff0c\u524d\u9762\u4f60\u5b66\u7684\u90a3\u4e9b\u6307\u4ee4\u5462\uff0c\u90fd\u662f\u9488\u5bf9\u67d0\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\u64cd\u4f5c\u7684\uff0c\u73b0\u5728\u5b66\u7684\u90fd\u662f\u5bf9\u6240\u6709\u7684\u64cd\u4f5c\u7684\uff0c\u6765\u770b\u4e00\u4e0b\uff0c\u6211\u4eec\u5728\u5b66\u4e60Key\u7684\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5148\u60f3\u4e00\u4e0b\u7684\u64cd\u4f5c\u6211\u4eec\u5e94\u8be5\u5b66\u54ea\u4e9b\u4e1c\u897f: 3.1 key \u64cd\u4f5c\u5206\u6790 \u00b6 3.1.1 key\u5e94\u8be5\u8bbe\u8ba1\u54ea\u4e9b\u64cd\u4f5c\uff1f \u00b6 key\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u901a\u8fc7key\u83b7\u53d6redis\u4e2d\u4fdd\u5b58\u7684\u6570\u636e \u5bf9\u4e8ekey\u81ea\u8eab\u72b6\u6001\u7684\u76f8\u5173\u64cd\u4f5c\uff0c\u4f8b\u5982\uff1a\u5220\u9664\uff0c\u5224\u5b9a\u5b58\u5728\uff0c\u83b7\u53d6\u7c7b\u578b\u7b49 \u5bf9\u4e8ekey\u6709\u6548\u6027\u63a7\u5236\u76f8\u5173\u64cd\u4f5c\uff0c\u4f8b\u5982\uff1a\u6709\u6548\u671f\u8bbe\u5b9a\uff0c\u5224\u5b9a\u662f\u5426\u6709\u6548\uff0c\u6709\u6548\u72b6\u6001\u7684\u5207\u6362\u7b49 \u5bf9\u4e8ekey\u5feb\u901f\u67e5\u8be2\u64cd\u4f5c\uff0c\u4f8b\u5982\uff1a\u6309\u6307\u5b9a\u7b56\u7565\u67e5\u8be2key 3.1.2 key \u57fa\u672c\u64cd\u4f5c \u00b6 \u5220\u9664\u6307\u5b9akey del key \u83b7\u53d6key\u662f\u5426\u5b58\u5728 exists key \u83b7\u53d6key\u7684\u7c7b\u578b type key 3.1.3 \u62d3\u5c55\u64cd\u4f5c \u6392\u5e8f sort \u6539\u540d rename key newkey renamenx key newkey 3.1.3 key \u6269\u5c55\u64cd\u4f5c\uff08\u65f6\u6548\u6027\u63a7\u5236\uff09 \u00b6 \u4e3a\u6307\u5b9akey\u8bbe\u7f6e\u6709\u6548\u671f expire key seconds pexpire key milliseconds expireat key timestamp pexpireat key milliseconds-timestamp \u83b7\u53d6key\u7684\u6709\u6548\u65f6\u95f4 ttl key pttl key \u5207\u6362key\u4ece\u65f6\u6548\u6027\u8f6c\u6362\u4e3a\u6c38\u4e45\u6027 persist key 3.1.4 key \u6269\u5c55\u64cd\u4f5c\uff08\u67e5\u8be2\u6a21\u5f0f\uff09 \u00b6 \u67e5\u8be2key keys pattern \u67e5\u8be2\u6a21\u5f0f\u89c4\u5219 *\u5339\u914d\u4efb\u610f\u6570\u91cf\u7684\u4efb\u610f\u7b26\u53f7 ? \u914d\u5408\u4e00\u4e2a\u4efb\u610f\u7b26\u53f7 [] \u5339\u914d\u4e00\u4e2a\u6307\u5b9a\u7b26\u53f7 keys * keys \u67e5\u8be2\u6240\u6709 it* keys \u67e5\u8be2\u6240\u6709\u4ee5it\u5f00\u5934 *heima \u67e5\u8be2\u6240\u6709\u4ee5heima\u7ed3\u5c3e keys ??heima \u67e5\u8be2\u6240\u6709\u524d\u9762\u4e24\u4e2a\u5b57\u7b26\u4efb\u610f\uff0c\u540e\u9762\u4ee5heima\u7ed3\u5c3e \u67e5\u8be2\u6240\u6709\u4ee5 keys user:? user:\u5f00\u5934\uff0c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4efb\u610f keys u [ st ] er:1 \u67e5\u8be2\u6240\u6709\u4ee5u\u5f00\u5934\uff0c\u4ee5er:1\u7ed3\u5c3e\uff0c\u4e2d\u95f4\u5305\u542b\u4e00\u4e2a\u5b57\u6bcd\uff0cs\u6216t 3.2 \u6570\u636e\u5e93\u6307\u4ee4 \u00b6 3.2.1 key \u7684\u91cd\u590d\u95ee\u9898 \u00b6 \u5728\u8fd9\u4e2a\u5730\u65b9\u6211\u4eec\u6765\u8bb2\u4e00\u4e0b\u6570\u636e\u5e93\u7684\u5e38\u7528\u6307\u4ee4\uff0c\u5728\u8bb2\u8fd9\u4e2a\u4e1c\u897f\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u601d\u8003\u4e00\u4e2a\u95ee\u9898\uff1a \u5047\u5982\u8bf4\u4f60\u4eec\u5341\u4e2a\u4eba\u540c\u65f6\u64cd\u4f5credis\uff0c\u4f1a\u4e0d\u4f1a\u51fa\u73b0key\u540d\u5b57\u547d\u540d\u51b2\u7a81\u7684\u95ee\u9898\u3002 \u4e00\u5b9a\u4f1a\uff0c\u4e3a\u4ec0\u4e48?\u56e0\u4e3a\u4f60\u7684key\u662f\u7531\u7a0b\u5e8f\u800c\u5b9a\u4e49\u7684\u3002\u4f60\u60f3\u5199\u4ec0\u4e48\u5199\u4ec0\u4e48\uff0c\u90a3\u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\u5927\u5bb6\u90fd\u5728\u4e0d\u505c\u7684\u52a0\uff0c\u65e9\u665a\u6709\u4e00\u5929\u4ed6\u4f1a\u51b2\u7a81\u7684\u3002 redis\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u4f34\u968f\u7740\u64cd\u4f5c\u6570\u636e\u91cf\u7684\u589e\u52a0\uff0c\u4f1a\u51fa\u73b0\u5927\u91cf\u7684\u6570\u636e\u4ee5\u53ca\u5bf9\u5e94\u7684key\u3002 \u90a3\u8fd9\u4e2a\u95ee\u9898\u6211\u4eec\u8981\u4e0d\u8981\u89e3\u51b3\uff1f\u8981\uff01\u600e\u4e48\u89e3\u51b3\u5462\uff1f\u6211\u4eec\u6700\u597d\u628a\u6570\u636e\u8fdb\u884c\u4e00\u4e2a\u5206\u7c7b\uff0c\u9664\u4e86\u547d\u540d\u89c4\u8303\u6211\u4eec\u505a\u7edf\u4e00\u4ee5\u5916\uff0c\u5982\u679c\u8fd8\u80fd\u628a\u5b83\u5206\u5f00\uff0c\u8fd9\u6837\u662f\u4e0d\u662f\u51b2\u7a81\u7684\u673a\u7387\u5c31\u4f1a\u5c0f\u4e00\u4e9b\u4e86\uff0c\u8fd9\u5c31\u662f\u54b1\u4eec\u4e0b\u9762\u8981\u8bf4\u7684\u89e3\u51b3\u65b9\u6848\uff01 3.2.2 \u89e3\u51b3\u65b9\u6848 \u00b6 redis\u4e3a\u6bcf\u4e2a\u670d\u52a1\u63d0\u4f9b\u670916\u4e2a\u6570\u636e\u5e93\uff0c\u7f16\u53f7\u4ece0\u523015 \u6bcf\u4e2a\u6570\u636e\u5e93\u4e4b\u95f4\u7684\u6570\u636e\u76f8\u4e92\u72ec\u7acb \u5728\u5bf9\u5e94\u7684\u6570\u636e\u5e93\u4e2d\u5212\u51fa\u4e00\u5757\u533a\u57df\uff0c\u8bf4\u4ed6\u5c31\u662f\u51e0\uff0c\u4f60\u5c31\u7528\u51e0\u90a3\u5757\uff0c\u540c\u65f6\uff0c\u5176\u4ed6\u7684\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u8fdb\u884c\u5b9a\u4e49\uff0c\u4e00\u5171\u662f16\u4e2a\uff0c\u8fd9\u91cc\u8fb9\u9700\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u4ed6\u4eec\u8fd916\u4e2a\u5171\u7528redis\u7684\u5185\u5b58\u3002\u6ca1\u6709\u8bf4\u8c01\u5927\u8c01\u5c0f\uff0c\u4e5f\u5c31\u662f\u8bf4\u6570\u5b57\u53ea\u662f\u4ee3\u8868\u4e86\u4e00\u5757\u513f\u533a\u57df\uff0c\u533a\u57df\u5177\u4f53\u591a\u5927\u672a\u77e5\u3002\u8fd9\u662f\u6570\u636e\u5e93\u7684\u4e00\u4e2a\u5206\u533a\u7684\u4e00\u4e2a\u7b56\u7565\uff01 3.2.3 \u6570\u636e\u5e93\u7684\u57fa\u672c\u64cd\u4f5c \u00b6 \u5207\u6362\u6570\u636e\u5e93 select index \u5176\u4ed6\u64cd\u4f5c ping 3.2.4 \u6570\u636e\u5e93\u6269\u5c55\u64cd\u4f5c \u00b6 \u6570\u636e\u79fb\u52a8 move key db \u6570\u636e\u603b\u91cf dbsize \u6570\u636e\u6e05\u9664 flushdb flushall 4. Jedis \u00b6 \u5728\u5b66\u4e60\u5b8credis\u540e\uff0c\u6211\u4eec\u73b0\u5728\u5c31\u8981\u7528Java\u6765\u8fde\u63a5redis\u4e86\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u7684\u8fd9\u4e00\u7ae0\u8981\u5b66\u7684Jedis\u4e86\u3002\u5728\u8fd9\u4e2a\u90e8\u5206\uff0c\u6211\u4eec\u4e3b\u8981\u8bb2\u89e3\u4ee5\u4e0b3\u4e2a\u5185\u5bb9\uff1a HelloWorld\uff08Jedis\u7248\uff09 Jedis\u7b80\u6613\u5de5\u5177\u7c7b\u5f00\u53d1 \u53ef\u89c6\u5316\u5ba2\u6237\u7aef 4.1 Jedis\u7b80\u4ecb \u00b6 4.1.1 \u7f16\u7a0b\u8bed\u8a00\u4e0eredis \u00b6 \u5bf9\u4e8e\u6211\u4eec\u73b0\u5728\u7684\u6570\u636e\u6765\u8bf4\uff0c\u5b83\u662f\u5728\u6211\u4eec\u7684redis\u4e2d\uff0c\u800c\u6700\u7ec8\u6211\u4eec\u662f\u8981\u505a\u7a0b\u5e8f\u3002\u90a3\u4e48\u7a0b\u5e8f\u5c31\u8981\u548c\u6211\u4eec\u7684redis\u8fdb\u884c\u8fde\u63a5\u3002\u5e72\u4ec0\u4e48\u4e8b\u60c5\u5462\uff1f\u4e24\u4ef6\u4e8b\uff1a\u7a0b\u5e8f\u4e2d\u6709\u6570\u636e\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8981\u628a\u8fd9\u4e9b\u6570\u636e\u5168\u90e8\u4ea4\u7ed9redis\u7ba1\u7406\u3002\u540c\u65f6\uff0credis\u4e2d\u7684\u6570\u636e\u8fd8\u80fd\u53d6\u51fa\u6765\uff0c\u56de\u5230\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002\u90a3\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u5728Java\u4e0eredis\u4e4b\u95f4\u6253\u4ea4\u9053\u7684\u8fd9\u4e2a\u4e1c\u897f\u5c31\u53eb\u505aJedis.\u7b80\u5355\u8bf4\uff0cJedis\u5c31\u662f\u63d0\u4f9b\u4e86Java\u4e0eredis\u7684\u8fde\u63a5\u670d\u52a1\u7684\uff0c\u91cc\u8fb9\u6709\u5404\u79cd\u5404\u6837\u7684API\u63a5\u53e3\uff0c\u4f60\u53ef\u4ee5\u53bb\u8c03\u7528\u5b83\u3002 \u9664\u4e86Jedis\u5916\uff0c\u8fd8\u6709\u6ca1\u6709\u5176\u4ed6\u7684\u8fd9\u79cd\u8fde\u63a5\u670d\u52a1\u5462\uff1f\u5176\u5b9e\u8fd8\u6709\u5f88\u591a\uff0c\u4e86\u89e3\u4e00\u4e0b\uff1a Java\u8bed\u8a00\u8fde\u63a5redis\u670d\u52a1 Jedis\uff08SpringData\u3001Redis \u3001 Lettuce\uff09 \u5176\u5b83\u8bed\u8a00\uff1aC \u3001C++ \u3001C# \u3001Erlang\u3001Lua \u3001Objective-C \u3001Perl \u3001PHP \u3001Python \u3001Ruby \u3001Scala 4.1.2 \u51c6\u5907\u5de5\u4f5c \u00b6 (1)jar\u5305\u5bfc\u5165 \u4e0b\u8f7d\u5730\u5740\uff1ahttps://mvnrepository.com/artifact/redis.clients/jedis \u57fa\u4e8emaven <dependency> <groupId> redis.clients </groupId> <artifactId> jedis </artifactId> <version> 2.9.0 </version> </dependency> (2)\u5ba2\u6237\u7aef\u8fde\u63a5redis \u8fde\u63a5redis Jedis jedis = new Jedis(\"localhost\", 6379); \u64cd\u4f5credis jedis.set(\"name\", \"itheima\"); jedis.get(\"name\"); \u5173\u95edredis\u8fde\u63a5 jedis.close(); API\u6587\u6863 http://xetorthio.github.io/jedis/ 4.1.3 \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u521b\u5efa\uff1acom.itheima.JedisTest public class JedisTest { public static void main ( String [] args ) { //1.\u83b7\u53d6\u8fde\u63a5\u5bf9\u8c61 Jedis jedis = new Jedis ( \"192.168.40.130\" , 6379 ); //2.\u6267\u884c\u64cd\u4f5c jedis . set ( \"age\" , \"39\" ); String hello = jedis . get ( \"hello\" ); System . out . println ( hello ); jedis . lpush ( \"list1\" , \"a\" , \"b\" , \"c\" , \"d\" ); List < String > list1 = jedis . lrange ( \"list1\" , 0 , - 1 ); for ( String s : list1 ) { System . out . println ( s ); } jedis . sadd ( \"set1\" , \"abc\" , \"abc\" , \"def\" , \"poi\" , \"cba\" ); Long len = jedis . scard ( \"set1\" ); System . out . println ( len ); //3.\u5173\u95ed\u8fde\u63a5 jedis . close (); } } 4.2 Jedis\u7b80\u6613\u5de5\u5177\u7c7b\u5f00\u53d1 \u00b6 \u524d\u9762\u6211\u4eec\u505a\u7684\u7a0b\u5e8f\u8fd8\u662f\u6709\u70b9\u513f\u5c0f\u95ee\u9898\uff0c\u5c31\u662f\u6211\u4eec\u7684Jedis\u5bf9\u8c61\u7684\u7ba1\u7406\u662f\u6211\u4eec\u81ea\u5df1\u521b\u5efa\u7684\uff0c\u771f\u5b9e\u4f01\u4e1a\u5f00\u53d1\u4e2d\u662f\u4e0d\u53ef\u80fd\u8ba9\u4f60\u53bbnew\u4e00\u4e2a\u7684\uff0c\u90a3\u63a5\u4e0b\u6765\u54b1\u4eec\u5c31\u8981\u505a\u4e00\u4e2a\u5de5\u5177\u7c7b\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u505a\u4e00\u4e2a\u521b\u5efaJedis\u7684\u8fd9\u6837\u7684\u4e00\u4e2a\u5de5\u5177\u3002 4.2.1 \u57fa\u4e8e\u8fde\u63a5\u6c60\u83b7\u53d6\u8fde\u63a5 \u00b6 JedisPool\uff1aJedis\u63d0\u4f9b\u7684\u8fde\u63a5\u6c60\u6280\u672f poolConfig:\u8fde\u63a5\u6c60\u914d\u7f6e\u5bf9\u8c61 host:redis\u670d\u52a1\u5730\u5740 port:redis\u670d\u52a1\u7aef\u53e3\u53f7 JedisPool\u7684\u6784\u9020\u5668\u5982\u4e0b\uff1a public JedisPool ( GenericObjectPoolConfig poolConfig , String host , int port ) { this ( poolConfig , host , port , 2000 , ( String ) null , 0 , ( String ) null ); } 4.2.2 \u5c01\u88c5\u8fde\u63a5\u53c2\u6570 \u00b6 \u521b\u5efajedis\u7684\u914d\u7f6e\u6587\u4ef6\uff1ajedis.properties jedis.host = 192.168.40.130 jedis.port = 6379 jedis.maxTotal = 50 jedis.maxIdle = 10 4.2.3 \u52a0\u8f7d\u914d\u7f6e\u4fe1\u606f \u00b6 \u521b\u5efaJedisUtils\uff1acom.itheima.util.JedisUtils\uff0c\u4f7f\u7528\u9759\u6001\u4ee3\u7801\u5757\u521d\u59cb\u5316\u8d44\u6e90 public class JedisUtils { private static int maxTotal ; private static int maxIdel ; private static String host ; private static int port ; private static JedisPoolConfig jpc ; private static JedisPool jp ; static { ResourceBundle bundle = ResourceBundle . getBundle ( \"redis\" ); maxTotal = Integer . parseInt ( bundle . getString ( \"redis.maxTotal\" )); maxIdel = Integer . parseInt ( bundle . getString ( \"redis.maxIdel\" )); host = bundle . getString ( \"redis.host\" ); port = Integer . parseInt ( bundle . getString ( \"redis.port\" )); //Jedis\u8fde\u63a5\u6c60\u914d\u7f6e jpc = new JedisPoolConfig (); jpc . setMaxTotal ( maxTotal ); jpc . setMaxIdle ( maxIdel ); jp = new JedisPool ( jpc , host , port ); } } 4.2.4 \u83b7\u53d6\u8fde\u63a5 \u00b6 \u5bf9\u5916\u8bbf\u95ee\u63a5\u53e3\uff0c\u63d0\u4f9bjedis\u8fde\u63a5\u5bf9\u8c61\uff0c\u8fde\u63a5\u4ece\u8fde\u63a5\u6c60\u83b7\u53d6\uff0c\u5728JedisUtils\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u83b7\u53d6jedis\u7684\u65b9\u6cd5\uff1agetJedis public static Jedis getJedis (){ Jedis jedis = jedisPool . getResource (); return jedis ; } 4.3 \u53ef\u89c6\u5316\u5ba2\u6237\u7aef \u00b6 4.3.1 Redis Desktop Manager 5. \u6301\u4e45\u5316 \u00b6 \u4e0b\u9762\u5462\uff0c\u8fdb\u5165\u5230\u6301\u4e45\u5316\u7684\u5b66\u4e60.\u8fd9\u90e8\u5206\u5185\u5bb9\u7406\u89e3\u7684\u4e1c\u897f\u591a\uff0c\u64cd\u4f5c\u7684\u4e1c\u897f\u5c11\u3002\u5728\u8fd9\u4e2a\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u8bb2\u89e3\u56db\u4e2a\u4e1c\u897f\uff1a \u6301\u4e45\u5316\u7b80\u4ecb RDB AOF RDB\u4e0eAOF\u533a\u522b 5.1 \u6301\u4e45\u5316\u7b80\u4ecb \u00b6 5.1.1 \u573a\u666f-\u610f\u5916\u65ad\u7535 \u00b6 \u4e0d\u77e5\u9053\u5927\u5bb6\u6709\u6ca1\u6709\u9047\u89c1\u8fc7\uff0c\u5c31\u662f\u6b63\u5de5\u4f5c\u7684\u65f6\u5019\u505c\u7535\u4e86\uff0c\u5982\u679c\u4f60\u7528\u7684\u662f\u7b14\u8bb0\u672c\u7535\u8111\u8fd8\u597d\uff0c\u4f60\u6709\u7535\u6c60\uff0c\u4f46\u5982\u679c\u4f60\u7528\u7684\u662f\u53f0\u5f0f\u673a\u5462\uff0c\u90a3\u6050\u6015\u5c31\u6bd4\u8f83\u707e\u96be\u4e86\uff0c\u5047\u5982\u4f60\u73b0\u5728\u6b63\u5728\u5199\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u6587\u6863\uff0c\u5982\u679c\u4f60\u8981\u4f7f\u7528\u7684\u662fword\uff0c\u8fd9\u79cd\u529e\u516c\u81ea\u52a8\u5316\u8f6f\u4ef6\u7684\u8bdd\uff0c\u4ed6\u4e00\u65e6\u9047\u5230\u505c\u7535\uff0c\u5176\u5b9e\u4f60\u4e0d\u7528\u62c5\u5fc3\uff0c\u56e0\u4e3a\u5b83\u4f1a\u7ed9\u4f60\u751f\u6210\u4e00\u4e9b\u5176\u4ed6\u7684\u6587\u4ef6\u3002 \u5176\u5b9e\u4ed6\u4eec\u90fd\u5728\u505a\u4e00\u4ef6\u4e8b\u513f\uff0c\u5e2e\u4f60\u81ea\u52a8\u6062\u590d\uff0c\u6709\u4e86\u8fd9\u4e2a\u6587\u4ef6\uff0c\u4f60\u524d\u9762\u7684\u4e1c\u897f\u5c31\u4e0d\u518d\u4e22\u4e86\u3002\u90a3\u4ec0\u4e48\u662f\u81ea\u52a8\u6062\u590d\u5462\uff1f\u4f60\u8981\u5148\u4e86\u89e3\u4ed6\u7684\u6574\u4e2a\u8fc7\u7a0b\u3002 \u6211\u4eec\u8bf4\u81ea\u52a8\u6062\u590d\uff0c\u5176\u5b9e\u57fa\u4e8e\u7684\u4e00\u4e2a\u524d\u63d0\u5c31\u662f\u4ed6\u63d0\u524d\u628a\u4f60\u7684\u6570\u636e\u7ed9\u5b58\u8d77\u6765\u4e86\u3002\u4f60\u5e73\u5e38\u64cd\u4f5c\u7684\u6240\u6709\u4fe1\u606f\u90fd\u662f\u5728\u5185\u5b58\u4e2d\u7684\uff0c\u800c\u6211\u4eec\u771f\u6b63\u7684\u4fe1\u606f\u662f\u4fdd\u5b58\u5728\u786c\u76d8\u4e2d\u7684\uff0c\u5185\u5b58\u4e2d\u7684\u4fe1\u606f\u65ad\u7535\u4ee5\u540e\u5c31\u6d88\u5931\u4e86\uff0c\u786c\u76d8\u4e2d\u7684\u4fe1\u606f\u65ad\u7535\u4ee5\u540e\u8fd8\u53ef\u4ee5\u4fdd\u7559\u4e0b\u6765\uff01 \u6211\u4eec\u5c06\u6587\u4ef6\u7531\u5185\u5b58\u4e2d\u4fdd\u5b58\u5230\u786c\u76d8\u4e2d\u7684\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u6211\u4eec\u53eb\u505a\u6570\u636e\u4fdd\u5b58\uff0c\u4e5f\u5c31\u53eb\u505a\u6301\u4e45\u5316\u3002\u4f46\u662f\u628a\u5b83\u4fdd\u5b58\u4e0b\u6765\u4e0d\u662f\u4f60\u7684\u76ee\u7684\uff0c\u6700\u7ec8\u4f60\u8fd8\u8981\u628a\u5b83\u518d\u8bfb\u53d6\u51fa\u6765\uff0c\u5b83\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u6211\u4eec\u53eb\u505a\u6570\u636e\u6062\u590d\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684word\u4e3a\u4ec0\u4e48\u65ad\u7535\u4ee5\u540e\u8fd8\u80fd\u591f\u7ed9\u4f60\u4fdd\u7559\u6587\u4ef6\uff0c\u56e0\u4e3a\u5b83\u6267\u884c\u4e86\u4e00\u4e2a\u81ea\u52a8\u5907\u4efd\u7684\u8fc7\u7a0b\uff0c\u4e5f\u5c31\u662f\u901a\u8fc7\u81ea\u52a8\u7684\u5f62\u5f0f\uff0c\u628a\u4f60\u7684\u6570\u636e\u5b58\u50a8\u8d77\u6765\uff0c\u90a3\u4e48\u6709\u4e86\u8fd9\u79cd\u5f62\u5f0f\u4ee5\u540e\uff0c\u6211\u4eec\u7684\u6570\u636e\u5c31\u53ef\u4ee5\u7531\u5185\u5b58\u5230\u786c\u76d8\u4e0a\u5b9e\u73b0\u4fdd\u5b58\u3002 5.1.2 \u4ec0\u4e48\u662f\u6301\u4e45\u5316 \u00b6 (1)\u4ec0\u4e48\u662f\u6301\u4e45\u5316 \u5229\u7528\u6c38\u4e45\u6027\u5b58\u50a8\u4ecb\u8d28\u5c06\u6570\u636e\u8fdb\u884c\u4fdd\u5b58\uff0c\u5728\u7279\u5b9a\u7684\u65f6\u95f4\u5c06\u4fdd\u5b58\u7684\u6570\u636e\u8fdb\u884c\u6062\u590d\u7684\u5de5\u4f5c\u673a\u5236\u79f0\u4e3a\u6301\u4e45\u5316 \u3002 \u6301\u4e45\u5316\u7528\u4e8e\u9632\u6b62\u6570\u636e\u7684\u610f\u5916\u4e22\u5931\uff0c\u786e\u4fdd\u6570\u636e\u5b89\u5168\u6027\u3002 (2)\u6301\u4e45\u5316\u8fc7\u7a0b\u4fdd\u5b58\u4ec0\u4e48\uff1f \u6211\u4eec\u77e5\u9053\u4e00\u70b9\uff0c\u8ba1\u7b97\u673a\u4e2d\u7684\u6570\u636e\u5168\u90e8\u90fd\u662f\u4e8c\u8fdb\u5236\uff0c\u5982\u679c\u73b0\u5728\u6211\u8981\u4f60\u7ed9\u6211\u4fdd\u5b58\u4e00\u7ec4\u6570\u636e\u7684\u8bdd\uff0c\u4f60\u6709\u4ec0\u4e48\u6837\u7684\u65b9\u5f0f\u5462\uff0c\u5176\u5b9e\u6700\u7b80\u5355\u7684\u5c31\u662f\u73b0\u5728\u957f\u4ec0\u4e48\u6837\uff0c\u6211\u5c31\u8bb0\u4e0b\u6765\u5c31\u884c\u4e86\uff0c\u90a3\u4e48\u8fd9\u79cd\u662f\u8bb0\u5f55\u7eaf\u7cb9\u7684\u6570\u636e\uff0c\u4e5f\u53eb\u505a\u5feb\u7167\u5b58\u50a8\uff0c\u4e5f\u5c31\u662f\u5b83\u4fdd\u5b58\u7684\u662f\u67d0\u4e00\u65f6\u523b\u7684\u6570\u636e\u72b6\u6001\u3002 \u8fd8\u6709\u4e00\u79cd\u5f62\u5f0f\uff0c\u5b83\u4e0d\u8bb0\u5f55\u4f60\u7684\u6570\u636e\uff0c\u5b83\u8bb0\u5f55\u4f60\u6240\u6709\u7684\u64cd\u4f5c\u8fc7\u7a0b\uff0c\u6bd4\u5982\u8bf4\u5927\u5bb6\u7528idea\u7684\u65f6\u5019\uff0c\u6709\u6ca1\u6709\u9047\u5230\u8fc7\u5199\u9519\u4e86ctrl+z\u64a4\u9500\uff0c\u7136\u540ectrl+y\u8fd8\u80fd\u6062\u590d\uff0c\u8fd9\u4e2a\u5730\u65b9\u5b83\u4e5f\u662f\u5728\u8bb0\u5f55\uff0c\u4f46\u662f\u8bb0\u5f55\u7684\u662f\u4f60\u6240\u6709\u7684\u64cd\u4f5c\u8fc7\u7a0b\uff0c\u90a3\u6211\u60f3\u95ee\u4e00\u4e0b\uff0c\u64cd\u4f5c\u8fc7\u7a0b\uff0c\u6211\u90fd\u7ed9\u4f60\u7559\u4e0b\u6765\u4e86\uff0c\u4f60\u8bf4\u6570\u636e\u8fd8\u4f1a\u4e22\u5417\uff1f\u80af\u5b9a\u4e0d\u4f1a\u4e22\uff0c\u56e0\u4e3a\u4f60\u6240\u6709\u7684\u64cd\u4f5c\u8fc7\u7a0b\u6211\u90fd\u4fdd\u5b58\u4e86\u3002\u8fd9\u79cd\u4fdd\u5b58\u64cd\u4f5c\u8fc7\u7a0b\u7684\u5b58\u50a8\uff0c\u7528\u4e13\u4e1a\u672f\u8bed\u6765\u8bf4\u53ef\u4ee5\u8bf4\u662f\u65e5\u5fd7\uff0c\u8fd9\u662f\u4e24\u79cd\u4e0d\u540c\u7684\u4fdd\u5b58\u6570\u636e\u7684\u5f62\u5f0f\u554a\u3002 \u603b\u7ed3\u4e00\u4e0b\uff1a \u7b2c\u4e00\u79cd\uff1a\u5c06\u5f53\u524d\u6570\u636e\u72b6\u6001\u8fdb\u884c\u4fdd\u5b58\uff0c\u5feb\u7167\u5f62\u5f0f\uff0c\u5b58\u50a8\u6570\u636e\u7ed3\u679c\uff0c\u5b58\u50a8\u683c\u5f0f\u7b80\u5355\uff0c\u5173\u6ce8\u70b9\u5728\u6570\u636e\u3002 \u7b2c\u4e8c\u79cd\uff1a\u5c06\u6570\u636e\u7684\u64cd\u4f5c\u8fc7\u7a0b\u8fdb\u884c\u4fdd\u5b58\uff0c\u65e5\u5fd7\u5f62\u5f0f\uff0c\u5b58\u50a8\u64cd\u4f5c\u8fc7\u7a0b\uff0c\u5b58\u50a8\u683c\u5f0f\u590d\u6742\uff0c\u5173\u6ce8\u70b9\u5728\u6570\u636e\u7684\u64cd\u4f5c\u8fc7\u7a0b\u3002 5.2 RDB \u00b6 5.2.1 save\u6307\u4ee4 \u00b6 \u624b\u52a8\u6267\u884c\u4e00\u6b21\u4fdd\u5b58\u64cd\u4f5c save save\u6307\u4ee4\u76f8\u5173\u914d\u7f6e \u8bbe\u7f6e\u672c\u5730\u6570\u636e\u5e93\u6587\u4ef6\u540d\uff0c\u9ed8\u8ba4\u503c\u4e3a dump.rdb\uff0c\u901a\u5e38\u8bbe\u7f6e\u4e3adump-\u7aef\u53e3\u53f7.rdb dbfilename filename \u8bbe\u7f6e\u5b58\u50a8.rdb\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u901a\u5e38\u8bbe\u7f6e\u6210\u5b58\u50a8\u7a7a\u95f4\u8f83\u5927\u7684\u76ee\u5f55\u4e2d\uff0c\u76ee\u5f55\u540d\u79f0data dir path \u8bbe\u7f6e\u5b58\u50a8\u81f3\u672c\u5730\u6570\u636e\u5e93\u65f6\u662f\u5426\u538b\u7f29\u6570\u636e\uff0c\u9ed8\u8ba4yes\uff0c\u8bbe\u7f6e\u4e3ano\uff0c\u8282\u7701 CPU \u8fd0\u884c\u65f6\u95f4\uff0c\u4f46\u5b58\u50a8\u6587\u4ef6\u53d8\u5927 rdbcompression yes|no \u8bbe\u7f6e\u8bfb\u5199\u6587\u4ef6\u8fc7\u7a0b\u662f\u5426\u8fdb\u884cRDB\u683c\u5f0f\u6821\u9a8c\uff0c\u9ed8\u8ba4yes\uff0c\u8bbe\u7f6e\u4e3ano\uff0c\u8282\u7ea6\u8bfb\u519910%\u65f6\u95f4\u6d88\u8017\uff0c\u5355\u5b58\u5728\u6570\u636e\u635f\u574f\u7684\u98ce\u9669 rdbchecksum yes|no save\u6307\u4ee4\u5de5\u4f5c\u539f\u7406 \u9700\u8981\u6ce8\u610f\u4e00\u4e2a\u95ee\u9898\uff0c\u6765\u770b\u4e00\u4e0b\uff0c\u73b0\u5728\u6709\u56db\u4e2a\u5ba2\u6237\u7aef\u5404\u81ea\u8981\u6267\u884c\u4e00\u4e2a\u6307\u4ee4\uff0c\u628a\u8fd9\u4e9b\u6307\u4ee4\u53d1\u9001\u5230redis\u670d\u52a1\u5668\u540e\uff0c\u4ed6\u4eec\u6267\u884c\u6709\u4e00\u4e2a\u5148\u540e\u987a\u5e8f\u95ee\u9898\uff0c\u5047\u5b9a\u5c31\u662f\u6309\u71671234\u7684\u987a\u5e8f\u653e\u8fc7\u53bb\u7684\u8bdd\uff0c\u90a3\u4f1a\u662f\u4ec0\u4e48\u6837\u7684\uff1f \u8bb0\u5f97redis\u662f\u4e2a\u5355\u7ebf\u7a0b\u7684\u5de5\u4f5c\u6a21\u5f0f\uff0c\u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\u961f\u5217\uff0c\u6240\u6709\u7684\u547d\u4ee4\u90fd\u4f1a\u8fdb\u5230\u8fd9\u4e2a\u961f\u5217\u91cc\u8fb9\uff0c\u5728\u8fd9\u513f\u6392\u961f\u6267\u884c\uff0c\u6267\u884c\u5b8c\u4e00\u4e2a\u6d88\u5931\u4e00\u4e2a\uff0c\u5f53\u6240\u6709\u7684\u547d\u4ee4\u90fd\u6267\u884c\u5b8c\u4e86\uff0cOK\uff0c\u7ed3\u679c\u8fbe\u5230\u4e86\u3002 \u4f46\u662f\u5982\u679c\u73b0\u5728\u6211\u4eec\u6267\u884c\u7684\u65f6\u5019save\u6307\u4ee4\u4fdd\u5b58\u7684\u6570\u636e\u91cf\u5f88\u5927\u4f1a\u662f\u4ec0\u4e48\u73b0\u8c61\u5462\uff1f \u4ed6\u4f1a\u975e\u5e38\u8017\u65f6\uff0c\u4ee5\u81f3\u4e8e\u5f71\u54cd\u5230\u5b83\u5728\u6267\u884c\u7684\u65f6\u5019\uff0c\u540e\u9762\u7684\u6307\u4ee4\u90fd\u8981\u7b49\uff0c\u6240\u4ee5\u8bf4\u8fd9\u79cd\u6a21\u5f0f\u662f\u4e0d\u53cb\u597d\u7684\uff0c\u8fd9\u662fsave\u6307\u4ee4\u5bf9\u5e94\u7684\u4e00\u4e2a\u95ee\u9898\uff0c\u5f53cpu\u6267\u884c\u7684\u65f6\u5019\u4f1a\u963b\u585eredis\u670d\u52a1\u5668\uff0c\u76f4\u5230\u4ed6\u6267\u884c\u5b8c\u6bd5\uff0c\u6240\u4ee5\u8bf4\u6211\u4eec\u4e0d\u5efa\u8bae\u5927\u5bb6\u5728\u7ebf\u4e0a\u73af\u5883\u7528save\u6307\u4ee4\u3002 5.2.2 bgsave\u6307\u4ee4 \u00b6 \u4e4b\u524d\u6211\u4eec\u8bb2\u5230\u4e86\u5f53save\u6307\u4ee4\u7684\u6570\u636e\u91cf\u8fc7\u5927\u65f6\uff0c\u5355\u7ebf\u7a0b\u6267\u884c\u65b9\u5f0f\u9020\u6210\u6548\u7387\u8fc7\u4f4e\uff0c\u90a3\u5e94\u8be5\u5982\u4f55\u5904\u7406\uff1f \u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\uff1a bgsave \u6307\u4ee4\uff0cbg\u5176\u5b9e\u662fbackground\u7684\u610f\u601d\uff0c\u540e\u53f0\u6267\u884c\u7684\u610f\u601d \u624b\u52a8\u542f\u52a8\u540e\u53f0\u4fdd\u5b58\u64cd\u4f5c\uff0c\u4f46\u4e0d\u662f\u7acb\u5373\u6267\u884c bgsave bgsave\u6307\u4ee4\u76f8\u5173\u914d\u7f6e \u540e\u53f0\u5b58\u50a8\u8fc7\u7a0b\u4e2d\u5982\u679c\u51fa\u73b0\u9519\u8bef\u73b0\u8c61\uff0c\u662f\u5426\u505c\u6b62\u4fdd\u5b58\u64cd\u4f5c\uff0c\u9ed8\u8ba4yes stop-writes-on-bgsave-error yes|no \u5176 \u4ed6 dbfilename filename dir path rdbcompression yes|no rdbchecksum yes|no bgsave\u6307\u4ee4\u5de5\u4f5c\u539f\u7406 \u5f53\u6267\u884cbgsave\u7684\u65f6\u5019\uff0c\u5ba2\u6237\u7aef\u53d1\u51fabgsave\u6307\u4ee4\u7ed9\u5230redis\u670d\u52a1\u5668\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u65f6\u5019\u670d\u52a1\u5668\u9a6c\u4e0a\u56de\u4e00\u4e2a\u7ed3\u679c\u544a\u8bc9\u5ba2\u6237\u7aef\u540e\u53f0\u5df2\u7ecf\u5f00\u59cb\u4e86\uff0c\u4e0e\u6b64\u540c\u65f6\u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u4f7f\u7528Linux\u7684fork\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u8ba9\u8fd9\u4e2a\u5b50\u8fdb\u7a0b\u53bb\u6267\u884csave\u76f8\u5173\u7684\u64cd\u4f5c\uff0c\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u60f3\u4e00\u4e0b\uff0c\u6211\u4eec\u4e3b\u8fdb\u7a0b\u4e00\u76f4\u5728\u5904\u7406\u6307\u4ee4\uff0c\u800c\u5b50\u8fdb\u7a0b\u5728\u6267\u884c\u540e\u53f0\u7684\u4fdd\u5b58\uff0c\u5b83\u4f1a\u4e0d\u4f1a\u5e72\u6270\u5230\u4e3b\u8fdb\u7a0b\u7684\u6267\u884c\u5417\uff1f \u7b54\u6848\u662f\u4e0d\u4f1a\uff0c\u6240\u4ee5\u8bf4\u4ed6\u624d\u662f\u4e3b\u6d41\u65b9\u6848\u3002\u5b50\u8fdb\u7a0b\u5f00\u59cb\u6267\u884c\u4e4b\u540e\uff0c\u5b83\u5c31\u4f1a\u521b\u5efa\u554aRDB\u6587\u4ef6\u628a\u5b83\u5b58\u8d77\u6765\uff0c\u64cd\u4f5c\u5b8c\u4ee5\u540e\u4ed6\u4f1a\u628a\u8fd9\u4e2a\u7ed3\u679c\u8fd4\u56de\uff0c\u4e5f\u5c31\u662f\u8bf4bgsave\u7684\u8fc7\u7a0b\u5206\u6210\u4e24\u4e2a\u8fc7\u7a0b\uff0c\u7b2c\u4e00\u4e2a\u662f\u670d\u52a1\u7aef\u62ff\u5230\u6307\u4ee4\u76f4\u63a5\u544a\u8bc9\u5ba2\u6237\u7aef\u5f00\u59cb\u6267\u884c\u4e86\uff1b\u53e6\u5916\u4e00\u4e2a\u8fc7\u7a0b\u662f\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u5728\u5b8c\u6210\u540e\u53f0\u7684\u4fdd\u5b58\u64cd\u4f5c\uff0c\u64cd\u4f5c\u5b8c\u4ee5\u540e\u56de\u4e00\u4e2a\u6d88\u606f\u3002 5.2.3 save\u914d\u7f6e\u81ea\u52a8\u6267\u884c \u00b6 \u8bbe\u7f6e\u81ea\u52a8\u6301\u4e45\u5316\u7684\u6761\u4ef6\uff0c\u6ee1\u8db3\u9650\u5b9a\u65f6\u95f4\u8303\u56f4\u5185key\u7684\u53d8\u5316\u6570\u91cf\u8fbe\u5230\u6307\u5b9a\u6570\u91cf\u5373\u8fdb\u884c\u6301\u4e45\u5316 save second changes \u53c2\u6570 second\uff1a\u76d1\u63a7\u65f6\u95f4\u8303\u56f4 changes\uff1a\u76d1\u63a7key\u7684\u53d8\u5316\u91cf \u8303\u4f8b\uff1a save 900 1 save 300 10 save 60 10000 \u5176\u4ed6\u76f8\u5173\u914d\u7f6e\uff1a dbfilename filename dir path rdbcompression yes|no rdbchecksum yes|no stop-writes-on-bgsave-error yes|no save\u914d\u7f6e\u5de5\u4f5c\u539f\u7406 5.2.4 RDB\u4e09\u79cd\u542f\u52a8\u65b9\u5f0f\u5bf9\u6bd4 \u00b6 \u65b9\u5f0f save\u6307\u4ee4 bgsave\u6307\u4ee4 \u8bfb\u5199 \u540c\u6b65 \u5f02\u6b65 \u963b\u585e\u5ba2\u6237\u7aef\u6307\u4ee4 \u662f \u5426 \u989d\u5916\u5185\u5b58\u6d88\u8017 \u5426 \u662f \u542f\u52a8\u65b0\u8fdb\u7a0b \u5426 \u662f RDB\u7279\u6b8a\u542f\u52a8\u5f62\u5f0f \u670d\u52a1\u5668\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u91cd\u542f debug reload \u5173\u95ed\u670d\u52a1\u5668\u65f6\u6307\u5b9a\u4fdd\u5b58\u6570\u636e shutdown save \u5168\u91cf\u590d\u5236\uff08\u5728\u4e3b\u4ece\u590d\u5236\u4e2d\u8be6\u7ec6\u8bb2\u89e3\uff09 RDB\u4f18\u70b9\uff1a RDB\u662f\u4e00\u4e2a\u7d27\u51d1\u538b\u7f29\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5b58\u50a8\u6548\u7387\u8f83\u9ad8 RDB\u5185\u90e8\u5b58\u50a8\u7684\u662fredis\u5728\u67d0\u4e2a\u65f6\u95f4\u70b9\u7684\u6570\u636e\u5feb\u7167\uff0c\u975e\u5e38\u9002\u5408\u7528\u4e8e\u6570\u636e\u5907\u4efd\uff0c\u5168\u91cf\u590d\u5236\u7b49\u573a\u666f RDB\u6062\u590d\u6570\u636e\u7684\u901f\u5ea6\u8981\u6bd4AOF\u5feb\u5f88\u591a \u5e94\u7528\uff1a\u670d\u52a1\u5668\u4e2d\u6bcfX\u5c0f\u65f6\u6267\u884cbgsave\u5907\u4efd\uff0c\u5e76\u5c06RDB\u6587\u4ef6\u62f7\u8d1d\u5230\u8fdc\u7a0b\u673a\u5668\u4e2d\uff0c\u7528\u4e8e\u707e\u96be\u6062\u590d\u3002 RDB\u7f3a\u70b9 RDB\u65b9\u5f0f\u65e0\u8bba\u662f\u6267\u884c\u6307\u4ee4\u8fd8\u662f\u5229\u7528\u914d\u7f6e\uff0c\u65e0\u6cd5\u505a\u5230\u5b9e\u65f6\u6301\u4e45\u5316\uff0c\u5177\u6709\u8f83\u5927\u7684\u53ef\u80fd\u6027\u4e22\u5931\u6570\u636e bgsave\u6307\u4ee4\u6bcf\u6b21\u8fd0\u884c\u8981\u6267\u884cfork\u64cd\u4f5c\u521b\u5efa\u5b50\u8fdb\u7a0b\uff0c\u8981\u727a\u7272\u6389\u4e00\u4e9b\u6027\u80fd Redis\u7684\u4f17\u591a\u7248\u672c\u4e2d\u672a\u8fdb\u884cRDB\u6587\u4ef6\u683c\u5f0f\u7684\u7248\u672c\u7edf\u4e00\uff0c\u6709\u53ef\u80fd\u51fa\u73b0\u5404\u7248\u672c\u670d\u52a1\u4e4b\u95f4\u6570\u636e\u683c\u5f0f\u65e0\u6cd5\u517c\u5bb9\u73b0\u8c61 5.3 AOF \u00b6 \u4e3a\u4ec0\u4e48\u8981\u6709AOF,\u8fd9\u5f97\u4eceRDB\u7684\u5b58\u50a8\u7684\u5f0a\u7aef\u8bf4\u8d77\uff1a \u5b58\u50a8\u6570\u636e\u91cf\u8f83\u5927\uff0c\u6548\u7387\u8f83\u4f4e\uff0c\u57fa\u4e8e\u5feb\u7167\u601d\u60f3\uff0c\u6bcf\u6b21\u8bfb\u5199\u90fd\u662f\u5168\u90e8\u6570\u636e\uff0c\u5f53\u6570\u636e\u91cf\u5de8\u5927\u65f6\uff0c\u6548\u7387\u975e\u5e38\u4f4e \u5927\u6570\u636e\u91cf\u4e0b\u7684IO\u6027\u80fd\u8f83\u4f4e \u57fa\u4e8efork\u521b\u5efa\u5b50\u8fdb\u7a0b\uff0c\u5185\u5b58\u4ea7\u751f\u989d\u5916\u6d88\u8017 \u5b95\u673a\u5e26\u6765\u7684\u6570\u636e\u4e22\u5931\u98ce\u9669 \u90a3\u89e3\u51b3\u7684\u601d\u8def\u662f\u4ec0\u4e48\u5462\uff1f \u4e0d\u5199\u5168\u6570\u636e\uff0c\u4ec5\u8bb0\u5f55\u90e8\u5206\u6570\u636e \u964d\u4f4e\u533a\u5206\u6570\u636e\u662f\u5426\u6539\u53d8\u7684\u96be\u5ea6\uff0c\u6539\u8bb0\u5f55\u6570\u636e\u4e3a\u8bb0\u5f55\u64cd\u4f5c\u8fc7\u7a0b \u5bf9\u6240\u6709\u64cd\u4f5c\u5747\u8fdb\u884c\u8bb0\u5f55\uff0c\u6392\u9664\u4e22\u5931\u6570\u636e\u7684\u98ce\u9669 5.3.1 AOF\u6982\u5ff5 \u00b6 AOF (append only file)\u6301\u4e45\u5316\uff1a\u4ee5\u72ec\u7acb\u65e5\u5fd7\u7684\u65b9\u5f0f\u8bb0\u5f55\u6bcf\u6b21\u5199\u547d\u4ee4\uff0c\u91cd\u542f\u65f6\u518d\u91cd\u65b0\u6267\u884cAOF\u6587\u4ef6\u4e2d\u547d\u4ee4 \u8fbe\u5230\u6062\u590d\u6570\u636e\u7684\u76ee\u7684\u3002 \u4e0eRDB\u76f8\u6bd4\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\u7531\u8bb0\u5f55\u6570\u636e\u6539\u4e3a\u8bb0\u5f55\u6570\u636e\u4ea7\u751f\u7684\u53d8\u5316 AOF\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u89e3\u51b3\u4e86\u6570\u636e\u6301\u4e45\u5316\u7684\u5b9e\u65f6\u6027\uff0c\u76ee\u524d\u5df2\u7ecf\u662fRedis\u6301\u4e45\u5316\u7684\u4e3b\u6d41\u65b9\u5f0f AOF\u5199\u6570\u636e\u8fc7\u7a0b \u542f\u52a8AOF\u76f8\u5173\u914d\u7f6e \u5f00\u542fAOF\u6301\u4e45\u5316\u529f\u80fd\uff0c\u9ed8\u8ba4no\uff0c\u5373\u4e0d\u5f00\u542f\u72b6\u6001 appendonly yes|no AOF\u6301\u4e45\u5316\u6587\u4ef6\u540d\uff0c\u9ed8\u8ba4\u6587\u4ef6\u540d\u4e3aappendonly.aof\uff0c\u5efa\u8bae\u914d\u7f6e\u4e3aappendonly-\u7aef\u53e3\u53f7.aof appendfilename filename AOF\u6301\u4e45\u5316\u6587\u4ef6\u4fdd\u5b58\u8def\u5f84\uff0c\u4e0eRDB\u6301\u4e45\u5316\u6587\u4ef6\u4fdd\u6301\u4e00\u81f4\u5373\u53ef dir AOF\u5199\u6570\u636e\u7b56\u7565\uff0c\u9ed8\u8ba4\u4e3aeverysec appendfsync always|everysec|no 5.3.2 AOF\u6267\u884c\u7b56\u7565 \u00b6 AOF\u5199\u6570\u636e\u4e09\u79cd\u7b56\u7565(appendfsync) always (\u6bcf\u6b21\uff09\uff1a\u6bcf\u6b21\u5199\u5165\u64cd\u4f5c\u5747\u540c\u6b65\u5230AOF\u6587\u4ef6\u4e2d\u6570\u636e\u96f6\u8bef\u5dee\uff0c\u6027\u80fd\u8f83\u4f4e\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528\u3002 everysec \uff08\u6bcf\u79d2\uff09\uff1a\u6bcf\u79d2\u5c06\u7f13\u51b2\u533a\u4e2d\u7684\u6307\u4ee4\u540c\u6b65\u5230AOF\u6587\u4ef6\u4e2d\uff0c\u5728\u7cfb\u7edf\u7a81\u7136\u5b95\u673a\u7684\u60c5\u51b5\u4e0b\u4e22\u59311\u79d2\u5185\u7684\u6570\u636e \u6570\u636e\u51c6\u786e\u6027\u8f83\u9ad8\uff0c\u6027\u80fd\u8f83\u9ad8\uff0c\u5efa\u8bae\u4f7f\u7528\uff0c\u4e5f\u662f\u9ed8\u8ba4\u914d\u7f6e no \uff08\u7cfb\u7edf\u63a7\u5236\uff09\uff1a\u7531\u64cd\u4f5c\u7cfb\u7edf\u63a7\u5236\u6bcf\u6b21\u540c\u6b65\u5230AOF\u6587\u4ef6\u7684\u5468\u671f\uff0c\u6574\u4f53\u8fc7\u7a0b\u4e0d\u53ef\u63a7 5.3.3 AOF\u91cd\u5199 \u00b6 \u573a\u666f\uff1aAOF\u5199\u6570\u636e\u9047\u5230\u7684\u95ee\u9898\uff0c\u5982\u679c\u8fde\u7eed\u6267\u884c\u5982\u4e0b\u6307\u4ee4\u8be5\u5982\u4f55\u5904\u7406 \u4ec0\u4e48\u53ebAOF\u91cd\u5199\uff1f \u968f\u7740\u547d\u4ee4\u4e0d\u65ad\u5199\u5165AOF\uff0c\u6587\u4ef6\u4f1a\u8d8a\u6765\u8d8a\u5927\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cRedis\u5f15\u5165\u4e86AOF\u91cd\u5199\u673a\u5236\u538b\u7f29\u6587\u4ef6\u4f53\u79ef\u3002AOF\u6587\u4ef6\u91cd \u5199\u662f\u5c06Redis\u8fdb\u7a0b\u5185\u7684\u6570\u636e\u8f6c\u5316\u4e3a\u5199\u547d\u4ee4\u540c\u6b65\u5230\u65b0AOF\u6587\u4ef6\u7684\u8fc7\u7a0b\u3002\u7b80\u5355\u8bf4\u5c31\u662f\u5c06\u5bf9\u540c\u4e00\u4e2a\u6570\u636e\u7684\u82e5\u5e72\u4e2a\u6761\u547d\u4ee4\u6267\u884c\u7ed3 \u679c\u8f6c\u5316\u6210\u6700\u7ec8\u7ed3\u679c\u6570\u636e\u5bf9\u5e94\u7684\u6307\u4ee4\u8fdb\u884c\u8bb0\u5f55\u3002 AOF\u91cd\u5199\u4f5c\u7528 \u964d\u4f4e\u78c1\u76d8\u5360\u7528\u91cf\uff0c\u63d0\u9ad8\u78c1\u76d8\u5229\u7528\u7387 \u63d0\u9ad8\u6301\u4e45\u5316\u6548\u7387\uff0c\u964d\u4f4e\u6301\u4e45\u5316\u5199\u65f6\u95f4\uff0c\u63d0\u9ad8IO\u6027\u80fd \u964d\u4f4e\u6570\u636e\u6062\u590d\u7528\u65f6\uff0c\u63d0\u9ad8\u6570\u636e\u6062\u590d\u6548\u7387 AOF\u91cd\u5199\u89c4\u5219 \u8fdb\u7a0b\u5185\u5177\u6709\u65f6\u6548\u6027\u7684\u6570\u636e\uff0c\u5e76\u4e14\u6570\u636e\u5df2\u8d85\u65f6\u5c06\u4e0d\u518d\u5199\u5165\u6587\u4ef6 \u975e\u5199\u5165\u7c7b\u7684\u65e0\u6548\u6307\u4ee4\u5c06\u88ab\u5ffd\u7565\uff0c\u53ea\u4fdd\u7559\u6700\u7ec8\u6570\u636e\u7684\u5199\u5165\u547d\u4ee4 \u5982del key1\u3001 hdel key2\u3001srem key3\u3001set key4 111\u3001set key4 222\u7b49 \u5982select\u6307\u4ee4\u867d\u7136\u4e0d\u66f4\u6539\u6570\u636e\uff0c\u4f46\u662f\u66f4\u6539\u4e86\u6570\u636e\u7684\u5b58\u50a8\u4f4d\u7f6e\uff0c\u6b64\u7c7b\u547d\u4ee4\u540c\u6837\u9700\u8981\u8bb0\u5f55 \u5bf9\u540c\u4e00\u6570\u636e\u7684\u591a\u6761\u5199\u547d\u4ee4\u5408\u5e76\u4e3a\u4e00\u6761\u547d\u4ee4 \u5982lpushlist1 a\u3001lpush list1 b\u3001lpush list1 c\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff1alpush list1 a b c\u3002 \u4e3a\u9632\u6b62\u6570\u636e\u91cf\u8fc7\u5927\u9020\u6210\u5ba2\u6237\u7aef\u7f13\u51b2\u533a\u6ea2\u51fa\uff0c\u5bf9list\u3001set\u3001hash\u3001zset\u7b49\u7c7b\u578b\uff0c\u6bcf\u6761\u6307\u4ee4\u6700\u591a\u5199\u516564\u4e2a\u5143\u7d20 AOF\u91cd\u5199\u65b9\u5f0f \u624b\u52a8\u91cd\u5199 bgrewriteaof \u624b\u52a8\u91cd\u5199\u539f\u7406\u5206\u6790\uff1a \u81ea\u52a8\u91cd\u5199 auto-aof-rewrite-min-size size auto-aof-rewrite-percentage percentage \u81ea\u52a8\u91cd\u5199\u89e6\u53d1\u6761\u4ef6\u8bbe\u7f6e auto-aof-rewrite-min-size size auto-aof-rewrite-percentage percent \u81ea\u52a8\u91cd\u5199\u89e6\u53d1\u6bd4\u5bf9\u53c2\u6570\uff08 \u8fd0\u884c\u6307\u4ee4info Persistence\u83b7\u53d6\u5177\u4f53\u4fe1\u606f \uff09 aof_current_size aof_base_size \u81ea\u52a8\u91cd\u5199\u89e6\u53d1\u6761\u4ef6\u516c\u5f0f\uff1a 5.3.4 AOF\u5de5\u4f5c\u6d41\u7a0b\u53ca\u91cd\u5199\u6d41\u7a0b \u00b6 5.4 RDB\u4e0eAOF\u533a\u522b \u00b6 5.4.1 RDB\u4e0eAOF\u5bf9\u6bd4\uff08\u4f18\u7f3a\u70b9\uff09 \u00b6 \u6301\u4e45\u5316\u65b9\u5f0f RDB AOF \u5360\u7528\u5b58\u50a8\u7a7a\u95f4 \u5c0f\uff08\u6570\u636e\u7ea7\uff1a\u538b\u7f29\uff09 \u5927\uff08\u6307\u4ee4\u7ea7\uff1a\u91cd\u5199\uff09 \u5b58\u50a8\u901f\u5ea6 \u6162 \u5feb \u6062\u590d\u901f\u5ea6 \u5feb \u6162 \u6570\u636e\u5b89\u5168\u6027 \u4f1a\u4e22\u5931\u6570\u636e \u4f9d\u636e\u7b56\u7565\u51b3\u5b9a \u8d44\u6e90\u6d88\u8017 \u9ad8/\u91cd\u91cf\u7ea7 \u4f4e/\u8f7b\u91cf\u7ea7 \u542f\u52a8\u4f18\u5148\u7ea7 \u4f4e \u9ad8 5.4.2 RDB\u4e0eAOF\u5e94\u7528\u573a\u666f \u00b6 RDB\u4e0eAOF\u7684\u9009\u62e9\u4e4b\u60d1 \u5bf9\u6570\u636e\u975e\u5e38\u654f\u611f\uff0c\u5efa\u8bae\u4f7f\u7528\u9ed8\u8ba4\u7684AOF\u6301\u4e45\u5316\u65b9\u6848 AOF\u6301\u4e45\u5316\u7b56\u7565\u4f7f\u7528everysecond\uff0c\u6bcf\u79d2\u949ffsync\u4e00\u6b21\u3002\u8be5\u7b56\u7565redis\u4ecd\u53ef\u4ee5\u4fdd\u6301\u5f88\u597d\u7684\u5904\u7406\u6027\u80fd\uff0c\u5f53\u51fa \u73b0\u95ee\u9898\u65f6\uff0c\u6700\u591a\u4e22\u59310-1\u79d2\u5185\u7684\u6570\u636e\u3002 \u6ce8\u610f\uff1a\u7531\u4e8eAOF\u6587\u4ef6\u5b58\u50a8\u4f53\u79ef\u8f83\u5927\uff0c\u4e14\u6062\u590d\u901f\u5ea6\u8f83\u6162 \u6570\u636e\u5448\u73b0\u9636\u6bb5\u6709\u6548\u6027\uff0c\u5efa\u8bae\u4f7f\u7528RDB\u6301\u4e45\u5316\u65b9\u6848 \u6570\u636e\u53ef\u4ee5\u826f\u597d\u7684\u505a\u5230\u9636\u6bb5\u5185\u65e0\u4e22\u5931\uff08\u8be5\u9636\u6bb5\u662f\u5f00\u53d1\u8005\u6216\u8fd0\u7ef4\u4eba\u5458\u624b\u5de5\u7ef4\u62a4\u7684\uff09\uff0c\u4e14\u6062\u590d\u901f\u5ea6\u8f83\u5feb\uff0c\u9636\u6bb5 \u70b9\u6570\u636e\u6062\u590d\u901a\u5e38\u91c7\u7528RDB\u65b9\u6848 \u6ce8\u610f\uff1a\u5229\u7528RDB\u5b9e\u73b0\u7d27\u51d1\u7684\u6570\u636e\u6301\u4e45\u5316\u4f1a\u4f7fRedis\u964d\u7684\u5f88\u4f4e\uff0c\u614e\u91cd\u603b\u7ed3\uff1a \u7efc\u5408\u6bd4\u5bf9 RDB\u4e0eAOF\u7684\u9009\u62e9\u5b9e\u9645\u4e0a\u662f\u5728\u505a\u4e00\u79cd\u6743\u8861\uff0c\u6bcf\u79cd\u90fd\u6709\u5229\u6709\u5f0a \u5982\u4e0d\u80fd\u627f\u53d7\u6570\u5206\u949f\u4ee5\u5185\u7684\u6570\u636e\u4e22\u5931\uff0c\u5bf9\u4e1a\u52a1\u6570\u636e\u975e\u5e38\u654f\u611f\uff0c\u9009\u7528AOF \u5982\u80fd\u627f\u53d7\u6570\u5206\u949f\u4ee5\u5185\u7684\u6570\u636e\u4e22\u5931\uff0c\u4e14\u8ffd\u6c42\u5927\u6570\u636e\u96c6\u7684\u6062\u590d\u901f\u5ea6\uff0c\u9009\u7528RDB \u707e\u96be\u6062\u590d\u9009\u7528RDB \u53cc\u4fdd\u9669\u7b56\u7565\uff0c\u540c\u65f6\u5f00\u542f RDB\u548c AOF\uff0c\u91cd\u542f\u540e\uff0cRedis\u4f18\u5148\u4f7f\u7528 AOF \u6765\u6062\u590d\u6570\u636e\uff0c\u964d\u4f4e\u4e22\u5931\u6570\u636e\u7684\u91cf # \u5ba2\u6237\u7aef\u600e\u4e48\u8bbf\u95ee\u90fd\u884c bind 0 .0.0.0 port 6379 timeout 0 # \u540e\u53f0\u542f\u52a8 daemonize yes logfile \"log_6379.log\" dir /usr/local/redis/data # rdb \u65b9\u5f0f\u6587\u4ef6\u540d\u79f0 dbfilename \"dump6379.rdb\" # \u5b58\u50a8\u7b56\u7565 2s \u4e2d\u5185\u5982\u679c\u6709\u4e24\u4e2a \u4fee\u6539\u547d\u4ee4 \u5219\u6267\u884c\u5b58\u50a8 save 2 2 # aop \u914d\u7f6e appendonly yes appendfilename \"dump6379.aof\" appendfsync always # aof \u81ea\u52a8\u91cd\u5199 # \u6bcf4M \u6570\u636e \u91cd\u5199\u4e00\u6b21 auto-aof-rewrite-min-size 4mb # \u548c\u4e0a\u6b21\u5907\u4efd\u505a\u5bf9\u6bd4,\u5982\u679c \u8d85\u8fc7\u4e8610% \u5219\u91cd\u5199\u6587\u4ef6 auto-aof-rewrite-percentage 10 %","title":"day01"},{"location":"redis/day01/#1_redis","text":"","title":"1. Redis \u7b80\u4ecb"},{"location":"redis/day01/#redis","text":"\u672c\u8bfe\u7a0b\u6240\u793a\uff0c\u5747\u57fa\u4e8eCenter OS7\u5b89\u88c5Redis\u3002 0 ) \u5982\u679c wget \u547d\u4ee4\u627e\u4e0d\u5230 yum - y install wget 0 ) \u5982\u679cmake \u62a5\u9519 \u5b89\u88c5 c \u8bed\u8a00\u7f16\u8bd1\u73af\u5883 yum install gcc - c ++ (1)\u4e0b\u8f7dRedis \u4e0b\u8f7d\u5b89\u88c5\u5305\uff1a wget http://download.redis.io/releases/redis-5.0.0.tar.gz \u89e3\u538b\u5b89\u88c5\u5305\uff1a tar -xvf redis-5.0.0.tar.gz \u7f16\u8bd1\uff08\u5728\u89e3\u538b\u7684\u76ee\u5f55\u4e2d\u6267\u884c\uff09\uff1a make \u5b89\u88c5\uff08\u5728\u89e3\u538b\u7684\u76ee\u5f55\u4e2d\u6267\u884c\uff09\uff1a make install \uff082\uff09\u5b89\u88c5 Redis redis-server\uff0c\u670d\u52a1\u5668\u542f\u52a8\u547d\u4ee4 \u5ba2\u6237\u7aef\u542f\u52a8\u547d\u4ee4 redis-cli\uff0credis\u6838\u5fc3\u914d\u7f6e\u6587\u4ef6 redis.conf\uff0cRDB\u6587\u4ef6\u68c0\u67e5\u5de5\u5177\uff08\u5feb\u7167\u6301\u4e45\u5316\u6587\u4ef6\uff09 redis-check-dump\uff0cAOF\u6587\u4ef6\u4fee\u590d\u5de5\u5177 redis-check-aof","title":"Redis \u7684\u4e0b\u8f7d\u4e0e\u5b89\u88c5"},{"location":"redis/day01/#redis_1","text":"","title":"Redis\u670d\u52a1\u5668\u542f\u52a8"},{"location":"redis/day01/#redis_2","text":"\u542f\u52a8\u670d\u52a1\u5668\u2014\u2014\u53c2\u6570\u542f\u52a8 redis-server [ --port port ] \u8303\u4f8b redis-server --port 6379 \u542f\u52a8\u670d\u52a1\u5668\u2014\u2014\u914d\u7f6e\u6587\u4ef6\u542f\u52a8 redis-server config_file_name \u8303\u4f8b redis-server redis.conf","title":"Redis\u670d\u52a1\u5668\u542f\u52a8"},{"location":"redis/day01/#redis_3","text":"\u542f\u52a8\u5ba2\u6237\u7aef redis-cli [ -h host ] [ -p port ] \u8303 \u4f8b redis-cli -h 61 .129.65.248 -p 6384 \u6ce8\u610f\uff1a\u670d\u52a1\u5668\u542f\u52a8\u6307\u5b9a\u7aef\u53e3\u4f7f\u7528\u7684\u662f--port\uff0c\u5ba2\u6237\u7aef\u542f\u52a8\u6307\u5b9a\u7aef\u53e3\u4f7f\u7528\u7684\u662f-p\u3002-\u7684\u6570\u91cf\u4e0d\u540c\u3002","title":"Redis\u5ba2\u6237\u7aef\u542f\u52a8"},{"location":"redis/day01/#redis_4","text":"\u521b\u5efa\u914d\u7f6e\u6587\u4ef6\u5b58\u50a8\u76ee\u5f55 mkdir conf \u521b\u5efa\u670d\u52a1\u5668\u6587\u4ef6\u5b58\u50a8\u76ee\u5f55\uff08\u5305\u542b\u65e5\u5fd7\u3001\u6570\u636e\u3001\u4e34\u65f6\u914d\u7f6e\u6587\u4ef6\u7b49\uff09 mkdir data \u521b\u5efa\u5feb\u901f\u8bbf\u95ee\u94fe\u63a5 ln -s redis-5.0.0 redis","title":"Redis\u57fa\u7840\u73af\u5883\u8bbe\u7f6e\u7ea6\u5b9a"},{"location":"redis/day01/#_1","text":"# \u67e5\u770b\u914d\u7f6e\u547d\u4ee4 cat redis.conf | grep -v '#' | grep -v '^$' # \u90a3\u4e9bip \u80fd\u8bbf\u95eeredis #bind 127.0.0.1 # \u7aef\u53e3\u53f7 port 6379 # \u8d85\u65f6\u65f6\u95f4 #timeout 0 # \u662f\u5426\u540e\u53f0\u542f\u52a8 daemonize yes # \u65e5\u5fd7\u6587\u4ef6 logfile \"log_6379.log\" # \u6570\u636e\u6587\u4ef6\u4f4d\u7f6e dir /usr/local/redis/data","title":"\u914d\u7f6e\u6587\u4ef6\u542f\u52a8\u4e0e\u5e38\u7528\u914d\u7f6e"},{"location":"redis/day01/#_2","text":"\u8bbe\u7f6e\u670d\u52a1\u5668\u4ee5\u5b88\u62a4\u8fdb\u7a0b\u7684\u65b9\u5f0f\u8fd0\u884c\uff0c\u5f00\u542f\u540e\u670d\u52a1\u5668\u63a7\u5236\u53f0\u4e2d\u5c06\u6253\u5370\u670d\u52a1\u5668\u8fd0\u884c\u4fe1\u606f\uff08\u540c\u65e5\u5fd7\u5185\u5bb9\u76f8\u540c\uff09 daemonize yes | no \u7ed1\u5b9a\u4e3b\u673a\u5730\u5740 bind ip \u8bbe\u7f6e\u670d\u52a1\u5668\u7aef\u53e3 port port \u8bbe\u7f6e\u670d\u52a1\u5668\u6587\u4ef6\u4fdd\u5b58\u5730\u5740 dir path","title":"\u670d\u52a1\u5668\u7aef\u8bbe\u5b9a"},{"location":"redis/day01/#_3","text":"\u670d\u52a1\u5668\u5141\u8bb8\u5ba2\u6237\u7aef\u8fde\u63a5\u6700\u5927\u6570\u91cf\uff0c\u9ed8\u8ba40\uff0c\u8868\u793a\u65e0\u9650\u5236\u3002\u5f53\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u8fbe\u4e0a\u9650\u540e\uff0cRedis\u4f1a\u62d2\u7edd\u65b0\u7684\u8fde\u63a5 maxclients count \u5ba2\u6237\u7aef\u95f2\u7f6e\u7b49\u5f85\u6700\u5927\u65f6\u957f\uff0c\u8fbe\u5230\u6700\u5927\u503c\u540e\u5173\u95ed\u5bf9\u5e94\u8fde\u63a5\u3002\u5982\u9700\u5173\u95ed\u8be5\u529f\u80fd\uff0c\u8bbe\u7f6e\u4e3a 0 timeout seconds","title":"\u5ba2\u6237\u7aef\u914d\u7f6e"},{"location":"redis/day01/#_4","text":"\u8bbe\u7f6e\u670d\u52a1\u5668\u4ee5\u6307\u5b9a\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b loglevel debug | verbose | notice | warning \u65e5\u5fd7\u8bb0\u5f55\u6587\u4ef6\u540d logfile filename \u6ce8\u610f\uff1a\u65e5\u5fd7\u7ea7\u522b\u5f00\u53d1\u671f\u8bbe\u7f6e\u4e3averbose\u5373\u53ef\uff0c\u751f\u4ea7\u73af\u5883\u4e2d\u914d\u7f6e\u4e3anotice\uff0c\u7b80\u5316\u65e5\u5fd7\u8f93\u51fa\u91cf\uff0c\u964d\u4f4e\u5199\u65e5\u5fd7IO\u7684\u9891\u5ea6\u3002","title":"\u65e5\u5fd7\u914d\u7f6e"},{"location":"redis/day01/#redis_5","text":"","title":"Redis\u57fa\u672c\u64cd\u4f5c"},{"location":"redis/day01/#_5","text":"\u529f\u80fd\u6027\u547d\u4ee4 \u5e2e\u52a9\u4fe1\u606f\u67e5\u9605 \u9000\u51fa\u6307\u4ee4 \u6e05\u9664\u5c4f\u5e55\u4fe1\u606f","title":"\u547d\u4ee4\u884c\u6a21\u5f0f\u5de5\u5177\u4f7f\u7528\u601d\u8003"},{"location":"redis/day01/#_6","text":"\u8bbe\u7f6e key\uff0cvalue \u6570\u636e set key value \u8303\u4f8b set name itheima \u6839\u636e key \u67e5\u8be2\u5bf9\u5e94\u7684 value\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de\u7a7a\uff08nil\uff09 get key \u8303\u4f8b get name","title":"\u4fe1\u606f\u8bfb\u5199"},{"location":"redis/day01/#_7","text":"\u83b7\u53d6\u547d\u4ee4\u5e2e\u52a9\u6587\u6863 help [ command ] \u8303\u4f8b help set \u83b7\u53d6\u7ec4\u4e2d\u6240\u6709\u547d\u4ee4\u4fe1\u606f\u540d\u79f0 help [ @group-name ] \u8303\u4f8b help @string \u9000\u51fa\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\u6a21\u5f0f \u9000\u51fa\u5ba2\u6237\u7aef quit exit \u5feb\u6377\u952e Ctrl+C","title":"\u5e2e\u52a9\u4fe1\u606f"},{"location":"redis/day01/#164_redis","text":"\u5230\u8fd9\u91cc\uff0cRedis \u5165\u95e8\u7684\u76f8\u5173\u77e5\u8bc6\uff0c\u6211\u4eec\u5c31\u5168\u90e8\u5b66\u4e60\u5b8c\u4e86\uff0c\u518d\u6765\u56de\u987e\u4e00\u4e0b\uff0c\u8fd9\u4e2a\u90e8\u5206\u6211\u4eec\u4e3b\u8981\u8bb2\u89e3\u4e86\u54ea\u4e9b\u5185\u5bb9\u5462\uff1f \u9996\u5148\uff0c\u6211\u4eec\u5bf9Redis\u8fdb\u884c\u4e86\u4e00\u4e2a\u7b80\u5355\u4ecb\u7ecd\uff0c\u5305\u62ecNoSQL\u7684\u6982\u5ff5\u3001Redis\u7684\u6982\u5ff5\u7b49\u3002 \u7136\u540e\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86Redis \u7684\u4e0b\u8f7d\u4e0e\u5b89\u88c5\u3002\u5305\u62ec\u4e0b\u8f7d\u4e0e\u5b89\u88c5\u3001\u670d\u52a1\u5668\u4e0e\u5ba2\u6237\u7aef\u542f\u52a8\u3001\u4ee5\u53ca\u76f8\u5173\u914d\u7f6e\u6587\u4ef6\uff083\u7c7b\uff09\u3002 \u6700\u540e\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86Redis \u7684\u57fa\u672c\u64cd\u4f5c\u3002\u5305\u62ec\u6570\u636e\u8bfb\u5199\u3001\u9000\u51fa\u4e0e\u5e2e\u52a9\u4fe1\u606f\u83b7\u53d6\u3002","title":"1.6.4  redis\u5165\u95e8\u603b\u7ed3"},{"location":"redis/day01/#2","text":"","title":"2. \u6570\u636e\u7c7b\u578b"},{"location":"redis/day01/#21_redis_5","text":"\u57fa\u4e8e\u4ee5\u4e0a\u6570\u636e\u7279\u5f81\u6211\u4eec\u8fdb\u884c\u5206\u6790\uff0c\u6700\u7ec8\u5f97\u51fa\u6765\u6211\u4eec\u7684Redis\u4e2d\u8981\u8bbe\u8ba15\u79cd \u6570\u636e\u7c7b\u578b\uff1a string\u3001hash\u3001list\u3001set\u3001sorted_set/zset\uff08\u5e94\u7528\u6027\u8f83\u4f4e\uff09","title":"2.1  Redis \u6570\u636e\u7c7b\u578b(5\u79cd\u5e38\u7528)"},{"location":"redis/day01/#22_string","text":"\u5728\u5b66\u4e60\u7b2c\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\u4e4b\u524d\uff0c\u5148\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u4e00\u4e0b\uff0c\u5728\u968f\u540e\u8fd9\u90e8\u5206\u5185\u5bb9\u7684\u5b66\u4e60\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u6bcf\u4e00\u79cd\u6570\u636e\u7c7b\u578b\u90fd\u5206\u6210\u4e09\u5757\u6765\u8bb2\uff1a\u9996\u5148\u662f\u8bb2\u4e0b\u5b83\u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u63a5\u4e0b\u6765\u8bb2\u4e00\u4e9b\u5b83\u7684\u6269\u5c55\u64cd\u4f5c\uff0c\u6700\u540e\u6211\u4eec\u4f1a\u53bb\u505a\u4e00\u4e2a\u5c0f\u7684\u6848\u4f8b\u5206\u6790\u3002","title":"2.2  string\u6570\u636e\u7c7b\u578b"},{"location":"redis/day01/#221redis","text":"\u5728\u5b66\u4e60string\u8fd9\u4e2a\u6570\u636e\u5f62\u5f0f\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u8981\u660e\u767dstring\u5230\u5e95\u662f\u4fee\u9970\u4ec0\u4e48\u7684\u3002\u6211\u4eec\u77e5\u9053redis \u81ea\u8eab\u662f\u4e00\u4e2a Map\uff0c\u5176\u4e2d\u6240\u6709\u7684\u6570\u636e\u90fd\u662f\u91c7\u7528 key : value \u7684\u5f62\u5f0f\u5b58\u50a8\u3002 \u5bf9\u4e8e\u8fd9\u79cd\u7ed3\u6784\u6765\u8bf4\uff0c\u6211\u4eec\u7528\u6765\u5b58\u50a8\u6570\u636e\u4e00\u5b9a\u662f\u4e00\u4e2a\u503c\u524d\u9762\u5bf9\u5e94\u4e00\u4e2a\u540d\u79f0\u3002\u6211\u4eec\u901a\u8fc7\u540d\u79f0\u6765\u8bbf\u95ee\u540e\u9762\u7684\u503c\u3002\u6309\u7167\u8fd9\u79cd\u5f62\u52bf\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u51fa\u6765\u6211\u4eec\u7684\u5b58\u50a8\u683c\u5f0f\u3002\u524d\u9762\u8fd9\u4e00\u90e8\u5206\u6211\u4eec\u79f0\u4e3akey\u3002\u540e\u9762\u7684\u4e00\u90e8\u5206\u79f0\u4e3avalue\uff0c\u800c\u6211\u4eec\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4ed6\u4e00\u5b9a\u662f\u4fee\u9970value\u7684\u3002 \u6570\u636e\u7c7b\u578b\u6307\u7684\u662f\u5b58\u50a8\u7684\u6570\u636e\u7684\u7c7b\u578b\uff0c\u4e5f\u5c31\u662f value \u90e8\u5206\u7684\u7c7b\u578b\uff0ckey \u90e8\u5206\u6c38\u8fdc\u90fd\u662f\u5b57\u7b26\u4e32\u3002","title":"2.2.1Redis \u6570\u636e\u5b58\u50a8\u683c\u5f0f"},{"location":"redis/day01/#222_string","text":"\uff081\uff09\u5b58\u50a8\u7684\u6570\u636e\uff1a\u5355\u4e2a\u6570\u636e\uff0c\u6700\u7b80\u5355\u7684\u6570\u636e\u5b58\u50a8\u7c7b\u578b\uff0c\u4e5f\u662f\u6700\u5e38\u7528\u7684\u6570\u636e\u5b58\u50a8\u7c7b\u578b\u3002 string\uff0c\u4ed6\u5c31\u662f\u5b58\u4e00\u4e2a\u5b57\u7b26\u4e32\u513f\uff0c\u6ce8\u610f\u662fvalue\u90a3\u4e00\u90e8\u5206\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b83\u662fredis\u4e2d\u6700\u57fa\u672c\u3001\u6700\u7b80\u5355\u7684\u5b58\u50a8\u6570\u636e\u7684\u683c\u5f0f\u3002 \uff082\uff09\u5b58\u50a8\u6570\u636e\u7684\u683c\u5f0f\uff1a\u4e00\u4e2a\u5b58\u50a8\u7a7a\u95f4\u4fdd\u5b58\u4e00\u4e2a\u6570\u636e \u6bcf\u4e00\u4e2a\u7a7a\u95f4\u4e2d\u53ea\u80fd\u4fdd\u5b58\u4e00\u4e2a\u5b57\u7b26\u4e32\u4fe1\u606f\uff0c\u8fd9\u4e2a\u4fe1\u606f\u91cc\u8fb9\u5982\u679c\u662f\u5b58\u7684\u7eaf\u6570\u5b57\uff0c\u4ed6\u4e5f\u80fd\u5f53\u6570\u5b57\u4f7f\u7528\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b\uff0c\u8fd9\u662f\u6211\u4eec\u7684\u6570\u636e\u7684\u5b58\u50a8\u7a7a\u95f4\u3002 \uff083\uff09\u5b58\u50a8\u5185\u5bb9\uff1a\u901a\u5e38\u4f7f\u7528\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u5b57\u7b26\u4e32\u4ee5\u6574\u6570\u7684\u5f62\u5f0f\u5c55\u793a\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u6570\u5b57\u64cd\u4f5c\u4f7f\u7528. \u4e00\u4e2akey\u5bf9\u4e00\u4e2avalue\uff0c\u800c\u8fd9\u4e2aitheima\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684string\u7c7b\u578b\uff0c\u5f53\u7136\u5b83\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u7eaf\u6570\u5b57\u7684\u683c\u5f0f\u3002","title":"2.2.2  string \u7c7b\u578b"},{"location":"redis/day01/#223_string","text":"\uff081\uff09\u57fa\u7840\u6307\u4ee4 \u6dfb\u52a0/\u4fee\u6539\u6570\u636e\u6dfb\u52a0/\u4fee\u6539\u6570\u636e set key value \u83b7\u53d6\u6570\u636e get key \u5220\u9664\u6570\u636e del key \u5224\u5b9a\u6027\u6dfb\u52a0\u6570\u636e setnx key value \u6dfb\u52a0/\u4fee\u6539\u591a\u4e2a\u6570\u636e mset key1 value1 key2 value2 \u2026 \u83b7\u53d6\u591a\u4e2a\u6570\u636e mget key1 key2 \u2026 \u83b7\u53d6\u6570\u636e\u5b57\u7b26\u4e2a\u6570\uff08\u5b57\u7b26\u4e32\u957f\u5ea6\uff09 strlen key \u8ffd\u52a0\u4fe1\u606f\u5230\u539f\u59cb\u4fe1\u606f\u540e\u90e8\uff08\u5982\u679c\u539f\u59cb\u4fe1\u606f\u5b58\u5728\u5c31\u8ffd\u52a0\uff0c\u5426\u5219\u65b0\u5efa\uff09 append key value \uff082\uff09\u5355\u6570\u636e\u64cd\u4f5c\u4e0e\u591a\u6570\u636e\u64cd\u4f5c\u7684\u9009\u62e9\u4e4b\u60d1 \u5373set \u4e0emset\u7684\u5173\u7cfb\u3002\u8fd9\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u6765\u8bf4\uff0c\u6ca1\u6709\u4ec0\u4e48\u4f60\u5e94\u8be5\u9009\u54ea\u4e2a\uff0c\u800c\u662f\u4ed6\u4eec\u81ea\u5df1\u7684\u7279\u5f81\u662f\u4ec0\u4e48\uff0c\u4f60\u8981\u6839\u636e\u8fd9\u4e2a\u7279\u5f81\u53bb\u6bd4\u5bf9\u4f60\u7684\u4e1a\u52a1\uff0c\u770b\u770b\u7a76\u7adf\u9002\u7528\u4e8e\u54ea\u4e2a\u3002 \u5047\u5982\u8bf4\u8fd9\u662f\u6211\u4eec\u73b0\u5728\u7684\u670d\u52a1\u5668\uff0c\u4ed6\u8981\u5411redis\u8981\u6570\u636e\u7684\u8bdd\uff0c\u5b83\u4f1a\u53d1\u51fa\u4e00\u6761\u6307\u4ee4\u3002\u90a3\u4e48\u5f53\u8fd9\u6761\u6307\u4ee4\u53d1\u8fc7\u6765\u7684\u65f6\u5019\uff0c\u6bd4\u5982\u8bf4\u662f\u8fd9\u4e2aset\u6307\u4ee4\u8fc7\u6765\uff0c\u90a3\u4e48\u5b83\u4f1a\u628a\u8fd9\u4e2a\u7ed3\u679c\u8fd4\u56de\u7ed9\u4f60\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u8981\u601d\u8003\u8fd9\u91cc\u8fb9\u4e00\u5171\u7ecf\u8fc7\u4e86\u591a\u957f\u65f6\u95f4\u3002 \u9996\u5148\uff0c\u53d1\u9001set\u6307\u4ee4\u8981\u65f6\u95f4\uff0c\u8fd9\u662f\u7f51\u7edc\u7684\u4e00\u4e2a\u65f6\u95f4\uff0c\u63a5\u4e0b\u6765redis\u8981\u53bb\u8fd0\u884c\u8fd9\u4e2a\u6307\u4ee4\u8981\u6d88\u8017\u65f6\u95f4\uff0c\u6700\u7ec8\u628a\u8fd9\u4e2a\u7ed3\u679c\u8fd4\u56de\u7ed9\u4f60\u53c8\u6709\u4e00\u4e2a\u65f6\u95f4\uff0c\u8fd9\u4e2a\u65f6\u95f4\u53c8\u662f\u4e00\u4e2a\u7f51\u7edc\u7684\u65f6\u95f4\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a\u4e00\u4e2a\u6307\u4ee4\u53d1\u9001\u7684\u8fc7\u7a0b\u4e2d\u9700\u8981\u6d88\u8017\u8fd9\u6837\u7684\u65f6\u95f4. \u4f46\u662f\u5982\u679c\u8bf4\u73b0\u5728\u4e0d\u662f\u4e00\u6761\u6307\u4ee4\u4e86\uff0c\u4f60\u8981\u53d13\u4e2aset\u7684\u8bdd\uff0c\u8fd8\u8981\u591a\u957f\u65f6\u95f4\u5462\uff1f\u5bf9\u5e94\u7684\u53d1\u9001\u65f6\u95f4\u8981\u4e583\u4e86\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e09\u4e2a\u5355\u6761\u6307\u4ee4,\u800c\u8fd0\u884c\u7684\u64cd\u4f5c\u65f6\u95f4\u5462\uff0c\u5b83\u4e5f\u8981\u4e583\u4e86\uff0c\u4f46\u6700\u7ec8\u8fd4\u56de\u7684\u4e5f\u8981\u53d13\u6b21\uff0c\u6240\u4ee5\u8fd9\u8fb9\u4e5f\u8981\u4e583\u3002 \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u7ed3\u8bba\uff1a\u5355\u6307\u4ee4\u53d13\u6761\u5b83\u9700\u8981\u7684\u65f6\u95f4\uff0c\u5047\u5b9a\u4ed6\u4eec\u4e24\u4e2a\u4e00\u6837\uff0c\u662f6\u4e2a\u7f51\u7edc\u65f6\u95f4\u52a03\u4e2a\u5904\u7406\u65f6\u95f4\uff0c\u5982\u679c\u6211\u4eec\u628a\u5b83\u5408\u6210\u4e00\u4e2amset\u5462\uff0c\u6211\u4eec\u60f3\u4e00\u60f3\u3002 \u5047\u5982\u8bf4\u7528\u591a\u6307\u4ee4\u53d13\u4e2a\u6307\u4ee4\u7684\u8bdd\uff0c\u5176\u5b9e\u53ea\u9700\u8981\u53d1\u4e00\u6b21\u5c31\u884c\u4e86\u3002\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u7ed3\u8bba\uff0c\u591a\u6307\u4ee4\u53d13\u4e2a\u6307\u4ee4\u7684\u8bdd\uff0c\u5176\u5b9e\u5b83\u662f\u4e24\u4e2a\u7f51\u7edc\u65f6\u95f4\u52a0\u4e0a3\u4e2aredis\u7684\u64cd\u4f5c\u65f6\u95f4\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u5199\u4e00\u4e2a\u5c0f\u52a0\u53f7\u5462\uff0c\u5c31\u662f\u56e0\u4e3a\u6bd5\u7adf\u53d1\u7684\u4fe1\u606f\u91cf\u53d8\u5927\u4e86\uff0c\u6240\u4ee5\u7f51\u7edc\u65f6\u95f4\u6709\u53ef\u80fd\u4f1a\u53d8\u957f\u3002 \u90a3\u4e48\u901a\u8fc7\u8fd9\u5f20\u56fe\uff0c\u4f60\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u7ed3\u8bba\uff0c\u6211\u4eec\u5355\u6307\u4ee4\u548c\u591a\u6307\u4ee4\u4ed6\u4eec\u7684\u5dee\u522b\u5c31\u5728\u4e8e\u4f60\u53d1\u9001\u7684\u6b21\u6570\u662f\u591a\u8fd8\u662f\u5c11\u3002\u5f53\u4f60\u5f71\u54cd\u7684\u6570\u636e\u6bd4\u8f83\u5c11\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u4ee5\u7528\u5355\u6307\u4ee4\uff0c\u4e5f\u53ef\u4ee5\u7528\u591a\u6307\u4ee4\u3002\u4f46\u662f\u4e00\u65e6\u8fd9\u4e2a\u91cf\u5927\u4e86\uff0c\u4f60\u5c31\u8981\u9009\u62e9\u591a\u6307\u4ee4\u4e86\uff0c\u4ed6\u7684\u6548\u7387\u4f1a\u9ad8\u4e00\u4e9b\u3002","title":"2.2.3  string \u7c7b\u578b\u6570\u636e\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"redis/day01/#23_string","text":"","title":"2.3  string \u7c7b\u578b\u6570\u636e\u7684\u6269\u5c55\u64cd\u4f5c"},{"location":"redis/day01/#231_string","text":"\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00string\u7684\u6269\u5c55\u64cd\u4f5c\uff0c\u5206\u6210\u4e24\u5927\u5757\uff1a\u4e00\u5757\u662f\u5bf9\u6570\u5b57\u8fdb\u884c\u64cd\u4f5c\u7684\uff0c\u7b2c\u4e8c\u5757\u662f\u5bf9\u6211\u4eec\u7684key\u7684\u65f6\u95f4\u8fdb\u884c\u64cd\u4f5c\u7684\u3002 \u8bbe\u7f6e\u6570\u503c\u6570\u636e\u589e\u52a0\u6307\u5b9a\u8303\u56f4\u7684\u503c incr key incrby key increment incrbyfloat key increment \u8bbe\u7f6e\u6570\u503c\u6570\u636e\u51cf\u5c11\u6307\u5b9a\u8303\u56f4\u7684\u503c decr key decrby key increment \u8bbe\u7f6e\u6570\u636e\u5177\u6709\u6307\u5b9a\u7684\u751f\u547d\u5468\u671f setex key seconds value psetex key milliseconds value","title":"2.3.1  string \u7c7b\u578b\u6570\u636e\u7684\u6269\u5c55\u64cd\u4f5c"},{"location":"redis/day01/#232_string","text":"(1)\u6570\u636e\u64cd\u4f5c\u4e0d\u6210\u529f\u7684\u53cd\u9988\u4e0e\u6570\u636e\u6b63\u5e38\u64cd\u4f5c\u4e4b\u95f4\u7684\u5dee\u5f02 \u8868\u793a\u8fd0\u884c\u7ed3\u679c\u662f\u5426\u6210\u529f (integer) 0 \u2192 false \u5931\u8d25 (integer) 1 \u2192 true \u6210\u529f \u8868\u793a\u8fd0\u884c\u7ed3\u679c\u503c (integer) 3 \u2192 3 3\u4e2a (integer) 1 \u2192 1 1\u4e2a (2)\u6570\u636e\u672a\u83b7\u53d6\u5230\u65f6\uff0c\u5bf9\u5e94\u7684\u6570\u636e\u4e3a\uff08nil\uff09\uff0c\u7b49\u540c\u4e8enull (3)\u6570\u636e\u6700\u5927\u5b58\u50a8\u91cf\uff1a512MB (4)string\u5728redis\u5185\u90e8\u5b58\u50a8\u9ed8\u8ba4\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5f53\u9047\u5230\u589e\u51cf\u7c7b\u64cd\u4f5cincr\uff0cdecr\u65f6\u4f1a\u8f6c\u6210\u6570\u503c\u578b\u8fdb\u884c\u8ba1\u7b97 (5)\u6309\u6570\u503c\u8fdb\u884c\u64cd\u4f5c\u7684\u6570\u636e\uff0c\u5982\u679c\u539f\u59cb\u6570\u636e\u4e0d\u80fd\u8f6c\u6210\u6570\u503c\uff0c\u6216\u8d85\u8d8a\u4e86redis \u6570\u503c\u4e0a\u9650\u8303\u56f4\uff0c\u5c06\u62a5\u9519 9223372036854775807\uff08java\u4e2dLong\u578b\u6570\u636e\u6700\u5927\u503c\uff0cLong.MAX_VALUE\uff09 (6)redis\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u662f\u539f\u5b50\u6027\u7684\uff0c\u91c7\u7528\u5355\u7ebf\u7a0b\u5904\u7406\u6240\u6709\u4e1a\u52a1\uff0c\u547d\u4ee4\u662f\u4e00\u4e2a\u4e00\u4e2a\u6267\u884c\u7684\uff0c\u56e0\u6b64\u65e0\u9700\u8003\u8651\u5e76\u53d1\u5e26\u6765\u7684\u6570\u636e\u5f71\u54cd.","title":"2.3.2  string \u7c7b\u578b\u6570\u636e\u64cd\u4f5c\u7684\u6ce8\u610f\u4e8b\u9879"},{"location":"redis/day01/#24stringkey","text":"","title":"2.4string\u5e94\u7528\u573a\u666f\u4e0ekey\u547d\u540d\u7ea6\u5b9a"},{"location":"redis/day01/#241","text":"\u5b83\u7684\u5e94\u7528\u573a\u666f\u5728\u4e8e\uff1a\u4e3b\u9875\u9ad8\u9891\u8bbf\u95ee\u4fe1\u606f\u663e\u793a\u63a7\u5236\uff0c\u4f8b\u5982\u65b0\u6d6a\u5fae\u535a\u5927V\u4e3b\u9875\u663e\u793a\u7c89\u4e1d\u6570\u4e0e\u5fae\u535a\u6570\u91cf\u3002 \u6211\u4eec\u6765\u601d\u8003\u4e00\u4e0b\uff1a\u8fd9\u4e9b\u4fe1\u606f\u662f\u4e0d\u662f\u4f60\u8fdb\u5165\u5927V\u7684\u9875\u9762\u513f\u4ee5\u540e\u5c31\u8981\u8bfb\u53d6\u8fd9\u5199\u4fe1\u606f\u7684\u554a\uff0c\u90a3\u8fd9\u79cd\u4fe1\u606f\u4e00\u5b9a\u8981\u5b58\u50a8\u5230\u6211\u4eec\u7684redis\u4e2d\uff0c\u56e0\u4e3a\u4ed6\u7684\u8bbf\u95ee\u91cf\u592a\u9ad8\u4e86\uff01\u90a3\u8fd9\u79cd\u6570\u636e\u5e94\u8be5\u600e\u4e48\u5b58\u5462\uff1f\u6211\u4eec\u6765\u4e00\u5757\u513f\u770b\u4e00\u4e0b\u65b9\u6848\uff01","title":"2.4.1  \u5e94\u7528\u573a\u666f"},{"location":"redis/day01/#242","text":"\uff081\uff09\u5728redis\u4e2d\u4e3a\u5927V\u7528\u6237\u8bbe\u5b9a\u7528\u6237\u4fe1\u606f\uff0c\u4ee5\u7528\u6237\u4e3b\u952e\u548c\u5c5e\u6027\u503c\u4f5c\u4e3akey\uff0c\u540e\u53f0\u8bbe\u5b9a\u5b9a\u65f6\u5237\u65b0\u7b56\u7565\u5373\u53ef\u3002 eg: user:id:3506728370:fans \u2192 12210947 eg: user:id:3506728370:blogs \u2192 6164 eg: user:id:3506728370:focuses \u2192 83 \uff082\uff09\u4e5f\u53ef\u4ee5\u4f7f\u7528json\u683c\u5f0f\u4fdd\u5b58\u6570\u636e eg: user:id:3506728370 \u2192 {\u201cfans\u201d\uff1a12210947\uff0c\u201cblogs\u201d\uff1a6164\uff0c\u201c focuses \u201d\uff1a83 } \uff083\uff09 key \u7684\u8bbe\u7f6e\u7ea6\u5b9a \u6570\u636e\u5e93\u4e2d\u7684\u70ed\u70b9\u6570\u636ekey\u547d\u540d\u60ef\u4f8b \u8868\u540d \u4e3b\u952e\u540d \u4e3b\u952e\u503c \u5b57\u6bb5\u540d eg1\uff1a order id 29437595 name eg2\uff1a equip id 390472345 type eg3\uff1a news id 202004150 title","title":"2.4.2  \u89e3\u51b3\u65b9\u6848"},{"location":"redis/day01/#25_hash","text":"\u4e0b\u9762\u6211\u4eec\u6765\u5b66\u4e60\u7b2c\u4e8c\u4e2a\u6570\u636e\u7c7b\u578bhash\u3002","title":"2.5  hash\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"redis/day01/#251","text":"\u5bf9\u8c61\u7c7b\u6570\u636e\u7684\u5b58\u50a8\u5982\u679c\u5177\u6709\u8f83\u9891\u7e41\u7684\u66f4\u65b0\u9700\u6c42\u64cd\u4f5c\u4f1a\u663e\u5f97\u7b28\u91cd\uff01 \u5728\u6b63\u5f0f\u5b66\u4e60\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e2a\u5173\u4e8e\u6570\u636e\u5b58\u50a8\u7684\u56f0\u60d1\uff1a \u6bd4\u5982\u8bf4\u524d\u9762\u6211\u4eec\u7528\u4ee5\u4e0a\u5f62\u5f0f\u5b58\u4e86\u6570\u636e\uff0c\u5982\u679c\u6211\u4eec\u7528\u5355\u6761\u53bb\u5b58\u7684\u8bdd\uff0c\u5b83\u5b58\u7684\u6761\u6570\u4f1a\u5f88\u591a\u3002\u4f46\u5982\u679c\u6211\u4eec\u7528json\u683c\u5f0f\uff0c\u5b83\u5b58\u4e00\u6761\u6570\u636e\u5c31\u591f\u4e86\u3002\u95ee\u9898\u6765\u4e86\uff0c\u5047\u5982\u8bf4\u73b0\u5728\u7c89\u4e1d\u6570\u91cf\u53d1\u751f\u53d8\u5316\u4e86\uff0c\u4f60\u8981\u628a\u6574\u4e2a\u503c\u90fd\u6539\u4e86\u3002\u4f46\u662f\u7528\u5355\u6761\u5b58\u7684\u8bdd\u5c31\u4e0d\u5b58\u5728\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ea\u9700\u8981\u6539\u5176\u4e2d\u4e00\u4e2a\u5c31\u884c\u4e86\u3002\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u60f3\uff0c\u6709\u6ca1\u6709\u4e00\u79cd\u65b0\u7684\u5b58\u50a8\u7ed3\u6784\uff0c\u80fd\u5e2e\u6211\u4eec\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462\u3002 \u6211\u4eec\u4e00\u5757\u513f\u6765\u5206\u6790\u4e00\u4e0b\uff1a \u5982\u4e0a\u56fe\u6240\u793a\uff1a\u5355\u6761\u7684\u8bdd\u662f\u5bf9\u5e94\u7684\u6570\u636e\u5728\u540e\u9762\u653e\u7740\u3002\u4ed4\u7ec6\u89c2\u5bdf\uff1a\u6211\u4eec\u770b\u5de6\u8fb9\u662f\u4e0d\u662f\u957f\u5f97\u90fd\u4e00\u6a21\u4e00\u6837\u554a\uff0c\u90fd\u662f\u5bf9\u5e94\u7684\u8868\u540d\u3001ID\u7b49\u7684\u4e00\u7cfb\u5217\u7684\u4e1c\u897f\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u53f3\u8fb9\u7ea2\u6846\u4e2d\u7684\u8fd9\u4e2a\u533a\u57df\u7ed9\u4ed6\u5c01\u8d77\u6765\u3002 \u90a3\u5982\u679c\u8981\u662f\u8fd9\u6837\u7684\u5f62\u5f0f\u7684\u8bdd\uff0c\u5982\u4e0b\u56fe\uff0c\u6211\u4eec\u628a\u5b83\u4e00\u5408\u5e76\uff0c\u5e76\u628a\u53f3\u8fb9\u7684\u4e1c\u897f\u7ed9\u4ed6\u53d8\u6210\u8fd9\u4e2a\u683c\u5f0f\uff0c\u8fd9\u4e0d\u5c31\u884c\u4e86\u5417\uff1f \u8fd9\u4e2a\u56fe\u5176\u5b9e\u5927\u5bb6\u5e76\u4e0d\u964c\u751f\uff0c\u7b2c\u4e00\uff0c\u4f60\u524d\u9762\u5b66\u8fc7\u4e00\u4e2a\u4e1c\u897f\u53ebhashmap\u4e0d\u5c31\u8fd9\u683c\u5f0f\u5417\uff1f\u7b2c\u4e8c\uff0credis\u81ea\u8eab\u4e0d\u4e5f\u662f\u8fd9\u683c\u5f0f\u5417\uff1f\u90a3\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u6ce8\u610f\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u8981\u8bb2\u7684\u7b2c\u4e8c\u79cd\u683c\u5f0f\uff0chash\u3002 \u5728\u53f3\u8fb9\u5bf9\u5e94\u7684\u503c\uff0c\u6211\u4eec\u5c31\u5b58\u5177\u4f53\u7684\u503c\uff0c\u90a3\u5de6\u8fb9\u513f\u8fd9\u5c31\u662f\u6211\u4eec\u7684key\u3002\u95ee\u9898\u6765\u4e86\uff0c\u90a3\u4e2d\u95f4\u7684\u8fd9\u4e00\u5757\u53eb\u4ec0\u4e48\u5462\uff1f\u8fd9\u4e2a\u4e1c\u897f\u6211\u4eec\u7ed9\u4ed6\u8d77\u4e2a\u540d\u513f\uff0c\u53eb\u505afield\u5b57\u6bb5\u3002\u90a3\u4e48\u53f3\u8fb9\u513f\u6574\u4f53\u8fd9\u5757\u513f\u7a7a\u95f4\u6211\u4eec\u5c31\u79f0\u4e3ahash\uff0c\u4e5f\u5c31\u662f\u8bf4hash\u662f\u5b58\u4e86\u4e00\u4e2akey value\u7684\u5b58\u50a8\u7a7a\u95f4\u3002","title":"2.5.1  \u6570\u636e\u5b58\u50a8\u7684\u56f0\u60d1"},{"location":"redis/day01/#252_hash","text":"\u65b0\u7684\u5b58\u50a8\u9700\u6c42\uff1a\u5bf9\u4e00\u7cfb\u5217\u5b58\u50a8\u7684\u6570\u636e\u8fdb\u884c\u7f16\u7ec4\uff0c\u65b9\u4fbf\u7ba1\u7406\uff0c\u5178\u578b\u5e94\u7528\u5b58\u50a8\u5bf9\u8c61\u4fe1\u606f \u9700\u8981\u7684\u5b58\u50a8\u7ed3\u6784\uff1a\u4e00\u4e2a\u5b58\u50a8\u7a7a\u95f4\u4fdd\u5b58\u591a\u4e2a\u952e\u503c\u5bf9\u6570\u636e hash\u7c7b\u578b\uff1a\u5e95\u5c42\u4f7f\u7528\u54c8\u5e0c\u8868\u7ed3\u6784\u5b9e\u73b0\u6570\u636e\u5b58\u50a8 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u8fd9\u79cd\u7ed3\u6784\u53eb\u505ahash\uff0c\u5de6\u8fb9\u4e00\u4e2akey\uff0c\u5bf9\u53f3\u8fb9\u4e00\u4e2a\u5b58\u50a8\u7a7a\u95f4\u3002\u8fd9\u91cc\u8981\u660e\u786e\u4e00\u70b9\uff0c\u53f3\u8fb9\u8fd9\u5757\u513f\u5b58\u50a8\u7a7a\u95f4\u53ebhash\uff0c\u4e5f\u5c31\u662f\u8bf4hash\u662f\u6307\u7684\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\uff0c\u4ed6\u6307\u7684\u4e0d\u662f\u4e00\u4e2a\u6570\u636e\uff0c\u662f\u8fd9\u91cc\u8fb9\u7684\u4e00\u5806\u6570\u636e\uff0c\u90a3\u4e48\u5b83\u5e95\u5c42\u5462\uff0c\u662f\u7528hash\u8868\u7684\u7ed3\u6784\u6765\u5b9e\u73b0\u7684\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff1a \u5982\u679cfield\u6570\u91cf\u8f83\u5c11\uff0c\u5b58\u50a8\u7ed3\u6784\u4f18\u5316\u4e3a\u7c7b\u6570\u7ec4\u7ed3\u6784 \u5982\u679cfield\u6570\u91cf\u8f83\u591a\uff0c\u5b58\u50a8\u7ed3\u6784\u4f7f\u7528HashMap\u7ed3\u6784","title":"2.5.2  hash \u7c7b\u578b"},{"location":"redis/day01/#253_hash","text":"\u6dfb\u52a0/\u4fee\u6539\u6570\u636e hset key field value \u83b7\u53d6\u6570\u636e hget key field hgetall key \u5220\u9664\u6570\u636e hdel key field1 [ field2 ] \u8bbe\u7f6efield\u7684\u503c\uff0c\u5982\u679c\u8be5field\u5b58\u5728\u5219\u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c hsetnx key field value \u6dfb\u52a0/\u4fee\u6539\u591a\u4e2a\u6570\u636e hmset key field1 value1 field2 value2 \u2026 \u83b7\u53d6\u591a\u4e2a\u6570\u636e hmget key field1 field2 \u2026 \u83b7\u53d6\u54c8\u5e0c\u8868\u4e2d\u5b57\u6bb5\u7684\u6570\u91cf hlen key \u83b7\u53d6\u54c8\u5e0c\u8868\u4e2d\u662f\u5426\u5b58\u5728\u6307\u5b9a\u7684\u5b57\u6bb5 hexists key field","title":"2.5.3  hash \u7c7b\u578b\u6570\u636e\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"redis/day01/#26_hash","text":"\u5728\u770b\u5b8chash\u7684\u57fa\u672c\u64cd\u4f5c\u540e\uff0c\u6211\u4eec\u518d\u6765\u770b\u4ed6\u7684\u62d3\u5c55\u64cd\u4f5c\uff0c\u4ed6\u7684\u62d3\u5c55\u64cd\u4f5c\u76f8\u5bf9\u6bd4\u8f83\u7b80\u5355\uff1a","title":"2.6  hash\u7684\u62d3\u5c55\u64cd\u4f5c"},{"location":"redis/day01/#261_hash","text":"\u83b7\u53d6\u54c8\u5e0c\u8868\u4e2d\u6240\u6709\u7684\u5b57\u6bb5\u540d\u6216\u5b57\u6bb5\u503c hkeys key hvals key \u8bbe\u7f6e\u6307\u5b9a\u5b57\u6bb5\u7684\u6570\u503c\u6570\u636e\u589e\u52a0\u6307\u5b9a\u8303\u56f4\u7684\u503c hincrby key field increment hincrbyfloat key field increment","title":"2.6.1  hash \u7c7b\u578b\u6570\u636e\u6269\u5c55\u64cd\u4f5c"},{"location":"redis/day01/#262_hash","text":"(1)hash\u7c7b\u578b\u4e2dvalue\u53ea\u80fd\u5b58\u50a8\u5b57\u7b26\u4e32\uff0c\u4e0d\u5141\u8bb8\u5b58\u50a8\u5176\u4ed6\u6570\u636e\u7c7b\u578b\uff0c\u4e0d\u5b58\u5728\u5d4c\u5957\u73b0\u8c61\u3002\u5982\u679c\u6570\u636e\u672a\u83b7\u53d6\u5230\uff0c\u5bf9\u5e94\u7684\u503c\u4e3a\uff08nil\uff09\u3002 (2\uff09\u6bcf\u4e2a hash \u53ef\u4ee5\u5b58\u50a8 2^32 - 1 \u4e2a\u952e\u503c\u5bf9 hash\u7c7b\u578b\u5341\u5206\u8d34\u8fd1\u5bf9\u8c61\u7684\u6570\u636e\u5b58\u50a8\u5f62\u5f0f\uff0c\u5e76\u4e14\u53ef\u4ee5\u7075\u6d3b\u6dfb\u52a0\u5220\u9664\u5bf9\u8c61\u5c5e\u6027\u3002\u4f46hash\u8bbe\u8ba1\u521d\u8877\u4e0d\u662f\u4e3a\u4e86\u5b58\u50a8\u5927\u91cf\u5bf9\u8c61\u800c\u8bbe\u8ba1 \u7684\uff0c\u5207\u8bb0\u4e0d\u53ef\u6ee5\u7528\uff0c\u66f4\u4e0d\u53ef\u4ee5\u5c06hash\u4f5c\u4e3a\u5bf9\u8c61\u5217\u8868\u4f7f\u7528\u3002 (3)hgetall \u64cd\u4f5c\u53ef\u4ee5\u83b7\u53d6\u5168\u90e8\u5c5e\u6027\uff0c\u5982\u679c\u5185\u90e8field\u8fc7\u591a\uff0c\u904d\u5386\u6574\u4f53\u6570\u636e\u6548\u7387\u5c31\u5f88\u4f1a\u4f4e\uff0c\u6709\u53ef\u80fd\u6210\u4e3a\u6570\u636e\u8bbf\u95ee\u74f6\u9888\u3002","title":"2.6.2  hash\u7c7b\u578b\u6570\u636e\u64cd\u4f5c\u7684\u6ce8\u610f\u4e8b\u9879"},{"location":"redis/day01/#27_hash","text":"","title":"2.7  hash\u5e94\u7528\u573a\u666f"},{"location":"redis/day01/#271","text":"\u53cc11\u6d3b\u52a8\u65e5\uff0c\u9500\u552e\u624b\u673a\u5145\u503c\u5361\u7684\u5546\u5bb6\u5bf9\u79fb\u52a8\u3001\u8054\u901a\u3001\u7535\u4fe1\u768430\u5143\u300150\u5143\u3001100\u5143\u5546\u54c1\u63a8\u51fa\u62a2\u8d2d\u6d3b\u52a8\uff0c\u6bcf\u79cd\u5546\u54c1\u62a2\u8d2d\u4e0a\u96501000 \u5f20\u3002 \u4e5f\u5c31\u662f\u5546\u5bb6\u6709\u4e86\uff0c\u5546\u54c1\u6709\u4e86\uff0c\u6570\u91cf\u6709\u4e86\u3002\u6700\u7ec8\u6211\u4eec\u7684\u7528\u6237\u4e70\u4e1c\u897f\u5c31\u662f\u5728\u6539\u53d8\u8fd9\u4e2a\u6570\u91cf\u3002\u90a3\u4f60\u8bf4\u8fd9\u4e2a\u7ed3\u6784\u5e94\u8be5\u600e\u4e48\u5b58\u5462\uff1f\u5bf9\u5e94\u7684\u5546\u5bb6\u7684ID\u4f5c\u4e3akey\uff0c\u7136\u540e\u8fd9\u4e9b\u5145\u503c\u5361\u7684ID\u4f5c\u4e3afield\uff0c\u6700\u540e\u8fd9\u4e9b\u6570\u91cf\u4f5c\u4e3avalue\u3002\u800c\u6211\u4eec\u6240\u8c13\u7684\u64cd\u4f5c\u662f\u5176\u5b9e\u5c31\u662fincrea\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u53ea\u4e0d\u8fc7\u4f60\u4f20\u8d1f\u503c\u5c31\u884c\u4e86\u3002\u770b\u4e00\u770b\u5bf9\u5e94\u7684\u89e3\u51b3\u65b9\u6848\uff1a","title":"2.7.1  \u5e94\u7528\u573a\u666f"},{"location":"redis/day01/#272","text":"\u4ee5\u5546\u5bb6id\u4f5c\u4e3akey \u5c06\u53c2\u4e0e\u62a2\u8d2d\u7684\u5546\u54c1id\u4f5c\u4e3afield \u5c06\u53c2\u4e0e\u62a2\u8d2d\u7684\u5546\u54c1\u6570\u91cf\u4f5c\u4e3a\u5bf9\u5e94\u7684value \u62a2\u8d2d\u65f6\u4f7f\u7528\u964d\u503c\u7684\u65b9\u5f0f\u63a7\u5236\u4ea7\u54c1\u6570\u91cf \u6ce8\u610f\uff1a\u5b9e\u9645\u4e1a\u52a1\u4e2d\u8fd8\u6709\u8d85\u5356\u7b49\u5b9e\u9645\u95ee\u9898\uff0c\u8fd9\u91cc\u4e0d\u505a\u8ba8\u8bba","title":"2.7.2  \u89e3\u51b3\u65b9\u6848"},{"location":"redis/day01/#28_list","text":"\u524d\u9762\u6211\u4eec\u5b58\u6570\u636e\u7684\u65f6\u5019\u5462\uff0c\u5355\u4e2a\u6570\u636e\u4e5f\u80fd\u5b58\uff0c\u591a\u4e2a\u6570\u636e\u4e5f\u80fd\u5b58\uff0c\u4f46\u662f\u8fd9\u91cc\u9762\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5b58\u591a\u4e2a\u6570\u636e\u7528hash\u7684\u65f6\u5019\u5b83\u662f\u6ca1\u6709\u987a\u5e8f\u7684\u3002\u6211\u4eec\u5e73\u65f6\u64cd\u4f5c\uff0c\u5b9e\u9645\u4e0a\u6570\u636e\u5f88\u591a\u60c5\u51b5\u4e0b\u90fd\u662f\u6709\u987a\u5e8f\u7684\uff0c\u90a3\u6709\u6ca1\u6709\u4e00\u79cd\u80fd\u591f\u7528\u6765\u5b58\u50a8\u5e26\u6709\u987a\u5e8f\u7684\u8fd9\u79cd\u6570\u636e\u6a21\u578b\u5462\uff0clist\u5c31\u4e13\u95e8\u6765\u5e72\u8fd9\u4e8b\u513f\u3002","title":"2.8  list\u57fa\u672c\u64cd\u4f5c"},{"location":"redis/day01/#281_list","text":"\u6570\u636e\u5b58\u50a8\u9700\u6c42\uff1a\u5b58\u50a8\u591a\u4e2a\u6570\u636e\uff0c\u5e76\u5bf9\u6570\u636e\u8fdb\u5165\u5b58\u50a8\u7a7a\u95f4\u7684\u987a\u5e8f\u8fdb\u884c\u533a\u5206 \u9700\u8981\u7684\u5b58\u50a8\u7ed3\u6784\uff1a\u4e00\u4e2a\u5b58\u50a8\u7a7a\u95f4\u4fdd\u5b58\u591a\u4e2a\u6570\u636e\uff0c\u4e14\u901a\u8fc7\u6570\u636e\u53ef\u4ee5\u4f53\u73b0\u8fdb\u5165\u987a\u5e8f list\u7c7b\u578b\uff1a\u4fdd\u5b58\u591a\u4e2a\u6570\u636e\uff0c\u5e95\u5c42\u4f7f\u7528\u53cc\u5411\u94fe\u8868\u5b58\u50a8\u7ed3\u6784\u5b9e\u73b0 \u5148\u6765\u901a\u8fc7\u4e00\u5f20\u56fe\uff0c\u56de\u5fc6\u4e00\u4e0b\u987a\u5e8f\u8868\u3001\u94fe\u8868\u3001\u53cc\u5411\u94fe\u8868\u3002 list\u5bf9\u5e94\u7684\u5b58\u50a8\u7ed3\u6784\u662f\u4ec0\u4e48\u5462\uff1f\u91cc\u8fb9\u5b58\u7684\u8fd9\u4e2a\u4e1c\u897f\u662f\u4e2a\u5217\u8868\uff0c\u4ed6\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u540d\u79f0\u3002\u5c31\u662fkey\u5b58\u4e00\u4e2alist\u7684\u8fd9\u6837\u7ed3\u6784\u3002\u5bf9\u5e94\u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u4f60\u5176\u5b9e\u662f\u53ef\u4ee5\u60f3\u5230\u7684\u3002 \u6765\u770b\u4e00\u4e0b\uff0c\u56e0\u4e3a\u5b83\u662f\u53cc\u5411\u7684\uff0c\u6240\u4ee5\u4ed6\u5de6\u8fb9\u53f3\u8fb9\u90fd\u80fd\u64cd\u4f5c\uff0c\u5b83\u5bf9\u5e94\u7684\u64cd\u4f5c\u7ed3\u6784\u4e24\u8fb9\u90fd\u80fd\u8fdb\u6570\u636e\u3002\u8fd9\u5c31\u662f\u94fe\u8868\u7684\u4e00\u4e2a\u5b58\u50a8\u7ed3\u6784\u3002\u5f80\u5916\u62ff\u6570\u636e\u7684\u65f6\u5019\u600e\u4e48\u62ff\u5462\uff1f\u901a\u5e38\u662f\u4ece\u4e00\u7aef\u62ff\uff0c\u5f53\u7136\u53e6\u4e00\u7aef\u4e5f\u80fd\u62ff\u3002\u5982\u679c\u4e24\u7aef\u90fd\u80fd\u62ff\u7684\u8bdd\uff0c\u8fd9\u5c31\u662f\u4e2a\u53cc\u7aef\u961f\u5217\uff0c\u4e24\u8fb9\u513f\u90fd\u80fd\u64cd\u4f5c\u3002\u5982\u679c\u53ea\u80fd\u4ece\u4e00\u7aef\u8fdb\u4e00\u7aef\u51fa\uff0c\u8fd9\u4e2a\u6a21\u578b\u54b1\u4eec\u524d\u9762\u4e86\u89e3\u8fc7\uff0c\u53eb\u505a\u6808\u3002","title":"2.8.1  list \u7c7b\u578b"},{"location":"redis/day01/#282_list","text":"\u6700\u540e\u770b\u4e00\u4e0b\u4ed6\u7684\u57fa\u672c\u64cd\u4f5c \u6dfb\u52a0/\u4fee\u6539\u6570\u636e lpush key value1 [ value2 ] \u2026\u2026 rpush key value1 [ value2 ] \u2026\u2026 \u83b7\u53d6\u6570\u636e lrange key start stop lindex key index llen key \u83b7\u53d6\u5e76\u79fb\u9664\u6570\u636e lpop key rpop key","title":"2.8.2 list \u7c7b\u578b\u6570\u636e\u57fa\u672c\u64cd\u4f5c"},{"location":"redis/day01/#29_list","text":"","title":"2.9  list\u6269\u5c55\u64cd\u4f5c"},{"location":"redis/day01/#291_list","text":"\u79fb\u9664\u6307\u5b9a\u6570\u636e lrem key count value \u89c4\u5b9a\u65f6\u95f4\u5185\u83b7\u53d6\u5e76\u79fb\u9664\u6570\u636e blpop key1 [ key2 ] timeout brpop key1 [ key2 ] timeout brpoplpush source destination timeout","title":"2.9.1  list \u7c7b\u578b\u6570\u636e\u6269\u5c55\u64cd\u4f5c"},{"location":"redis/day01/#292_list","text":"\uff081\uff09list\u4e2d\u4fdd\u5b58\u7684\u6570\u636e\u90fd\u662fstring\u7c7b\u578b\u7684\uff0c\u6570\u636e\u603b\u5bb9\u91cf\u662f\u6709\u9650\u7684\uff0c\u6700\u591a2^32 - 1 \u4e2a\u5143\u7d20(4294967295)\u3002 \uff082\uff09list\u5177\u6709\u7d22\u5f15\u7684\u6982\u5ff5\uff0c\u4f46\u662f\u64cd\u4f5c\u6570\u636e\u65f6\u901a\u5e38\u4ee5\u961f\u5217\u7684\u5f62\u5f0f\u8fdb\u884c\u5165\u961f\u51fa\u961f\u64cd\u4f5c\uff0c\u6216\u4ee5\u6808\u7684\u5f62\u5f0f\u8fdb\u884c\u5165\u6808\u51fa\u6808\u64cd\u4f5c \uff083\uff09\u83b7\u53d6\u5168\u90e8\u6570\u636e\u64cd\u4f5c\u7ed3\u675f\u7d22\u5f15\u8bbe\u7f6e\u4e3a-1 \uff084\uff09list\u53ef\u4ee5\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u9875\u64cd\u4f5c\uff0c\u901a\u5e38\u7b2c\u4e00\u9875\u7684\u4fe1\u606f\u6765\u81ea\u4e8elist\uff0c\u7b2c2\u9875\u53ca\u66f4\u591a\u7684\u4fe1\u606f\u901a\u8fc7\u6570\u636e\u5e93\u7684\u5f62\u5f0f\u52a0\u8f7d","title":"2.9.2  list \u7c7b\u578b\u6570\u636e\u64cd\u4f5c\u6ce8\u610f\u4e8b\u9879"},{"location":"redis/day01/#210_list","text":"","title":"2.10 list \u5e94\u7528\u573a\u666f"},{"location":"redis/day01/#2101","text":"\u4f01\u4e1a\u8fd0\u8425\u8fc7\u7a0b\u4e2d\uff0c\u7cfb\u7edf\u5c06\u4ea7\u751f\u51fa\u5927\u91cf\u7684\u8fd0\u8425\u6570\u636e\uff0c\u5982\u4f55\u4fdd\u969c\u591a\u53f0\u670d\u52a1\u5668\u64cd\u4f5c\u65e5\u5fd7\u7684\u7edf\u4e00\u987a\u5e8f\u8f93\u51fa\uff1f \u5047\u5982\u73b0\u5728\u4f60\u6709\u591a\u53f0\u670d\u52a1\u5668\uff0c\u6bcf\u4e00\u53f0\u670d\u52a1\u5668\u90fd\u4f1a\u4ea7\u751f\u5b83\u7684\u65e5\u5fd7\uff0c\u5047\u8bbe\u4f60\u662f\u4e00\u4e2a\u8fd0\u7ef4\u4eba\u5458\uff0c\u4f60\u60f3\u770b\u5b83\u7684\u64cd\u4f5c\u65e5\u5fd7\uff0c\u4f60\u600e\u4e48\u770b\u5462\uff1f\u6253\u5f00A\u673a\u5668\u7684\u65e5\u5fd7\u770b\u4e00\u770b\uff0c\u6253\u5f00B\u673a\u5668\u7684\u65e5\u5fd7\u518d\u770b\u4e00\u770b\u5417\uff1f\u8fd9\u6837\u7684\u8bdd\u4f60\u4f1a\u53ef\u80fd\u4f1a\u75af\u6389\u7684\uff01\u56e0\u4e3a\u5de6\u8fb9\u770b\u7684\u6709\u53ef\u80fd\u5b83\u7684\u65f6\u95f4\u662f11:01\uff0c\u53f3\u8fb911:02\uff0c\u7136\u540e\u518d\u770b\u5de6\u8fb911:03\uff0c\u5b83\u4eec\u672c\u8eab\u662f\u8fde\u7eed\u7684\uff0c\u4f46\u662f\u4f60\u5728\u770b\u7684\u65f6\u5019\u5c31\u5206\u6210\u56db\u4e2a\u6587\u4ef6\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f60\u770b\u8d77\u6765\u5c31\u4f1a\u5f88\u9ebb\u70e6\u3002\u80fd\u4e0d\u80fd\u628a\u4ed6\u4eec\u5408\u5e76\u5462\uff1f\u7b54\u6848\u662f\u53ef\u4ee5\u7684\uff01\u600e\u4e48\u505a\u5462\uff1f\u5efa\u7acb\u8d77redis\u670d\u52a1\u5668\u3002\u5f53\u4ed6\u4eec\u9700\u8981\u8bb0\u65e5\u5fd7\u7684\u65f6\u5019\uff0c\u8bb0\u5728\u54ea\u513f,\u5168\u90e8\u53d1\u7ed9redis\u3002\u7b49\u5230\u4f60\u60f3\u770b\u7684\u65f6\u5019\uff0c\u901a\u8fc7\u670d\u52a1\u5668\u8bbf\u95eeredis\u83b7\u53d6\u65e5\u5fd7\u3002\u7136\u540e\u5f97\u5230\u4ee5\u540e\uff0c\u5c31\u4f1a\u5f97\u5230\u4e00\u4e2a\u5b8c\u6574\u7684\u65e5\u5fd7\u4fe1\u606f\u3002\u90a3\u4e48\u8fd9\u91cc\u9762\u5c31\u53ef\u4ee5\u83b7\u53d6\u5230\u5b8c\u6574\u7684\u65e5\u5fd7\u4e86\uff0c\u4f9d\u9760\u4ec0\u4e48\u6765\u5b9e\u73b0\u5462\uff1f\u5c31\u4f9d\u9760\u6211\u4eec\u7684list\u7684\u6a21\u578b\u7684\u987a\u5e8f\u6765\u5b9e\u73b0\u3002\u8fdb\u6765\u4e00\u7ec4\u6570\u636e\u5c31\u5f80\u91cc\u52a0\uff0c\u8c01\u5148\u8fdb\u6765\u8c01\u5148\u52a0\u8fdb\u53bb\uff0c\u5b83\u662f\u6709\u4e00\u5b9a\u7684\u987a\u5e8f\u7684\u3002","title":"2.10.1  \u5e94\u7528\u573a\u666f"},{"location":"redis/day01/#2102","text":"\u4f9d\u8d56list\u7684\u6570\u636e\u5177\u6709\u987a\u5e8f\u7684\u7279\u5f81\u5bf9\u4fe1\u606f\u8fdb\u884c\u7ba1\u7406 \u4f7f\u7528\u961f\u5217\u6a21\u578b\u89e3\u51b3\u591a\u8def\u4fe1\u606f\u6c47\u603b\u5408\u5e76\u7684\u95ee\u9898 \u4f7f\u7528\u6808\u6a21\u578b\u89e3\u51b3\u6700\u65b0\u6d88\u606f\u7684\u95ee\u9898","title":"2.10.2  \u89e3\u51b3\u65b9\u6848"},{"location":"redis/day01/#211_set","text":"","title":"2.11  set \u57fa\u672c\u64cd\u4f5c"},{"location":"redis/day01/#2111_set","text":"\u65b0\u7684\u5b58\u50a8\u9700\u6c42\uff1a\u5b58\u50a8\u5927\u91cf\u7684\u6570\u636e\uff0c\u5728\u67e5\u8be2\u65b9\u9762\u63d0\u4f9b\u66f4\u9ad8\u7684\u6548\u7387 \u9700\u8981\u7684\u5b58\u50a8\u7ed3\u6784\uff1a\u80fd\u591f\u4fdd\u5b58\u5927\u91cf\u7684\u6570\u636e\uff0c\u9ad8\u6548\u7684\u5185\u90e8\u5b58\u50a8\u673a\u5236\uff0c\u4fbf\u4e8e\u67e5\u8be2 set\u7c7b\u578b\uff1a\u4e0ehash\u5b58\u50a8\u7ed3\u6784\u5b8c\u5168\u76f8\u540c\uff0c\u4ec5\u5b58\u50a8\u952e\uff0c\u4e0d\u5b58\u50a8\u503c\uff08nil\uff09\uff0c\u5e76\u4e14\u503c\u662f\u4e0d\u5141\u8bb8\u91cd\u590d\u7684 \u901a\u8fc7\u8fd9\u4e2a\u540d\u79f0\uff0c\u5927\u5bb6\u4e5f\u57fa\u672c\u4e0a\u80fd\u591f\u8ba4\u8bc6\u5230\u548c\u6211\u4eecJava\u4e2d\u7684set\u5b8c\u5168\u4e00\u6837\u3002\u6211\u4eec\u73b0\u5728\u8981\u5b58\u50a8\u5927\u91cf\u7684\u6570\u636e\uff0c\u5e76\u4e14\u8981\u6c42\u63d0\u9ad8\u5b83\u7684\u67e5\u8be2\u6548\u7387\u3002\u7528list\u8fd9\u79cd\u94fe\u8868\u5f62\u5f0f\uff0c\u5b83\u7684\u67e5\u8be2\u6548\u7387\u662f\u4e0d\u9ad8\u7684\uff0c\u90a3\u600e\u4e48\u529e\u5462\uff1f\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u60f3\uff0c\u6709\u6ca1\u6709\u9ad8\u6548\u7684\u5b58\u50a8\u673a\u5236\u3002\u5176\u5b9e\u524d\u9762\u54b1\u8bb2Java\u7684\u65f6\u5019\u8bf4\u8fc7hash\u8868\u7684\u7ed3\u6784\u5c31\u975e\u5e38\u7684\u597d\uff0c\u4f46\u662f\u8fd9\u91cc\u8fb9\u6211\u4eec\u5df2\u7ecf\u6709hash\u4e86\uff0c\u4ed6\u505a\u4e86\u8fd9\u4e48\u4e00\u4e2a\u8bbe\u5b9a\uff0c\u5e72\u561b\u5462\uff0c\u4ed6\u628ahash\u7684\u5b58\u50a8\u7a7a\u95f4\u7ed9\u6539\u4e00\u4e0b\uff0c\u53f3\u8fb9\u4f60\u539f\u6765\u5b58\u6570\u636e\u6539\u6389,\u5168\u90e8\u5b58\u7a7a\uff0c\u90a3\u4f60\u8bf4\u6570\u636e\u653e\u54ea\u513f\u4e86\uff1f\u653e\u5230\u539f\u6765\u7684filed\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u5728\u8fd9\u91cc\u8fb9\u5b58\u771f\u6b63\u7684\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6a21\u578b\u5c31\u662f\u6211\u4eec\u7684set \u6a21\u578b\u3002 set\u7c7b\u578b\uff1a\u4e0ehash\u5b58\u50a8\u7ed3\u6784\u5b8c\u5168\u76f8\u540c\uff0c\u4ec5\u5b58\u50a8\u952e\uff0c\u4e0d\u5b58\u50a8\u503c\uff08nil\uff09\uff0c\u5e76\u4e14\u503c\u662f\u4e0d\u5141\u8bb8\u91cd\u590d\u7684\u3002 \u770b\u4e00\u4e0b\u5b83\u7684\u6574\u4e2a\u7ed3\u6784\uff1a","title":"2.11.1 set\u7c7b\u578b"},{"location":"redis/day01/#2112_set","text":"\u6dfb\u52a0\u6570\u636e sadd key member1 [ member2 ] \u83b7\u53d6\u5168\u90e8\u6570\u636e smembers key \u5220\u9664\u6570\u636e srem key member1 [ member2 ] \u83b7\u53d6\u96c6\u5408\u6570\u636e\u603b\u91cf scard key \u5224\u65ad\u96c6\u5408\u4e2d\u662f\u5426\u5305\u542b\u6307\u5b9a\u6570\u636e sismember key member \u968f\u673a\u83b7\u53d6\u96c6\u5408\u4e2d\u6307\u5b9a\u6570\u91cf\u7684\u6570\u636e srandmember key [ count ] \u968f\u673a\u83b7\u53d6\u96c6\u4e2d\u7684\u67d0\u4e2a\u6570\u636e\u5e76\u5c06\u8be5\u6570\u636e\u79fb\u9664\u96c6\u5408 spop key [ count ]","title":"2.11.2 set\u7c7b\u578b\u6570\u636e\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"redis/day01/#212_set","text":"","title":"2.12  set \u7c7b\u578b\u6570\u636e\u7684\u6269\u5c55\u64cd\u4f5c"},{"location":"redis/day01/#2121_set","text":"\u6c42\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u3001\u5e76\u3001\u5dee\u96c6 sinter key1 [key2 \u2026] sunion key1 [key2 \u2026] sdiff key1 [key2 \u2026] \u6c42\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u3001\u5e76\u3001\u5dee\u96c6\u5e76\u5b58\u50a8\u5230\u6307\u5b9a\u96c6\u5408\u4e2d sinterstore destination key1 [key2 \u2026] sunionstore destination key1 [key2 \u2026] sdiffstore destination key1 [key2 \u2026] \u5c06\u6307\u5b9a\u6570\u636e\u4ece\u539f\u59cb\u96c6\u5408\u4e2d\u79fb\u52a8\u5230\u76ee\u6807\u96c6\u5408\u4e2d smove source destination member \u901a\u8fc7\u4e0b\u9762\u4e00\u5f20\u56fe\u56de\u5fc6\u4e00\u4e0b\u4ea4\u3001\u5e76\u3001\u5dee","title":"2.12.1  set \u7c7b\u578b\u6570\u636e\u7684\u6269\u5c55\u64cd\u4f5c"},{"location":"redis/day01/#2122_set","text":"set \u7c7b\u578b\u4e0d\u5141\u8bb8\u6570\u636e\u91cd\u590d\uff0c\u5982\u679c\u6dfb\u52a0\u7684\u6570\u636e\u5728 set \u4e2d\u5df2\u7ecf\u5b58\u5728\uff0c\u5c06\u53ea\u4fdd\u7559\u4e00\u4efd\u3002 set \u867d\u7136\u4e0ehash\u7684\u5b58\u50a8\u7ed3\u6784\u76f8\u540c\uff0c\u4f46\u662f\u65e0\u6cd5\u542f\u7528hash\u4e2d\u5b58\u50a8\u503c\u7684\u7a7a\u95f4\u3002","title":"2.12.2  set \u7c7b\u578b\u6570\u636e\u64cd\u4f5c\u7684\u6ce8\u610f\u4e8b\u9879"},{"location":"redis/day01/#213_set","text":"","title":"2.13  set\u5e94\u7528\u573a\u666f"},{"location":"redis/day01/#2131_set","text":"\uff081\uff09\u9ed1\u540d\u5355 \u8d44\u8baf\u7c7b\u4fe1\u606f\u7c7b\u7f51\u7ad9\u8ffd\u6c42\u9ad8\u8bbf\u95ee\u91cf\uff0c\u4f46\u662f\u7531\u4e8e\u5176\u4fe1\u606f\u7684\u4ef7\u503c\uff0c\u5f80\u5f80\u5bb9\u6613\u88ab\u4e0d\u6cd5\u5206\u5b50\u5229\u7528\uff0c\u901a\u8fc7\u722c\u866b\u6280\u672f\uff0c \u5feb\u901f\u83b7\u53d6\u4fe1\u606f\uff0c\u4e2a\u522b\u7279\u79cd\u884c\u4e1a\u7f51\u7ad9\u4fe1\u606f\u901a\u8fc7\u722c\u866b\u83b7\u53d6\u5206\u6790\u540e\uff0c\u53ef\u4ee5\u8f6c\u6362\u6210\u5546\u4e1a\u673a\u5bc6\u8fdb\u884c\u51fa\u552e\u3002\u4f8b\u5982\u7b2c\u4e09\u65b9\u706b \u8f66\u7968\u3001\u673a\u7968\u3001\u9152\u5e97\u5237\u7968\u4ee3\u8d2d\u8f6f\u4ef6\uff0c\u7535\u5546\u5237\u8bc4\u8bba\u3001\u5237\u597d\u8bc4\u3002 \u540c\u65f6\u722c\u866b\u5e26\u6765\u7684\u4f2a\u6d41\u91cf\u4e5f\u4f1a\u7ed9\u7ecf\u8425\u8005\u5e26\u6765\u9519\u89c9\uff0c\u4ea7\u751f\u9519\u8bef\u7684\u51b3\u7b56\uff0c\u6709\u6548\u907f\u514d\u7f51\u7ad9\u88ab\u722c\u866b\u53cd\u590d\u722c\u53d6\u6210\u4e3a\u6bcf\u4e2a\u7f51\u7ad9\u90fd\u8981\u8003\u8651\u7684\u57fa\u672c\u95ee\u9898\u3002\u5728\u57fa\u4e8e\u6280\u672f\u5c42\u9762\u533a\u5206\u51fa\u722c\u866b\u7528\u6237\u540e\uff0c\u9700\u8981\u5c06\u6b64\u7c7b\u7528\u6237\u8fdb\u884c\u6709\u6548\u7684\u5c4f\u853d\uff0c\u8fd9\u5c31\u662f\u9ed1\u540d\u5355\u7684\u5178\u578b\u5e94\u7528\u3002 ps:\u4e0d\u662f\u8bf4\u722c\u866b\u4e00\u5b9a\u505a\u6467\u6bc1\u6027\u7684\u5de5\u4f5c\uff0c\u6709\u4e9b\u5c0f\u578b\u7f51\u7ad9\u9700\u8981\u722c\u866b\u4e3a\u5176\u5e26\u6765\u4e00\u4e9b\u6d41\u91cf\u3002 \uff082\uff09\u767d\u540d\u5355 \u5bf9\u4e8e\u5b89\u5168\u6027\u66f4\u9ad8\u7684\u5e94\u7528\u8bbf\u95ee\uff0c\u4ec5\u4ec5\u9760\u9ed1\u540d\u5355\u662f\u4e0d\u80fd\u89e3\u51b3\u5b89\u5168\u95ee\u9898\u7684\uff0c\u6b64\u65f6\u9700\u8981\u8bbe\u5b9a\u53ef\u8bbf\u95ee\u7684\u7528\u6237\u7fa4\u4f53\uff0c \u4f9d\u8d56\u767d\u540d\u5355\u505a\u66f4\u4e3a\u82db\u523b\u7684\u8bbf\u95ee\u9a8c\u8bc1\u3002","title":"2.13.1  set\u5e94\u7528\u573a\u666f"},{"location":"redis/day01/#2132","text":"\u57fa\u4e8e\u7ecf\u8425\u6218\u7565\u8bbe\u5b9a\u95ee\u9898\u7528\u6237\u53d1\u73b0\u3001\u9274\u522b\u89c4\u5219 \u5468\u671f\u6027\u66f4\u65b0\u6ee1\u8db3\u89c4\u5219\u7684\u7528\u6237\u9ed1\u540d\u5355\uff0c\u52a0\u5165set\u96c6\u5408 \u7528\u6237\u884c\u4e3a\u4fe1\u606f\u8fbe\u5230\u540e\u4e0e\u9ed1\u540d\u5355\u8fdb\u884c\u6bd4\u5bf9\uff0c\u786e\u8ba4\u884c\u4e3a\u53bb\u5411 \u9ed1\u540d\u5355\u8fc7\u6ee4IP\u5730\u5740\uff1a\u5e94\u7528\u4e8e\u5f00\u653e\u6e38\u5ba2\u8bbf\u95ee\u6743\u9650\u7684\u4fe1\u606f\u6e90 \u9ed1\u540d\u5355\u8fc7\u6ee4\u8bbe\u5907\u4fe1\u606f\uff1a\u5e94\u7528\u4e8e\u9650\u5b9a\u8bbf\u95ee\u8bbe\u5907\u7684\u4fe1\u606f\u6e90 \u9ed1\u540d\u5355\u8fc7\u6ee4\u7528\u6237\uff1a\u5e94\u7528\u4e8e\u57fa\u4e8e\u8bbf\u95ee\u6743\u9650\u7684\u4fe1\u606f\u6e90","title":"2.13.2  \u89e3\u51b3\u65b9\u6848"},{"location":"redis/day01/#214","text":"","title":"2.14  \u5b9e\u8df5\u6848\u4f8b"},{"location":"redis/day01/#2141","text":"\u4f7f\u7528\u5fae\u4fe1\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u5fae\u4fe1\u63a5\u6536\u6d88\u606f\u540e\uff0c\u4f1a\u9ed8\u8ba4\u5c06\u6700\u8fd1\u63a5\u6536\u7684\u6d88\u606f\u7f6e\u9876\uff0c\u5f53\u591a\u4e2a\u597d\u53cb\u53ca\u5173\u6ce8\u7684\u8ba2\u9605\u53f7\u540c\u65f6\u53d1 \u9001\u6d88\u606f\u65f6\uff0c\u8be5\u6392\u5e8f\u4f1a\u4e0d\u505c\u7684\u8fdb\u884c\u4ea4\u66ff\u3002\u540c\u65f6\u8fd8\u53ef\u4ee5\u5c06\u91cd\u8981\u7684\u4f1a\u8bdd\u8bbe\u7f6e\u4e3a\u7f6e\u9876\u3002\u4e00\u65e6\u7528\u6237\u79bb\u7ebf\u540e\uff0c\u518d\u6b21\u6253\u5f00\u5fae\u4fe1\u65f6\uff0c\u6d88\u606f\u8be5\u6309\u7167\u4ec0\u4e48\u6837\u7684\u987a\u5e8f\u663e\u793a\u3002 \u6211\u4eec\u5206\u6790\u4e00\u4e0b\uff1a 100\u8fd9\u53f0\u624b\u673a\u4ee3\u8868\u4f60\u3002\u800c200\u3001300\u3001400\u8fd9\u4e09\u53f0\u4ee3\u8868\u4f60\u597d\u53cb\u7684\u624b\u673a\u3002\u5728\u8fd9\u91cc\u6709\u4e00\u4e9b\u4e1c\u897f\u9700\u8981\u4ea4\u4ee3\u4e00\u4e0b\uff0c\u56e0\u4e3a\u6211\u4eec\u6bcf\u4e2a\u4eba\u7684\u90fd\u4f1a\u5bf9\u81ea\u5df1\u7684\u5fae\u4fe1\u4e2d\u7684\u4e00\u4e9b\u6bd4\u8f83\u91cd\u8981\u7684\u4eba\u8bbe\u7f6e\u4f1a\u8bdd\u7f6e\u9876\uff0c\u5c06\u4ed6\u7684\u90a3\u6761\u5bf9\u8bdd\u653e\u5728\u6700\u4e0a\u9762\u3002\u6211\u4eec\u5047\u5b9a\u8fd9\u4e2a\u4eba\u6709\u4e24\u4e2a\u4f1a\u8bdd\u7f6e\u9876\u7684\u597d\u53cb\uff0c\u5206\u522b\u662f400\u548c500\uff0c\u800c\u8fd9\u91cc\u8fb9\u5c31\u5305\u542b400. \u4e0b\u9762\u5462\uff0c\u6211\u4eec\u5c31\u6765\u53d1\u8fd9\u4e2a\u6d88\u606f\uff0c\u7b2c\u4e00\u4e2a\u53d1\u6d88\u606f\u7684\u662f300\uff0c\u4ed6\u53d1\u4e86\u4e2a\u6d88\u606f\u7ed9100\u3002\u53d1\u5b8c\u4ee5\u540e\uff0c\u8fd9\u4e2a\u4e1c\u897f\u5e94\u8be5\u600e\u4e48\u5b58\u50a8\u5462\uff1f\u5728\u8fd9\u91cc\u9762\u4e00\u5b9a\u8981\u5206\u5f00\uff0c\u8bb0\u5f55\u7f6e\u9876\u7684\u8fd9\u4e9b\u4eba\u7684\u4f1a\u8bdd\uff0c\u5bf9\u5e94\u7684\u4f1a\u8bdd\u663e\u793a\u987a\u5e8f\u548c\u975e\u7f6e\u9876\u7684\u4e00\u5b9a\u8981\u5206\u4e24\u3002 \u8fd9\u91cc\u9762\u6211\u4eec\u521b\u5efa\u4e24\u4e2a\u6a21\u578b\uff0c\u4e00\u4e2a\u662f\u666e\u901a\u7684\uff0c\u4e00\u4e2a\u662f\u7f6e\u9876\u7684\uff0c\u800c\u4e0a\u9762\u7684\u8fd9\u4e2a\u7f6e\u9876\u7684\u7528\u6237\u5462\uff0c\u6211\u4eec\u7528set\u6765\u5b58\u50a8\uff0c\u56e0\u4e3a\u4e0d\u91cd\u590d\u3002\u800c\u4e0b\u9762\u8fd9\u4e9b\u56e0\u4e3a\u6709\u987a\u5e8f\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u7528list\u53bb\u5b58\u50a8,\u4e0d\u7136\u4f60\u600e\u4e48\u8868\u8fbe\u987a\u5e8f\u5462\uff1f \u90a3\u5f53300\u53d1\u7ed9\u6d88\u606f\u7ed9100\u4ee5\u540e\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5148\u5224\u5b9a\u4f60\u5728\u7f6e\u9876\u4eba\u7fa4\u4e2d\u5417\uff1f\u4e0d\u5728,\u90a3\u597d\uff0c300\u7684\u6d88\u606f\u5bf9\u5e94\u7684\u987a\u5e8f\u5c31\u5e94\u8be5\u653e\u5728\u666e\u901a\u7684\u5217\u8868\u91cc\u8fb9\u3002\u800c\u5728\u8fd9\u91cc\u8fb9\uff0c\u6211\u4eec\u628a300\u52a0\u8fdb\u53bb\u3002\u7b2c\u4e00\u4e2a\u6570\u636e\u4e5f\u5c31\u662f\u73b0\u5728300\u3002 \u63a5\u4e0b\u6765400\uff0c\u53d1\u4e86\u4e2a\u6d88\u606f\u3002\u5224\u65ad\u4e00\u4e0b\uff0c\u4ed6\u662f\u9700\u8981\u7f6e\u9876\u7684\uff0c\u6240\u4ee5400\u5c06\u8fdb\u5165list\u7684\u7f6e\u9876\u91cc\u8fb9\u653e\u7740\u3002\u5f53\u524d\u8fd8\u6ca1\u6709\u7279\u6b8a\u7684\u5730\u65b9\u3002 \u518d\u6765200\u53d1\u6d88\u606f\u4e86\uff0c\u548c\u521a\u624d\u7684\u5224\u5b9a\u65b9\u6cd5\u4e00\u6837\uff0c\u5148\u770b\u5728\u4e0d\u5728\u7f6e\u9876\u91cc\uff0c\u4e0d\u5728\u7684\u8bdd\u8fdb\u666e\u901a\uff0c\u7136\u540e\u5728\u666e\u901a\u91cc\u8fb9\u628a200\u52a0\u5165\u5c31\u884c\u4e86\uff0cOK\uff0c\u5230\u8fd9\u91cc\u76ee\u524d\u8fd8\u6ca1\u6709\u987a\u5e8f\u53d8\u5316\u3002 \u63a5\u4e0b\u6765200\u53c8\u53d1\u6d88\u606f\u8fc7\u6765\uff0c\u540c\u4e00\u4e2a\u4eba\u7ed9\u4f60\u8fde\u53d1\u4e86\u4e24\u6761\uff0c\u90a3\u8fd9\u4e2a\u65f6\u5019200\u7684\u6d88\u606f\u5230\u8fbe\u4ee5\u540e\uff0c\u5148\u5224\u65ad\u662f\u5426\u5728\u7f6e\u9876\u8303\u56f4\uff0c\u4e0d\u5728\uff0c\u63a5\u4e0b\u6765\u4ed6\u8981\u653e\u5728list\u666e\u901a\u4e2d\uff0c\u8fd9\u91cc\u4f60\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u56e0\u4e3a\u8fd9\u91cc\u8fb9\u5df2\u7ecf\u6709200\uff0c\u6240\u4ee5\u8fdb\u6765\u4ee5\u540e\u5148\u5e72\u4e00\u4ef6\u4e8b\u513f\uff0c\u628a200\u6740\u6389\uff0c\u6ca1\u6709200\uff0c\u7136\u540e\u518d\u628a200\u52a0\u8fdb\u6765\uff0c\u90a3\u4f60\u60f3\u4e00\u4e0b\uff0c\u73b0\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u987a\u5e8f\u662f\u4ec0\u4e48\u5462\uff1f\u5c31\u662f\u65b0\u7684\u90fd\u5728\u53f3\u8fb9\uff0c\u5bf9\u4e0d\u5bf9\uff1f \u8fd8\u8bb0\u5f97\u6211\u4eec\u8bf4list\u6a21\u578b\uff0c\u5982\u679c\u662f\u4e00\u4e2a\u53cc\u7aef\u961f\u5217\uff0c\u5b83\u662f\u53ef\u4ee5\u4e24\u5934\u8fdb\u4e24\u5934\u51fa\u3002\u5f53\u7136\u6211\u4eec\u53cc\u7aef\u4ece\u4e00\u5934\u8fdb\u4e00\u5934\u51fa\uff0c\u8fd9\u5c31\u662f\u6808\u6a21\u578b\uff0c\u73b0\u5728\u54b1\u4eec\u8fd0\u7528\u7684\u5c31\u662flist\u6a21\u578b\u4e2d\u7684\u6808\u6a21\u578b\u3002 \u73b0\u5728300\u53d1\u6d88\u606f\uff0c\u5148\u5224\u5b9a\u4ed6\u5728\u4e0d\u5728\uff0c\u4e0d\u5728\uff0c\u7528\u666e\u901a\u7684\u961f\u5217\uff0c\u63a5\u4e0b\u6765\u6309\u7167\u521a\u624d\u7684\u64cd\u4f5c\uff0c\u4e0d\u7ba1\u4f60\u91cc\u8fb9\u539f\u6765\u6709\u6ca1\u6709300\uff0c\u6211\u5148\u628a300\u6740\u6389\uff0c\u6ca1\u4e86\uff0c200\u81ea\u7136\u5c31\u586b\u5230300\u7684\u4f4d\u7f6e\u4e86\uff0c\u4ed6\u73b0\u5728\u662flist\u91cc\u9762\u552f\u4e00\u4e00\u4e2a\uff0c\u7136\u540e\u8ba9300\u8fdb\u6765\uff0c\u6ce8\u610f\u662f\u4ece\u53f3\u4fa7\u8fdb\u6765\u7684\uff0c\u90a3\u4e48\u73b0\u5728300\u5c31\u662f\u6700\u65b0\u7684\u3002 \u90a3\u4e48\u5230\u8fd9\u91cc\u5462\uff0c\u6211\u4eec\u8ba9100\u6765\u8bfb\u53d6\u6d88\u606f\u3002\u4f60\u89c9\u5f97\u8fd9\u4e2a\u6d88\u606f\u987a\u5e8f\u5e94\u8be5\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u9996\u5148\u7f6e\u9876\u7684400\u6709\u4e00\u4e2a\uff0c\u4ed6\u8dd1\u5728\u6700\u4e0a\u9762\uff0c\u7136\u540elist\u666e\u901a\u5982\u679c\u51fa\u6765\u7684\u8bdd\uff0c300\u662f\u6700\u65b0\u7684\u6d88\u606f\uff0c\u800c200\u5728\u4ed6\u540e\u9762\u7684\u3002\u7528\u8fd9\u79cd\u5f62\u5f0f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u505a\u51fa\u6765\u4ed6\u7684\u6d88\u606f\u987a\u5e8f\u6765\u3002","title":"2.14.1\u4e1a\u52a1\u573a\u666f"},{"location":"redis/day01/#2142","text":"\u770b\u4e00\u4e0b\u6700\u7ec8\u7684\u89e3\u51b3\u65b9\u6848\uff1a \u4f9d\u8d56list\u7684\u6570\u636e\u5177\u6709\u987a\u5e8f\u7684\u7279\u5f81\u5bf9\u6d88\u606f\u8fdb\u884c\u7ba1\u7406\uff0c\u5c06list\u7ed3\u6784\u4f5c\u4e3a\u6808\u4f7f\u7528 \u7f6e\u9876\u4e0e\u666e\u901a\u4f1a\u8bdd\u5206\u522b\u521b\u5efa\u72ec\u7acb\u7684list\u5206\u522b\u7ba1\u7406 \u5f53\u67d0\u4e2alist\u4e2d\u63a5\u6536\u5230\u7528\u6237\u6d88\u606f\u540e\uff0c\u5c06\u6d88\u606f\u53d1\u9001\u65b9\u7684id\u4ecelist\u7684\u4e00\u4fa7\u52a0\u5165list\uff08\u6b64\u5904\u8bbe\u5b9a\u5de6\u4fa7\uff09 \u591a\u4e2a\u76f8\u540cid\u53d1\u51fa\u7684\u6d88\u606f\u53cd\u590d\u5165\u6808\u4f1a\u51fa\u73b0\u95ee\u9898\uff0c\u5728\u5165\u6808\u4e4b\u524d\u65e0\u8bba\u662f\u5426\u5177\u6709\u5f53\u524did\u5bf9\u5e94\u7684\u6d88\u606f\uff0c\u5148\u5220\u9664\u5bf9\u5e94id \u63a8\u9001\u6d88\u606f\u65f6\u5148\u63a8\u9001\u7f6e\u9876\u4f1a\u8bddlist\uff0c\u518d\u63a8\u9001\u666e\u901a\u4f1a\u8bddlist\uff0c\u63a8\u9001\u5b8c\u6210\u7684list\u6e05\u9664\u6240\u6709\u6570\u636e \u6d88\u606f\u7684\u6570\u91cf\uff0c\u4e5f\u5c31\u662f\u5fae\u4fe1\u7528\u6237\u5bf9\u8bdd\u6570\u91cf\u91c7\u7528\u8ba1\u6570\u5668\u7684\u601d\u60f3\u53e6\u884c\u8bb0\u5f55\uff0c\u4f34\u968flist\u64cd\u4f5c\u540c\u6b65\u66f4\u65b0","title":"2.14.2  \u89e3\u51b3\u65b9\u6848"},{"location":"redis/day01/#2143","text":"\u603b\u7ed3\u4e00\u4e0b\uff0c\u5728\u6574\u4e2a\u6570\u636e\u7c7b\u578b\u7684\u90e8\u5206\uff0c\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd\u4e86\u54ea\u4e9b\u5185\u5bb9\uff1a \u9996\u5148\u6211\u4eec\u4e86\u89e3\u4e86\u4e00\u4e0b\u6570\u636e\u7c7b\u578b\uff0c\u63a5\u4e0b\u6765\u9488\u5bf9\u7740\u6211\u4eec\u8981\u5b66\u4e60\u7684\u6570\u636e\u7c7b\u578b\uff0c\u8fdb\u884c\u9010\u4e00\u8bb2\u89e3\u4e86string\u3001hash\u3001list\u3001set\u7b49\uff0c\u6700\u540e\u901a\u8fc7\u4e00\u4e2a\u6848\u4f8b\u603b\u7ed3\u4e86\u4e00\u4e0b\u524d\u9762\u7684\u6570\u636e\u7c7b\u578b\u7684\u4f7f\u7528\u573a\u666f\u3002","title":"2.14.3  \u6570\u636e\u7c7b\u578b\u603b\u7ed3"},{"location":"redis/day01/#3","text":"\u5728\u8fd9\u90e8\u5206\u4e2d\u5462\uff0c\u6211\u4eec\u5bb6\u5b66\u4e60\u4e24\u4e2a\u77e5\u8bc6\uff0c\u7b2c\u4e00\u4e2a\u662fkey\u7684\u5e38\u7528\u6307\u4ee4\uff0c\u7b2c\u4e8c\u4e2a\u662f\u6570\u636e\u5e93\u7684\u5e38\u7528\u6307\u4ee4\u3002\u548c\u524d\u9762\u6211\u4eec\u5b66\u6570\u636e\u7c7b\u578b\u505a\u4e00\u4e0b\u533a\u5206\uff0c\u524d\u9762\u4f60\u5b66\u7684\u90a3\u4e9b\u6307\u4ee4\u5462\uff0c\u90fd\u662f\u9488\u5bf9\u67d0\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\u64cd\u4f5c\u7684\uff0c\u73b0\u5728\u5b66\u7684\u90fd\u662f\u5bf9\u6240\u6709\u7684\u64cd\u4f5c\u7684\uff0c\u6765\u770b\u4e00\u4e0b\uff0c\u6211\u4eec\u5728\u5b66\u4e60Key\u7684\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5148\u60f3\u4e00\u4e0b\u7684\u64cd\u4f5c\u6211\u4eec\u5e94\u8be5\u5b66\u54ea\u4e9b\u4e1c\u897f:","title":"3. \u5e38\u7528\u6307\u4ee4"},{"location":"redis/day01/#31_key","text":"","title":"3.1  key \u64cd\u4f5c\u5206\u6790"},{"location":"redis/day01/#311_key","text":"key\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u901a\u8fc7key\u83b7\u53d6redis\u4e2d\u4fdd\u5b58\u7684\u6570\u636e \u5bf9\u4e8ekey\u81ea\u8eab\u72b6\u6001\u7684\u76f8\u5173\u64cd\u4f5c\uff0c\u4f8b\u5982\uff1a\u5220\u9664\uff0c\u5224\u5b9a\u5b58\u5728\uff0c\u83b7\u53d6\u7c7b\u578b\u7b49 \u5bf9\u4e8ekey\u6709\u6548\u6027\u63a7\u5236\u76f8\u5173\u64cd\u4f5c\uff0c\u4f8b\u5982\uff1a\u6709\u6548\u671f\u8bbe\u5b9a\uff0c\u5224\u5b9a\u662f\u5426\u6709\u6548\uff0c\u6709\u6548\u72b6\u6001\u7684\u5207\u6362\u7b49 \u5bf9\u4e8ekey\u5feb\u901f\u67e5\u8be2\u64cd\u4f5c\uff0c\u4f8b\u5982\uff1a\u6309\u6307\u5b9a\u7b56\u7565\u67e5\u8be2key","title":"3.1.1  key\u5e94\u8be5\u8bbe\u8ba1\u54ea\u4e9b\u64cd\u4f5c\uff1f"},{"location":"redis/day01/#312_key","text":"\u5220\u9664\u6307\u5b9akey del key \u83b7\u53d6key\u662f\u5426\u5b58\u5728 exists key \u83b7\u53d6key\u7684\u7c7b\u578b type key 3.1.3 \u62d3\u5c55\u64cd\u4f5c \u6392\u5e8f sort \u6539\u540d rename key newkey renamenx key newkey","title":"3.1.2  key \u57fa\u672c\u64cd\u4f5c"},{"location":"redis/day01/#313_key","text":"\u4e3a\u6307\u5b9akey\u8bbe\u7f6e\u6709\u6548\u671f expire key seconds pexpire key milliseconds expireat key timestamp pexpireat key milliseconds-timestamp \u83b7\u53d6key\u7684\u6709\u6548\u65f6\u95f4 ttl key pttl key \u5207\u6362key\u4ece\u65f6\u6548\u6027\u8f6c\u6362\u4e3a\u6c38\u4e45\u6027 persist key","title":"3.1.3  key \u6269\u5c55\u64cd\u4f5c\uff08\u65f6\u6548\u6027\u63a7\u5236\uff09"},{"location":"redis/day01/#314_key","text":"\u67e5\u8be2key keys pattern \u67e5\u8be2\u6a21\u5f0f\u89c4\u5219 *\u5339\u914d\u4efb\u610f\u6570\u91cf\u7684\u4efb\u610f\u7b26\u53f7 ? \u914d\u5408\u4e00\u4e2a\u4efb\u610f\u7b26\u53f7 [] \u5339\u914d\u4e00\u4e2a\u6307\u5b9a\u7b26\u53f7 keys * keys \u67e5\u8be2\u6240\u6709 it* keys \u67e5\u8be2\u6240\u6709\u4ee5it\u5f00\u5934 *heima \u67e5\u8be2\u6240\u6709\u4ee5heima\u7ed3\u5c3e keys ??heima \u67e5\u8be2\u6240\u6709\u524d\u9762\u4e24\u4e2a\u5b57\u7b26\u4efb\u610f\uff0c\u540e\u9762\u4ee5heima\u7ed3\u5c3e \u67e5\u8be2\u6240\u6709\u4ee5 keys user:? user:\u5f00\u5934\uff0c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4efb\u610f keys u [ st ] er:1 \u67e5\u8be2\u6240\u6709\u4ee5u\u5f00\u5934\uff0c\u4ee5er:1\u7ed3\u5c3e\uff0c\u4e2d\u95f4\u5305\u542b\u4e00\u4e2a\u5b57\u6bcd\uff0cs\u6216t","title":"3.1.4  key \u6269\u5c55\u64cd\u4f5c\uff08\u67e5\u8be2\u6a21\u5f0f\uff09"},{"location":"redis/day01/#32","text":"","title":"3.2  \u6570\u636e\u5e93\u6307\u4ee4"},{"location":"redis/day01/#321_key","text":"\u5728\u8fd9\u4e2a\u5730\u65b9\u6211\u4eec\u6765\u8bb2\u4e00\u4e0b\u6570\u636e\u5e93\u7684\u5e38\u7528\u6307\u4ee4\uff0c\u5728\u8bb2\u8fd9\u4e2a\u4e1c\u897f\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u601d\u8003\u4e00\u4e2a\u95ee\u9898\uff1a \u5047\u5982\u8bf4\u4f60\u4eec\u5341\u4e2a\u4eba\u540c\u65f6\u64cd\u4f5credis\uff0c\u4f1a\u4e0d\u4f1a\u51fa\u73b0key\u540d\u5b57\u547d\u540d\u51b2\u7a81\u7684\u95ee\u9898\u3002 \u4e00\u5b9a\u4f1a\uff0c\u4e3a\u4ec0\u4e48?\u56e0\u4e3a\u4f60\u7684key\u662f\u7531\u7a0b\u5e8f\u800c\u5b9a\u4e49\u7684\u3002\u4f60\u60f3\u5199\u4ec0\u4e48\u5199\u4ec0\u4e48\uff0c\u90a3\u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\u5927\u5bb6\u90fd\u5728\u4e0d\u505c\u7684\u52a0\uff0c\u65e9\u665a\u6709\u4e00\u5929\u4ed6\u4f1a\u51b2\u7a81\u7684\u3002 redis\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u4f34\u968f\u7740\u64cd\u4f5c\u6570\u636e\u91cf\u7684\u589e\u52a0\uff0c\u4f1a\u51fa\u73b0\u5927\u91cf\u7684\u6570\u636e\u4ee5\u53ca\u5bf9\u5e94\u7684key\u3002 \u90a3\u8fd9\u4e2a\u95ee\u9898\u6211\u4eec\u8981\u4e0d\u8981\u89e3\u51b3\uff1f\u8981\uff01\u600e\u4e48\u89e3\u51b3\u5462\uff1f\u6211\u4eec\u6700\u597d\u628a\u6570\u636e\u8fdb\u884c\u4e00\u4e2a\u5206\u7c7b\uff0c\u9664\u4e86\u547d\u540d\u89c4\u8303\u6211\u4eec\u505a\u7edf\u4e00\u4ee5\u5916\uff0c\u5982\u679c\u8fd8\u80fd\u628a\u5b83\u5206\u5f00\uff0c\u8fd9\u6837\u662f\u4e0d\u662f\u51b2\u7a81\u7684\u673a\u7387\u5c31\u4f1a\u5c0f\u4e00\u4e9b\u4e86\uff0c\u8fd9\u5c31\u662f\u54b1\u4eec\u4e0b\u9762\u8981\u8bf4\u7684\u89e3\u51b3\u65b9\u6848\uff01","title":"3.2.1  key \u7684\u91cd\u590d\u95ee\u9898"},{"location":"redis/day01/#322","text":"redis\u4e3a\u6bcf\u4e2a\u670d\u52a1\u63d0\u4f9b\u670916\u4e2a\u6570\u636e\u5e93\uff0c\u7f16\u53f7\u4ece0\u523015 \u6bcf\u4e2a\u6570\u636e\u5e93\u4e4b\u95f4\u7684\u6570\u636e\u76f8\u4e92\u72ec\u7acb \u5728\u5bf9\u5e94\u7684\u6570\u636e\u5e93\u4e2d\u5212\u51fa\u4e00\u5757\u533a\u57df\uff0c\u8bf4\u4ed6\u5c31\u662f\u51e0\uff0c\u4f60\u5c31\u7528\u51e0\u90a3\u5757\uff0c\u540c\u65f6\uff0c\u5176\u4ed6\u7684\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u8fdb\u884c\u5b9a\u4e49\uff0c\u4e00\u5171\u662f16\u4e2a\uff0c\u8fd9\u91cc\u8fb9\u9700\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u4ed6\u4eec\u8fd916\u4e2a\u5171\u7528redis\u7684\u5185\u5b58\u3002\u6ca1\u6709\u8bf4\u8c01\u5927\u8c01\u5c0f\uff0c\u4e5f\u5c31\u662f\u8bf4\u6570\u5b57\u53ea\u662f\u4ee3\u8868\u4e86\u4e00\u5757\u513f\u533a\u57df\uff0c\u533a\u57df\u5177\u4f53\u591a\u5927\u672a\u77e5\u3002\u8fd9\u662f\u6570\u636e\u5e93\u7684\u4e00\u4e2a\u5206\u533a\u7684\u4e00\u4e2a\u7b56\u7565\uff01","title":"3.2.2  \u89e3\u51b3\u65b9\u6848"},{"location":"redis/day01/#323","text":"\u5207\u6362\u6570\u636e\u5e93 select index \u5176\u4ed6\u64cd\u4f5c ping","title":"3.2.3   \u6570\u636e\u5e93\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"redis/day01/#324","text":"\u6570\u636e\u79fb\u52a8 move key db \u6570\u636e\u603b\u91cf dbsize \u6570\u636e\u6e05\u9664 flushdb flushall","title":"3.2.4  \u6570\u636e\u5e93\u6269\u5c55\u64cd\u4f5c"},{"location":"redis/day01/#4_jedis","text":"\u5728\u5b66\u4e60\u5b8credis\u540e\uff0c\u6211\u4eec\u73b0\u5728\u5c31\u8981\u7528Java\u6765\u8fde\u63a5redis\u4e86\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u7684\u8fd9\u4e00\u7ae0\u8981\u5b66\u7684Jedis\u4e86\u3002\u5728\u8fd9\u4e2a\u90e8\u5206\uff0c\u6211\u4eec\u4e3b\u8981\u8bb2\u89e3\u4ee5\u4e0b3\u4e2a\u5185\u5bb9\uff1a HelloWorld\uff08Jedis\u7248\uff09 Jedis\u7b80\u6613\u5de5\u5177\u7c7b\u5f00\u53d1 \u53ef\u89c6\u5316\u5ba2\u6237\u7aef","title":"4. Jedis"},{"location":"redis/day01/#41_jedis","text":"","title":"4.1  Jedis\u7b80\u4ecb"},{"location":"redis/day01/#411_redis","text":"\u5bf9\u4e8e\u6211\u4eec\u73b0\u5728\u7684\u6570\u636e\u6765\u8bf4\uff0c\u5b83\u662f\u5728\u6211\u4eec\u7684redis\u4e2d\uff0c\u800c\u6700\u7ec8\u6211\u4eec\u662f\u8981\u505a\u7a0b\u5e8f\u3002\u90a3\u4e48\u7a0b\u5e8f\u5c31\u8981\u548c\u6211\u4eec\u7684redis\u8fdb\u884c\u8fde\u63a5\u3002\u5e72\u4ec0\u4e48\u4e8b\u60c5\u5462\uff1f\u4e24\u4ef6\u4e8b\uff1a\u7a0b\u5e8f\u4e2d\u6709\u6570\u636e\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8981\u628a\u8fd9\u4e9b\u6570\u636e\u5168\u90e8\u4ea4\u7ed9redis\u7ba1\u7406\u3002\u540c\u65f6\uff0credis\u4e2d\u7684\u6570\u636e\u8fd8\u80fd\u53d6\u51fa\u6765\uff0c\u56de\u5230\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002\u90a3\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u5728Java\u4e0eredis\u4e4b\u95f4\u6253\u4ea4\u9053\u7684\u8fd9\u4e2a\u4e1c\u897f\u5c31\u53eb\u505aJedis.\u7b80\u5355\u8bf4\uff0cJedis\u5c31\u662f\u63d0\u4f9b\u4e86Java\u4e0eredis\u7684\u8fde\u63a5\u670d\u52a1\u7684\uff0c\u91cc\u8fb9\u6709\u5404\u79cd\u5404\u6837\u7684API\u63a5\u53e3\uff0c\u4f60\u53ef\u4ee5\u53bb\u8c03\u7528\u5b83\u3002 \u9664\u4e86Jedis\u5916\uff0c\u8fd8\u6709\u6ca1\u6709\u5176\u4ed6\u7684\u8fd9\u79cd\u8fde\u63a5\u670d\u52a1\u5462\uff1f\u5176\u5b9e\u8fd8\u6709\u5f88\u591a\uff0c\u4e86\u89e3\u4e00\u4e0b\uff1a Java\u8bed\u8a00\u8fde\u63a5redis\u670d\u52a1 Jedis\uff08SpringData\u3001Redis \u3001 Lettuce\uff09 \u5176\u5b83\u8bed\u8a00\uff1aC \u3001C++ \u3001C# \u3001Erlang\u3001Lua \u3001Objective-C \u3001Perl \u3001PHP \u3001Python \u3001Ruby \u3001Scala","title":"4.1.1  \u7f16\u7a0b\u8bed\u8a00\u4e0eredis"},{"location":"redis/day01/#412","text":"(1)jar\u5305\u5bfc\u5165 \u4e0b\u8f7d\u5730\u5740\uff1ahttps://mvnrepository.com/artifact/redis.clients/jedis \u57fa\u4e8emaven <dependency> <groupId> redis.clients </groupId> <artifactId> jedis </artifactId> <version> 2.9.0 </version> </dependency> (2)\u5ba2\u6237\u7aef\u8fde\u63a5redis \u8fde\u63a5redis Jedis jedis = new Jedis(\"localhost\", 6379); \u64cd\u4f5credis jedis.set(\"name\", \"itheima\"); jedis.get(\"name\"); \u5173\u95edredis\u8fde\u63a5 jedis.close(); API\u6587\u6863 http://xetorthio.github.io/jedis/","title":"4.1.2  \u51c6\u5907\u5de5\u4f5c"},{"location":"redis/day01/#413","text":"\u521b\u5efa\uff1acom.itheima.JedisTest public class JedisTest { public static void main ( String [] args ) { //1.\u83b7\u53d6\u8fde\u63a5\u5bf9\u8c61 Jedis jedis = new Jedis ( \"192.168.40.130\" , 6379 ); //2.\u6267\u884c\u64cd\u4f5c jedis . set ( \"age\" , \"39\" ); String hello = jedis . get ( \"hello\" ); System . out . println ( hello ); jedis . lpush ( \"list1\" , \"a\" , \"b\" , \"c\" , \"d\" ); List < String > list1 = jedis . lrange ( \"list1\" , 0 , - 1 ); for ( String s : list1 ) { System . out . println ( s ); } jedis . sadd ( \"set1\" , \"abc\" , \"abc\" , \"def\" , \"poi\" , \"cba\" ); Long len = jedis . scard ( \"set1\" ); System . out . println ( len ); //3.\u5173\u95ed\u8fde\u63a5 jedis . close (); } }","title":"4.1.3 \u4ee3\u7801\u5b9e\u73b0"},{"location":"redis/day01/#42_jedis","text":"\u524d\u9762\u6211\u4eec\u505a\u7684\u7a0b\u5e8f\u8fd8\u662f\u6709\u70b9\u513f\u5c0f\u95ee\u9898\uff0c\u5c31\u662f\u6211\u4eec\u7684Jedis\u5bf9\u8c61\u7684\u7ba1\u7406\u662f\u6211\u4eec\u81ea\u5df1\u521b\u5efa\u7684\uff0c\u771f\u5b9e\u4f01\u4e1a\u5f00\u53d1\u4e2d\u662f\u4e0d\u53ef\u80fd\u8ba9\u4f60\u53bbnew\u4e00\u4e2a\u7684\uff0c\u90a3\u63a5\u4e0b\u6765\u54b1\u4eec\u5c31\u8981\u505a\u4e00\u4e2a\u5de5\u5177\u7c7b\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u505a\u4e00\u4e2a\u521b\u5efaJedis\u7684\u8fd9\u6837\u7684\u4e00\u4e2a\u5de5\u5177\u3002","title":"4.2  Jedis\u7b80\u6613\u5de5\u5177\u7c7b\u5f00\u53d1"},{"location":"redis/day01/#421","text":"JedisPool\uff1aJedis\u63d0\u4f9b\u7684\u8fde\u63a5\u6c60\u6280\u672f poolConfig:\u8fde\u63a5\u6c60\u914d\u7f6e\u5bf9\u8c61 host:redis\u670d\u52a1\u5730\u5740 port:redis\u670d\u52a1\u7aef\u53e3\u53f7 JedisPool\u7684\u6784\u9020\u5668\u5982\u4e0b\uff1a public JedisPool ( GenericObjectPoolConfig poolConfig , String host , int port ) { this ( poolConfig , host , port , 2000 , ( String ) null , 0 , ( String ) null ); }","title":"4.2.1  \u57fa\u4e8e\u8fde\u63a5\u6c60\u83b7\u53d6\u8fde\u63a5"},{"location":"redis/day01/#422","text":"\u521b\u5efajedis\u7684\u914d\u7f6e\u6587\u4ef6\uff1ajedis.properties jedis.host = 192.168.40.130 jedis.port = 6379 jedis.maxTotal = 50 jedis.maxIdle = 10","title":"4.2.2  \u5c01\u88c5\u8fde\u63a5\u53c2\u6570"},{"location":"redis/day01/#423","text":"\u521b\u5efaJedisUtils\uff1acom.itheima.util.JedisUtils\uff0c\u4f7f\u7528\u9759\u6001\u4ee3\u7801\u5757\u521d\u59cb\u5316\u8d44\u6e90 public class JedisUtils { private static int maxTotal ; private static int maxIdel ; private static String host ; private static int port ; private static JedisPoolConfig jpc ; private static JedisPool jp ; static { ResourceBundle bundle = ResourceBundle . getBundle ( \"redis\" ); maxTotal = Integer . parseInt ( bundle . getString ( \"redis.maxTotal\" )); maxIdel = Integer . parseInt ( bundle . getString ( \"redis.maxIdel\" )); host = bundle . getString ( \"redis.host\" ); port = Integer . parseInt ( bundle . getString ( \"redis.port\" )); //Jedis\u8fde\u63a5\u6c60\u914d\u7f6e jpc = new JedisPoolConfig (); jpc . setMaxTotal ( maxTotal ); jpc . setMaxIdle ( maxIdel ); jp = new JedisPool ( jpc , host , port ); } }","title":"4.2.3  \u52a0\u8f7d\u914d\u7f6e\u4fe1\u606f"},{"location":"redis/day01/#424","text":"\u5bf9\u5916\u8bbf\u95ee\u63a5\u53e3\uff0c\u63d0\u4f9bjedis\u8fde\u63a5\u5bf9\u8c61\uff0c\u8fde\u63a5\u4ece\u8fde\u63a5\u6c60\u83b7\u53d6\uff0c\u5728JedisUtils\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u83b7\u53d6jedis\u7684\u65b9\u6cd5\uff1agetJedis public static Jedis getJedis (){ Jedis jedis = jedisPool . getResource (); return jedis ; }","title":"4.2.4  \u83b7\u53d6\u8fde\u63a5"},{"location":"redis/day01/#43","text":"4.3.1 Redis Desktop Manager","title":"4.3  \u53ef\u89c6\u5316\u5ba2\u6237\u7aef"},{"location":"redis/day01/#5","text":"\u4e0b\u9762\u5462\uff0c\u8fdb\u5165\u5230\u6301\u4e45\u5316\u7684\u5b66\u4e60.\u8fd9\u90e8\u5206\u5185\u5bb9\u7406\u89e3\u7684\u4e1c\u897f\u591a\uff0c\u64cd\u4f5c\u7684\u4e1c\u897f\u5c11\u3002\u5728\u8fd9\u4e2a\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u8bb2\u89e3\u56db\u4e2a\u4e1c\u897f\uff1a \u6301\u4e45\u5316\u7b80\u4ecb RDB AOF RDB\u4e0eAOF\u533a\u522b","title":"5. \u6301\u4e45\u5316"},{"location":"redis/day01/#51","text":"","title":"5.1  \u6301\u4e45\u5316\u7b80\u4ecb"},{"location":"redis/day01/#511_-","text":"\u4e0d\u77e5\u9053\u5927\u5bb6\u6709\u6ca1\u6709\u9047\u89c1\u8fc7\uff0c\u5c31\u662f\u6b63\u5de5\u4f5c\u7684\u65f6\u5019\u505c\u7535\u4e86\uff0c\u5982\u679c\u4f60\u7528\u7684\u662f\u7b14\u8bb0\u672c\u7535\u8111\u8fd8\u597d\uff0c\u4f60\u6709\u7535\u6c60\uff0c\u4f46\u5982\u679c\u4f60\u7528\u7684\u662f\u53f0\u5f0f\u673a\u5462\uff0c\u90a3\u6050\u6015\u5c31\u6bd4\u8f83\u707e\u96be\u4e86\uff0c\u5047\u5982\u4f60\u73b0\u5728\u6b63\u5728\u5199\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u6587\u6863\uff0c\u5982\u679c\u4f60\u8981\u4f7f\u7528\u7684\u662fword\uff0c\u8fd9\u79cd\u529e\u516c\u81ea\u52a8\u5316\u8f6f\u4ef6\u7684\u8bdd\uff0c\u4ed6\u4e00\u65e6\u9047\u5230\u505c\u7535\uff0c\u5176\u5b9e\u4f60\u4e0d\u7528\u62c5\u5fc3\uff0c\u56e0\u4e3a\u5b83\u4f1a\u7ed9\u4f60\u751f\u6210\u4e00\u4e9b\u5176\u4ed6\u7684\u6587\u4ef6\u3002 \u5176\u5b9e\u4ed6\u4eec\u90fd\u5728\u505a\u4e00\u4ef6\u4e8b\u513f\uff0c\u5e2e\u4f60\u81ea\u52a8\u6062\u590d\uff0c\u6709\u4e86\u8fd9\u4e2a\u6587\u4ef6\uff0c\u4f60\u524d\u9762\u7684\u4e1c\u897f\u5c31\u4e0d\u518d\u4e22\u4e86\u3002\u90a3\u4ec0\u4e48\u662f\u81ea\u52a8\u6062\u590d\u5462\uff1f\u4f60\u8981\u5148\u4e86\u89e3\u4ed6\u7684\u6574\u4e2a\u8fc7\u7a0b\u3002 \u6211\u4eec\u8bf4\u81ea\u52a8\u6062\u590d\uff0c\u5176\u5b9e\u57fa\u4e8e\u7684\u4e00\u4e2a\u524d\u63d0\u5c31\u662f\u4ed6\u63d0\u524d\u628a\u4f60\u7684\u6570\u636e\u7ed9\u5b58\u8d77\u6765\u4e86\u3002\u4f60\u5e73\u5e38\u64cd\u4f5c\u7684\u6240\u6709\u4fe1\u606f\u90fd\u662f\u5728\u5185\u5b58\u4e2d\u7684\uff0c\u800c\u6211\u4eec\u771f\u6b63\u7684\u4fe1\u606f\u662f\u4fdd\u5b58\u5728\u786c\u76d8\u4e2d\u7684\uff0c\u5185\u5b58\u4e2d\u7684\u4fe1\u606f\u65ad\u7535\u4ee5\u540e\u5c31\u6d88\u5931\u4e86\uff0c\u786c\u76d8\u4e2d\u7684\u4fe1\u606f\u65ad\u7535\u4ee5\u540e\u8fd8\u53ef\u4ee5\u4fdd\u7559\u4e0b\u6765\uff01 \u6211\u4eec\u5c06\u6587\u4ef6\u7531\u5185\u5b58\u4e2d\u4fdd\u5b58\u5230\u786c\u76d8\u4e2d\u7684\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u6211\u4eec\u53eb\u505a\u6570\u636e\u4fdd\u5b58\uff0c\u4e5f\u5c31\u53eb\u505a\u6301\u4e45\u5316\u3002\u4f46\u662f\u628a\u5b83\u4fdd\u5b58\u4e0b\u6765\u4e0d\u662f\u4f60\u7684\u76ee\u7684\uff0c\u6700\u7ec8\u4f60\u8fd8\u8981\u628a\u5b83\u518d\u8bfb\u53d6\u51fa\u6765\uff0c\u5b83\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u6211\u4eec\u53eb\u505a\u6570\u636e\u6062\u590d\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684word\u4e3a\u4ec0\u4e48\u65ad\u7535\u4ee5\u540e\u8fd8\u80fd\u591f\u7ed9\u4f60\u4fdd\u7559\u6587\u4ef6\uff0c\u56e0\u4e3a\u5b83\u6267\u884c\u4e86\u4e00\u4e2a\u81ea\u52a8\u5907\u4efd\u7684\u8fc7\u7a0b\uff0c\u4e5f\u5c31\u662f\u901a\u8fc7\u81ea\u52a8\u7684\u5f62\u5f0f\uff0c\u628a\u4f60\u7684\u6570\u636e\u5b58\u50a8\u8d77\u6765\uff0c\u90a3\u4e48\u6709\u4e86\u8fd9\u79cd\u5f62\u5f0f\u4ee5\u540e\uff0c\u6211\u4eec\u7684\u6570\u636e\u5c31\u53ef\u4ee5\u7531\u5185\u5b58\u5230\u786c\u76d8\u4e0a\u5b9e\u73b0\u4fdd\u5b58\u3002","title":"5.1.1  \u573a\u666f-\u610f\u5916\u65ad\u7535"},{"location":"redis/day01/#512","text":"(1)\u4ec0\u4e48\u662f\u6301\u4e45\u5316 \u5229\u7528\u6c38\u4e45\u6027\u5b58\u50a8\u4ecb\u8d28\u5c06\u6570\u636e\u8fdb\u884c\u4fdd\u5b58\uff0c\u5728\u7279\u5b9a\u7684\u65f6\u95f4\u5c06\u4fdd\u5b58\u7684\u6570\u636e\u8fdb\u884c\u6062\u590d\u7684\u5de5\u4f5c\u673a\u5236\u79f0\u4e3a\u6301\u4e45\u5316 \u3002 \u6301\u4e45\u5316\u7528\u4e8e\u9632\u6b62\u6570\u636e\u7684\u610f\u5916\u4e22\u5931\uff0c\u786e\u4fdd\u6570\u636e\u5b89\u5168\u6027\u3002 (2)\u6301\u4e45\u5316\u8fc7\u7a0b\u4fdd\u5b58\u4ec0\u4e48\uff1f \u6211\u4eec\u77e5\u9053\u4e00\u70b9\uff0c\u8ba1\u7b97\u673a\u4e2d\u7684\u6570\u636e\u5168\u90e8\u90fd\u662f\u4e8c\u8fdb\u5236\uff0c\u5982\u679c\u73b0\u5728\u6211\u8981\u4f60\u7ed9\u6211\u4fdd\u5b58\u4e00\u7ec4\u6570\u636e\u7684\u8bdd\uff0c\u4f60\u6709\u4ec0\u4e48\u6837\u7684\u65b9\u5f0f\u5462\uff0c\u5176\u5b9e\u6700\u7b80\u5355\u7684\u5c31\u662f\u73b0\u5728\u957f\u4ec0\u4e48\u6837\uff0c\u6211\u5c31\u8bb0\u4e0b\u6765\u5c31\u884c\u4e86\uff0c\u90a3\u4e48\u8fd9\u79cd\u662f\u8bb0\u5f55\u7eaf\u7cb9\u7684\u6570\u636e\uff0c\u4e5f\u53eb\u505a\u5feb\u7167\u5b58\u50a8\uff0c\u4e5f\u5c31\u662f\u5b83\u4fdd\u5b58\u7684\u662f\u67d0\u4e00\u65f6\u523b\u7684\u6570\u636e\u72b6\u6001\u3002 \u8fd8\u6709\u4e00\u79cd\u5f62\u5f0f\uff0c\u5b83\u4e0d\u8bb0\u5f55\u4f60\u7684\u6570\u636e\uff0c\u5b83\u8bb0\u5f55\u4f60\u6240\u6709\u7684\u64cd\u4f5c\u8fc7\u7a0b\uff0c\u6bd4\u5982\u8bf4\u5927\u5bb6\u7528idea\u7684\u65f6\u5019\uff0c\u6709\u6ca1\u6709\u9047\u5230\u8fc7\u5199\u9519\u4e86ctrl+z\u64a4\u9500\uff0c\u7136\u540ectrl+y\u8fd8\u80fd\u6062\u590d\uff0c\u8fd9\u4e2a\u5730\u65b9\u5b83\u4e5f\u662f\u5728\u8bb0\u5f55\uff0c\u4f46\u662f\u8bb0\u5f55\u7684\u662f\u4f60\u6240\u6709\u7684\u64cd\u4f5c\u8fc7\u7a0b\uff0c\u90a3\u6211\u60f3\u95ee\u4e00\u4e0b\uff0c\u64cd\u4f5c\u8fc7\u7a0b\uff0c\u6211\u90fd\u7ed9\u4f60\u7559\u4e0b\u6765\u4e86\uff0c\u4f60\u8bf4\u6570\u636e\u8fd8\u4f1a\u4e22\u5417\uff1f\u80af\u5b9a\u4e0d\u4f1a\u4e22\uff0c\u56e0\u4e3a\u4f60\u6240\u6709\u7684\u64cd\u4f5c\u8fc7\u7a0b\u6211\u90fd\u4fdd\u5b58\u4e86\u3002\u8fd9\u79cd\u4fdd\u5b58\u64cd\u4f5c\u8fc7\u7a0b\u7684\u5b58\u50a8\uff0c\u7528\u4e13\u4e1a\u672f\u8bed\u6765\u8bf4\u53ef\u4ee5\u8bf4\u662f\u65e5\u5fd7\uff0c\u8fd9\u662f\u4e24\u79cd\u4e0d\u540c\u7684\u4fdd\u5b58\u6570\u636e\u7684\u5f62\u5f0f\u554a\u3002 \u603b\u7ed3\u4e00\u4e0b\uff1a \u7b2c\u4e00\u79cd\uff1a\u5c06\u5f53\u524d\u6570\u636e\u72b6\u6001\u8fdb\u884c\u4fdd\u5b58\uff0c\u5feb\u7167\u5f62\u5f0f\uff0c\u5b58\u50a8\u6570\u636e\u7ed3\u679c\uff0c\u5b58\u50a8\u683c\u5f0f\u7b80\u5355\uff0c\u5173\u6ce8\u70b9\u5728\u6570\u636e\u3002 \u7b2c\u4e8c\u79cd\uff1a\u5c06\u6570\u636e\u7684\u64cd\u4f5c\u8fc7\u7a0b\u8fdb\u884c\u4fdd\u5b58\uff0c\u65e5\u5fd7\u5f62\u5f0f\uff0c\u5b58\u50a8\u64cd\u4f5c\u8fc7\u7a0b\uff0c\u5b58\u50a8\u683c\u5f0f\u590d\u6742\uff0c\u5173\u6ce8\u70b9\u5728\u6570\u636e\u7684\u64cd\u4f5c\u8fc7\u7a0b\u3002","title":"5.1.2  \u4ec0\u4e48\u662f\u6301\u4e45\u5316"},{"location":"redis/day01/#52_rdb","text":"","title":"5.2  RDB"},{"location":"redis/day01/#521_save","text":"\u624b\u52a8\u6267\u884c\u4e00\u6b21\u4fdd\u5b58\u64cd\u4f5c save save\u6307\u4ee4\u76f8\u5173\u914d\u7f6e \u8bbe\u7f6e\u672c\u5730\u6570\u636e\u5e93\u6587\u4ef6\u540d\uff0c\u9ed8\u8ba4\u503c\u4e3a dump.rdb\uff0c\u901a\u5e38\u8bbe\u7f6e\u4e3adump-\u7aef\u53e3\u53f7.rdb dbfilename filename \u8bbe\u7f6e\u5b58\u50a8.rdb\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u901a\u5e38\u8bbe\u7f6e\u6210\u5b58\u50a8\u7a7a\u95f4\u8f83\u5927\u7684\u76ee\u5f55\u4e2d\uff0c\u76ee\u5f55\u540d\u79f0data dir path \u8bbe\u7f6e\u5b58\u50a8\u81f3\u672c\u5730\u6570\u636e\u5e93\u65f6\u662f\u5426\u538b\u7f29\u6570\u636e\uff0c\u9ed8\u8ba4yes\uff0c\u8bbe\u7f6e\u4e3ano\uff0c\u8282\u7701 CPU \u8fd0\u884c\u65f6\u95f4\uff0c\u4f46\u5b58\u50a8\u6587\u4ef6\u53d8\u5927 rdbcompression yes|no \u8bbe\u7f6e\u8bfb\u5199\u6587\u4ef6\u8fc7\u7a0b\u662f\u5426\u8fdb\u884cRDB\u683c\u5f0f\u6821\u9a8c\uff0c\u9ed8\u8ba4yes\uff0c\u8bbe\u7f6e\u4e3ano\uff0c\u8282\u7ea6\u8bfb\u519910%\u65f6\u95f4\u6d88\u8017\uff0c\u5355\u5b58\u5728\u6570\u636e\u635f\u574f\u7684\u98ce\u9669 rdbchecksum yes|no save\u6307\u4ee4\u5de5\u4f5c\u539f\u7406 \u9700\u8981\u6ce8\u610f\u4e00\u4e2a\u95ee\u9898\uff0c\u6765\u770b\u4e00\u4e0b\uff0c\u73b0\u5728\u6709\u56db\u4e2a\u5ba2\u6237\u7aef\u5404\u81ea\u8981\u6267\u884c\u4e00\u4e2a\u6307\u4ee4\uff0c\u628a\u8fd9\u4e9b\u6307\u4ee4\u53d1\u9001\u5230redis\u670d\u52a1\u5668\u540e\uff0c\u4ed6\u4eec\u6267\u884c\u6709\u4e00\u4e2a\u5148\u540e\u987a\u5e8f\u95ee\u9898\uff0c\u5047\u5b9a\u5c31\u662f\u6309\u71671234\u7684\u987a\u5e8f\u653e\u8fc7\u53bb\u7684\u8bdd\uff0c\u90a3\u4f1a\u662f\u4ec0\u4e48\u6837\u7684\uff1f \u8bb0\u5f97redis\u662f\u4e2a\u5355\u7ebf\u7a0b\u7684\u5de5\u4f5c\u6a21\u5f0f\uff0c\u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\u961f\u5217\uff0c\u6240\u6709\u7684\u547d\u4ee4\u90fd\u4f1a\u8fdb\u5230\u8fd9\u4e2a\u961f\u5217\u91cc\u8fb9\uff0c\u5728\u8fd9\u513f\u6392\u961f\u6267\u884c\uff0c\u6267\u884c\u5b8c\u4e00\u4e2a\u6d88\u5931\u4e00\u4e2a\uff0c\u5f53\u6240\u6709\u7684\u547d\u4ee4\u90fd\u6267\u884c\u5b8c\u4e86\uff0cOK\uff0c\u7ed3\u679c\u8fbe\u5230\u4e86\u3002 \u4f46\u662f\u5982\u679c\u73b0\u5728\u6211\u4eec\u6267\u884c\u7684\u65f6\u5019save\u6307\u4ee4\u4fdd\u5b58\u7684\u6570\u636e\u91cf\u5f88\u5927\u4f1a\u662f\u4ec0\u4e48\u73b0\u8c61\u5462\uff1f \u4ed6\u4f1a\u975e\u5e38\u8017\u65f6\uff0c\u4ee5\u81f3\u4e8e\u5f71\u54cd\u5230\u5b83\u5728\u6267\u884c\u7684\u65f6\u5019\uff0c\u540e\u9762\u7684\u6307\u4ee4\u90fd\u8981\u7b49\uff0c\u6240\u4ee5\u8bf4\u8fd9\u79cd\u6a21\u5f0f\u662f\u4e0d\u53cb\u597d\u7684\uff0c\u8fd9\u662fsave\u6307\u4ee4\u5bf9\u5e94\u7684\u4e00\u4e2a\u95ee\u9898\uff0c\u5f53cpu\u6267\u884c\u7684\u65f6\u5019\u4f1a\u963b\u585eredis\u670d\u52a1\u5668\uff0c\u76f4\u5230\u4ed6\u6267\u884c\u5b8c\u6bd5\uff0c\u6240\u4ee5\u8bf4\u6211\u4eec\u4e0d\u5efa\u8bae\u5927\u5bb6\u5728\u7ebf\u4e0a\u73af\u5883\u7528save\u6307\u4ee4\u3002","title":"5.2.1  save\u6307\u4ee4"},{"location":"redis/day01/#522_bgsave","text":"\u4e4b\u524d\u6211\u4eec\u8bb2\u5230\u4e86\u5f53save\u6307\u4ee4\u7684\u6570\u636e\u91cf\u8fc7\u5927\u65f6\uff0c\u5355\u7ebf\u7a0b\u6267\u884c\u65b9\u5f0f\u9020\u6210\u6548\u7387\u8fc7\u4f4e\uff0c\u90a3\u5e94\u8be5\u5982\u4f55\u5904\u7406\uff1f \u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\uff1a bgsave \u6307\u4ee4\uff0cbg\u5176\u5b9e\u662fbackground\u7684\u610f\u601d\uff0c\u540e\u53f0\u6267\u884c\u7684\u610f\u601d \u624b\u52a8\u542f\u52a8\u540e\u53f0\u4fdd\u5b58\u64cd\u4f5c\uff0c\u4f46\u4e0d\u662f\u7acb\u5373\u6267\u884c bgsave bgsave\u6307\u4ee4\u76f8\u5173\u914d\u7f6e \u540e\u53f0\u5b58\u50a8\u8fc7\u7a0b\u4e2d\u5982\u679c\u51fa\u73b0\u9519\u8bef\u73b0\u8c61\uff0c\u662f\u5426\u505c\u6b62\u4fdd\u5b58\u64cd\u4f5c\uff0c\u9ed8\u8ba4yes stop-writes-on-bgsave-error yes|no \u5176 \u4ed6 dbfilename filename dir path rdbcompression yes|no rdbchecksum yes|no bgsave\u6307\u4ee4\u5de5\u4f5c\u539f\u7406 \u5f53\u6267\u884cbgsave\u7684\u65f6\u5019\uff0c\u5ba2\u6237\u7aef\u53d1\u51fabgsave\u6307\u4ee4\u7ed9\u5230redis\u670d\u52a1\u5668\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u65f6\u5019\u670d\u52a1\u5668\u9a6c\u4e0a\u56de\u4e00\u4e2a\u7ed3\u679c\u544a\u8bc9\u5ba2\u6237\u7aef\u540e\u53f0\u5df2\u7ecf\u5f00\u59cb\u4e86\uff0c\u4e0e\u6b64\u540c\u65f6\u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u4f7f\u7528Linux\u7684fork\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u8ba9\u8fd9\u4e2a\u5b50\u8fdb\u7a0b\u53bb\u6267\u884csave\u76f8\u5173\u7684\u64cd\u4f5c\uff0c\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u60f3\u4e00\u4e0b\uff0c\u6211\u4eec\u4e3b\u8fdb\u7a0b\u4e00\u76f4\u5728\u5904\u7406\u6307\u4ee4\uff0c\u800c\u5b50\u8fdb\u7a0b\u5728\u6267\u884c\u540e\u53f0\u7684\u4fdd\u5b58\uff0c\u5b83\u4f1a\u4e0d\u4f1a\u5e72\u6270\u5230\u4e3b\u8fdb\u7a0b\u7684\u6267\u884c\u5417\uff1f \u7b54\u6848\u662f\u4e0d\u4f1a\uff0c\u6240\u4ee5\u8bf4\u4ed6\u624d\u662f\u4e3b\u6d41\u65b9\u6848\u3002\u5b50\u8fdb\u7a0b\u5f00\u59cb\u6267\u884c\u4e4b\u540e\uff0c\u5b83\u5c31\u4f1a\u521b\u5efa\u554aRDB\u6587\u4ef6\u628a\u5b83\u5b58\u8d77\u6765\uff0c\u64cd\u4f5c\u5b8c\u4ee5\u540e\u4ed6\u4f1a\u628a\u8fd9\u4e2a\u7ed3\u679c\u8fd4\u56de\uff0c\u4e5f\u5c31\u662f\u8bf4bgsave\u7684\u8fc7\u7a0b\u5206\u6210\u4e24\u4e2a\u8fc7\u7a0b\uff0c\u7b2c\u4e00\u4e2a\u662f\u670d\u52a1\u7aef\u62ff\u5230\u6307\u4ee4\u76f4\u63a5\u544a\u8bc9\u5ba2\u6237\u7aef\u5f00\u59cb\u6267\u884c\u4e86\uff1b\u53e6\u5916\u4e00\u4e2a\u8fc7\u7a0b\u662f\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u5728\u5b8c\u6210\u540e\u53f0\u7684\u4fdd\u5b58\u64cd\u4f5c\uff0c\u64cd\u4f5c\u5b8c\u4ee5\u540e\u56de\u4e00\u4e2a\u6d88\u606f\u3002","title":"5.2.2  bgsave\u6307\u4ee4"},{"location":"redis/day01/#523_save","text":"\u8bbe\u7f6e\u81ea\u52a8\u6301\u4e45\u5316\u7684\u6761\u4ef6\uff0c\u6ee1\u8db3\u9650\u5b9a\u65f6\u95f4\u8303\u56f4\u5185key\u7684\u53d8\u5316\u6570\u91cf\u8fbe\u5230\u6307\u5b9a\u6570\u91cf\u5373\u8fdb\u884c\u6301\u4e45\u5316 save second changes \u53c2\u6570 second\uff1a\u76d1\u63a7\u65f6\u95f4\u8303\u56f4 changes\uff1a\u76d1\u63a7key\u7684\u53d8\u5316\u91cf \u8303\u4f8b\uff1a save 900 1 save 300 10 save 60 10000 \u5176\u4ed6\u76f8\u5173\u914d\u7f6e\uff1a dbfilename filename dir path rdbcompression yes|no rdbchecksum yes|no stop-writes-on-bgsave-error yes|no save\u914d\u7f6e\u5de5\u4f5c\u539f\u7406","title":"5.2.3 save\u914d\u7f6e\u81ea\u52a8\u6267\u884c"},{"location":"redis/day01/#524_rdb","text":"\u65b9\u5f0f save\u6307\u4ee4 bgsave\u6307\u4ee4 \u8bfb\u5199 \u540c\u6b65 \u5f02\u6b65 \u963b\u585e\u5ba2\u6237\u7aef\u6307\u4ee4 \u662f \u5426 \u989d\u5916\u5185\u5b58\u6d88\u8017 \u5426 \u662f \u542f\u52a8\u65b0\u8fdb\u7a0b \u5426 \u662f RDB\u7279\u6b8a\u542f\u52a8\u5f62\u5f0f \u670d\u52a1\u5668\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u91cd\u542f debug reload \u5173\u95ed\u670d\u52a1\u5668\u65f6\u6307\u5b9a\u4fdd\u5b58\u6570\u636e shutdown save \u5168\u91cf\u590d\u5236\uff08\u5728\u4e3b\u4ece\u590d\u5236\u4e2d\u8be6\u7ec6\u8bb2\u89e3\uff09 RDB\u4f18\u70b9\uff1a RDB\u662f\u4e00\u4e2a\u7d27\u51d1\u538b\u7f29\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5b58\u50a8\u6548\u7387\u8f83\u9ad8 RDB\u5185\u90e8\u5b58\u50a8\u7684\u662fredis\u5728\u67d0\u4e2a\u65f6\u95f4\u70b9\u7684\u6570\u636e\u5feb\u7167\uff0c\u975e\u5e38\u9002\u5408\u7528\u4e8e\u6570\u636e\u5907\u4efd\uff0c\u5168\u91cf\u590d\u5236\u7b49\u573a\u666f RDB\u6062\u590d\u6570\u636e\u7684\u901f\u5ea6\u8981\u6bd4AOF\u5feb\u5f88\u591a \u5e94\u7528\uff1a\u670d\u52a1\u5668\u4e2d\u6bcfX\u5c0f\u65f6\u6267\u884cbgsave\u5907\u4efd\uff0c\u5e76\u5c06RDB\u6587\u4ef6\u62f7\u8d1d\u5230\u8fdc\u7a0b\u673a\u5668\u4e2d\uff0c\u7528\u4e8e\u707e\u96be\u6062\u590d\u3002 RDB\u7f3a\u70b9 RDB\u65b9\u5f0f\u65e0\u8bba\u662f\u6267\u884c\u6307\u4ee4\u8fd8\u662f\u5229\u7528\u914d\u7f6e\uff0c\u65e0\u6cd5\u505a\u5230\u5b9e\u65f6\u6301\u4e45\u5316\uff0c\u5177\u6709\u8f83\u5927\u7684\u53ef\u80fd\u6027\u4e22\u5931\u6570\u636e bgsave\u6307\u4ee4\u6bcf\u6b21\u8fd0\u884c\u8981\u6267\u884cfork\u64cd\u4f5c\u521b\u5efa\u5b50\u8fdb\u7a0b\uff0c\u8981\u727a\u7272\u6389\u4e00\u4e9b\u6027\u80fd Redis\u7684\u4f17\u591a\u7248\u672c\u4e2d\u672a\u8fdb\u884cRDB\u6587\u4ef6\u683c\u5f0f\u7684\u7248\u672c\u7edf\u4e00\uff0c\u6709\u53ef\u80fd\u51fa\u73b0\u5404\u7248\u672c\u670d\u52a1\u4e4b\u95f4\u6570\u636e\u683c\u5f0f\u65e0\u6cd5\u517c\u5bb9\u73b0\u8c61","title":"5.2.4 RDB\u4e09\u79cd\u542f\u52a8\u65b9\u5f0f\u5bf9\u6bd4"},{"location":"redis/day01/#53_aof","text":"\u4e3a\u4ec0\u4e48\u8981\u6709AOF,\u8fd9\u5f97\u4eceRDB\u7684\u5b58\u50a8\u7684\u5f0a\u7aef\u8bf4\u8d77\uff1a \u5b58\u50a8\u6570\u636e\u91cf\u8f83\u5927\uff0c\u6548\u7387\u8f83\u4f4e\uff0c\u57fa\u4e8e\u5feb\u7167\u601d\u60f3\uff0c\u6bcf\u6b21\u8bfb\u5199\u90fd\u662f\u5168\u90e8\u6570\u636e\uff0c\u5f53\u6570\u636e\u91cf\u5de8\u5927\u65f6\uff0c\u6548\u7387\u975e\u5e38\u4f4e \u5927\u6570\u636e\u91cf\u4e0b\u7684IO\u6027\u80fd\u8f83\u4f4e \u57fa\u4e8efork\u521b\u5efa\u5b50\u8fdb\u7a0b\uff0c\u5185\u5b58\u4ea7\u751f\u989d\u5916\u6d88\u8017 \u5b95\u673a\u5e26\u6765\u7684\u6570\u636e\u4e22\u5931\u98ce\u9669 \u90a3\u89e3\u51b3\u7684\u601d\u8def\u662f\u4ec0\u4e48\u5462\uff1f \u4e0d\u5199\u5168\u6570\u636e\uff0c\u4ec5\u8bb0\u5f55\u90e8\u5206\u6570\u636e \u964d\u4f4e\u533a\u5206\u6570\u636e\u662f\u5426\u6539\u53d8\u7684\u96be\u5ea6\uff0c\u6539\u8bb0\u5f55\u6570\u636e\u4e3a\u8bb0\u5f55\u64cd\u4f5c\u8fc7\u7a0b \u5bf9\u6240\u6709\u64cd\u4f5c\u5747\u8fdb\u884c\u8bb0\u5f55\uff0c\u6392\u9664\u4e22\u5931\u6570\u636e\u7684\u98ce\u9669","title":"5.3  AOF"},{"location":"redis/day01/#531_aof","text":"AOF (append only file)\u6301\u4e45\u5316\uff1a\u4ee5\u72ec\u7acb\u65e5\u5fd7\u7684\u65b9\u5f0f\u8bb0\u5f55\u6bcf\u6b21\u5199\u547d\u4ee4\uff0c\u91cd\u542f\u65f6\u518d\u91cd\u65b0\u6267\u884cAOF\u6587\u4ef6\u4e2d\u547d\u4ee4 \u8fbe\u5230\u6062\u590d\u6570\u636e\u7684\u76ee\u7684\u3002 \u4e0eRDB\u76f8\u6bd4\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\u7531\u8bb0\u5f55\u6570\u636e\u6539\u4e3a\u8bb0\u5f55\u6570\u636e\u4ea7\u751f\u7684\u53d8\u5316 AOF\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u89e3\u51b3\u4e86\u6570\u636e\u6301\u4e45\u5316\u7684\u5b9e\u65f6\u6027\uff0c\u76ee\u524d\u5df2\u7ecf\u662fRedis\u6301\u4e45\u5316\u7684\u4e3b\u6d41\u65b9\u5f0f AOF\u5199\u6570\u636e\u8fc7\u7a0b \u542f\u52a8AOF\u76f8\u5173\u914d\u7f6e \u5f00\u542fAOF\u6301\u4e45\u5316\u529f\u80fd\uff0c\u9ed8\u8ba4no\uff0c\u5373\u4e0d\u5f00\u542f\u72b6\u6001 appendonly yes|no AOF\u6301\u4e45\u5316\u6587\u4ef6\u540d\uff0c\u9ed8\u8ba4\u6587\u4ef6\u540d\u4e3aappendonly.aof\uff0c\u5efa\u8bae\u914d\u7f6e\u4e3aappendonly-\u7aef\u53e3\u53f7.aof appendfilename filename AOF\u6301\u4e45\u5316\u6587\u4ef6\u4fdd\u5b58\u8def\u5f84\uff0c\u4e0eRDB\u6301\u4e45\u5316\u6587\u4ef6\u4fdd\u6301\u4e00\u81f4\u5373\u53ef dir AOF\u5199\u6570\u636e\u7b56\u7565\uff0c\u9ed8\u8ba4\u4e3aeverysec appendfsync always|everysec|no","title":"5.3.1 AOF\u6982\u5ff5"},{"location":"redis/day01/#532_aof","text":"AOF\u5199\u6570\u636e\u4e09\u79cd\u7b56\u7565(appendfsync) always (\u6bcf\u6b21\uff09\uff1a\u6bcf\u6b21\u5199\u5165\u64cd\u4f5c\u5747\u540c\u6b65\u5230AOF\u6587\u4ef6\u4e2d\u6570\u636e\u96f6\u8bef\u5dee\uff0c\u6027\u80fd\u8f83\u4f4e\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528\u3002 everysec \uff08\u6bcf\u79d2\uff09\uff1a\u6bcf\u79d2\u5c06\u7f13\u51b2\u533a\u4e2d\u7684\u6307\u4ee4\u540c\u6b65\u5230AOF\u6587\u4ef6\u4e2d\uff0c\u5728\u7cfb\u7edf\u7a81\u7136\u5b95\u673a\u7684\u60c5\u51b5\u4e0b\u4e22\u59311\u79d2\u5185\u7684\u6570\u636e \u6570\u636e\u51c6\u786e\u6027\u8f83\u9ad8\uff0c\u6027\u80fd\u8f83\u9ad8\uff0c\u5efa\u8bae\u4f7f\u7528\uff0c\u4e5f\u662f\u9ed8\u8ba4\u914d\u7f6e no \uff08\u7cfb\u7edf\u63a7\u5236\uff09\uff1a\u7531\u64cd\u4f5c\u7cfb\u7edf\u63a7\u5236\u6bcf\u6b21\u540c\u6b65\u5230AOF\u6587\u4ef6\u7684\u5468\u671f\uff0c\u6574\u4f53\u8fc7\u7a0b\u4e0d\u53ef\u63a7","title":"5.3.2 AOF\u6267\u884c\u7b56\u7565"},{"location":"redis/day01/#533_aof","text":"\u573a\u666f\uff1aAOF\u5199\u6570\u636e\u9047\u5230\u7684\u95ee\u9898\uff0c\u5982\u679c\u8fde\u7eed\u6267\u884c\u5982\u4e0b\u6307\u4ee4\u8be5\u5982\u4f55\u5904\u7406 \u4ec0\u4e48\u53ebAOF\u91cd\u5199\uff1f \u968f\u7740\u547d\u4ee4\u4e0d\u65ad\u5199\u5165AOF\uff0c\u6587\u4ef6\u4f1a\u8d8a\u6765\u8d8a\u5927\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cRedis\u5f15\u5165\u4e86AOF\u91cd\u5199\u673a\u5236\u538b\u7f29\u6587\u4ef6\u4f53\u79ef\u3002AOF\u6587\u4ef6\u91cd \u5199\u662f\u5c06Redis\u8fdb\u7a0b\u5185\u7684\u6570\u636e\u8f6c\u5316\u4e3a\u5199\u547d\u4ee4\u540c\u6b65\u5230\u65b0AOF\u6587\u4ef6\u7684\u8fc7\u7a0b\u3002\u7b80\u5355\u8bf4\u5c31\u662f\u5c06\u5bf9\u540c\u4e00\u4e2a\u6570\u636e\u7684\u82e5\u5e72\u4e2a\u6761\u547d\u4ee4\u6267\u884c\u7ed3 \u679c\u8f6c\u5316\u6210\u6700\u7ec8\u7ed3\u679c\u6570\u636e\u5bf9\u5e94\u7684\u6307\u4ee4\u8fdb\u884c\u8bb0\u5f55\u3002 AOF\u91cd\u5199\u4f5c\u7528 \u964d\u4f4e\u78c1\u76d8\u5360\u7528\u91cf\uff0c\u63d0\u9ad8\u78c1\u76d8\u5229\u7528\u7387 \u63d0\u9ad8\u6301\u4e45\u5316\u6548\u7387\uff0c\u964d\u4f4e\u6301\u4e45\u5316\u5199\u65f6\u95f4\uff0c\u63d0\u9ad8IO\u6027\u80fd \u964d\u4f4e\u6570\u636e\u6062\u590d\u7528\u65f6\uff0c\u63d0\u9ad8\u6570\u636e\u6062\u590d\u6548\u7387 AOF\u91cd\u5199\u89c4\u5219 \u8fdb\u7a0b\u5185\u5177\u6709\u65f6\u6548\u6027\u7684\u6570\u636e\uff0c\u5e76\u4e14\u6570\u636e\u5df2\u8d85\u65f6\u5c06\u4e0d\u518d\u5199\u5165\u6587\u4ef6 \u975e\u5199\u5165\u7c7b\u7684\u65e0\u6548\u6307\u4ee4\u5c06\u88ab\u5ffd\u7565\uff0c\u53ea\u4fdd\u7559\u6700\u7ec8\u6570\u636e\u7684\u5199\u5165\u547d\u4ee4 \u5982del key1\u3001 hdel key2\u3001srem key3\u3001set key4 111\u3001set key4 222\u7b49 \u5982select\u6307\u4ee4\u867d\u7136\u4e0d\u66f4\u6539\u6570\u636e\uff0c\u4f46\u662f\u66f4\u6539\u4e86\u6570\u636e\u7684\u5b58\u50a8\u4f4d\u7f6e\uff0c\u6b64\u7c7b\u547d\u4ee4\u540c\u6837\u9700\u8981\u8bb0\u5f55 \u5bf9\u540c\u4e00\u6570\u636e\u7684\u591a\u6761\u5199\u547d\u4ee4\u5408\u5e76\u4e3a\u4e00\u6761\u547d\u4ee4 \u5982lpushlist1 a\u3001lpush list1 b\u3001lpush list1 c\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff1alpush list1 a b c\u3002 \u4e3a\u9632\u6b62\u6570\u636e\u91cf\u8fc7\u5927\u9020\u6210\u5ba2\u6237\u7aef\u7f13\u51b2\u533a\u6ea2\u51fa\uff0c\u5bf9list\u3001set\u3001hash\u3001zset\u7b49\u7c7b\u578b\uff0c\u6bcf\u6761\u6307\u4ee4\u6700\u591a\u5199\u516564\u4e2a\u5143\u7d20 AOF\u91cd\u5199\u65b9\u5f0f \u624b\u52a8\u91cd\u5199 bgrewriteaof \u624b\u52a8\u91cd\u5199\u539f\u7406\u5206\u6790\uff1a \u81ea\u52a8\u91cd\u5199 auto-aof-rewrite-min-size size auto-aof-rewrite-percentage percentage \u81ea\u52a8\u91cd\u5199\u89e6\u53d1\u6761\u4ef6\u8bbe\u7f6e auto-aof-rewrite-min-size size auto-aof-rewrite-percentage percent \u81ea\u52a8\u91cd\u5199\u89e6\u53d1\u6bd4\u5bf9\u53c2\u6570\uff08 \u8fd0\u884c\u6307\u4ee4info Persistence\u83b7\u53d6\u5177\u4f53\u4fe1\u606f \uff09 aof_current_size aof_base_size \u81ea\u52a8\u91cd\u5199\u89e6\u53d1\u6761\u4ef6\u516c\u5f0f\uff1a","title":"5.3.3 AOF\u91cd\u5199"},{"location":"redis/day01/#534_aof","text":"","title":"5.3.4 AOF\u5de5\u4f5c\u6d41\u7a0b\u53ca\u91cd\u5199\u6d41\u7a0b"},{"location":"redis/day01/#54_rdbaof","text":"","title":"5.4  RDB\u4e0eAOF\u533a\u522b"},{"location":"redis/day01/#541_rdbaof","text":"\u6301\u4e45\u5316\u65b9\u5f0f RDB AOF \u5360\u7528\u5b58\u50a8\u7a7a\u95f4 \u5c0f\uff08\u6570\u636e\u7ea7\uff1a\u538b\u7f29\uff09 \u5927\uff08\u6307\u4ee4\u7ea7\uff1a\u91cd\u5199\uff09 \u5b58\u50a8\u901f\u5ea6 \u6162 \u5feb \u6062\u590d\u901f\u5ea6 \u5feb \u6162 \u6570\u636e\u5b89\u5168\u6027 \u4f1a\u4e22\u5931\u6570\u636e \u4f9d\u636e\u7b56\u7565\u51b3\u5b9a \u8d44\u6e90\u6d88\u8017 \u9ad8/\u91cd\u91cf\u7ea7 \u4f4e/\u8f7b\u91cf\u7ea7 \u542f\u52a8\u4f18\u5148\u7ea7 \u4f4e \u9ad8","title":"5.4.1 RDB\u4e0eAOF\u5bf9\u6bd4\uff08\u4f18\u7f3a\u70b9\uff09"},{"location":"redis/day01/#542_rdbaof","text":"RDB\u4e0eAOF\u7684\u9009\u62e9\u4e4b\u60d1 \u5bf9\u6570\u636e\u975e\u5e38\u654f\u611f\uff0c\u5efa\u8bae\u4f7f\u7528\u9ed8\u8ba4\u7684AOF\u6301\u4e45\u5316\u65b9\u6848 AOF\u6301\u4e45\u5316\u7b56\u7565\u4f7f\u7528everysecond\uff0c\u6bcf\u79d2\u949ffsync\u4e00\u6b21\u3002\u8be5\u7b56\u7565redis\u4ecd\u53ef\u4ee5\u4fdd\u6301\u5f88\u597d\u7684\u5904\u7406\u6027\u80fd\uff0c\u5f53\u51fa \u73b0\u95ee\u9898\u65f6\uff0c\u6700\u591a\u4e22\u59310-1\u79d2\u5185\u7684\u6570\u636e\u3002 \u6ce8\u610f\uff1a\u7531\u4e8eAOF\u6587\u4ef6\u5b58\u50a8\u4f53\u79ef\u8f83\u5927\uff0c\u4e14\u6062\u590d\u901f\u5ea6\u8f83\u6162 \u6570\u636e\u5448\u73b0\u9636\u6bb5\u6709\u6548\u6027\uff0c\u5efa\u8bae\u4f7f\u7528RDB\u6301\u4e45\u5316\u65b9\u6848 \u6570\u636e\u53ef\u4ee5\u826f\u597d\u7684\u505a\u5230\u9636\u6bb5\u5185\u65e0\u4e22\u5931\uff08\u8be5\u9636\u6bb5\u662f\u5f00\u53d1\u8005\u6216\u8fd0\u7ef4\u4eba\u5458\u624b\u5de5\u7ef4\u62a4\u7684\uff09\uff0c\u4e14\u6062\u590d\u901f\u5ea6\u8f83\u5feb\uff0c\u9636\u6bb5 \u70b9\u6570\u636e\u6062\u590d\u901a\u5e38\u91c7\u7528RDB\u65b9\u6848 \u6ce8\u610f\uff1a\u5229\u7528RDB\u5b9e\u73b0\u7d27\u51d1\u7684\u6570\u636e\u6301\u4e45\u5316\u4f1a\u4f7fRedis\u964d\u7684\u5f88\u4f4e\uff0c\u614e\u91cd\u603b\u7ed3\uff1a \u7efc\u5408\u6bd4\u5bf9 RDB\u4e0eAOF\u7684\u9009\u62e9\u5b9e\u9645\u4e0a\u662f\u5728\u505a\u4e00\u79cd\u6743\u8861\uff0c\u6bcf\u79cd\u90fd\u6709\u5229\u6709\u5f0a \u5982\u4e0d\u80fd\u627f\u53d7\u6570\u5206\u949f\u4ee5\u5185\u7684\u6570\u636e\u4e22\u5931\uff0c\u5bf9\u4e1a\u52a1\u6570\u636e\u975e\u5e38\u654f\u611f\uff0c\u9009\u7528AOF \u5982\u80fd\u627f\u53d7\u6570\u5206\u949f\u4ee5\u5185\u7684\u6570\u636e\u4e22\u5931\uff0c\u4e14\u8ffd\u6c42\u5927\u6570\u636e\u96c6\u7684\u6062\u590d\u901f\u5ea6\uff0c\u9009\u7528RDB \u707e\u96be\u6062\u590d\u9009\u7528RDB \u53cc\u4fdd\u9669\u7b56\u7565\uff0c\u540c\u65f6\u5f00\u542f RDB\u548c AOF\uff0c\u91cd\u542f\u540e\uff0cRedis\u4f18\u5148\u4f7f\u7528 AOF \u6765\u6062\u590d\u6570\u636e\uff0c\u964d\u4f4e\u4e22\u5931\u6570\u636e\u7684\u91cf # \u5ba2\u6237\u7aef\u600e\u4e48\u8bbf\u95ee\u90fd\u884c bind 0 .0.0.0 port 6379 timeout 0 # \u540e\u53f0\u542f\u52a8 daemonize yes logfile \"log_6379.log\" dir /usr/local/redis/data # rdb \u65b9\u5f0f\u6587\u4ef6\u540d\u79f0 dbfilename \"dump6379.rdb\" # \u5b58\u50a8\u7b56\u7565 2s \u4e2d\u5185\u5982\u679c\u6709\u4e24\u4e2a \u4fee\u6539\u547d\u4ee4 \u5219\u6267\u884c\u5b58\u50a8 save 2 2 # aop \u914d\u7f6e appendonly yes appendfilename \"dump6379.aof\" appendfsync always # aof \u81ea\u52a8\u91cd\u5199 # \u6bcf4M \u6570\u636e \u91cd\u5199\u4e00\u6b21 auto-aof-rewrite-min-size 4mb # \u548c\u4e0a\u6b21\u5907\u4efd\u505a\u5bf9\u6bd4,\u5982\u679c \u8d85\u8fc7\u4e8610% \u5219\u91cd\u5199\u6587\u4ef6 auto-aof-rewrite-percentage 10 %","title":"5.4.2 RDB\u4e0eAOF\u5e94\u7528\u573a\u666f"},{"location":"redis/day02/","text":"\u5b66\u4e60\u76ee\u6807 \u00b6 \u76ee\u68071\uff1a\u80fd\u591f\u8bf4\u51faredis\u4e2d\u7684\u6570\u636e\u5220\u9664\u7b56\u4e0e\u7565\u6dd8\u6c70\u7b56\u7565 \u76ee\u68072\uff1a\u80fd\u591f\u8bf4\u51fa\u4e3b\u4ece\u590d\u5236\u7684\u6982\u5ff5\uff0c\u5de5\u4f5c\u6d41\u7a0b\u4ee5\u53ca\u573a\u666f\u95ee\u9898\u53ca\u89e3\u51b3\u65b9\u6848 \u76ee\u68073\uff1a\u80fd\u591f\u8bf4\u51fa\u54e8\u5175\u7684\u4f5c\u7528\u4ee5\u53ca\u5de5\u4f5c\u539f\u7406\uff0c\u4ee5\u53ca\u5982\u4f55\u542f\u7528\u54e8\u5175 \u76ee\u68074\uff1a\u80fd\u591f\u8bf4\u51fa\u96c6\u7fa4\u7684\u67b6\u6784\u8bbe\u8ba1\uff0c\u5b8c\u6210\u96c6\u7fa4\u7684\u642d\u5efa \u76ee\u68075\uff1a\u80fd\u591f\u8bf4\u51fa\u7f13\u5b58\u9884\u70ed\uff0c\u96ea\u5d29\uff0c\u51fb\u7a7f\uff0c\u7a7f\u900f\u7684\u6982\u5ff5\uff0c\u80fd\u8bf4\u51faredis\u7684\u76f8\u5173\u76d1\u63a7\u6307\u6807 1.\u6570\u636e\u5220\u9664\u4e0e\u6dd8\u6c70\u7b56\u7565 \u00b6 1.1 \u8fc7\u671f\u6570\u636e \u00b6 1.1.1 Redis\u4e2d\u7684\u6570\u636e\u7279\u5f81 \u00b6 Redis\u662f\u4e00\u79cd\u5185\u5b58\u7ea7\u6570\u636e\u5e93\uff0c\u6240\u6709\u6570\u636e\u5747\u5b58\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u5185\u5b58\u4e2d\u7684\u6570\u636e\u53ef\u4ee5\u901a\u8fc7TTL\u6307\u4ee4\u83b7\u53d6\u5176\u72b6\u6001 TTL\u8fd4\u56de\u7684\u503c\u6709\u4e09\u79cd\u60c5\u51b5\uff1a\u6b63\u6570\uff0c-1\uff0c-2 \u6b63\u6570 \uff1a\u4ee3\u8868\u8be5\u6570\u636e\u5728\u5185\u5b58\u4e2d\u8fd8\u80fd\u5b58\u6d3b\u7684\u65f6\u95f4 -1 \uff1a\u6c38\u4e45\u6709\u6548\u7684\u6570\u636e 2 \uff1a\u5df2\u7ecf\u8fc7\u671f\u7684\u6570\u636e \u6216\u88ab\u5220\u9664\u7684\u6570\u636e \u6216 \u672a\u5b9a\u4e49\u7684\u6570\u636e \u5220\u9664\u7b56\u7565\u5c31\u662f\u9488\u5bf9\u5df2\u8fc7\u671f\u6570\u636e\u7684\u5904\u7406\u7b56\u7565 \uff0c\u5df2\u8fc7\u671f\u7684\u6570\u636e\u662f\u771f\u7684\u5c31\u7acb\u5373\u5220\u9664\u4e86\u5417\uff1f\u5176\u5b9e\u4e5f\u4e0d\u662f\uff0c\u6211\u4eec\u4f1a\u6709\u591a\u79cd\u5220\u9664\u7b56\u7565\uff0c\u662f\u5206\u60c5\u51b5\u7684\uff0c\u5728\u4e0d\u540c\u7684\u573a\u666f\u4e0b\u4f7f\u7528\u4e0d\u540c\u7684\u5220\u9664\u65b9\u5f0f\u4f1a\u6709\u4e0d\u540c\u6548\u679c\uff0c\u8fd9\u4e5f\u6b63\u662f\u6211\u4eec\u8981\u5c06\u7684\u6570\u636e\u7684\u5220\u9664\u7b56\u7565\u7684\u95ee\u9898 1.1.2 \u65f6\u6548\u6027\u6570\u636e\u7684\u5b58\u50a8\u7ed3\u6784 \u00b6 \u5728Redis\u4e2d\uff0c\u5982\u4f55\u7ed9\u6570\u636e\u8bbe\u7f6e\u5b83\u7684\u5931\u6548\u5468\u671f\u5462\uff1f\u6570\u636e\u7684\u65f6\u6548\u5728redis\u4e2d\u5982\u4f55\u5b58\u50a8\u5462\uff1f \u8fc7\u671f\u6570\u636e\u662f\u4e00\u5757\u72ec\u7acb\u7684\u5b58\u50a8\u7a7a\u95f4\uff0cHash\u7ed3\u6784\uff0cfield\u662f\u5185\u5b58\u5730\u5740\uff0cvalue\u662f\u8fc7\u671f\u65f6\u95f4\uff0c\u4fdd\u5b58\u4e86\u6240\u6709key\u7684\u8fc7\u671f\u63cf\u8ff0\uff0c\u5728\u6700\u7ec8\u8fdb\u884c\u8fc7\u671f\u5904\u7406\u7684\u65f6\u5019\uff0c\u5bf9\u8be5\u7a7a\u95f4\u7684\u6570\u636e\u8fdb\u884c\u68c0\u6d4b\uff0c \u5f53\u65f6\u95f4\u5230\u671f\u4e4b\u540e\u901a\u8fc7field\u627e\u5230\u5185\u5b58\u8be5\u5730\u5740\u5904\u7684\u6570\u636e\uff0c\u7136\u540e\u8fdb\u884c\u76f8\u5173\u64cd\u4f5c\u3002 1.2 \u6570\u636e\u5220\u9664\u7b56\u7565 \u00b6 1.2.1 \u6570\u636e\u5220\u9664\u7b56\u7565\u7684\u76ee\u6807 \u00b6 \u5728\u5185\u5b58\u5360\u7528\u4e0eCPU\u5360\u7528\u4e4b\u95f4\u5bfb\u627e\u4e00\u79cd\u5e73\u8861\uff0c\u987e\u6b64\u5931\u5f7c\u90fd\u4f1a\u9020\u6210\u6574\u4f53redis\u6027\u80fd\u7684\u4e0b\u964d\uff0c\u751a\u81f3\u5f15\u53d1\u670d\u52a1\u5668\u5b95\u673a\u6216 \u5185\u5b58\u6cc4\u9732 \u9488\u5bf9\u8fc7\u671f\u6570\u636e\u8981\u8fdb\u884c\u5220\u9664\u7684\u65f6\u5019\u90fd\u6709\u54ea\u4e9b\u5220\u9664\u7b56\u7565\u5462\uff1f 1.\u5b9a\u65f6\u5220\u9664 2.\u60f0\u6027\u5220\u9664 3.\u5b9a\u671f\u5220\u9664 1.2.2 \u5b9a\u65f6\u5220\u9664 \u00b6 \u521b\u5efa\u4e00\u4e2a\u5b9a\u65f6\u5668\uff0c\u5f53key\u8bbe\u7f6e\u6709\u8fc7\u671f\u65f6\u95f4\uff0c\u4e14\u8fc7\u671f\u65f6\u95f4\u5230\u8fbe\u65f6\uff0c\u7531\u5b9a\u65f6\u5668\u4efb\u52a1\u7acb\u5373\u6267\u884c\u5bf9\u952e\u7684\u5220\u9664\u64cd\u4f5c \u4f18\u70b9 \uff1a\u8282\u7ea6\u5185\u5b58\uff0c\u5230\u65f6\u5c31\u5220\u9664\uff0c\u5feb\u901f\u91ca\u653e\u6389\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u5360\u7528 \u7f3a\u70b9 \uff1aCPU\u538b\u529b\u5f88\u5927\uff0c\u65e0\u8bbaCPU\u6b64\u65f6\u8d1f\u8f7d\u91cf\u591a\u9ad8\uff0c\u5747\u5360\u7528CPU\uff0c\u4f1a\u5f71\u54cdredis\u670d\u52a1\u5668\u54cd\u5e94\u65f6\u95f4\u548c\u6307\u4ee4\u541e\u5410\u91cf \u603b\u7ed3 \uff1a\u7528\u5904\u7406\u5668\u6027\u80fd\u6362\u53d6\u5b58\u50a8\u7a7a\u95f4\uff08\u62ff\u65f6\u95f4\u6362\u7a7a\u95f4\uff09 1.2.3 \u60f0\u6027\u5220\u9664 \u00b6 \u6570\u636e\u5230\u8fbe\u8fc7\u671f\u65f6\u95f4\uff0c\u4e0d\u505a\u5904\u7406\u3002\u7b49\u4e0b\u6b21\u8bbf\u95ee\u8be5\u6570\u636e\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5224\u65ad \u5982\u679c\u672a\u8fc7\u671f\uff0c\u8fd4\u56de\u6570\u636e \u53d1\u73b0\u5df2\u8fc7\u671f\uff0c\u5220\u9664\uff0c\u8fd4\u56de\u4e0d\u5b58\u5728 \u4f18\u70b9 \uff1a\u8282\u7ea6CPU\u6027\u80fd\uff0c\u53d1\u73b0\u5fc5\u987b\u5220\u9664\u7684\u65f6\u5019\u624d\u5220\u9664 \u7f3a\u70b9 \uff1a\u5185\u5b58\u538b\u529b\u5f88\u5927\uff0c\u51fa\u73b0\u957f\u671f\u5360\u7528\u5185\u5b58\u7684\u6570\u636e \u603b\u7ed3 \uff1a\u7528\u5b58\u50a8\u7a7a\u95f4\u6362\u53d6\u5904\u7406\u5668\u6027\u80fd\uff08\u62ff\u65f6\u95f4\u6362\u7a7a\u95f4\uff09 1.2.4 \u5b9a\u671f\u5220\u9664 \u00b6 \u5b9a\u65f6\u5220\u9664\u548c\u60f0\u6027\u5220\u9664\u8fd9\u4e24\u79cd\u65b9\u6848\u90fd\u662f\u8d70\u7684\u6781\u7aef\uff0c\u90a3\u6709\u6ca1\u6709\u6298\u4e2d\u65b9\u6848\uff1f \u6211\u4eec\u6765\u8bb2redis\u7684\u5b9a\u671f\u5220\u9664\u65b9\u6848\uff1a Redis\u542f\u52a8\u670d\u52a1\u5668\u521d\u59cb\u5316\u65f6\uff0c\u8bfb\u53d6\u914d\u7f6eserver.hz\u7684\u503c\uff0c\u9ed8\u8ba4\u4e3a10 \u6bcf\u79d2\u949f\u6267\u884cserver.hz\u6b21 serverCron() --------> databasesCron() ---------> activeExpireCycle() activeExpireCycle() \u5bf9\u6bcf\u4e2aexpires[*]\u9010\u4e00\u8fdb\u884c\u68c0\u6d4b\uff0c\u6bcf\u6b21\u6267\u884c\u8017\u65f6\uff1a250ms/server.hz \u5bf9\u67d0\u4e2aexpires[*]\u68c0\u6d4b\u65f6\uff0c\u968f\u673a\u6311\u9009W\u4e2akey\u68c0\u6d4b \u5982\u679ckey\u8d85\u65f6\uff0c\u5220\u9664key \u5982\u679c\u4e00\u8f6e\u4e2d\u5220\u9664\u7684key\u7684\u6570\u91cf>W*25%\uff0c\u5faa\u73af\u8be5\u8fc7\u7a0b \u5982\u679c\u4e00\u8f6e\u4e2d\u5220\u9664\u7684key\u7684\u6570\u91cf\u2264W*25%\uff0c\u68c0\u67e5\u4e0b\u4e00\u4e2aexpires[*]\uff0c0-15\u5faa\u73af W\u53d6\u503c=ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP\u5c5e\u6027\u503c \u53c2\u6570current_db\u7528\u4e8e\u8bb0\u5f55 activeExpireCycle() \u8fdb\u5165\u54ea\u4e2aexpires[*] \u6267\u884c \u5982\u679cactiveExpireCycle()\u6267\u884c\u65f6\u95f4\u5230\u671f\uff0c\u4e0b\u6b21\u4ececurrent_db\u7ee7\u7eed\u5411\u4e0b\u6267\u884c \u603b\u7684\u6765\u8bf4\uff1a\u5b9a\u671f\u5220\u9664\u5c31\u662f\u5468\u671f\u6027\u8f6e\u8be2redis\u5e93\u4e2d\u7684\u65f6\u6548\u6027\u6570\u636e\uff0c\u91c7\u7528\u968f\u673a\u62bd\u53d6\u7684\u7b56\u7565\uff0c\u5229\u7528\u8fc7\u671f\u6570\u636e\u5360\u6bd4\u7684\u65b9\u5f0f\u63a7\u5236\u5220\u9664\u9891\u5ea6 \u7279\u70b91 \uff1aCPU\u6027\u80fd\u5360\u7528\u8bbe\u7f6e\u6709\u5cf0\u503c\uff0c\u68c0\u6d4b\u9891\u5ea6\u53ef\u81ea\u5b9a\u4e49\u8bbe\u7f6e \u7279\u70b92 \uff1a\u5185\u5b58\u538b\u529b\u4e0d\u662f\u5f88\u5927\uff0c\u957f\u671f\u5360\u7528\u5185\u5b58\u7684\u51b7\u6570\u636e\u4f1a\u88ab\u6301\u7eed\u6e05\u7406 \u603b\u7ed3 \uff1a\u5468\u671f\u6027\u62bd\u67e5\u5b58\u50a8\u7a7a\u95f4\uff08\u968f\u673a\u62bd\u67e5\uff0c\u91cd\u70b9\u62bd\u67e5\uff09 1.2.5 \u5220\u9664\u7b56\u7565\u5bf9\u6bd4 \u00b6 1\uff1a\u5b9a\u65f6\u5220\u9664\uff1a \u8282\u7ea6\u5185\u5b58\uff0c\u65e0\u5360\u7528, \u4e0d\u5206\u65f6\u6bb5\u5360\u7528CPU\u8d44\u6e90\uff0c\u9891\u5ea6\u9ad8, \u62ff\u65f6\u95f4\u6362\u7a7a\u95f4 2\uff1a\u60f0\u6027\u5220\u9664\uff1a \u5185\u5b58\u5360\u7528\u4e25\u91cd \u5ef6\u65f6\u6267\u884c\uff0cCPU\u5229\u7528\u7387\u9ad8 \u62ff\u7a7a\u95f4\u6362\u65f6\u95f4 3\uff1a\u5b9a\u671f\u5220\u9664\uff1a \u5185\u5b58\u5b9a\u671f\u968f\u673a\u6e05\u7406 \u6bcf\u79d2\u82b1\u8d39\u56fa\u5b9a\u7684CPU\u8d44\u6e90\u7ef4\u62a4\u5185\u5b58 \u968f\u673a\u62bd\u67e5\uff0c\u91cd\u70b9\u62bd\u67e5 1.3 \u6570\u636e\u6dd8\u6c70\u7b56\u7565\uff08\u9010\u51fa\u7b97\u6cd5\uff09 \u00b6 1.3.1 \u6dd8\u6c70\u7b56\u7565\u6982\u8ff0 \u00b6 \u4ec0\u4e48\u53eb\u6570\u636e\u6dd8\u6c70\u7b56\u7565\uff1f\u4ec0\u4e48\u6837\u7684\u5e94\u7528\u573a\u666f\u9700\u8981\u7528\u5230\u6570\u636e\u6dd8\u6c70\u7b56\u7565\uff1f \u5f53\u65b0\u6570\u636e\u8fdb\u5165redis\u65f6\uff0c\u5982\u679c\u5185\u5b58\u4e0d\u8db3\u600e\u4e48\u529e\uff1f\u5728\u6267\u884c\u6bcf\u4e00\u4e2a\u547d\u4ee4\u524d\uff0c\u4f1a\u8c03\u7528 freeMemoryIfNeeded() \u68c0\u6d4b\u5185\u5b58\u662f\u5426\u5145\u8db3\u3002\u5982\u679c\u5185\u5b58\u4e0d\u6ee1\u8db3\u65b0 \u52a0\u5165\u6570\u636e\u7684\u6700\u4f4e\u5b58\u50a8\u8981\u6c42\uff0credis\u8981\u4e34\u65f6\u5220\u9664\u4e00\u4e9b\u6570\u636e\u4e3a\u5f53\u524d\u6307\u4ee4\u6e05\u7406\u5b58\u50a8\u7a7a\u95f4\u3002\u6e05\u7406\u6570\u636e\u7684\u7b56\u7565\u79f0\u4e3a\u9010\u51fa\u7b97\u6cd5\u3002 \u6ce8\u610f\uff1a\u9010\u51fa\u6570\u636e\u7684\u8fc7\u7a0b\u4e0d\u662f100%\u80fd\u591f\u6e05\u7406\u51fa\u8db3\u591f\u7684\u53ef\u4f7f\u7528\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5982\u679c\u4e0d\u6210\u529f\u5219\u53cd\u590d\u6267\u884c\u3002\u5f53\u5bf9\u6240\u6709\u6570\u636e\u5c1d\u8bd5\u5b8c\u6bd5\uff0c \u5982\u4e0d\u80fd\u8fbe\u5230\u5185\u5b58\u6e05\u7406\u7684\u8981\u6c42\uff0c\u5c06\u51fa\u73b0\u9519\u8bef\u4fe1\u606f\u5982\u4e0b ( error ) OOM command not allowed when used memory > 'maxmemory' 1.3.2 \u7b56\u7565\u914d\u7f6e \u00b6 \u5f71\u54cd\u6570\u636e\u6dd8\u6c70\u7684\u76f8\u5173\u914d\u7f6e\u5982\u4e0b\uff1a 1\uff1a\u6700\u5927\u53ef\u4f7f\u7528\u5185\u5b58\uff0c\u5373\u5360\u7528\u7269\u7406\u5185\u5b58\u7684\u6bd4\u4f8b\uff0c\u9ed8\u8ba4\u503c\u4e3a0\uff0c\u8868\u793a\u4e0d\u9650\u5236\u3002\u751f\u4ea7\u73af\u5883\u4e2d\u6839\u636e\u9700\u6c42\u8bbe\u5b9a\uff0c\u901a\u5e38\u8bbe\u7f6e\u572850%\u4ee5\u4e0a maxmemory ?mb 2\uff1a\u6bcf\u6b21\u9009\u53d6\u5f85\u5220\u9664\u6570\u636e\u7684\u4e2a\u6570\uff0c\u91c7\u7528\u968f\u673a\u83b7\u53d6\u6570\u636e\u7684\u65b9\u5f0f\u4f5c\u4e3a\u5f85\u68c0\u6d4b\u5220\u9664\u6570\u636e maxmemory-samples count 3\uff1a\u5bf9\u6570\u636e\u8fdb\u884c\u5220\u9664\u7684\u9009\u62e9\u7b56\u7565 maxmemory-policy policy \u90a3\u6570\u636e\u5220\u9664\u7684\u7b56\u7565policy\u5230\u5e95\u6709\u51e0\u79cd\u5462\uff1f\u4e00\u5171\u662f 3\u7c7b8\u79cd \u7b2c\u4e00\u7c7b \uff1a\u68c0\u6d4b\u6613\u5931\u6570\u636e\uff08\u53ef\u80fd\u4f1a\u8fc7\u671f\u7684\u6570\u636e\u96c6server.db[i].expires \uff09 volatile-lru\uff1a\u6311\u9009\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7684\u6570\u636e\u6dd8\u6c70 volatile-lfu\uff1a\u6311\u9009\u6700\u8fd1\u4f7f\u7528\u6b21\u6570\u6700\u5c11\u7684\u6570\u636e\u6dd8\u6c70 volatile-ttl\uff1a\u6311\u9009\u5c06\u8981\u8fc7\u671f\u7684\u6570\u636e\u6dd8\u6c70 volatile-random\uff1a\u4efb\u610f\u9009\u62e9\u6570\u636e\u6dd8\u6c70 \u7b2c\u4e8c\u7c7b \uff1a\u68c0\u6d4b\u5168\u5e93\u6570\u636e\uff08\u6240\u6709\u6570\u636e\u96c6server.db[i].dict \uff09 allkeys-lru\uff1a\u6311\u9009\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7684\u6570\u636e\u6dd8\u6c70 allkeLyRs-lfu\uff1a\uff1a\u6311\u9009\u6700\u8fd1\u4f7f\u7528\u6b21\u6570\u6700\u5c11\u7684\u6570\u636e\u6dd8\u6c70 allkeys-random\uff1a\u4efb\u610f\u9009\u62e9\u6570\u636e\u6dd8\u6c70\uff0c\u76f8\u5f53\u4e8e\u968f\u673a \u7b2c\u4e09\u7c7b \uff1a\u653e\u5f03\u6570\u636e\u9a71\u9010 no-enviction\uff08\u9a71\u9010\uff09\uff1a\u7981\u6b62\u9a71\u9010\u6570\u636e(redis4.0\u4e2d\u9ed8\u8ba4\u7b56\u7565)\uff0c\u4f1a\u5f15\u53d1OOM(Out Of Memory) \u6ce8\u610f\uff1a\u8fd9\u4e9b\u7b56\u7565\u662f\u914d\u7f6e\u5230\u54ea\u4e2a\u5c5e\u6027\u4e0a\uff1f\u600e\u4e48\u914d\u7f6e\uff1f\u5982\u4e0b\u6240\u793a maxmemory-policy volatile-lru \u6570\u636e\u6dd8\u6c70\u7b56\u7565\u914d\u7f6e\u4f9d\u636e \u4f7f\u7528INFO\u547d\u4ee4\u8f93\u51fa\u76d1\u63a7\u4fe1\u606f\uff0c\u67e5\u8be2\u7f13\u5b58 hit \u548c miss \u7684\u6b21\u6570\uff0c\u6839\u636e\u4e1a\u52a1\u9700\u6c42\u8c03\u4f18Redis\u914d\u7f6e 2.\u4e3b\u4ece\u590d\u5236 \u00b6 2.1 \u4e3b\u4ece\u590d\u5236\u7b80\u4ecb \u00b6 2.1.1 \u9ad8\u53ef\u7528 \u00b6 \u9996\u5148\u6211\u4eec\u8981\u7406\u89e3\u4e92\u8054\u7f51\u5e94\u7528\u56e0\u4e3a\u5176\u72ec\u6709\u7684\u7279\u6027\u6211\u4eec\u6f14\u5316\u51fa\u7684 \u4e09\u9ad8 \u67b6\u6784 \u9ad8\u5e76\u53d1 \u5e94\u7528\u8981\u63d0\u4f9b\u67d0\u4e00\u4e1a\u52a1\u8981\u80fd\u652f\u6301\u5f88\u591a\u5ba2\u6237\u7aef\u540c\u65f6\u8bbf\u95ee\u7684\u80fd\u529b\uff0c\u6211\u4eec\u79f0\u4e3a\u5e76\u53d1\uff0c\u9ad8\u5e76\u53d1\u610f\u601d\u5c31\u5f88\u660e\u786e\u4e86 \u9ad8\u6027\u80fd \u6027\u80fd\u5e26\u7ed9\u6211\u4eec\u6700\u76f4\u89c2\u7684\u611f\u53d7\u5c31\u662f\uff1a\u901f\u5ea6\u5feb\uff0c\u65f6\u95f4\u77ed \u9ad8\u53ef\u7528 \u53ef\u7528\u6027 \uff1a\u4e00\u5e74\u4e2d\u5e94\u7528\u670d\u52a1\u6b63\u5e38\u8fd0\u884c\u7684\u65f6\u95f4\u5360\u5168\u5e74\u65f6\u95f4\u7684\u767e\u5206\u6bd4\uff0c\u5982\u4e0b\u56fe\uff1a\u8868\u793a\u4e86\u5e94\u7528\u670d\u52a1\u5728\u5168\u5e74\u5b95\u673a\u7684\u65f6\u95f4 \u6211\u4eec\u628a\u8fd9\u4e9b\u65f6\u95f4\u52a0\u5728\u4e00\u8d77\u5c31\u662f\u5168\u5e74\u5e94\u7528\u670d\u52a1\u4e0d\u53ef\u7528\u7684\u65f6\u95f4\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5e94\u7528\u670d\u52a1\u5168\u5e74\u53ef\u7528\u7684\u65f6\u95f4 4\u5c0f\u65f627\u520615\u79d2+11\u520636\u79d2+2\u520616\u79d2=4\u5c0f\u65f641\u52067\u79d2=16867\u79d2 1\u5e74=365 24 60*60=31536000\u79d2 \u53ef\u7528\u6027=\uff0831536000-16867\uff09/31536000*100%=99.9465151% \u4e1a\u754c\u53ef\u7528\u6027\u76ee\u6807 5\u4e2a9\uff0c\u537399.999% \uff0c\u5373\u670d\u52a1\u5668\u5e74\u5b95\u673a\u65f6\u957f\u4f4e\u4e8e315\u79d2\uff0c\u7ea65.25\u5206\u949f 2.1.2 \u4e3b\u4ece\u590d\u5236\u6982\u5ff5 \u00b6 \u77e5\u9053\u4e86\u4e09\u9ad8\u7684\u6982\u5ff5\u4e4b\u540e\uff0c\u6211\u4eec\u60f3\uff1a\u4f60\u7684\u201cRedis\u201d\u662f\u5426\u9ad8\u53ef\u7528\uff1f\u90a3\u6211\u4eec\u8981\u6765\u5206\u6790\u5355\u673aredis\u7684\u98ce\u9669\u4e0e\u95ee\u9898 \u95ee\u98981.\u673a\u5668\u6545\u969c \u73b0\u8c61\uff1a\u786c\u76d8\u6545\u969c\u3001\u7cfb\u7edf\u5d29\u6e83 \u672c\u8d28\uff1a\u6570\u636e\u4e22\u5931\uff0c\u5f88\u53ef\u80fd\u5bf9\u4e1a\u52a1\u9020\u6210\u707e\u96be\u6027\u6253\u51fb \u7ed3\u8bba\uff1a\u57fa\u672c\u4e0a\u4f1a\u653e\u5f03\u4f7f\u7528redis. \u95ee\u98982.\u5bb9\u91cf\u74f6\u9888 \u73b0\u8c61\uff1a\u5185\u5b58\u4e0d\u8db3\uff0c\u4ece16G\u5347\u7ea7\u523064G\uff0c\u4ece64G\u5347\u7ea7\u5230128G\uff0c\u65e0\u9650\u5347\u7ea7\u5185\u5b58 \u672c\u8d28\uff1a\u7a77\uff0c\u786c\u4ef6\u6761\u4ef6\u8ddf\u4e0d\u4e0a \u7ed3\u8bba\uff1a\u653e\u5f03\u4f7f\u7528redis \u7ed3\u8bba\uff1a \u4e3a\u4e86\u907f\u514d\u5355\u70b9Redis\u670d\u52a1\u5668\u6545\u969c\uff0c\u51c6\u5907\u591a\u53f0\u670d\u52a1\u5668\uff0c\u4e92\u76f8\u8fde\u901a\u3002\u5c06\u6570\u636e\u590d\u5236\u591a\u4e2a\u526f\u672c\u4fdd\u5b58\u5728\u4e0d\u540c\u7684\u670d\u52a1\u5668\u4e0a\uff0c\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u5e76\u4fdd\u8bc1\u6570\u636e\u662f\u540c\u6b65\u7684\u3002\u5373\u4f7f\u6709\u5176\u4e2d\u4e00\u53f0\u670d\u52a1\u5668\u5b95\u673a\uff0c\u5176\u4ed6\u670d\u52a1\u5668\u4f9d\u7136\u53ef\u4ee5\u7ee7\u7eed\u63d0\u4f9b\u670d\u52a1\uff0c\u5b9e\u73b0Redis\u7684\u9ad8\u53ef\u7528\uff0c\u540c\u65f6\u5b9e\u73b0\u6570\u636e\u5197\u4f59\u5907\u4efd\u3002 \u591a\u53f0\u670d\u52a1\u5668\u8fde\u63a5\u65b9\u6848\uff1a \u63d0\u4f9b\u6570\u636e\u65b9\uff1a master \u4e3b\u670d\u52a1\u5668\uff0c\u4e3b\u8282\u70b9\uff0c\u4e3b\u5e93\u4e3b\u5ba2\u6237\u7aef \u63a5\u6536\u6570\u636e\u65b9\uff1a slave \u4ece\u670d\u52a1\u5668\uff0c\u4ece\u8282\u70b9\uff0c\u4ece\u5e93 \u4ece\u5ba2\u6237\u7aef \u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\uff1a \u6570\u636e\u540c\u6b65\uff08master\u7684\u6570\u636e\u590d\u5236\u5230slave\u4e2d\uff09 \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u6765\u89e3\u91ca\u4e3b\u4ece\u590d\u5236\u7684\u6982\u5ff5\uff1a \u6982\u5ff5\uff1a\u4e3b\u4ece\u590d\u5236\u5373\u5c06master\u4e2d\u7684\u6570\u636e\u5373\u65f6\u3001\u6709\u6548\u7684\u590d\u5236\u5230slave\u4e2d \u7279\u5f81 \uff1a\u4e00\u4e2amaster\u53ef\u4ee5\u62e5\u6709\u591a\u4e2aslave\uff0c\u4e00\u4e2aslave\u53ea\u5bf9\u5e94\u4e00\u4e2amaster \u804c\u8d23 \uff1amaster\u548cslave\u5404\u81ea\u7684\u804c\u8d23\u4e0d\u4e00\u6837 master: \u5199\u6570\u636e \u6267\u884c\u5199\u64cd\u4f5c\u65f6\uff0c\u5c06\u51fa\u73b0\u53d8\u5316\u7684\u6570\u636e\u81ea\u52a8\u540c\u6b65\u5230slave \u8bfb\u6570\u636e\uff08\u53ef\u5ffd\u7565\uff09 slave: \u8bfb\u6570\u636e \u5199\u6570\u636e\uff08\u7981\u6b62\uff09 2.1.3 \u4e3b\u4ece\u590d\u5236\u7684\u4f5c\u7528 \u00b6 \u8bfb\u5199\u5206\u79bb\uff1amaster\u5199\u3001slave\u8bfb\uff0c\u63d0\u9ad8\u670d\u52a1\u5668\u7684\u8bfb\u5199\u8d1f\u8f7d\u80fd\u529b \u8d1f\u8f7d\u5747\u8861\uff1a\u57fa\u4e8e\u4e3b\u4ece\u7ed3\u6784\uff0c\u914d\u5408\u8bfb\u5199\u5206\u79bb\uff0c\u7531slave\u5206\u62c5master\u8d1f\u8f7d\uff0c\u5e76\u6839\u636e\u9700\u6c42\u7684\u53d8\u5316\uff0c\u6539\u53d8slave\u7684\u6570 \u91cf\uff0c\u901a\u8fc7\u591a\u4e2a\u4ece\u8282\u70b9\u5206\u62c5\u6570\u636e\u8bfb\u53d6\u8d1f\u8f7d\uff0c\u5927\u5927\u63d0\u9ad8Redis\u670d\u52a1\u5668\u5e76\u53d1\u91cf\u4e0e\u6570\u636e\u541e\u5410\u91cf \u6545\u969c\u6062\u590d\uff1a\u5f53master\u51fa\u73b0\u95ee\u9898\u65f6\uff0c\u7531slave\u63d0\u4f9b\u670d\u52a1\uff0c\u5b9e\u73b0\u5feb\u901f\u7684\u6545\u969c\u6062\u590d \u6570\u636e\u5197\u4f59\uff1a\u5b9e\u73b0\u6570\u636e\u70ed\u5907\u4efd\uff0c\u662f\u6301\u4e45\u5316\u4e4b\u5916\u7684\u4e00\u79cd\u6570\u636e\u5197\u4f59\u65b9\u5f0f \u9ad8\u53ef\u7528\u57fa\u77f3\uff1a\u57fa\u4e8e\u4e3b\u4ece\u590d\u5236\uff0c\u6784\u5efa\u54e8\u5175\u6a21\u5f0f\u4e0e\u96c6\u7fa4\uff0c\u5b9e\u73b0Redis\u7684\u9ad8\u53ef\u7528\u65b9\u6848 2.2 \u4e3b\u4ece\u590d\u5236\u5de5\u4f5c\u6d41\u7a0b \u00b6 \u4e3b\u4ece\u590d\u5236\u8fc7\u7a0b\u5927\u4f53\u53ef\u4ee5\u5206\u4e3a3\u4e2a\u9636\u6bb5 \u5efa\u7acb\u8fde\u63a5\u9636\u6bb5\uff08\u5373\u51c6\u5907\u9636\u6bb5\uff09 \u6570\u636e\u540c\u6b65\u9636\u6bb5 \u547d\u4ee4\u4f20\u64ad\u9636\u6bb5\uff08\u53cd\u590d\u540c\u6b65\uff09 \u800c\u547d\u4ee4\u7684\u4f20\u64ad\u5176\u5b9e\u67094\u79cd\uff0c\u5206\u522b\u5982\u4e0b\uff1a 2.2.1 \u4e3b\u4ece\u590d\u5236\u7684\u5de5\u4f5c\u6d41\u7a0b\uff08\u4e09\u4e2a\u9636\u6bb5\uff09 \u00b6 2.2.1.1 \u9636\u6bb5\u4e00\uff1a\u5efa\u7acb\u8fde\u63a5 \u00b6 \u5efa\u7acbslave\u5230master\u7684\u8fde\u63a5\uff0c\u4f7fmaster\u80fd\u591f\u8bc6\u522bslave\uff0c\u5e76\u4fdd\u5b58slave\u7aef\u53e3\u53f7 \u6d41\u7a0b\u5982\u4e0b\uff1a \u6b65\u9aa41\uff1a\u8bbe\u7f6emaster\u7684\u5730\u5740\u548c\u7aef\u53e3\uff0c\u4fdd\u5b58master\u4fe1\u606f \u6b65\u9aa42\uff1a\u5efa\u7acbsocket\u8fde\u63a5 \u6b65\u9aa43\uff1a\u53d1\u9001ping\u547d\u4ee4\uff08\u5b9a\u65f6\u5668\u4efb\u52a1\uff09 \u6b65\u9aa44\uff1a\u8eab\u4efd\u9a8c\u8bc1 \u6b65\u9aa45\uff1a\u53d1\u9001slave\u7aef\u53e3\u4fe1\u606f \u81f3\u6b64\uff0c\u4e3b\u4ece\u8fde\u63a5\u6210\u529f\uff01 \u5f53\u524d\u72b6\u6001\uff1a slave\uff1a\u4fdd\u5b58master\u7684\u5730\u5740\u4e0e\u7aef\u53e3 master\uff1a\u4fdd\u5b58slave\u7684\u7aef\u53e3 \u603b\u4f53\uff1a\u4e4b\u95f4\u521b\u5efa\u4e86\u8fde\u63a5\u7684socket master\u548cslave\u4e92\u8054 \u63a5\u4e0b\u6765\u5c31\u8981\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u5c06master\u548cslave\u8fde\u63a5\u5230\u4e00\u8d77 \u65b9\u5f0f\u4e00\uff1a\u5ba2\u6237\u7aef\u53d1\u9001\u547d\u4ee4 slaveof masterip masterport \u65b9\u5f0f\u4e8c\uff1a\u542f\u52a8\u670d\u52a1\u5668\u53c2\u6570 redis-server --slaveof masterip masterport \u65b9\u5f0f\u4e09\uff1a\u670d\u52a1\u5668\u914d\u7f6e\uff08 \u4e3b\u6d41\u65b9\u5f0f \uff09 slaveof masterip masterport slave\u7cfb\u7edf\u4fe1\u606f master_link_down_since_seconds masterhost & masterport master\u7cfb\u7edf\u4fe1\u606f uslave_listening_port(\u591a\u4e2a) \u4e3b\u4ece\u65ad\u5f00\u8fde\u63a5 \u65ad\u5f00slave\u4e0emaster\u7684\u8fde\u63a5\uff0cslave\u65ad\u5f00\u8fde\u63a5\u540e\uff0c\u4e0d\u4f1a\u5220\u9664\u5df2\u6709\u6570\u636e\uff0c\u53ea\u662f\u4e0d\u518d\u63a5\u53d7master\u53d1\u9001\u7684\u6570\u636e slaveof no one \u6388\u6743\u8bbf\u95ee master\u5ba2\u6237\u7aef\u53d1\u9001\u547d\u4ee4\u8bbe\u7f6e\u5bc6\u7801 requirepass password master\u914d\u7f6e\u6587\u4ef6\u8bbe\u7f6e\u5bc6\u7801 config set requirepass password config get requirepass slave\u5ba2\u6237\u7aef\u53d1\u9001\u547d\u4ee4\u8bbe\u7f6e\u5bc6\u7801 auth password slave\u914d\u7f6e\u6587\u4ef6\u8bbe\u7f6e\u5bc6\u7801 masterauth password slave\u542f\u52a8\u670d\u52a1\u5668\u8bbe\u7f6e\u5bc6\u7801 redis-server \u2013a password 2.2.1.2 \u9636\u6bb5\u4e8c\uff1a\u6570\u636e\u540c\u6b65 \u00b6 \u5728slave\u521d\u6b21\u8fde\u63a5master\u540e\uff0c\u590d\u5236master\u4e2d\u7684\u6240\u6709\u6570\u636e\u5230slave \u5c06slave\u7684\u6570\u636e\u5e93\u72b6\u6001\u66f4\u65b0\u6210master\u5f53\u524d\u7684\u6570\u636e\u5e93\u72b6\u6001 \u540c\u6b65\u8fc7\u7a0b\u5982\u4e0b\uff1a \u6b65\u9aa41\uff1a\u8bf7\u6c42\u540c\u6b65\u6570\u636e \u6b65\u9aa42\uff1a\u521b\u5efaRDB\u540c\u6b65\u6570\u636e \u6b65\u9aa43\uff1a\u6062\u590dRDB\u540c\u6b65\u6570\u636e \u6b65\u9aa44\uff1a\u8bf7\u6c42\u90e8\u5206\u540c\u6b65\u6570\u636e \u6b65\u9aa45\uff1a\u6062\u590d\u90e8\u5206\u540c\u6b65\u6570\u636e \u81f3\u6b64\uff0c\u6570\u636e\u540c\u6b65\u5de5\u4f5c\u5b8c\u6210\uff01 \u5f53\u524d\u72b6\u6001\uff1a slave\uff1a\u5177\u6709master\u7aef\u5168\u90e8\u6570\u636e\uff0c\u5305\u542bRDB\u8fc7\u7a0b\u63a5\u6536\u7684\u6570\u636e master\uff1a\u4fdd\u5b58slave\u5f53\u524d\u6570\u636e\u540c\u6b65\u7684\u4f4d\u7f6e \u603b\u4f53\uff1a\u4e4b\u95f4\u5b8c\u6210\u4e86\u6570\u636e\u514b\u9686 \u6570\u636e\u540c\u6b65\u9636\u6bb5master\u8bf4\u660e 1\uff1a\u5982\u679cmaster\u6570\u636e\u91cf\u5de8\u5927\uff0c\u6570\u636e\u540c\u6b65\u9636\u6bb5\u5e94\u907f\u5f00\u6d41\u91cf\u9ad8\u5cf0\u671f\uff0c\u907f\u514d\u9020\u6210master\u963b\u585e\uff0c\u5f71\u54cd\u4e1a\u52a1\u6b63\u5e38\u6267\u884c 2\uff1a\u590d\u5236\u7f13\u51b2\u533a\u5927\u5c0f\u8bbe\u5b9a\u4e0d\u5408\u7406\uff0c\u4f1a\u5bfc\u81f4\u6570\u636e\u6ea2\u51fa\u3002\u5982\u8fdb\u884c\u5168\u91cf\u590d\u5236\u5468\u671f\u592a\u957f\uff0c\u8fdb\u884c\u90e8\u5206\u590d\u5236\u65f6\u53d1\u73b0\u6570\u636e\u5df2\u7ecf\u5b58\u5728\u4e22\u5931\u7684\u60c5\u51b5\uff0c\u5fc5\u987b\u8fdb\u884c\u7b2c\u4e8c\u6b21\u5168\u91cf\u590d\u5236\uff0c\u81f4\u4f7fslave\u9677\u5165\u6b7b\u5faa\u73af\u72b6\u6001\u3002 repl-backlog-size ?mb master\u5355\u673a\u5185\u5b58\u5360\u7528\u4e3b\u673a\u5185\u5b58\u7684\u6bd4\u4f8b\u4e0d\u5e94\u8fc7\u5927\uff0c\u5efa\u8bae\u4f7f\u752850%-70%\u7684\u5185\u5b58\uff0c\u7559\u4e0b30%-50%\u7684\u5185\u5b58\u7528\u4e8e\u6267 \u884cbgsave\u547d\u4ee4\u548c\u521b\u5efa\u590d\u5236\u7f13\u51b2\u533a \u6570\u636e\u540c\u6b65\u9636\u6bb5slave\u8bf4\u660e \u4e3a\u907f\u514dslave\u8fdb\u884c\u5168\u91cf\u590d\u5236\u3001\u90e8\u5206\u590d\u5236\u65f6\u670d\u52a1\u5668\u54cd\u5e94\u963b\u585e\u6216\u6570\u636e\u4e0d\u540c\u6b65\uff0c\u5efa\u8bae\u5173\u95ed\u6b64\u671f\u95f4\u7684\u5bf9\u5916\u670d\u52a1 slave-serve-stale-data yes|no \u6570\u636e\u540c\u6b65\u9636\u6bb5\uff0cmaster\u53d1\u9001\u7ed9slave\u4fe1\u606f\u53ef\u4ee5\u7406\u89e3master\u662fslave\u7684\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0c\u4e3b\u52a8\u5411slave\u53d1\u9001\u547d\u4ee4 \u591a\u4e2aslave\u540c\u65f6\u5bf9master\u8bf7\u6c42\u6570\u636e\u540c\u6b65\uff0cmaster\u53d1\u9001\u7684RDB\u6587\u4ef6\u589e\u591a\uff0c\u4f1a\u5bf9\u5e26\u5bbd\u9020\u6210\u5de8\u5927\u51b2\u51fb\uff0c\u5982\u679cmaster\u5e26\u5bbd\u4e0d\u8db3\uff0c\u56e0\u6b64\u6570\u636e\u540c\u6b65\u9700\u8981\u6839\u636e\u4e1a\u52a1\u9700\u6c42\uff0c\u9002\u91cf\u9519\u5cf0 slave\u8fc7\u591a\u65f6\uff0c\u5efa\u8bae\u8c03\u6574\u62d3\u6251\u7ed3\u6784\uff0c\u7531\u4e00\u4e3b\u591a\u4ece\u7ed3\u6784\u53d8\u4e3a\u6811\u72b6\u7ed3\u6784\uff0c\u4e2d\u95f4\u7684\u8282\u70b9\u65e2\u662fmaster\uff0c\u4e5f\u662f slave\u3002\u6ce8\u610f\u4f7f\u7528\u6811\u72b6\u7ed3\u6784\u65f6\uff0c\u7531\u4e8e\u5c42\u7ea7\u6df1\u5ea6\uff0c\u5bfc\u81f4\u6df1\u5ea6\u8d8a\u9ad8\u7684slave\u4e0e\u6700\u9876\u5c42master\u95f4\u6570\u636e\u540c\u6b65\u5ef6\u8fdf \u8f83\u5927\uff0c\u6570\u636e\u4e00\u81f4\u6027\u53d8\u5dee\uff0c\u5e94\u8c28\u614e\u9009\u62e9 2.2.1.3 \u9636\u6bb5\u4e09\uff1a\u547d\u4ee4\u4f20\u64ad \u00b6 \u5f53master\u6570\u636e\u5e93\u72b6\u6001\u88ab\u4fee\u6539\u540e\uff0c\u5bfc\u81f4\u4e3b\u4ece\u670d\u52a1\u5668\u6570\u636e\u5e93\u72b6\u6001\u4e0d\u4e00\u81f4\uff0c\u6b64\u65f6\u9700\u8981\u8ba9\u4e3b\u4ece\u6570\u636e\u540c\u6b65\u5230\u4e00\u81f4\u7684\u72b6\u6001\uff0c\u540c\u6b65\u7684\u52a8\u4f5c\u79f0\u4e3a\u547d\u4ee4\u4f20\u64ad master\u5c06\u63a5\u6536\u5230\u7684\u6570\u636e\u53d8\u66f4\u547d\u4ee4\u53d1\u9001\u7ed9slave\uff0cslave\u63a5\u6536\u547d\u4ee4\u540e\u6267\u884c\u547d\u4ee4 \u547d\u4ee4\u4f20\u64ad\u9636\u6bb5\u7684\u90e8\u5206\u590d\u5236 \u547d\u4ee4\u4f20\u64ad\u9636\u6bb5\u51fa\u73b0\u4e86\u65ad\u7f51\u73b0\u8c61\uff1a \u7f51\u7edc\u95ea\u65ad\u95ea\u8fde\uff1a\u5ffd\u7565 \u77ed\u65f6\u95f4\u7f51\u7edc\u4e2d\u65ad\uff1a\u90e8\u5206\u590d\u5236 \u957f\u65f6\u95f4\u7f51\u7edc\u4e2d\u65ad\uff1a\u5168\u91cf\u590d\u5236 \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u6765\u770b\u90e8\u5206\u590d\u5236\uff0c\u90e8\u5206\u590d\u5236\u7684\u4e09\u4e2a\u6838\u5fc3\u8981\u7d20 \u670d\u52a1\u5668\u7684\u8fd0\u884c id\uff08run id\uff09 \u4e3b\u670d\u52a1\u5668\u7684\u590d\u5236\u79ef\u538b\u7f13\u51b2\u533a \u4e3b\u4ece\u670d\u52a1\u5668\u7684\u590d\u5236\u504f\u79fb\u91cf \u670d\u52a1\u5668\u8fd0\u884cID\uff08runid\uff09 \u6982\u5ff5\uff1a\u670d\u52a1\u5668\u8fd0\u884cID\u662f\u6bcf\u4e00\u53f0\u670d\u52a1\u5668\u6bcf\u6b21\u8fd0\u884c\u7684\u8eab\u4efd\u8bc6\u522b\u7801\uff0c\u4e00\u53f0\u670d\u52a1\u5668\u591a\u6b21\u8fd0\u884c\u53ef\u4ee5\u751f\u6210\u591a\u4e2a\u8fd0\u884cid \u7ec4\u6210\uff1a\u8fd0\u884cid\u753140\u4f4d\u5b57\u7b26\u7ec4\u6210\uff0c\u662f\u4e00\u4e2a\u968f\u673a\u7684\u5341\u516d\u8fdb\u5236\u5b57\u7b26 \u4f8b\u5982\uff1afdc9ff13b9bbaab28db42b3d50f852bb5e3fcdce \u4f5c\u7528\uff1a\u8fd0\u884cid\u88ab\u7528\u4e8e\u5728\u670d\u52a1\u5668\u95f4\u8fdb\u884c\u4f20\u8f93\uff0c\u8bc6\u522b\u8eab\u4efd \u5982\u679c\u60f3\u4e24\u6b21\u64cd\u4f5c\u5747\u5bf9\u540c\u4e00\u53f0\u670d\u52a1\u5668\u8fdb\u884c\uff0c\u5fc5\u987b\u6bcf\u6b21\u64cd\u4f5c\u643a\u5e26\u5bf9\u5e94\u7684\u8fd0\u884cid\uff0c\u7528\u4e8e\u5bf9\u65b9\u8bc6\u522b \u5b9e\u73b0\u65b9\u5f0f\uff1a\u8fd0\u884cid\u5728\u6bcf\u53f0\u670d\u52a1\u5668\u542f\u52a8\u65f6\u81ea\u52a8\u751f\u6210\u7684\uff0cmaster\u5728\u9996\u6b21\u8fde\u63a5slave\u65f6\uff0c\u4f1a\u5c06\u81ea\u5df1\u7684\u8fd0\u884cID\u53d1\u9001\u7ed9slave\uff0c slave\u4fdd\u5b58\u6b64ID\uff0c\u901a\u8fc7info Server\u547d\u4ee4\uff0c\u53ef\u4ee5\u67e5\u770b\u8282\u70b9\u7684runid \u590d\u5236\u7f13\u51b2\u533a \u6982\u5ff5\uff1a\u590d\u5236\u7f13\u51b2\u533a\uff0c\u53c8\u540d\u590d\u5236\u79ef\u538b\u7f13\u51b2\u533a\uff0c\u662f\u4e00\u4e2a\u5148\u8fdb\u5148\u51fa\uff08FIFO\uff09\u7684\u961f\u5217\uff0c\u7528\u4e8e\u5b58\u50a8\u670d\u52a1\u5668\u6267\u884c\u8fc7\u7684\u547d\u4ee4\uff0c\u6bcf\u6b21\u4f20\u64ad\u547d\u4ee4\uff0cmaster\u90fd\u4f1a\u5c06\u4f20\u64ad\u7684\u547d\u4ee4\u8bb0\u5f55\u4e0b\u6765\uff0c\u5e76\u5b58\u50a8\u5728\u590d\u5236\u7f13\u51b2\u533a \u590d\u5236\u7f13\u51b2\u533a\u9ed8\u8ba4\u6570\u636e\u5b58\u50a8\u7a7a\u95f4\u5927\u5c0f\u662f1M \u5f53\u5165\u961f\u5143\u7d20\u7684\u6570\u91cf\u5927\u4e8e\u961f\u5217\u957f\u5ea6\u65f6\uff0c\u6700\u5148\u5165\u961f\u7684\u5143\u7d20\u4f1a\u88ab\u5f39\u51fa\uff0c\u800c\u65b0\u5143\u7d20\u4f1a\u88ab\u653e\u5165\u961f\u5217 \u4f5c\u7528\uff1a\u7528\u4e8e\u4fdd\u5b58master\u6536\u5230\u7684\u6240\u6709\u6307\u4ee4\uff08\u4ec5\u5f71\u54cd\u6570\u636e\u53d8\u66f4\u7684\u6307\u4ee4\uff0c\u4f8b\u5982set\uff0cselect\uff09 \u6570\u636e\u6765\u6e90\uff1a\u5f53master\u63a5\u6536\u5230\u4e3b\u5ba2\u6237\u7aef\u7684\u6307\u4ee4\u65f6\uff0c\u9664\u4e86\u5c06\u6307\u4ee4\u6267\u884c\uff0c\u4f1a\u5c06\u8be5\u6307\u4ee4\u5b58\u50a8\u5230\u7f13\u51b2\u533a\u4e2d \u590d\u5236\u7f13\u51b2\u533a\u5185\u90e8\u5de5\u4f5c\u539f\u7406\uff1a \u7ec4\u6210 \u504f\u79fb\u91cf \u6982\u5ff5\uff1a\u4e00\u4e2a\u6570\u5b57\uff0c\u63cf\u8ff0\u590d\u5236\u7f13\u51b2\u533a\u4e2d\u7684\u6307\u4ee4\u5b57\u8282\u4f4d\u7f6e \u5206\u7c7b\uff1a master\u590d\u5236\u504f\u79fb\u91cf\uff1a\u8bb0\u5f55\u53d1\u9001\u7ed9\u6240\u6709slave\u7684\u6307\u4ee4\u5b57\u8282\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff08\u591a\u4e2a\uff09 slave\u590d\u5236\u504f\u79fb\u91cf\uff1a\u8bb0\u5f55slave\u63a5\u6536master\u53d1\u9001\u8fc7\u6765\u7684\u6307\u4ee4\u5b57\u8282\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff08\u4e00\u4e2a\uff09 \u4f5c\u7528\uff1a\u540c\u6b65\u4fe1\u606f\uff0c\u6bd4\u5bf9master\u4e0eslave\u7684\u5dee\u5f02\uff0c\u5f53slave\u65ad\u7ebf\u540e\uff0c\u6062\u590d\u6570\u636e\u4f7f\u7528 \u6570\u636e\u6765\u6e90\uff1a master\u7aef\uff1a\u53d1\u9001\u4e00\u6b21\u8bb0\u5f55\u4e00\u6b21 slave\u7aef\uff1a\u63a5\u6536\u4e00\u6b21\u8bb0\u5f55\u4e00\u6b21 \u5b57\u8282\u503c \u5de5\u4f5c\u539f\u7406 \u901a\u8fc7offset\u533a\u5206\u4e0d\u540c\u7684slave\u5f53\u524d\u6570\u636e\u4f20\u64ad\u7684\u5dee\u5f02 master\u8bb0\u5f55\u5df2\u53d1\u9001\u7684\u4fe1\u606f\u5bf9\u5e94\u7684offset slave\u8bb0\u5f55\u5df2\u63a5\u6536\u7684\u4fe1\u606f\u5bf9\u5e94\u7684offset 2.2.2 \u6d41\u7a0b\u66f4\u65b0(\u5168\u91cf\u590d\u5236/\u90e8\u5206\u590d\u5236) \u00b6 \u6211\u4eec\u518d\u6b21\u7684\u603b\u7ed3\u4e00\u4e0b\u4e3b\u4ece\u590d\u5236\u7684\u4e09\u4e2a\u9636\u6bb5\u7684\u5de5\u4f5c\u6d41\u7a0b\uff1a 2.2.3 \u5fc3\u8df3\u673a\u5236 \u00b6 \u4ec0\u4e48\u662f\u5fc3\u8df3\u673a\u5236\uff1f \u8fdb\u5165\u547d\u4ee4\u4f20\u64ad\u9636\u6bb5\u5019\uff0cmaster\u4e0eslave\u95f4\u9700\u8981\u8fdb\u884c\u4fe1\u606f\u4ea4\u6362\uff0c\u4f7f\u7528\u5fc3\u8df3\u673a\u5236\u8fdb\u884c\u7ef4\u62a4\uff0c\u5b9e\u73b0\u53cc\u65b9\u8fde\u63a5\u4fdd\u6301\u5728\u7ebf master\u5fc3\u8df3\uff1a \u5185\u90e8\u6307\u4ee4\uff1aPING \u5468\u671f\uff1a\u7531repl-ping-slave-period\u51b3\u5b9a\uff0c\u9ed8\u8ba410\u79d2 \u4f5c\u7528\uff1a\u5224\u65adslave\u662f\u5426\u5728\u7ebf \u67e5\u8be2\uff1aINFO replication \u83b7\u53d6slave\u6700\u540e\u4e00\u6b21\u8fde\u63a5\u65f6\u95f4\u95f4\u9694\uff0clag\u9879\u7ef4\u6301\u57280\u62161\u89c6\u4e3a\u6b63\u5e38 slave\u5fc3\u8df3\u4efb\u52a1 \u5185\u90e8\u6307\u4ee4\uff1aREPLCONF ACK {offset} \u5468\u671f\uff1a1\u79d2 \u4f5c\u75281\uff1a\u6c47\u62a5slave\u81ea\u5df1\u7684\u590d\u5236\u504f\u79fb\u91cf\uff0c\u83b7\u53d6\u6700\u65b0\u7684\u6570\u636e\u53d8\u66f4\u6307\u4ee4 \u4f5c\u75282\uff1a\u5224\u65admaster\u662f\u5426\u5728\u7ebf \u5fc3\u8df3\u9636\u6bb5\u6ce8\u610f\u4e8b\u9879\uff1a \u5f53slave\u591a\u6570\u6389\u7ebf\uff0c\u6216\u5ef6\u8fdf\u8fc7\u9ad8\u65f6\uff0cmaster\u4e3a\u4fdd\u969c\u6570\u636e\u7a33\u5b9a\u6027\uff0c\u5c06\u62d2\u7edd\u6240\u6709\u4fe1\u606f\u540c\u6b65 min-slaves-to-write 2 min-slaves-max-lag 8 slave\u6570\u91cf\u5c11\u4e8e2\u4e2a\uff0c\u6216\u8005\u6240\u6709slave\u7684\u5ef6\u8fdf\u90fd\u5927\u4e8e\u7b49\u4e8e8\u79d2\u65f6\uff0c\u5f3a\u5236\u5173\u95edmaster\u5199\u529f\u80fd\uff0c\u505c\u6b62\u6570\u636e\u540c\u6b65 slave\u6570\u91cf\u7531slave\u53d1\u9001REPLCONF ACK\u547d\u4ee4\u505a\u786e\u8ba4 slave\u5ef6\u8fdf\u7531slave\u53d1\u9001REPLCONF ACK\u547d\u4ee4\u505a\u786e\u8ba4 \u81f3\u6b64\uff1a\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\u5b8c\u6574\u7684\u4e3b\u4ece\u590d\u5236\u6d41\u7a0b\uff1a 2.3 \u4e3b\u4ece\u590d\u5236\u5e38\u89c1\u95ee\u9898 \u00b6 2.3.1 \u9891\u7e41\u7684\u5168\u91cf\u590d\u5236 \u00b6 \u4f34\u968f\u7740\u7cfb\u7edf\u7684\u8fd0\u884c\uff0cmaster\u7684\u6570\u636e\u91cf\u4f1a\u8d8a\u6765\u8d8a\u5927\uff0c\u4e00\u65e6master\u91cd\u542f\uff0crunid\u5c06\u53d1\u751f\u53d8\u5316\uff0c\u4f1a\u5bfc\u81f4\u5168\u90e8slave\u7684\u5168\u91cf\u590d\u5236\u64cd\u4f5c \u5185\u90e8\u4f18\u5316\u8c03\u6574\u65b9\u6848\uff1a 1\uff1amaster\u5185\u90e8\u521b\u5efamaster_replid\u53d8\u91cf\uff0c\u4f7f\u7528runid\u76f8\u540c\u7684\u7b56\u7565\u751f\u6210\uff0c\u957f\u5ea641\u4f4d\uff0c\u5e76\u53d1\u9001\u7ed9\u6240\u6709slave 2\uff1a\u5728master\u5173\u95ed\u65f6\u6267\u884c\u547d\u4ee4shutdown save\uff0c\u8fdb\u884cRDB\u6301\u4e45\u5316,\u5c06runid\u4e0eoffset\u4fdd\u5b58\u5230RDB\u6587\u4ef6\u4e2d repl-id repl-offset \u901a\u8fc7redis-check-rdb\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u8be5\u4fe1\u606f 3\uff1amaster\u91cd\u542f\u540e\u52a0\u8f7dRDB\u6587\u4ef6\uff0c\u6062\u590d\u6570\u636e\uff0c\u91cd\u542f\u540e\uff0c\u5c06RDB\u6587\u4ef6\u4e2d\u4fdd\u5b58\u7684repl-id\u4e0erepl-offset\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d master_repl_id=repl master_repl_offset =repl-offset \u901a\u8fc7info\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u8be5\u4fe1\u606f \u4f5c\u7528\uff1a\u672c\u673a\u4fdd\u5b58\u4e0a\u6b21runid\uff0c\u91cd\u542f\u540e\u6062\u590d\u8be5\u503c\uff0c\u4f7f\u6240\u6709slave\u8ba4\u4e3a\u8fd8\u662f\u4e4b\u524d\u7684master \u7b2c\u4e8c\u79cd\u51fa\u73b0\u9891\u7e41\u5168\u91cf\u590d\u5236\u7684\u95ee\u9898\u73b0\u8c61\uff1a\u7f51\u7edc\u73af\u5883\u4e0d\u4f73\uff0c\u51fa\u73b0\u7f51\u7edc\u4e2d\u65ad\uff0cslave\u4e0d\u63d0\u4f9b\u670d\u52a1 \u95ee\u9898\u539f\u56e0\uff1a\u590d\u5236\u7f13\u51b2\u533a\u8fc7\u5c0f\uff0c\u65ad\u7f51\u540eslave\u7684offset\u8d8a\u754c\uff0c\u89e6\u53d1\u5168\u91cf\u590d\u5236 \u6700\u7ec8\u7ed3\u679c\uff1aslave\u53cd\u590d\u8fdb\u884c\u5168\u91cf\u590d\u5236 \u89e3\u51b3\u65b9\u6848\uff1a\u4fee\u6539\u590d\u5236\u7f13\u51b2\u533a\u5927\u5c0f repl-backlog-size ?mb \u5efa\u8bae\u8bbe\u7f6e\u5982\u4e0b\uff1a 1.\u6d4b\u7b97\u4ecemaster\u5230slave\u7684\u91cd\u8fde\u5e73\u5747\u65f6\u957fsecond 2.\u83b7\u53d6master\u5e73\u5747\u6bcf\u79d2\u4ea7\u751f\u5199\u547d\u4ee4\u6570\u636e\u603b\u91cfwrite_size_per_second 3.\u6700\u4f18\u590d\u5236\u7f13\u51b2\u533a\u7a7a\u95f4 = 2 * second * write_size_per_second 2.3.2 \u9891\u7e41\u7684\u7f51\u7edc\u4e2d\u65ad \u00b6 \u95ee\u9898\u73b0\u8c61\uff1amaster\u7684CPU\u5360\u7528\u8fc7\u9ad8 \u6216 slave\u9891\u7e41\u65ad\u5f00\u8fde\u63a5 \u95ee\u9898\u539f\u56e0 slave\u6bcf1\u79d2\u53d1\u9001REPLCONFACK\u547d\u4ee4\u5230master \u5f53slave\u63a5\u5230\u4e86\u6162\u67e5\u8be2\u65f6\uff08keys * \uff0chgetall\u7b49\uff09\uff0c\u4f1a\u5927\u91cf\u5360\u7528CPU\u6027\u80fd master\u6bcf1\u79d2\u8c03\u7528\u590d\u5236\u5b9a\u65f6\u51fd\u6570replicationCron()\uff0c\u6bd4\u5bf9slave\u53d1\u73b0\u957f\u65f6\u95f4\u6ca1\u6709\u8fdb\u884c\u54cd\u5e94 \u6700\u7ec8\u7ed3\u679c\uff1amaster\u5404\u79cd\u8d44\u6e90\uff08\u8f93\u51fa\u7f13\u51b2\u533a\u3001\u5e26\u5bbd\u3001\u8fde\u63a5\u7b49\uff09\u88ab\u4e25\u91cd\u5360\u7528 \u89e3\u51b3\u65b9\u6848\uff1a\u901a\u8fc7\u8bbe\u7f6e\u5408\u7406\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u786e\u8ba4\u662f\u5426\u91ca\u653eslave repl-timeout seconds \u8be5\u53c2\u6570\u5b9a\u4e49\u4e86\u8d85\u65f6\u65f6\u95f4\u7684\u9608\u503c\uff08\u9ed8\u8ba460\u79d2\uff09\uff0c\u8d85\u8fc7\u8be5\u503c\uff0c\u91ca\u653eslave \u95ee\u9898\u73b0\u8c61\uff1aslave\u4e0emaster\u8fde\u63a5\u65ad\u5f00 \u95ee\u9898\u539f\u56e0 master\u53d1\u9001ping\u6307\u4ee4\u9891\u5ea6\u8f83\u4f4e master\u8bbe\u5b9a\u8d85\u65f6\u65f6\u95f4\u8f83\u77ed ping\u6307\u4ee4\u5728\u7f51\u7edc\u4e2d\u5b58\u5728\u4e22\u5305 \u89e3\u51b3\u65b9\u6848\uff1a\u63d0\u9ad8ping\u6307\u4ee4\u53d1\u9001\u7684\u9891\u5ea6 repl-ping-slave-period seconds \u8d85\u65f6\u65f6\u95f4repl-time\u7684\u65f6\u95f4\u81f3\u5c11\u662fping\u6307\u4ee4\u9891\u5ea6\u76845\u523010\u500d\uff0c\u5426\u5219slave\u5f88\u5bb9\u6613\u5224\u5b9a\u8d85\u65f6 2.3.3 \u6570\u636e\u4e0d\u4e00\u81f4 \u00b6 \u95ee\u9898\u73b0\u8c61\uff1a\u591a\u4e2aslave\u83b7\u53d6\u76f8\u540c\u6570\u636e\u4e0d\u540c\u6b65 \u95ee\u9898\u539f\u56e0\uff1a\u7f51\u7edc\u4fe1\u606f\u4e0d\u540c\u6b65\uff0c\u6570\u636e\u53d1\u9001\u6709\u5ef6\u8fdf \u89e3\u51b3\u65b9\u6848 \u4f18\u5316\u4e3b\u4ece\u95f4\u7684\u7f51\u7edc\u73af\u5883\uff0c\u901a\u5e38\u653e\u7f6e\u5728\u540c\u4e00\u4e2a\u673a\u623f\u90e8\u7f72\uff0c\u5982\u4f7f\u7528\u963f\u91cc\u4e91\u7b49\u4e91\u670d\u52a1\u5668\u65f6\u8981\u6ce8\u610f\u6b64\u73b0\u8c61 \u76d1\u63a7\u4e3b\u4ece\u8282\u70b9\u5ef6\u8fdf\uff08\u901a\u8fc7offset\uff09\u5224\u65ad\uff0c\u5982\u679cslave\u5ef6\u8fdf\u8fc7\u5927\uff0c\u6682\u65f6\u5c4f\u853d\u7a0b\u5e8f\u5bf9\u8be5slave\u7684\u6570\u636e\u8bbf\u95ee slave-serve-stale-data yes|no \u5f00\u542f\u540e\u4ec5\u54cd\u5e94info\u3001slaveof\u7b49\u5c11\u6570\u547d\u4ee4\uff08\u614e\u7528\uff0c\u9664\u975e\u5bf9\u6570\u636e\u4e00\u81f4\u6027\u8981\u6c42\u5f88\u9ad8\uff09 3.\u54e8\u5175\u6a21\u5f0f \u00b6 3.1 \u54e8\u5175\u7b80\u4ecb \u00b6 3.1.1 \u54e8\u5175\u6982\u5ff5 \u00b6 \u9996\u5148\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4e1a\u52a1\u573a\u666f\uff1a\u5982\u679credis\u7684master\u5b95\u673a\u4e86\uff0c\u6b64\u65f6\u5e94\u8be5\u600e\u4e48\u529e\uff1f \u90a3\u6b64\u65f6\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4ece\u4e00\u5806\u7684slave\u4e2d\u91cd\u65b0\u9009\u4e3e\u51fa\u4e00\u4e2a\u65b0\u7684master\uff0c\u90a3\u8fd9\u4e2a\u64cd\u4f5c\u8fc7\u7a0b\u662f\u4ec0\u4e48\u6837\u7684\u5462\uff1f\u8fd9\u91cc\u9762\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\u51fa\u73b0\u5462\uff1f \u8981\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd\uff0c\u6211\u4eec\u5c31\u9700\u8981redis\u7684\u54e8\u5175\uff0c\u90a3\u54e8\u5175\u662f\u4ec0\u4e48\u5462\uff1f \u54e8\u5175 \u54e8\u5175(sentinel) \u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf\uff0c\u7528\u4e8e\u5bf9\u4e3b\u4ece\u7ed3\u6784\u4e2d\u7684\u6bcf\u53f0\u670d\u52a1\u5668\u8fdb\u884c \u76d1\u63a7 \uff0c\u5f53\u51fa\u73b0\u6545\u969c\u65f6\u901a\u8fc7 \u6295\u7968 \u673a\u5236 \u9009\u62e9 \u65b0\u7684master\u5e76\u5c06\u6240\u6709slave\u8fde\u63a5\u5230\u65b0\u7684master\u3002 3.1.2 \u54e8\u5175\u4f5c\u7528 \u00b6 \u54e8\u5175\u7684\u4f5c\u7528\uff1a \u76d1\u63a7\uff1a\u76d1\u63a7master\u548cslave \u4e0d\u65ad\u7684\u68c0\u67e5master\u548cslave\u662f\u5426\u6b63\u5e38\u8fd0\u884c master\u5b58\u6d3b\u68c0\u6d4b\u3001master\u4e0eslave\u8fd0\u884c\u60c5\u51b5\u68c0\u6d4b \u901a\u77e5\uff08\u63d0\u9192\uff09\uff1a\u5f53\u88ab\u76d1\u63a7\u7684\u670d\u52a1\u5668\u51fa\u73b0\u95ee\u9898\u65f6\uff0c\u5411\u5176\u4ed6\uff08\u54e8\u5175\u95f4\uff0c\u5ba2\u6237\u7aef\uff09\u53d1\u9001\u901a\u77e5 \u81ea\u52a8\u6545\u969c\u8f6c\u79fb\uff1a\u65ad\u5f00master\u4e0eslave\u8fde\u63a5\uff0c\u9009\u53d6\u4e00\u4e2aslave\u4f5c\u4e3amaster\uff0c\u5c06\u5176\u4ed6slave\u8fde\u63a5\u65b0\u7684master\uff0c\u5e76\u544a\u77e5\u5ba2\u6237\u7aef\u65b0\u7684\u670d\u52a1\u5668\u5730\u5740 \u6ce8\u610f\uff1a\u54e8\u5175\u4e5f\u662f\u4e00\u53f0redis\u670d\u52a1\u5668\uff0c\u53ea\u662f\u4e0d\u63d0\u4f9b\u6570\u636e\u76f8\u5173\u670d\u52a1\uff0c\u901a\u5e38\u54e8\u5175\u7684\u6570\u91cf\u914d\u7f6e\u4e3a\u5355\u6570 3.2 \u542f\u7528\u54e8\u5175 \u00b6 \u914d\u7f6e\u54e8\u5175 \u914d\u7f6e\u4e00\u62d6\u4e8c\u7684\u4e3b\u4ece\u7ed3\u6784\uff08\u5229\u7528\u4e4b\u524d\u7684\u65b9\u5f0f\u542f\u52a8\u5373\u53ef\uff09 \u914d\u7f6e\u4e09\u4e2a\u54e8\u5175\uff08\u914d\u7f6e\u76f8\u540c\uff0c\u7aef\u53e3\u4e0d\u540c\uff09\uff0c\u53c2\u770bsentinel.conf 1\uff1a\u8bbe\u7f6e\u54e8\u5175\u76d1\u542c\u7684\u4e3b\u670d\u52a1\u5668\u4fe1\u606f\uff0c sentinel_number\u8868\u793a\u53c2\u4e0e\u6295\u7968\u7684\u54e8\u5175\u6570\u91cf sentinel monitor master_name master_host master_port sentinel_number 2\uff1a\u8bbe\u7f6e\u5224\u5b9a\u670d\u52a1\u5668\u5b95\u673a\u65f6\u957f\uff0c\u8be5\u8bbe\u7f6e\u63a7\u5236\u662f\u5426\u8fdb\u884c\u4e3b\u4ece\u5207\u6362 sentinel down-after-milliseconds master_name million_seconds 3\uff1a\u8bbe\u7f6e\u6545\u969c\u5207\u6362\u7684\u6700\u5927\u8d85\u65f6\u65f6 sentinel failover-timeout master_name million_seconds 4\uff1a\u8bbe\u7f6e\u4e3b\u4ece\u5207\u6362\u540e\uff0c\u540c\u65f6\u8fdb\u884c\u6570\u636e\u540c\u6b65\u7684slave\u6570\u91cf\uff0c\u6570\u503c\u8d8a\u5927\uff0c\u8981\u6c42\u7f51\u7edc\u8d44\u6e90\u8d8a\u9ad8\uff0c\u6570\u503c\u8d8a\u5c0f\uff0c\u540c\u6b65\u65f6\u95f4\u8d8a\u957f sentinel parallel-syncs master_name sync_slave_number \u542f\u52a8\u54e8\u5175 redis-sentinel filename 3.3 \u54e8\u5175\u5de5\u4f5c\u539f\u7406 \u00b6 \u54e8\u5175\u5728\u8fdb\u884c\u4e3b\u4ece\u5207\u6362\u8fc7\u7a0b\u4e2d\u7ecf\u5386\u4e09\u4e2a\u9636\u6bb5 \u76d1\u63a7 \u901a\u77e5 \u6545\u969c\u8f6c\u79fb 3.3.1 \u76d1\u63a7 \u00b6 \u7528\u4e8e\u540c\u6b65\u5404\u4e2a\u8282\u70b9\u7684\u72b6\u6001\u4fe1\u606f \u83b7\u53d6\u5404\u4e2asentinel\u7684\u72b6\u6001\uff08\u662f\u5426\u5728\u7ebf\uff09 \u83b7\u53d6master\u7684\u72b6\u6001 master\u5c5e\u6027 prunid prole\uff1amaster \u5404\u4e2aslave\u7684\u8be6\u7ec6\u4fe1\u606f \u83b7\u53d6\u6240\u6709slave\u7684\u72b6\u6001\uff08\u6839\u636emaster\u4e2d\u7684slave\u4fe1\u606f\uff09 slave\u5c5e\u6027 prunid prole\uff1aslave pmaster_host\u3001master_port poffset \u5176\u5185\u90e8\u7684\u5de5\u4f5c\u539f\u7406\u5177\u4f53\u5982\u4e0b\uff1a 3.3.2 \u901a\u77e5 \u00b6 sentinel\u5728\u901a\u77e5\u9636\u6bb5\u8981\u4e0d\u65ad\u7684\u53bb\u83b7\u53d6master/slave\u7684\u4fe1\u606f\uff0c\u7136\u540e\u5728\u5404\u4e2asentinel\u4e4b\u95f4\u8fdb\u884c\u5171\u4eab\uff0c\u5177\u4f53\u7684\u6d41\u7a0b\u5982\u4e0b\uff1a 3.3.3 \u6545\u969c\u8f6c\u79fb \u00b6 \u5f53master\u5b95\u673a\u540esentinel\u662f\u5982\u4f55\u77e5\u6653\u5e76\u5224\u65ad\u51famaster\u662f\u771f\u7684\u5b95\u673a\u4e86\u5462\uff1f\u6211\u4eec\u6765\u770b\u5177\u4f53\u7684\u64cd\u4f5c\u6d41\u7a0b \u5f53sentinel\u8ba4\u5b9amaster\u4e0b\u7ebf\u4e4b\u540e\uff0c\u6b64\u65f6\u9700\u8981\u51b3\u5b9a\u66f4\u6362master\uff0c\u90a3\u8fd9\u4ef6\u4e8b\u7531\u54ea\u4e2asentinel\u6765\u505a\u5462\uff1f\u8fd9\u65f6\u5019sentinel\u4e4b\u95f4\u8981\u8fdb\u884c\u9009\u4e3e\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5728\u9009\u4e3e\u7684\u65f6\u5019\u6bcf\u4e00\u4e2a\u4eba\u624b\u91cc\u90fd\u6709\u4e00\u7968\uff0c\u800c\u6bcf\u4e00\u4e2a\u4eba\u7684\u53c8\u90fd\u60f3\u5f53\u8fd9\u4e2a\u5904\u7406\u4e8b\u6545\u7684\u4eba\uff0c\u90a3\u600e\u4e48\u529e\uff1f\u5927\u5bb6\u5c31\u5f00\u59cb\u62a2\uff0c\u4e8e\u662f\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u53d1\u51fa\u4e00\u4e2a\u6307\u4ee4\uff0c\u5728\u5185\u7f51\u91cc\u8fb9\u544a\u8bc9\u5927\u5bb6\u6211\u8981\u5f53\u9009\u4e3e\u4eba\uff0c\u6bd4\u5982\u8bf4\u73b0\u5728\u7684sentinel1\u548csentinel4\u53d1\u51fa\u8fd9\u4e2a\u9009\u4e3e\u6307\u4ee4\u4e86\uff0c\u90a3\u4e48sentinel2\u65e2\u80fd\u63a5\u5230sentinel1\u7684\u4e5f\u80fd\u63a5\u5230sentinel4\u7684\uff0c\u63a5\u5230\u4e86\u4ed6\u4eec\u7684\u7533\u8bf7\u4ee5\u540e\u5462\uff0csentinel2\u4ed6\u5c31\u4f1a\u628a\u4ed6\u7684\u4e00\u7968\u6295\u7ed9\u5176\u4e2d\u4e00\u65b9\uff0c\u6295\u7ed9\u8c01\u5462\uff1f\u8c01\u5148\u8fc7\u6765\u6211\u6295\u7ed9\u8c01\uff0c\u5047\u8bbesentinel1\u5148\u8fc7\u6765\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7968\u5c31\u7ed9\u5230\u4e86sentinel1\u3002\u90a3\u4e48\u7ed9\u8fc7\u53bb\u4ee5\u540e\u5462\uff0c\u73b0\u5728sentinel1\u5c31\u62ff\u5230\u4e86\u4e00\u7968\uff0c\u6309\u7167\u8fd9\u6837\u7684\u4e00\u79cd\u5f62\u5f0f\uff0c\u6700\u7ec8\u4f1a\u6709\u4e00\u4e2a\u9009\u4e3e\u7ed3\u679c\u3002\u5bf9\u5e94\u7684\u9009\u4e3e\u6700\u7ec8\u5f97\u7968\u591a\u7684\uff0c\u90a3\u81ea\u7136\u5c31\u6210\u4e3a\u4e86\u5904\u7406\u4e8b\u6545\u7684\u4eba\u3002\u9700\u8981\u6ce8\u610f\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6709\u53ef\u80fd\u4f1a\u5b58\u5728\u5931\u8d25\u7684\u73b0\u8c61\uff0c\u5c31\u662f\u4e00\u8f6e\u9009\u4e3e\u5b8c\u6ca1\u6709\u9009\u53d6\uff0c\u90a3\u5c31\u4f1a\u63a5\u7740\u8fdb\u884c\u7b2c\u4e8c\u8f6e\u7b2c\u4e09\u8f6e\u76f4\u5230\u5b8c\u6210\u9009\u4e3e\u3002 \u63a5\u4e0b\u6765\u5c31\u662f\u7531\u9009\u4e3e\u80dc\u51fa\u7684sentinel\u53bb\u4eceslave\u4e2d\u9009\u4e00\u4e2a\u65b0\u7684master\u51fa\u6765\u7684\u5de5\u4f5c\uff0c\u8fd9\u4e2a\u6d41\u7a0b\u662f\u4ec0\u4e48\u6837\u7684\u5462\uff1f \u9996\u5148\u5b83\u6709\u4e00\u4e2a\u5728\u670d\u52a1\u5668\u5217\u8868\u4e2d\u6311\u9009\u5907\u9009master\u7684\u539f\u5219 \u4e0d\u5728\u7ebf\u7684OUT \u54cd\u5e94\u6162\u7684OUT \u4e0e\u539fmaster\u65ad\u5f00\u65f6\u95f4\u4e45\u7684OUT \u4f18\u5148\u539f\u5219 \u4f18\u5148\u7ea7 offset runid \u9009\u51fa\u65b0\u7684master\u4e4b\u540e\uff0c\u53d1\u9001\u6307\u4ee4\uff08 sentinel \uff09\u7ed9\u5176\u4ed6\u7684slave\uff1a \u5411\u65b0\u7684master\u53d1\u9001slaveof no one \u5411\u5176\u4ed6slave\u53d1\u9001slaveof \u65b0masterIP\u7aef\u53e3 \u603b\u7ed3 \uff1a\u6545\u969c\u8f6c\u79fb\u9636\u6bb5 \u53d1\u73b0\u95ee\u9898\uff0c\u4e3b\u89c2\u4e0b\u7ebf\u4e0e\u5ba2\u89c2\u4e0b\u7ebf \u7ade\u9009\u8d1f\u8d23\u4eba \u4f18\u9009\u65b0master \u65b0master\u4e0a\u4efb\uff0c\u5176\u4ed6slave\u5207\u6362master\uff0c\u539fmaster\u4f5c\u4e3aslave\u6545\u969c\u6062\u590d\u540e\u8fde\u63a5 4.\u96c6\u7fa4cluster \u00b6 \u73b0\u72b6\u95ee\u9898\uff1a\u4e1a\u52a1\u53d1\u5c55\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u5cf0\u503c\u74f6\u9888 redis\u63d0\u4f9b\u7684\u670d\u52a1OPS\u53ef\u4ee5\u8fbe\u523010\u4e07/\u79d2\uff0c\u5f53\u524d\u4e1a\u52a1OPS\u5df2\u7ecf\u8fbe\u523010\u4e07/\u79d2 \u5185\u5b58\u5355\u673a\u5bb9\u91cf\u8fbe\u5230256G\uff0c\u5f53\u524d\u4e1a\u52a1\u9700\u6c42\u5185\u5b58\u5bb9\u91cf1T \u4f7f\u7528\u96c6\u7fa4\u7684\u65b9\u5f0f\u53ef\u4ee5\u5feb\u901f\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898 4.1 \u96c6\u7fa4\u7b80\u4ecb \u00b6 \u96c6\u7fa4\u5c31\u662f\u4f7f\u7528\u7f51\u7edc\u5c06\u82e5\u5e72\u53f0\u8ba1\u7b97\u673a\u8054\u901a\u8d77\u6765\uff0c\u5e76\u63d0\u4f9b\u7edf\u4e00\u7684\u7ba1\u7406\u65b9\u5f0f\uff0c\u4f7f\u5176\u5bf9\u5916\u5448\u73b0\u5355\u673a\u7684\u670d\u52a1\u6548\u679c \u96c6\u7fa4\u4f5c\u7528\uff1a \u5206\u6563\u5355\u53f0\u670d\u52a1\u5668\u7684\u8bbf\u95ee\u538b\u529b\uff0c\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861 \u5206\u6563\u5355\u53f0\u670d\u52a1\u5668\u7684\u5b58\u50a8\u538b\u529b\uff0c\u5b9e\u73b0\u53ef\u6269\u5c55\u6027 \u964d\u4f4e\u5355\u53f0\u670d\u52a1\u5668\u5b95\u673a\u5e26\u6765\u7684\u4e1a\u52a1\u707e\u96be 4.2 Cluster\u96c6\u7fa4\u7ed3\u6784\u8bbe\u8ba1 \u00b6 \u6570\u636e\u5b58\u50a8\u8bbe\u8ba1\uff1a \u901a\u8fc7\u7b97\u6cd5\u8bbe\u8ba1\uff0c\u8ba1\u7b97\u51fakey\u5e94\u8be5\u4fdd\u5b58\u7684\u4f4d\u7f6e \u5c06\u6240\u6709\u7684\u5b58\u50a8\u7a7a\u95f4\u8ba1\u5212\u5207\u5272\u621016384\u4efd\uff0c\u6bcf\u53f0\u4e3b\u673a\u4fdd\u5b58\u4e00\u90e8\u5206 \u6ce8\u610f\uff1a\u6bcf\u4efd\u4ee3\u8868\u7684\u662f\u4e00\u4e2a\u5b58\u50a8\u7a7a\u95f4\uff0c\u4e0d\u662f\u4e00\u4e2akey\u7684\u4fdd\u5b58\u7a7a\u95f4 \u5c06key\u6309\u7167\u8ba1\u7b97\u51fa\u7684\u7ed3\u679c\u653e\u5230\u5bf9\u5e94\u7684\u5b58\u50a8\u7a7a\u95f4 \u90a3redis\u7684\u96c6\u7fa4\u662f\u5982\u4f55\u589e\u5f3a\u53ef\u6269\u5c55\u6027\u7684\u5462\uff1f\u8b6c\u5982\u6211\u4eec\u8981\u589e\u52a0\u4e00\u4e2a\u96c6\u7fa4\u8282\u70b9 \u5f53\u6211\u4eec\u67e5\u627e\u6570\u636e\u65f6\uff0c\u96c6\u7fa4\u662f\u5982\u4f55\u64cd\u4f5c\u7684\u5462\uff1f \u5404\u4e2a\u6570\u636e\u5e93\u76f8\u4e92\u901a\u4fe1\uff0c\u4fdd\u5b58\u5404\u4e2a\u5e93\u4e2d\u69fd\u7684\u7f16\u53f7\u6570\u636e \u4e00\u6b21\u547d\u4e2d\uff0c\u76f4\u63a5\u8fd4\u56de \u4e00\u6b21\u672a\u547d\u4e2d\uff0c\u544a\u77e5\u5177\u4f53\u4f4d\u7f6e 4.3 Cluster\u96c6\u7fa4\u7ed3\u6784\u642d\u5efa \u00b6 \u9996\u5148\u8981\u660e\u786e\u7684\u51e0\u4e2a\u8981\u70b9\uff1a \u914d\u7f6e\u670d\u52a1\u5668\uff083\u4e3b3\u4ece\uff09 \u5efa\u7acb\u901a\u4fe1\uff08Meet\uff09 \u5206\u69fd\uff08Slot\uff09 \u642d\u5efa\u4e3b\u4ece\uff08master-slave\uff09 Cluster\u914d\u7f6e \u662f\u5426\u542f\u7528cluster\uff0c\u52a0\u5165cluster\u8282\u70b9 cluster-enabled yes|no cluster\u914d\u7f6e\u6587\u4ef6\u540d\uff0c\u8be5\u6587\u4ef6\u5c5e\u4e8e\u81ea\u52a8\u751f\u6210\uff0c\u4ec5\u7528\u4e8e\u5feb\u901f\u67e5\u627e\u6587\u4ef6\u5e76\u67e5\u8be2\u6587\u4ef6\u5185\u5bb9 cluster-config-file filename \u8282\u70b9\u670d\u52a1\u54cd\u5e94\u8d85\u65f6\u65f6\u95f4\uff0c\u7528\u4e8e\u5224\u5b9a\u8be5\u8282\u70b9\u662f\u5426\u4e0b\u7ebf\u6216\u5207\u6362\u4e3a\u4ece\u8282\u70b9 cluster-node-timeout milliseconds master\u8fde\u63a5\u7684slave\u6700\u5c0f\u6570\u91cf cluster-migration-barrier min_slave_number Cluster\u8282\u70b9\u64cd\u4f5c\u547d\u4ee4 \u67e5\u770b\u96c6\u7fa4\u8282\u70b9\u4fe1\u606f cluster nodes \u66f4\u6539slave\u6307\u5411\u65b0\u7684master cluster replicate master-id \u53d1\u73b0\u4e00\u4e2a\u65b0\u8282\u70b9\uff0c\u65b0\u589emaster cluster meet ip : port \u5ffd\u7565\u4e00\u4e2a\u6ca1\u6709solt\u7684\u8282\u70b9 cluster forget server_id \u624b\u52a8\u6545\u969c\u8f6c\u79fb cluster failover \u96c6\u7fa4\u64cd\u4f5c\u547d\u4ee4\uff1a \u521b\u5efa\u96c6\u7fa4 redis-cli \u2013-cluster create masterhost1 : masterport1 masterhost2:masterport2 masterhost3:masterport3 [masterhostn:masterportn \u2026] slavehost1:slaveport1 slavehost2:slaveport2 slavehost3:slaveport3 -\u2013cluster-replicas n \u6ce8\u610f\uff1amaster\u4e0eslave\u7684\u6570\u91cf\u8981\u5339\u914d\uff0c\u4e00\u4e2amaster\u5bf9\u5e94n\u4e2aslave\uff0c\u7531\u6700\u540e\u7684\u53c2\u6570n\u51b3\u5b9a master\u4e0eslave\u7684\u5339\u914d\u987a\u5e8f\u4e3a\u7b2c\u4e00\u4e2amaster\u4e0e\u524dn\u4e2aslave\u5206\u4e3a\u4e00\u7ec4\uff0c\u5f62\u6210\u4e3b\u4ece\u7ed3\u6784 \u6dfb\u52a0master\u5230\u5f53\u524d\u96c6\u7fa4\u4e2d\uff0c\u8fde\u63a5\u65f6\u53ef\u4ee5\u6307\u5b9a\u4efb\u610f\u73b0\u6709\u8282\u70b9\u5730\u5740\u4e0e\u7aef\u53e3 redis-cli --cluster add-node new-master-host : new-master-port now-host:now-port \u6dfb\u52a0slave redis-cli --cluster add-node new-slave-host : new-slave-port master-host:master-port --cluster-slave --cluster-master-id masterid \u5220\u9664\u8282\u70b9\uff0c\u5982\u679c\u5220\u9664\u7684\u8282\u70b9\u662fmaster\uff0c\u5fc5\u987b\u4fdd\u969c\u5176\u4e2d\u6ca1\u6709\u69fdslot redis-cli --cluster del-node del-slave-host : del-slave-port del-slave-id \u91cd\u65b0\u5206\u69fd\uff0c\u5206\u69fd\u662f\u4ece\u5177\u6709\u69fd\u7684master\u4e2d\u5212\u5206\u4e00\u90e8\u5206\u7ed9\u5176\u4ed6master\uff0c\u8fc7\u7a0b\u4e2d\u4e0d\u521b\u5efa\u65b0\u7684\u69fd redis-cli --cluster reshard new-master-host : new-master:port --cluster-from src- master-id1, src-master-id2, src-master-idn --cluster-to target-master-id -- cluster-slots slots \u6ce8\u610f\uff1a\u5c06\u9700\u8981\u53c2\u4e0e\u5206\u69fd\u7684\u6240\u6709masterid\u4e0d\u5206\u5148\u540e\u987a\u5e8f\u6dfb\u52a0\u5230\u53c2\u6570\u4e2d\uff0c\u4f7f\u7528\uff0c\u5206\u9694 \u6307\u5b9a\u76ee\u6807\u5f97\u5230\u7684\u69fd\u7684\u6570\u91cf\uff0c\u6240\u6709\u7684\u69fd\u5c06\u5e73\u5747\u4ece\u6bcf\u4e2a\u6765\u6e90\u7684master\u5904\u83b7\u53d6 \u91cd\u65b0\u5206\u914d\u69fd\uff0c\u4ece\u5177\u6709\u69fd\u7684master\u4e2d\u5206\u914d\u6307\u5b9a\u6570\u91cf\u7684\u69fd\u5230\u53e6\u4e00\u4e2amaster\u4e2d\uff0c\u5e38\u7528\u4e8e\u6e05\u7a7a\u6307\u5b9amaster\u4e2d\u7684\u69fd redis-cli --cluster reshard src-master-host : src-master-port --cluster-from src- master-id --cluster-to target-master-id --cluster-slots slots --cluster-yes 5.\u4f01\u4e1a\u7ea7\u89e3\u51b3\u65b9\u6848 \u00b6 5.1 \u7f13\u5b58\u9884\u70ed \u00b6 \u573a\u666f \uff1a\u201c\u5b95\u673a\u201d \u670d\u52a1\u5668\u542f\u52a8\u540e\u8fc5\u901f\u5b95\u673a \u95ee\u9898\u6392\u67e5 \uff1a 1.\u8bf7\u6c42\u6570\u91cf\u8f83\u9ad8\uff0c\u5927\u91cf\u7684\u8bf7\u6c42\u8fc7\u6765\u4e4b\u540e\u90fd\u9700\u8981\u53bb\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u6570\u636e\uff0c\u4f46\u662f\u7f13\u5b58\u4e2d\u53c8\u6ca1\u6709\uff0c\u6b64\u65f6\u4ece\u6570\u636e\u5e93\u4e2d\u67e5\u627e\u6570\u636e\u7136\u540e\u5c06\u6570\u636e\u518d\u5b58\u5165\u7f13\u5b58\uff0c\u9020\u6210\u4e86\u77ed\u671f\u5185\u5bf9redis\u7684\u9ad8\u5f3a\u5ea6\u64cd\u4f5c\u4ece\u800c\u5bfc\u81f4\u95ee\u9898 2.\u4e3b\u4ece\u4e4b\u95f4\u6570\u636e\u541e\u5410\u91cf\u8f83\u5927\uff0c\u6570\u636e\u540c\u6b65\u64cd\u4f5c\u9891\u5ea6\u8f83\u9ad8 \u89e3\u51b3\u65b9\u6848\uff1a \u524d\u7f6e\u51c6\u5907\u5de5\u4f5c\uff1a 1.\u65e5\u5e38\u4f8b\u884c\u7edf\u8ba1\u6570\u636e\u8bbf\u95ee\u8bb0\u5f55\uff0c\u7edf\u8ba1\u8bbf\u95ee\u9891\u5ea6\u8f83\u9ad8\u7684\u70ed\u70b9\u6570\u636e 2.\u5229\u7528LRU\u6570\u636e\u5220\u9664\u7b56\u7565\uff0c\u6784\u5efa\u6570\u636e\u7559\u5b58\u961f\u5217\u4f8b\u5982\uff1astorm\u4e0ekafka\u914d\u5408 \u51c6\u5907\u5de5\u4f5c\uff1a 1.\u5c06\u7edf\u8ba1\u7ed3\u679c\u4e2d\u7684\u6570\u636e\u5206\u7c7b\uff0c\u6839\u636e\u7ea7\u522b\uff0credis\u4f18\u5148\u52a0\u8f7d\u7ea7\u522b\u8f83\u9ad8\u7684\u70ed\u70b9\u6570\u636e 2.\u5229\u7528\u5206\u5e03\u5f0f\u591a\u670d\u52a1\u5668\u540c\u65f6\u8fdb\u884c\u6570\u636e\u8bfb\u53d6\uff0c\u63d0\u901f\u6570\u636e\u52a0\u8f7d\u8fc7\u7a0b 3.\u70ed\u70b9\u6570\u636e\u4e3b\u4ece\u540c\u65f6\u9884\u70ed \u5b9e\u65bd\uff1a 4.\u4f7f\u7528\u811a\u672c\u7a0b\u5e8f\u56fa\u5b9a\u89e6\u53d1\u6570\u636e\u9884\u70ed\u8fc7\u7a0b 5.\u5982\u679c\u6761\u4ef6\u5141\u8bb8\uff0c\u4f7f\u7528\u4e86CDN\uff08\u5185\u5bb9\u5206\u53d1\u7f51\u7edc\uff09\uff0c\u6548\u679c\u4f1a\u66f4\u597d \u603b\u7684\u6765\u8bf4 \uff1a\u7f13\u5b58\u9884\u70ed\u5c31\u662f\u7cfb\u7edf\u542f\u52a8\u524d\uff0c\u63d0\u524d\u5c06\u76f8\u5173\u7684\u7f13\u5b58\u6570\u636e\u76f4\u63a5\u52a0\u8f7d\u5230\u7f13\u5b58\u7cfb\u7edf\u3002\u907f\u514d\u5728\u7528\u6237\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u5148\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u7136\u540e\u518d\u5c06\u6570\u636e\u7f13\u5b58\u7684\u95ee\u9898\uff01\u7528\u6237\u76f4\u63a5\u67e5\u8be2\u4e8b\u5148\u88ab\u9884\u70ed\u7684\u7f13\u5b58\u6570\u636e\uff01 5.2 \u7f13\u5b58\u96ea\u5d29 \u00b6 \u573a\u666f \uff1a\u6570\u636e\u5e93\u670d\u52a1\u5668\u5d29\u6e83\uff0c\u4e00\u8fde\u4e32\u7684\u573a\u666f\u4f1a\u968f\u4e4b\u513f\u6765 1.\u7cfb\u7edf\u5e73\u7a33\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5ffd\u7136\u6570\u636e\u5e93\u8fde\u63a5\u91cf\u6fc0\u589e 2.\u5e94\u7528\u670d\u52a1\u5668\u65e0\u6cd5\u53ca\u65f6\u5904\u7406\u8bf7\u6c42 3.\u5927\u91cf408\uff0c500\u9519\u8bef\u9875\u9762\u51fa\u73b0 4.\u5ba2\u6237\u53cd\u590d\u5237\u65b0\u9875\u9762\u83b7\u53d6\u6570\u636e 5.\u6570\u636e\u5e93\u5d29\u6e83 6.\u5e94\u7528\u670d\u52a1\u5668\u5d29\u6e83 7.\u91cd\u542f\u5e94\u7528\u670d\u52a1\u5668\u65e0\u6548 8.Redis\u670d\u52a1\u5668\u5d29\u6e83 9.Redis\u96c6\u7fa4\u5d29\u6e83 10.\u91cd\u542f\u6570\u636e\u5e93\u540e\u518d\u6b21\u88ab\u77ac\u95f4\u6d41\u91cf\u653e\u5012 \u95ee\u9898\u6392\u67e5 \uff1a 1.\u5728\u4e00\u4e2a\u8f83\u77ed\u7684\u65f6\u95f4\u5185\uff0c\u7f13\u5b58\u4e2d\u8f83\u591a\u7684key\u96c6\u4e2d\u8fc7\u671f 2.\u6b64\u5468\u671f\u5185\u8bf7\u6c42\u8bbf\u95ee\u8fc7\u671f\u7684\u6570\u636e\uff0credis\u672a\u547d\u4e2d\uff0credis\u5411\u6570\u636e\u5e93\u83b7\u53d6\u6570\u636e 3.\u6570\u636e\u5e93\u540c\u65f6\u63a5\u6536\u5230\u5927\u91cf\u7684\u8bf7\u6c42\u65e0\u6cd5\u53ca\u65f6\u5904\u7406 4.Redis\u5927\u91cf\u8bf7\u6c42\u88ab\u79ef\u538b\uff0c\u5f00\u59cb\u51fa\u73b0\u8d85\u65f6\u73b0\u8c61 5.\u6570\u636e\u5e93\u6d41\u91cf\u6fc0\u589e\uff0c\u6570\u636e\u5e93\u5d29\u6e83 6.\u91cd\u542f\u540e\u4ecd\u7136\u9762\u5bf9\u7f13\u5b58\u4e2d\u65e0\u6570\u636e\u53ef\u7528 7.Redis\u670d\u52a1\u5668\u8d44\u6e90\u88ab\u4e25\u91cd\u5360\u7528\uff0cRedis\u670d\u52a1\u5668\u5d29\u6e83 8.Redis\u96c6\u7fa4\u5448\u73b0\u5d29\u584c\uff0c\u96c6\u7fa4\u74e6\u89e3 9.\u5e94\u7528\u670d\u52a1\u5668\u65e0\u6cd5\u53ca\u65f6\u5f97\u5230\u6570\u636e\u54cd\u5e94\u8bf7\u6c42\uff0c\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u6570\u91cf\u8d8a\u6765\u8d8a\u591a\uff0c\u5e94\u7528\u670d\u52a1\u5668\u5d29\u6e83 10.\u5e94\u7528\u670d\u52a1\u5668\uff0credis\uff0c\u6570\u636e\u5e93\u5168\u90e8\u91cd\u542f\uff0c\u6548\u679c\u4e0d\u7406\u60f3 \u603b\u800c\u8a00\u4e4b\u5c31\u4e24\u70b9\uff1a\u77ed\u65f6\u95f4\u8303\u56f4\u5185\uff0c\u5927\u91cfkey\u96c6\u4e2d\u8fc7\u671f \u89e3\u51b3\u65b9\u6848 \u601d\u8def\uff1a 1.\u66f4\u591a\u7684\u9875\u9762\u9759\u6001\u5316\u5904\u7406 2.\u6784\u5efa\u591a\u7ea7\u7f13\u5b58\u67b6\u6784 Nginx\u7f13\u5b58+redis\u7f13\u5b58+ehcache\u7f13\u5b58 3.\u68c0\u6d4bMysql\u4e25\u91cd\u8017\u65f6\u4e1a\u52a1\u8fdb\u884c\u4f18\u5316 \u5bf9\u6570\u636e\u5e93\u7684\u74f6\u9888\u6392\u67e5\uff1a\u4f8b\u5982\u8d85\u65f6\u67e5\u8be2\u3001\u8017\u65f6\u8f83\u9ad8\u4e8b\u52a1\u7b49 4.\u707e\u96be\u9884\u8b66\u673a\u5236 \u76d1\u63a7redis\u670d\u52a1\u5668\u6027\u80fd\u6307\u6807 CPU\u5360\u7528\u3001CPU\u4f7f\u7528\u7387 \u5185\u5b58\u5bb9\u91cf \u67e5\u8be2\u5e73\u5747\u54cd\u5e94\u65f6\u95f4 \u7ebf\u7a0b\u6570 5.\u9650\u6d41\u3001\u964d\u7ea7 \u77ed\u65f6\u95f4\u8303\u56f4\u5185\u727a\u7272\u4e00\u4e9b\u5ba2\u6237\u4f53\u9a8c\uff0c\u9650\u5236\u4e00\u90e8\u5206\u8bf7\u6c42\u8bbf\u95ee\uff0c\u964d\u4f4e\u5e94\u7528\u670d\u52a1\u5668\u538b\u529b\uff0c\u5f85\u4e1a\u52a1\u4f4e\u901f\u8fd0\u8f6c\u540e\u518d\u9010\u6b65\u653e\u5f00\u8bbf\u95ee \u843d\u5730\u5b9e\u8df5\uff1a 1.LRU\u4e0eLFU\u5207\u6362 2.\u6570\u636e\u6709\u6548\u671f\u7b56\u7565\u8c03\u6574 \u6839\u636e\u4e1a\u52a1\u6570\u636e\u6709\u6548\u671f\u8fdb\u884c\u5206\u7c7b\u9519\u5cf0\uff0cA\u7c7b90\u5206\u949f\uff0cB\u7c7b80\u5206\u949f\uff0cC\u7c7b70\u5206\u949f \u8fc7\u671f\u65f6\u95f4\u4f7f\u7528\u56fa\u5b9a\u65f6\u95f4+\u968f\u673a\u503c\u7684\u5f62\u5f0f\uff0c\u7a00\u91ca\u96c6\u4e2d\u5230\u671f\u7684key\u7684\u6570\u91cf 3.\u8d85\u70ed\u6570\u636e\u4f7f\u7528\u6c38\u4e45key 4.\u5b9a\u671f\u7ef4\u62a4\uff08\u81ea\u52a8+\u4eba\u5de5\uff09 \u5bf9\u5373\u5c06\u8fc7\u671f\u6570\u636e\u505a\u8bbf\u95ee\u91cf\u5206\u6790\uff0c\u786e\u8ba4\u662f\u5426\u5ef6\u65f6\uff0c\u914d\u5408\u8bbf\u95ee\u91cf\u7edf\u8ba1\uff0c\u505a\u70ed\u70b9\u6570\u636e\u7684\u5ef6\u65f6 5.\u52a0\u9501\uff1a\u614e\u7528\uff01 \u603b\u7684\u6765\u8bf4 \uff1a\u7f13\u5b58\u96ea\u5d29\u5c31\u662f\u77ac\u95f4\u8fc7\u671f\u6570\u636e\u91cf\u592a\u5927\uff0c\u5bfc\u81f4\u5bf9\u6570\u636e\u5e93\u670d\u52a1\u5668\u9020\u6210\u538b\u529b\u3002\u5982\u80fd\u591f\u6709\u6548\u907f\u514d\u8fc7\u671f\u65f6\u95f4\u96c6\u4e2d\uff0c\u53ef\u4ee5\u6709\u6548\u89e3\u51b3\u96ea\u5d29\u73b0\u8c61\u7684 \u51fa\u73b0\uff08\u7ea640%\uff09\uff0c\u914d\u5408\u5176\u4ed6\u7b56\u7565\u4e00\u8d77\u4f7f\u7528\uff0c\u5e76\u76d1\u63a7\u670d\u52a1\u5668\u7684\u8fd0\u884c\u6570\u636e\uff0c\u6839\u636e\u8fd0\u884c\u8bb0\u5f55\u505a\u5feb\u901f\u8c03\u6574\u3002 5.3 \u7f13\u5b58\u51fb\u7a7f \u00b6 \u573a\u666f \uff1a\u8fd8\u662f\u6570\u636e\u5e93\u670d\u52a1\u5668\u5d29\u6e83\uff0c\u4f46\u662f\u8ddf\u4e4b\u524d\u7684\u573a\u666f\u6709\u70b9\u4e0d\u592a\u4e00\u6837 1.\u7cfb\u7edf\u5e73\u7a33\u8fd0\u884c\u8fc7\u7a0b\u4e2d 2.\u6570\u636e\u5e93\u8fde\u63a5\u91cf\u77ac\u95f4\u6fc0\u589e 3.Redis\u670d\u52a1\u5668\u65e0\u5927\u91cfkey\u8fc7\u671f 4.Redis\u5185\u5b58\u5e73\u7a33\uff0c\u65e0\u6ce2\u52a8 5.Redis\u670d\u52a1\u5668CPU\u6b63\u5e38 6.\u6570\u636e\u5e93\u5d29\u6e83 \u95ee\u9898\u6392\u67e5\uff1a 1.Redis\u4e2d\u67d0\u4e2akey\u8fc7\u671f\uff0c\u8be5key\u8bbf\u95ee\u91cf\u5de8\u5927 2.\u591a\u4e2a\u6570\u636e\u8bf7\u6c42\u4ece\u670d\u52a1\u5668\u76f4\u63a5\u538b\u5230Redis\u540e\uff0c\u5747\u672a\u547d\u4e2d 3.Redis\u5728\u77ed\u65f6\u95f4\u5185\u53d1\u8d77\u4e86\u5927\u91cf\u5bf9\u6570\u636e\u5e93\u4e2d\u540c\u4e00\u6570\u636e\u7684\u8bbf\u95ee \u603b\u800c\u8a00\u4e4b\u5c31\u4e24\u70b9\uff1a\u5355\u4e2akey\u9ad8\u70ed\u6570\u636e\uff0ckey\u8fc7\u671f \u89e3\u51b3\u65b9\u6848 \uff1a 1.\u9884\u5148\u8bbe\u5b9a \u4ee5\u7535\u5546\u4e3a\u4f8b\uff0c\u6bcf\u4e2a\u5546\u5bb6\u6839\u636e\u5e97\u94fa\u7b49\u7ea7\uff0c\u6307\u5b9a\u82e5\u5e72\u6b3e\u4e3b\u6253\u5546\u54c1\uff0c\u5728\u8d2d\u7269\u8282\u671f\u95f4\uff0c\u52a0\u5927\u6b64\u7c7b\u4fe1\u606fkey\u7684\u8fc7\u671f\u65f6\u957f \u6ce8\u610f\uff1a\u8d2d\u7269\u8282\u4e0d\u4ec5\u4ec5\u6307\u5f53\u5929\uff0c\u4ee5\u53ca\u540e\u7eed\u82e5\u5e72\u5929\uff0c\u8bbf\u95ee\u5cf0\u503c\u5448\u73b0\u9010\u6e10\u964d\u4f4e\u7684\u8d8b\u52bf 2.\u73b0\u573a\u8c03\u6574 \u76d1\u63a7\u8bbf\u95ee\u91cf\uff0c\u5bf9\u81ea\u7136\u6d41\u91cf\u6fc0\u589e\u7684\u6570\u636e\u5ef6\u957f\u8fc7\u671f\u65f6\u95f4\u6216\u8bbe\u7f6e\u4e3a\u6c38\u4e45\u6027key 3.\u540e\u53f0\u5237\u65b0\u6570\u636e \u542f\u52a8\u5b9a\u65f6\u4efb\u52a1\uff0c\u9ad8\u5cf0\u671f\u6765\u4e34\u4e4b\u524d\uff0c\u5237\u65b0\u6570\u636e\u6709\u6548\u671f\uff0c\u786e\u4fdd\u4e0d\u4e22\u5931 4.\u4e8c\u7ea7\u7f13\u5b58 \u8bbe\u7f6e\u4e0d\u540c\u7684\u5931\u6548\u65f6\u95f4\uff0c\u4fdd\u969c\u4e0d\u4f1a\u88ab\u540c\u65f6\u6dd8\u6c70\u5c31\u884c 5.\u52a0\u9501 \u5206\u5e03\u5f0f\u9501\uff0c\u9632\u6b62\u88ab\u51fb\u7a7f\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u4e5f\u662f\u6027\u80fd\u74f6\u9888\uff0c\u614e\u91cd\uff01 \u603b\u7684\u6765\u8bf4 \uff1a\u7f13\u5b58\u51fb\u7a7f\u5c31\u662f\u5355\u4e2a\u9ad8\u70ed\u6570\u636e\u8fc7\u671f\u7684\u77ac\u95f4\uff0c\u6570\u636e\u8bbf\u95ee\u91cf\u8f83\u5927\uff0c\u672a\u547d\u4e2dredis\u540e\uff0c\u53d1\u8d77\u4e86\u5927\u91cf\u5bf9\u540c\u4e00\u6570\u636e\u7684\u6570\u636e\u5e93\u8bbf\u95ee\uff0c\u5bfc\u81f4\u5bf9\u6570 \u636e\u5e93\u670d\u52a1\u5668\u9020\u6210\u538b\u529b\u3002\u5e94\u5bf9\u7b56\u7565\u5e94\u8be5\u5728\u4e1a\u52a1\u6570\u636e\u5206\u6790\u4e0e\u9884\u9632\u65b9\u9762\u8fdb\u884c\uff0c\u914d\u5408\u8fd0\u884c\u76d1\u63a7\u6d4b\u8bd5\u4e0e\u5373\u65f6\u8c03\u6574\u7b56\u7565\uff0c\u6bd5\u7adf\u5355\u4e2akey\u7684\u8fc7 \u671f\u76d1\u63a7\u96be\u5ea6\u8f83\u9ad8\uff0c\u914d\u5408\u96ea\u5d29\u5904\u7406\u7b56\u7565\u5373\u53ef\u3002 5.4 \u7f13\u5b58\u7a7f\u900f \u00b6 \u573a\u666f \uff1a\u6570\u636e\u5e93\u670d\u52a1\u5668\u53c8\u5d29\u6e83\u4e86\uff0c\u8ddf\u4e4b\u524d\u7684\u4e00\u6837\u5417\uff1f 1.\u7cfb\u7edf\u5e73\u7a33\u8fd0\u884c\u8fc7\u7a0b\u4e2d 2.\u5e94\u7528\u670d\u52a1\u5668\u6d41\u91cf\u968f\u65f6\u95f4\u589e\u91cf\u8f83\u5927 3.Redis\u670d\u52a1\u5668\u547d\u4e2d\u7387\u968f\u65f6\u95f4\u9010\u6b65\u964d\u4f4e 4.Redis\u5185\u5b58\u5e73\u7a33\uff0c\u5185\u5b58\u65e0\u538b\u529b 5.Redis\u670d\u52a1\u5668CPU\u5360\u7528\u6fc0\u589e 6.\u6570\u636e\u5e93\u670d\u52a1\u5668\u538b\u529b\u6fc0\u589e 7.\u6570\u636e\u5e93\u5d29\u6e83 \u95ee\u9898\u6392\u67e5\uff1a 1.Redis\u4e2d\u5927\u9762\u79ef\u51fa\u73b0\u672a\u547d\u4e2d 2.\u51fa\u73b0\u975e\u6b63\u5e38URL\u8bbf\u95ee \u95ee\u9898\u5206\u6790 \uff1a \u83b7\u53d6\u7684\u6570\u636e\u5728\u6570\u636e\u5e93\u4e2d\u4e5f\u4e0d\u5b58\u5728\uff0c\u6570\u636e\u5e93\u67e5\u8be2\u672a\u5f97\u5230\u5bf9\u5e94\u6570\u636e Redis\u83b7\u53d6\u5230null\u6570\u636e\u672a\u8fdb\u884c\u6301\u4e45\u5316\uff0c\u76f4\u63a5\u8fd4\u56de \u4e0b\u6b21\u6b64\u7c7b\u6570\u636e\u5230\u8fbe\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b \u51fa\u73b0\u9ed1\u5ba2\u653b\u51fb\u670d\u52a1\u5668 \u89e3\u51b3\u65b9\u6848 \uff1a 1.\u7f13\u5b58null \u5bf9\u67e5\u8be2\u7ed3\u679c\u4e3anull\u7684\u6570\u636e\u8fdb\u884c\u7f13\u5b58\uff08\u957f\u671f\u4f7f\u7528\uff0c\u5b9a\u671f\u6e05\u7406\uff09\uff0c\u8bbe\u5b9a\u77ed\u65f6\u9650\uff0c\u4f8b\u598230-60\u79d2\uff0c\u6700\u9ad85\u5206\u949f 2.\u767d\u540d\u5355\u7b56\u7565 \u63d0\u524d\u9884\u70ed\u5404\u79cd\u5206\u7c7b\u6570\u636eid\u5bf9\u5e94\u7684bitmaps\uff0cid\u4f5c\u4e3abitmaps\u7684offset\uff0c\u76f8\u5f53\u4e8e\u8bbe\u7f6e\u4e86\u6570\u636e\u767d\u540d\u5355\u3002\u5f53\u52a0\u8f7d\u6b63\u5e38\u6570\u636e\u65f6\u653e\u884c\uff0c\u52a0\u8f7d\u5f02\u5e38\u6570\u636e\u65f6\u76f4\u63a5\u62e6\u622a\uff08\u6548\u7387\u504f\u4f4e\uff09 \u4f7f\u7528\u5e03\u9686\u8fc7\u6ee4\u5668\uff08\u6709\u5173\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u547d\u4e2d\u95ee\u9898\u5bf9\u5f53\u524d\u72b6\u51b5\u53ef\u4ee5\u5ffd\u7565\uff09 2.\u5b9e\u65bd\u76d1\u63a7 \u5b9e\u65f6\u76d1\u63a7redis\u547d\u4e2d\u7387\uff08\u4e1a\u52a1\u6b63\u5e38\u8303\u56f4\u65f6\uff0c\u901a\u5e38\u4f1a\u6709\u4e00\u4e2a\u6ce2\u52a8\u503c\uff09\u4e0enull\u6570\u636e\u7684\u5360\u6bd4 \u975e\u6d3b\u52a8\u65f6\u6bb5\u6ce2\u52a8\uff1a\u901a\u5e38\u68c0\u6d4b3-5\u500d\uff0c\u8d85\u8fc75\u500d\u7eb3\u5165\u91cd\u70b9\u6392\u67e5\u5bf9\u8c61 \u6d3b\u52a8\u65f6\u6bb5\u6ce2\u52a8\uff1a\u901a\u5e38\u68c0\u6d4b10-50\u500d\uff0c\u8d85\u8fc750\u500d\u7eb3\u5165\u91cd\u70b9\u6392\u67e5\u5bf9\u8c61 \u6839\u636e\u500d\u6570\u4e0d\u540c\uff0c\u542f\u52a8\u4e0d\u540c\u7684\u6392\u67e5\u6d41\u7a0b\u3002\u7136\u540e\u4f7f\u7528\u9ed1\u540d\u5355\u8fdb\u884c\u9632\u63a7\uff08\u8fd0\u8425\uff09 4.key\u52a0\u5bc6 \u95ee\u9898\u51fa\u73b0\u540e\uff0c\u4e34\u65f6\u542f\u52a8\u9632\u707e\u4e1a\u52a1key\uff0c\u5bf9key\u8fdb\u884c\u4e1a\u52a1\u5c42\u4f20\u8f93\u52a0\u5bc6\u670d\u52a1\uff0c\u8bbe\u5b9a\u6821\u9a8c\u7a0b\u5e8f\uff0c\u8fc7\u6765\u7684key\u6821\u9a8c \u4f8b\u5982\u6bcf\u5929\u968f\u673a\u5206\u914d60\u4e2a\u52a0\u5bc6\u4e32\uff0c\u6311\u90092\u52303\u4e2a\uff0c\u6df7\u6dc6\u5230\u9875\u9762\u6570\u636eid\u4e2d\uff0c\u53d1\u73b0\u8bbf\u95eekey\u4e0d\u6ee1\u8db3\u89c4\u5219\uff0c\u9a73\u56de\u6570\u636e\u8bbf\u95ee \u603b\u7684\u6765\u8bf4 \uff1a\u7f13\u5b58\u51fb\u7a7f\u662f\u6307\u8bbf\u95ee\u4e86\u4e0d\u5b58\u5728\u7684\u6570\u636e\uff0c\u8df3\u8fc7\u4e86\u5408\u6cd5\u6570\u636e\u7684redis\u6570\u636e\u7f13\u5b58\u9636\u6bb5\uff0c\u6bcf\u6b21\u8bbf\u95ee\u6570\u636e\u5e93\uff0c\u5bfc\u81f4\u5bf9\u6570\u636e\u5e93\u670d\u52a1\u5668\u9020\u6210\u538b\u529b\u3002\u901a\u5e38\u6b64\u7c7b\u6570\u636e\u7684\u51fa\u73b0\u91cf\u662f\u4e00\u4e2a\u8f83\u4f4e\u7684\u503c\uff0c\u5f53\u51fa\u73b0\u6b64\u7c7b\u60c5\u51b5\u4ee5\u6bd2\u653b\u6bd2\uff0c\u5e76\u53ca\u65f6\u62a5\u8b66\u3002\u5e94\u5bf9\u7b56\u7565\u5e94\u8be5\u5728\u4e34\u65f6\u9884\u6848\u9632\u8303\u65b9\u9762\u591a\u505a\u6587\u7ae0\u3002 \u65e0\u8bba\u662f\u9ed1\u540d\u5355\u8fd8\u662f\u767d\u540d\u5355\uff0c\u90fd\u662f\u5bf9\u6574\u4f53\u7cfb\u7edf\u7684\u538b\u529b\uff0c\u8b66\u62a5\u89e3\u9664\u540e\u5c3d\u5feb\u79fb\u9664\u3002 5.5 \u6027\u80fd\u6307\u6807\u76d1\u63a7 \u00b6 redis\u4e2d\u7684\u76d1\u63a7\u6307\u6807\u5982\u4e0b\uff1a \u6027\u80fd\u6307\u6807\uff1aPerformance \u54cd\u5e94\u8bf7\u6c42\u7684\u5e73\u5747\u65f6\u95f4: properties latency \u5e73\u5747\u6bcf\u79d2\u5904\u7406\u8bf7\u6c42\u603b\u6570 properties instantaneous_ops_per_sec \u7f13\u5b58\u67e5\u8be2\u547d\u4e2d\u7387\uff08\u901a\u8fc7\u67e5\u8be2\u603b\u6b21\u6570\u4e0e\u67e5\u8be2\u5f97\u5230\u975enil\u6570\u636e\u603b\u6b21\u6570\u8ba1\u7b97\u800c\u6765\uff09 ```properties hit_rate(calculated) ``` \u5185\u5b58\u6307\u6807\uff1aMemory \u5f53\u524d\u5185\u5b58\u4f7f\u7528\u91cf properties used_memory \u5185\u5b58\u788e\u7247\u7387\uff08\u5173\u7cfb\u5230\u662f\u5426\u8fdb\u884c\u788e\u7247\u6574\u7406\uff09 properties mem_fragmentation_ratio \u4e3a\u907f\u514d\u5185\u5b58\u6ea2\u51fa\u5220\u9664\u7684key\u7684\u603b\u6570\u91cf properties evicted_keys \u57fa\u4e8e\u963b\u585e\u64cd\u4f5c\uff08BLPOP\u7b49\uff09\u5f71\u54cd\u7684\u5ba2\u6237\u7aef\u6570\u91cf properties blocked_clients \u57fa\u672c\u6d3b\u52a8\u6307\u6807\uff1aBasic_activity \u5f53\u524d\u5ba2\u6237\u7aef\u8fde\u63a5\u603b\u6570 properties connected_clients \u5f53\u524d\u8fde\u63a5slave\u603b\u6570 properties connected_slaves \u6700\u540e\u4e00\u6b21\u4e3b\u4ece\u4fe1\u606f\u4ea4\u6362\u8ddd\u73b0\u5728\u7684\u79d2 properties master_last_io_seconds_ago key\u7684\u603b\u6570 properties keyspace \u6301\u4e45\u6027\u6307\u6807\uff1aPersistence \u5f53\u524d\u670d\u52a1\u5668\u6700\u540e\u4e00\u6b21RDB\u6301\u4e45\u5316\u7684\u65f6\u95f4 properties rdb_last_save_time \u5f53\u524d\u670d\u52a1\u5668\u6700\u540e\u4e00\u6b21RDB\u6301\u4e45\u5316\u540e\u6570\u636e\u53d8\u5316\u603b\u91cf properties rdb_changes_since_last_save \u9519\u8bef\u6307\u6807\uff1aError \u88ab\u62d2\u7edd\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\u603b\u6570\uff08\u57fa\u4e8e\u8fbe\u5230\u6700\u5927\u8fde\u63a5\u503c\u7684\u56e0\u7d20\uff09 properties rejected_connections key\u672a\u547d\u4e2d\u7684\u603b\u6b21\u6570 properties keyspace_misses \u4e3b\u4ece\u65ad\u5f00\u7684\u79d2\u6570 properties master_link_down_since_seconds \u8981\u5bf9redis\u7684\u76f8\u5173\u6307\u6807\u8fdb\u884c\u76d1\u63a7\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u4e00\u4e9b\u7528\u5177\uff1a CloudInsight Redis Prometheus Redis-stat Redis-faina RedisLive zabbix \u4e5f\u6709\u4e00\u4e9b\u547d\u4ee4\u5de5\u5177\uff1a benchmark \u6d4b\u8bd5\u5f53\u524d\u670d\u52a1\u5668\u7684\u5e76\u53d1\u6027\u80fd properties redis-benchmark [-h ] [-p ] [-c ] [-n <requests]> [-k ] \u8303\u4f8b1\uff1a50\u4e2a\u8fde\u63a5\uff0c10000\u6b21\u8bf7\u6c42\u5bf9\u5e94\u7684\u6027\u80fd properties redis-benchmark \u8303\u4f8b2\uff1a100\u4e2a\u8fde\u63a5\uff0c5000\u6b21\u8bf7\u6c42\u5bf9\u5e94\u7684\u6027\u80fd properties redis-benchmark -c 100 -n 5000 redis-cli monitor\uff1a\u542f\u52a8\u670d\u52a1\u5668\u8c03\u8bd5\u4fe1\u606f properties monitor slowlog\uff1a\u6162\u65e5\u5fd7 \u83b7\u53d6\u6162\u67e5\u8be2\u65e5\u5fd7 properties slowlog [operator] get \uff1a\u83b7\u53d6\u6162\u67e5\u8be2\u65e5\u5fd7\u4fe1\u606f len \uff1a\u83b7\u53d6\u6162\u67e5\u8be2\u65e5\u5fd7\u6761\u76ee\u6570 reset \uff1a\u91cd\u7f6e\u6162\u67e5\u8be2\u65e5\u5fd7 \u76f8\u5173\u914d\u7f6e properties slowlog-log-slower-than 1000 #\u8bbe\u7f6e\u6162\u67e5\u8be2\u7684\u65f6\u95f4\u4e0b\u7ebf\uff0c\u5355\u4f4d\uff1a\u5fae\u5999 slowlog-max-len 100 #\u8bbe\u7f6e\u6162\u67e5\u8be2\u547d\u4ee4\u5bf9\u5e94\u7684\u65e5\u5fd7\u663e\u793a\u957f\u5ea6\uff0c\u5355\u4f4d\uff1a\u547d\u4ee4\u6570","title":"day02"},{"location":"redis/day02/#_1","text":"\u76ee\u68071\uff1a\u80fd\u591f\u8bf4\u51faredis\u4e2d\u7684\u6570\u636e\u5220\u9664\u7b56\u4e0e\u7565\u6dd8\u6c70\u7b56\u7565 \u76ee\u68072\uff1a\u80fd\u591f\u8bf4\u51fa\u4e3b\u4ece\u590d\u5236\u7684\u6982\u5ff5\uff0c\u5de5\u4f5c\u6d41\u7a0b\u4ee5\u53ca\u573a\u666f\u95ee\u9898\u53ca\u89e3\u51b3\u65b9\u6848 \u76ee\u68073\uff1a\u80fd\u591f\u8bf4\u51fa\u54e8\u5175\u7684\u4f5c\u7528\u4ee5\u53ca\u5de5\u4f5c\u539f\u7406\uff0c\u4ee5\u53ca\u5982\u4f55\u542f\u7528\u54e8\u5175 \u76ee\u68074\uff1a\u80fd\u591f\u8bf4\u51fa\u96c6\u7fa4\u7684\u67b6\u6784\u8bbe\u8ba1\uff0c\u5b8c\u6210\u96c6\u7fa4\u7684\u642d\u5efa \u76ee\u68075\uff1a\u80fd\u591f\u8bf4\u51fa\u7f13\u5b58\u9884\u70ed\uff0c\u96ea\u5d29\uff0c\u51fb\u7a7f\uff0c\u7a7f\u900f\u7684\u6982\u5ff5\uff0c\u80fd\u8bf4\u51faredis\u7684\u76f8\u5173\u76d1\u63a7\u6307\u6807","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"redis/day02/#1","text":"","title":"1.\u6570\u636e\u5220\u9664\u4e0e\u6dd8\u6c70\u7b56\u7565"},{"location":"redis/day02/#11","text":"","title":"1.1 \u8fc7\u671f\u6570\u636e"},{"location":"redis/day02/#111_redis","text":"Redis\u662f\u4e00\u79cd\u5185\u5b58\u7ea7\u6570\u636e\u5e93\uff0c\u6240\u6709\u6570\u636e\u5747\u5b58\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u5185\u5b58\u4e2d\u7684\u6570\u636e\u53ef\u4ee5\u901a\u8fc7TTL\u6307\u4ee4\u83b7\u53d6\u5176\u72b6\u6001 TTL\u8fd4\u56de\u7684\u503c\u6709\u4e09\u79cd\u60c5\u51b5\uff1a\u6b63\u6570\uff0c-1\uff0c-2 \u6b63\u6570 \uff1a\u4ee3\u8868\u8be5\u6570\u636e\u5728\u5185\u5b58\u4e2d\u8fd8\u80fd\u5b58\u6d3b\u7684\u65f6\u95f4 -1 \uff1a\u6c38\u4e45\u6709\u6548\u7684\u6570\u636e 2 \uff1a\u5df2\u7ecf\u8fc7\u671f\u7684\u6570\u636e \u6216\u88ab\u5220\u9664\u7684\u6570\u636e \u6216 \u672a\u5b9a\u4e49\u7684\u6570\u636e \u5220\u9664\u7b56\u7565\u5c31\u662f\u9488\u5bf9\u5df2\u8fc7\u671f\u6570\u636e\u7684\u5904\u7406\u7b56\u7565 \uff0c\u5df2\u8fc7\u671f\u7684\u6570\u636e\u662f\u771f\u7684\u5c31\u7acb\u5373\u5220\u9664\u4e86\u5417\uff1f\u5176\u5b9e\u4e5f\u4e0d\u662f\uff0c\u6211\u4eec\u4f1a\u6709\u591a\u79cd\u5220\u9664\u7b56\u7565\uff0c\u662f\u5206\u60c5\u51b5\u7684\uff0c\u5728\u4e0d\u540c\u7684\u573a\u666f\u4e0b\u4f7f\u7528\u4e0d\u540c\u7684\u5220\u9664\u65b9\u5f0f\u4f1a\u6709\u4e0d\u540c\u6548\u679c\uff0c\u8fd9\u4e5f\u6b63\u662f\u6211\u4eec\u8981\u5c06\u7684\u6570\u636e\u7684\u5220\u9664\u7b56\u7565\u7684\u95ee\u9898","title":"1.1.1 Redis\u4e2d\u7684\u6570\u636e\u7279\u5f81"},{"location":"redis/day02/#112","text":"\u5728Redis\u4e2d\uff0c\u5982\u4f55\u7ed9\u6570\u636e\u8bbe\u7f6e\u5b83\u7684\u5931\u6548\u5468\u671f\u5462\uff1f\u6570\u636e\u7684\u65f6\u6548\u5728redis\u4e2d\u5982\u4f55\u5b58\u50a8\u5462\uff1f \u8fc7\u671f\u6570\u636e\u662f\u4e00\u5757\u72ec\u7acb\u7684\u5b58\u50a8\u7a7a\u95f4\uff0cHash\u7ed3\u6784\uff0cfield\u662f\u5185\u5b58\u5730\u5740\uff0cvalue\u662f\u8fc7\u671f\u65f6\u95f4\uff0c\u4fdd\u5b58\u4e86\u6240\u6709key\u7684\u8fc7\u671f\u63cf\u8ff0\uff0c\u5728\u6700\u7ec8\u8fdb\u884c\u8fc7\u671f\u5904\u7406\u7684\u65f6\u5019\uff0c\u5bf9\u8be5\u7a7a\u95f4\u7684\u6570\u636e\u8fdb\u884c\u68c0\u6d4b\uff0c \u5f53\u65f6\u95f4\u5230\u671f\u4e4b\u540e\u901a\u8fc7field\u627e\u5230\u5185\u5b58\u8be5\u5730\u5740\u5904\u7684\u6570\u636e\uff0c\u7136\u540e\u8fdb\u884c\u76f8\u5173\u64cd\u4f5c\u3002","title":"1.1.2 \u65f6\u6548\u6027\u6570\u636e\u7684\u5b58\u50a8\u7ed3\u6784"},{"location":"redis/day02/#12","text":"","title":"1.2 \u6570\u636e\u5220\u9664\u7b56\u7565"},{"location":"redis/day02/#121","text":"\u5728\u5185\u5b58\u5360\u7528\u4e0eCPU\u5360\u7528\u4e4b\u95f4\u5bfb\u627e\u4e00\u79cd\u5e73\u8861\uff0c\u987e\u6b64\u5931\u5f7c\u90fd\u4f1a\u9020\u6210\u6574\u4f53redis\u6027\u80fd\u7684\u4e0b\u964d\uff0c\u751a\u81f3\u5f15\u53d1\u670d\u52a1\u5668\u5b95\u673a\u6216 \u5185\u5b58\u6cc4\u9732 \u9488\u5bf9\u8fc7\u671f\u6570\u636e\u8981\u8fdb\u884c\u5220\u9664\u7684\u65f6\u5019\u90fd\u6709\u54ea\u4e9b\u5220\u9664\u7b56\u7565\u5462\uff1f 1.\u5b9a\u65f6\u5220\u9664 2.\u60f0\u6027\u5220\u9664 3.\u5b9a\u671f\u5220\u9664","title":"1.2.1 \u6570\u636e\u5220\u9664\u7b56\u7565\u7684\u76ee\u6807"},{"location":"redis/day02/#122","text":"\u521b\u5efa\u4e00\u4e2a\u5b9a\u65f6\u5668\uff0c\u5f53key\u8bbe\u7f6e\u6709\u8fc7\u671f\u65f6\u95f4\uff0c\u4e14\u8fc7\u671f\u65f6\u95f4\u5230\u8fbe\u65f6\uff0c\u7531\u5b9a\u65f6\u5668\u4efb\u52a1\u7acb\u5373\u6267\u884c\u5bf9\u952e\u7684\u5220\u9664\u64cd\u4f5c \u4f18\u70b9 \uff1a\u8282\u7ea6\u5185\u5b58\uff0c\u5230\u65f6\u5c31\u5220\u9664\uff0c\u5feb\u901f\u91ca\u653e\u6389\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u5360\u7528 \u7f3a\u70b9 \uff1aCPU\u538b\u529b\u5f88\u5927\uff0c\u65e0\u8bbaCPU\u6b64\u65f6\u8d1f\u8f7d\u91cf\u591a\u9ad8\uff0c\u5747\u5360\u7528CPU\uff0c\u4f1a\u5f71\u54cdredis\u670d\u52a1\u5668\u54cd\u5e94\u65f6\u95f4\u548c\u6307\u4ee4\u541e\u5410\u91cf \u603b\u7ed3 \uff1a\u7528\u5904\u7406\u5668\u6027\u80fd\u6362\u53d6\u5b58\u50a8\u7a7a\u95f4\uff08\u62ff\u65f6\u95f4\u6362\u7a7a\u95f4\uff09","title":"1.2.2 \u5b9a\u65f6\u5220\u9664"},{"location":"redis/day02/#123","text":"\u6570\u636e\u5230\u8fbe\u8fc7\u671f\u65f6\u95f4\uff0c\u4e0d\u505a\u5904\u7406\u3002\u7b49\u4e0b\u6b21\u8bbf\u95ee\u8be5\u6570\u636e\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5224\u65ad \u5982\u679c\u672a\u8fc7\u671f\uff0c\u8fd4\u56de\u6570\u636e \u53d1\u73b0\u5df2\u8fc7\u671f\uff0c\u5220\u9664\uff0c\u8fd4\u56de\u4e0d\u5b58\u5728 \u4f18\u70b9 \uff1a\u8282\u7ea6CPU\u6027\u80fd\uff0c\u53d1\u73b0\u5fc5\u987b\u5220\u9664\u7684\u65f6\u5019\u624d\u5220\u9664 \u7f3a\u70b9 \uff1a\u5185\u5b58\u538b\u529b\u5f88\u5927\uff0c\u51fa\u73b0\u957f\u671f\u5360\u7528\u5185\u5b58\u7684\u6570\u636e \u603b\u7ed3 \uff1a\u7528\u5b58\u50a8\u7a7a\u95f4\u6362\u53d6\u5904\u7406\u5668\u6027\u80fd\uff08\u62ff\u65f6\u95f4\u6362\u7a7a\u95f4\uff09","title":"1.2.3 \u60f0\u6027\u5220\u9664"},{"location":"redis/day02/#124","text":"\u5b9a\u65f6\u5220\u9664\u548c\u60f0\u6027\u5220\u9664\u8fd9\u4e24\u79cd\u65b9\u6848\u90fd\u662f\u8d70\u7684\u6781\u7aef\uff0c\u90a3\u6709\u6ca1\u6709\u6298\u4e2d\u65b9\u6848\uff1f \u6211\u4eec\u6765\u8bb2redis\u7684\u5b9a\u671f\u5220\u9664\u65b9\u6848\uff1a Redis\u542f\u52a8\u670d\u52a1\u5668\u521d\u59cb\u5316\u65f6\uff0c\u8bfb\u53d6\u914d\u7f6eserver.hz\u7684\u503c\uff0c\u9ed8\u8ba4\u4e3a10 \u6bcf\u79d2\u949f\u6267\u884cserver.hz\u6b21 serverCron() --------> databasesCron() ---------> activeExpireCycle() activeExpireCycle() \u5bf9\u6bcf\u4e2aexpires[*]\u9010\u4e00\u8fdb\u884c\u68c0\u6d4b\uff0c\u6bcf\u6b21\u6267\u884c\u8017\u65f6\uff1a250ms/server.hz \u5bf9\u67d0\u4e2aexpires[*]\u68c0\u6d4b\u65f6\uff0c\u968f\u673a\u6311\u9009W\u4e2akey\u68c0\u6d4b \u5982\u679ckey\u8d85\u65f6\uff0c\u5220\u9664key \u5982\u679c\u4e00\u8f6e\u4e2d\u5220\u9664\u7684key\u7684\u6570\u91cf>W*25%\uff0c\u5faa\u73af\u8be5\u8fc7\u7a0b \u5982\u679c\u4e00\u8f6e\u4e2d\u5220\u9664\u7684key\u7684\u6570\u91cf\u2264W*25%\uff0c\u68c0\u67e5\u4e0b\u4e00\u4e2aexpires[*]\uff0c0-15\u5faa\u73af W\u53d6\u503c=ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP\u5c5e\u6027\u503c \u53c2\u6570current_db\u7528\u4e8e\u8bb0\u5f55 activeExpireCycle() \u8fdb\u5165\u54ea\u4e2aexpires[*] \u6267\u884c \u5982\u679cactiveExpireCycle()\u6267\u884c\u65f6\u95f4\u5230\u671f\uff0c\u4e0b\u6b21\u4ececurrent_db\u7ee7\u7eed\u5411\u4e0b\u6267\u884c \u603b\u7684\u6765\u8bf4\uff1a\u5b9a\u671f\u5220\u9664\u5c31\u662f\u5468\u671f\u6027\u8f6e\u8be2redis\u5e93\u4e2d\u7684\u65f6\u6548\u6027\u6570\u636e\uff0c\u91c7\u7528\u968f\u673a\u62bd\u53d6\u7684\u7b56\u7565\uff0c\u5229\u7528\u8fc7\u671f\u6570\u636e\u5360\u6bd4\u7684\u65b9\u5f0f\u63a7\u5236\u5220\u9664\u9891\u5ea6 \u7279\u70b91 \uff1aCPU\u6027\u80fd\u5360\u7528\u8bbe\u7f6e\u6709\u5cf0\u503c\uff0c\u68c0\u6d4b\u9891\u5ea6\u53ef\u81ea\u5b9a\u4e49\u8bbe\u7f6e \u7279\u70b92 \uff1a\u5185\u5b58\u538b\u529b\u4e0d\u662f\u5f88\u5927\uff0c\u957f\u671f\u5360\u7528\u5185\u5b58\u7684\u51b7\u6570\u636e\u4f1a\u88ab\u6301\u7eed\u6e05\u7406 \u603b\u7ed3 \uff1a\u5468\u671f\u6027\u62bd\u67e5\u5b58\u50a8\u7a7a\u95f4\uff08\u968f\u673a\u62bd\u67e5\uff0c\u91cd\u70b9\u62bd\u67e5\uff09","title":"1.2.4 \u5b9a\u671f\u5220\u9664"},{"location":"redis/day02/#125","text":"1\uff1a\u5b9a\u65f6\u5220\u9664\uff1a \u8282\u7ea6\u5185\u5b58\uff0c\u65e0\u5360\u7528, \u4e0d\u5206\u65f6\u6bb5\u5360\u7528CPU\u8d44\u6e90\uff0c\u9891\u5ea6\u9ad8, \u62ff\u65f6\u95f4\u6362\u7a7a\u95f4 2\uff1a\u60f0\u6027\u5220\u9664\uff1a \u5185\u5b58\u5360\u7528\u4e25\u91cd \u5ef6\u65f6\u6267\u884c\uff0cCPU\u5229\u7528\u7387\u9ad8 \u62ff\u7a7a\u95f4\u6362\u65f6\u95f4 3\uff1a\u5b9a\u671f\u5220\u9664\uff1a \u5185\u5b58\u5b9a\u671f\u968f\u673a\u6e05\u7406 \u6bcf\u79d2\u82b1\u8d39\u56fa\u5b9a\u7684CPU\u8d44\u6e90\u7ef4\u62a4\u5185\u5b58 \u968f\u673a\u62bd\u67e5\uff0c\u91cd\u70b9\u62bd\u67e5","title":"1.2.5 \u5220\u9664\u7b56\u7565\u5bf9\u6bd4"},{"location":"redis/day02/#13","text":"","title":"1.3 \u6570\u636e\u6dd8\u6c70\u7b56\u7565\uff08\u9010\u51fa\u7b97\u6cd5\uff09"},{"location":"redis/day02/#131","text":"\u4ec0\u4e48\u53eb\u6570\u636e\u6dd8\u6c70\u7b56\u7565\uff1f\u4ec0\u4e48\u6837\u7684\u5e94\u7528\u573a\u666f\u9700\u8981\u7528\u5230\u6570\u636e\u6dd8\u6c70\u7b56\u7565\uff1f \u5f53\u65b0\u6570\u636e\u8fdb\u5165redis\u65f6\uff0c\u5982\u679c\u5185\u5b58\u4e0d\u8db3\u600e\u4e48\u529e\uff1f\u5728\u6267\u884c\u6bcf\u4e00\u4e2a\u547d\u4ee4\u524d\uff0c\u4f1a\u8c03\u7528 freeMemoryIfNeeded() \u68c0\u6d4b\u5185\u5b58\u662f\u5426\u5145\u8db3\u3002\u5982\u679c\u5185\u5b58\u4e0d\u6ee1\u8db3\u65b0 \u52a0\u5165\u6570\u636e\u7684\u6700\u4f4e\u5b58\u50a8\u8981\u6c42\uff0credis\u8981\u4e34\u65f6\u5220\u9664\u4e00\u4e9b\u6570\u636e\u4e3a\u5f53\u524d\u6307\u4ee4\u6e05\u7406\u5b58\u50a8\u7a7a\u95f4\u3002\u6e05\u7406\u6570\u636e\u7684\u7b56\u7565\u79f0\u4e3a\u9010\u51fa\u7b97\u6cd5\u3002 \u6ce8\u610f\uff1a\u9010\u51fa\u6570\u636e\u7684\u8fc7\u7a0b\u4e0d\u662f100%\u80fd\u591f\u6e05\u7406\u51fa\u8db3\u591f\u7684\u53ef\u4f7f\u7528\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5982\u679c\u4e0d\u6210\u529f\u5219\u53cd\u590d\u6267\u884c\u3002\u5f53\u5bf9\u6240\u6709\u6570\u636e\u5c1d\u8bd5\u5b8c\u6bd5\uff0c \u5982\u4e0d\u80fd\u8fbe\u5230\u5185\u5b58\u6e05\u7406\u7684\u8981\u6c42\uff0c\u5c06\u51fa\u73b0\u9519\u8bef\u4fe1\u606f\u5982\u4e0b ( error ) OOM command not allowed when used memory > 'maxmemory'","title":"1.3.1 \u6dd8\u6c70\u7b56\u7565\u6982\u8ff0"},{"location":"redis/day02/#132","text":"\u5f71\u54cd\u6570\u636e\u6dd8\u6c70\u7684\u76f8\u5173\u914d\u7f6e\u5982\u4e0b\uff1a 1\uff1a\u6700\u5927\u53ef\u4f7f\u7528\u5185\u5b58\uff0c\u5373\u5360\u7528\u7269\u7406\u5185\u5b58\u7684\u6bd4\u4f8b\uff0c\u9ed8\u8ba4\u503c\u4e3a0\uff0c\u8868\u793a\u4e0d\u9650\u5236\u3002\u751f\u4ea7\u73af\u5883\u4e2d\u6839\u636e\u9700\u6c42\u8bbe\u5b9a\uff0c\u901a\u5e38\u8bbe\u7f6e\u572850%\u4ee5\u4e0a maxmemory ?mb 2\uff1a\u6bcf\u6b21\u9009\u53d6\u5f85\u5220\u9664\u6570\u636e\u7684\u4e2a\u6570\uff0c\u91c7\u7528\u968f\u673a\u83b7\u53d6\u6570\u636e\u7684\u65b9\u5f0f\u4f5c\u4e3a\u5f85\u68c0\u6d4b\u5220\u9664\u6570\u636e maxmemory-samples count 3\uff1a\u5bf9\u6570\u636e\u8fdb\u884c\u5220\u9664\u7684\u9009\u62e9\u7b56\u7565 maxmemory-policy policy \u90a3\u6570\u636e\u5220\u9664\u7684\u7b56\u7565policy\u5230\u5e95\u6709\u51e0\u79cd\u5462\uff1f\u4e00\u5171\u662f 3\u7c7b8\u79cd \u7b2c\u4e00\u7c7b \uff1a\u68c0\u6d4b\u6613\u5931\u6570\u636e\uff08\u53ef\u80fd\u4f1a\u8fc7\u671f\u7684\u6570\u636e\u96c6server.db[i].expires \uff09 volatile-lru\uff1a\u6311\u9009\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7684\u6570\u636e\u6dd8\u6c70 volatile-lfu\uff1a\u6311\u9009\u6700\u8fd1\u4f7f\u7528\u6b21\u6570\u6700\u5c11\u7684\u6570\u636e\u6dd8\u6c70 volatile-ttl\uff1a\u6311\u9009\u5c06\u8981\u8fc7\u671f\u7684\u6570\u636e\u6dd8\u6c70 volatile-random\uff1a\u4efb\u610f\u9009\u62e9\u6570\u636e\u6dd8\u6c70 \u7b2c\u4e8c\u7c7b \uff1a\u68c0\u6d4b\u5168\u5e93\u6570\u636e\uff08\u6240\u6709\u6570\u636e\u96c6server.db[i].dict \uff09 allkeys-lru\uff1a\u6311\u9009\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7684\u6570\u636e\u6dd8\u6c70 allkeLyRs-lfu\uff1a\uff1a\u6311\u9009\u6700\u8fd1\u4f7f\u7528\u6b21\u6570\u6700\u5c11\u7684\u6570\u636e\u6dd8\u6c70 allkeys-random\uff1a\u4efb\u610f\u9009\u62e9\u6570\u636e\u6dd8\u6c70\uff0c\u76f8\u5f53\u4e8e\u968f\u673a \u7b2c\u4e09\u7c7b \uff1a\u653e\u5f03\u6570\u636e\u9a71\u9010 no-enviction\uff08\u9a71\u9010\uff09\uff1a\u7981\u6b62\u9a71\u9010\u6570\u636e(redis4.0\u4e2d\u9ed8\u8ba4\u7b56\u7565)\uff0c\u4f1a\u5f15\u53d1OOM(Out Of Memory) \u6ce8\u610f\uff1a\u8fd9\u4e9b\u7b56\u7565\u662f\u914d\u7f6e\u5230\u54ea\u4e2a\u5c5e\u6027\u4e0a\uff1f\u600e\u4e48\u914d\u7f6e\uff1f\u5982\u4e0b\u6240\u793a maxmemory-policy volatile-lru \u6570\u636e\u6dd8\u6c70\u7b56\u7565\u914d\u7f6e\u4f9d\u636e \u4f7f\u7528INFO\u547d\u4ee4\u8f93\u51fa\u76d1\u63a7\u4fe1\u606f\uff0c\u67e5\u8be2\u7f13\u5b58 hit \u548c miss \u7684\u6b21\u6570\uff0c\u6839\u636e\u4e1a\u52a1\u9700\u6c42\u8c03\u4f18Redis\u914d\u7f6e","title":"1.3.2 \u7b56\u7565\u914d\u7f6e"},{"location":"redis/day02/#2","text":"","title":"2.\u4e3b\u4ece\u590d\u5236"},{"location":"redis/day02/#21","text":"","title":"2.1 \u4e3b\u4ece\u590d\u5236\u7b80\u4ecb"},{"location":"redis/day02/#211","text":"\u9996\u5148\u6211\u4eec\u8981\u7406\u89e3\u4e92\u8054\u7f51\u5e94\u7528\u56e0\u4e3a\u5176\u72ec\u6709\u7684\u7279\u6027\u6211\u4eec\u6f14\u5316\u51fa\u7684 \u4e09\u9ad8 \u67b6\u6784 \u9ad8\u5e76\u53d1 \u5e94\u7528\u8981\u63d0\u4f9b\u67d0\u4e00\u4e1a\u52a1\u8981\u80fd\u652f\u6301\u5f88\u591a\u5ba2\u6237\u7aef\u540c\u65f6\u8bbf\u95ee\u7684\u80fd\u529b\uff0c\u6211\u4eec\u79f0\u4e3a\u5e76\u53d1\uff0c\u9ad8\u5e76\u53d1\u610f\u601d\u5c31\u5f88\u660e\u786e\u4e86 \u9ad8\u6027\u80fd \u6027\u80fd\u5e26\u7ed9\u6211\u4eec\u6700\u76f4\u89c2\u7684\u611f\u53d7\u5c31\u662f\uff1a\u901f\u5ea6\u5feb\uff0c\u65f6\u95f4\u77ed \u9ad8\u53ef\u7528 \u53ef\u7528\u6027 \uff1a\u4e00\u5e74\u4e2d\u5e94\u7528\u670d\u52a1\u6b63\u5e38\u8fd0\u884c\u7684\u65f6\u95f4\u5360\u5168\u5e74\u65f6\u95f4\u7684\u767e\u5206\u6bd4\uff0c\u5982\u4e0b\u56fe\uff1a\u8868\u793a\u4e86\u5e94\u7528\u670d\u52a1\u5728\u5168\u5e74\u5b95\u673a\u7684\u65f6\u95f4 \u6211\u4eec\u628a\u8fd9\u4e9b\u65f6\u95f4\u52a0\u5728\u4e00\u8d77\u5c31\u662f\u5168\u5e74\u5e94\u7528\u670d\u52a1\u4e0d\u53ef\u7528\u7684\u65f6\u95f4\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5e94\u7528\u670d\u52a1\u5168\u5e74\u53ef\u7528\u7684\u65f6\u95f4 4\u5c0f\u65f627\u520615\u79d2+11\u520636\u79d2+2\u520616\u79d2=4\u5c0f\u65f641\u52067\u79d2=16867\u79d2 1\u5e74=365 24 60*60=31536000\u79d2 \u53ef\u7528\u6027=\uff0831536000-16867\uff09/31536000*100%=99.9465151% \u4e1a\u754c\u53ef\u7528\u6027\u76ee\u6807 5\u4e2a9\uff0c\u537399.999% \uff0c\u5373\u670d\u52a1\u5668\u5e74\u5b95\u673a\u65f6\u957f\u4f4e\u4e8e315\u79d2\uff0c\u7ea65.25\u5206\u949f","title":"2.1.1 \u9ad8\u53ef\u7528"},{"location":"redis/day02/#212","text":"\u77e5\u9053\u4e86\u4e09\u9ad8\u7684\u6982\u5ff5\u4e4b\u540e\uff0c\u6211\u4eec\u60f3\uff1a\u4f60\u7684\u201cRedis\u201d\u662f\u5426\u9ad8\u53ef\u7528\uff1f\u90a3\u6211\u4eec\u8981\u6765\u5206\u6790\u5355\u673aredis\u7684\u98ce\u9669\u4e0e\u95ee\u9898 \u95ee\u98981.\u673a\u5668\u6545\u969c \u73b0\u8c61\uff1a\u786c\u76d8\u6545\u969c\u3001\u7cfb\u7edf\u5d29\u6e83 \u672c\u8d28\uff1a\u6570\u636e\u4e22\u5931\uff0c\u5f88\u53ef\u80fd\u5bf9\u4e1a\u52a1\u9020\u6210\u707e\u96be\u6027\u6253\u51fb \u7ed3\u8bba\uff1a\u57fa\u672c\u4e0a\u4f1a\u653e\u5f03\u4f7f\u7528redis. \u95ee\u98982.\u5bb9\u91cf\u74f6\u9888 \u73b0\u8c61\uff1a\u5185\u5b58\u4e0d\u8db3\uff0c\u4ece16G\u5347\u7ea7\u523064G\uff0c\u4ece64G\u5347\u7ea7\u5230128G\uff0c\u65e0\u9650\u5347\u7ea7\u5185\u5b58 \u672c\u8d28\uff1a\u7a77\uff0c\u786c\u4ef6\u6761\u4ef6\u8ddf\u4e0d\u4e0a \u7ed3\u8bba\uff1a\u653e\u5f03\u4f7f\u7528redis \u7ed3\u8bba\uff1a \u4e3a\u4e86\u907f\u514d\u5355\u70b9Redis\u670d\u52a1\u5668\u6545\u969c\uff0c\u51c6\u5907\u591a\u53f0\u670d\u52a1\u5668\uff0c\u4e92\u76f8\u8fde\u901a\u3002\u5c06\u6570\u636e\u590d\u5236\u591a\u4e2a\u526f\u672c\u4fdd\u5b58\u5728\u4e0d\u540c\u7684\u670d\u52a1\u5668\u4e0a\uff0c\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u5e76\u4fdd\u8bc1\u6570\u636e\u662f\u540c\u6b65\u7684\u3002\u5373\u4f7f\u6709\u5176\u4e2d\u4e00\u53f0\u670d\u52a1\u5668\u5b95\u673a\uff0c\u5176\u4ed6\u670d\u52a1\u5668\u4f9d\u7136\u53ef\u4ee5\u7ee7\u7eed\u63d0\u4f9b\u670d\u52a1\uff0c\u5b9e\u73b0Redis\u7684\u9ad8\u53ef\u7528\uff0c\u540c\u65f6\u5b9e\u73b0\u6570\u636e\u5197\u4f59\u5907\u4efd\u3002 \u591a\u53f0\u670d\u52a1\u5668\u8fde\u63a5\u65b9\u6848\uff1a \u63d0\u4f9b\u6570\u636e\u65b9\uff1a master \u4e3b\u670d\u52a1\u5668\uff0c\u4e3b\u8282\u70b9\uff0c\u4e3b\u5e93\u4e3b\u5ba2\u6237\u7aef \u63a5\u6536\u6570\u636e\u65b9\uff1a slave \u4ece\u670d\u52a1\u5668\uff0c\u4ece\u8282\u70b9\uff0c\u4ece\u5e93 \u4ece\u5ba2\u6237\u7aef \u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\uff1a \u6570\u636e\u540c\u6b65\uff08master\u7684\u6570\u636e\u590d\u5236\u5230slave\u4e2d\uff09 \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u6765\u89e3\u91ca\u4e3b\u4ece\u590d\u5236\u7684\u6982\u5ff5\uff1a \u6982\u5ff5\uff1a\u4e3b\u4ece\u590d\u5236\u5373\u5c06master\u4e2d\u7684\u6570\u636e\u5373\u65f6\u3001\u6709\u6548\u7684\u590d\u5236\u5230slave\u4e2d \u7279\u5f81 \uff1a\u4e00\u4e2amaster\u53ef\u4ee5\u62e5\u6709\u591a\u4e2aslave\uff0c\u4e00\u4e2aslave\u53ea\u5bf9\u5e94\u4e00\u4e2amaster \u804c\u8d23 \uff1amaster\u548cslave\u5404\u81ea\u7684\u804c\u8d23\u4e0d\u4e00\u6837 master: \u5199\u6570\u636e \u6267\u884c\u5199\u64cd\u4f5c\u65f6\uff0c\u5c06\u51fa\u73b0\u53d8\u5316\u7684\u6570\u636e\u81ea\u52a8\u540c\u6b65\u5230slave \u8bfb\u6570\u636e\uff08\u53ef\u5ffd\u7565\uff09 slave: \u8bfb\u6570\u636e \u5199\u6570\u636e\uff08\u7981\u6b62\uff09","title":"2.1.2 \u4e3b\u4ece\u590d\u5236\u6982\u5ff5"},{"location":"redis/day02/#213","text":"\u8bfb\u5199\u5206\u79bb\uff1amaster\u5199\u3001slave\u8bfb\uff0c\u63d0\u9ad8\u670d\u52a1\u5668\u7684\u8bfb\u5199\u8d1f\u8f7d\u80fd\u529b \u8d1f\u8f7d\u5747\u8861\uff1a\u57fa\u4e8e\u4e3b\u4ece\u7ed3\u6784\uff0c\u914d\u5408\u8bfb\u5199\u5206\u79bb\uff0c\u7531slave\u5206\u62c5master\u8d1f\u8f7d\uff0c\u5e76\u6839\u636e\u9700\u6c42\u7684\u53d8\u5316\uff0c\u6539\u53d8slave\u7684\u6570 \u91cf\uff0c\u901a\u8fc7\u591a\u4e2a\u4ece\u8282\u70b9\u5206\u62c5\u6570\u636e\u8bfb\u53d6\u8d1f\u8f7d\uff0c\u5927\u5927\u63d0\u9ad8Redis\u670d\u52a1\u5668\u5e76\u53d1\u91cf\u4e0e\u6570\u636e\u541e\u5410\u91cf \u6545\u969c\u6062\u590d\uff1a\u5f53master\u51fa\u73b0\u95ee\u9898\u65f6\uff0c\u7531slave\u63d0\u4f9b\u670d\u52a1\uff0c\u5b9e\u73b0\u5feb\u901f\u7684\u6545\u969c\u6062\u590d \u6570\u636e\u5197\u4f59\uff1a\u5b9e\u73b0\u6570\u636e\u70ed\u5907\u4efd\uff0c\u662f\u6301\u4e45\u5316\u4e4b\u5916\u7684\u4e00\u79cd\u6570\u636e\u5197\u4f59\u65b9\u5f0f \u9ad8\u53ef\u7528\u57fa\u77f3\uff1a\u57fa\u4e8e\u4e3b\u4ece\u590d\u5236\uff0c\u6784\u5efa\u54e8\u5175\u6a21\u5f0f\u4e0e\u96c6\u7fa4\uff0c\u5b9e\u73b0Redis\u7684\u9ad8\u53ef\u7528\u65b9\u6848","title":"2.1.3 \u4e3b\u4ece\u590d\u5236\u7684\u4f5c\u7528"},{"location":"redis/day02/#22","text":"\u4e3b\u4ece\u590d\u5236\u8fc7\u7a0b\u5927\u4f53\u53ef\u4ee5\u5206\u4e3a3\u4e2a\u9636\u6bb5 \u5efa\u7acb\u8fde\u63a5\u9636\u6bb5\uff08\u5373\u51c6\u5907\u9636\u6bb5\uff09 \u6570\u636e\u540c\u6b65\u9636\u6bb5 \u547d\u4ee4\u4f20\u64ad\u9636\u6bb5\uff08\u53cd\u590d\u540c\u6b65\uff09 \u800c\u547d\u4ee4\u7684\u4f20\u64ad\u5176\u5b9e\u67094\u79cd\uff0c\u5206\u522b\u5982\u4e0b\uff1a","title":"2.2 \u4e3b\u4ece\u590d\u5236\u5de5\u4f5c\u6d41\u7a0b"},{"location":"redis/day02/#221","text":"","title":"2.2.1 \u4e3b\u4ece\u590d\u5236\u7684\u5de5\u4f5c\u6d41\u7a0b\uff08\u4e09\u4e2a\u9636\u6bb5\uff09"},{"location":"redis/day02/#2211","text":"\u5efa\u7acbslave\u5230master\u7684\u8fde\u63a5\uff0c\u4f7fmaster\u80fd\u591f\u8bc6\u522bslave\uff0c\u5e76\u4fdd\u5b58slave\u7aef\u53e3\u53f7 \u6d41\u7a0b\u5982\u4e0b\uff1a \u6b65\u9aa41\uff1a\u8bbe\u7f6emaster\u7684\u5730\u5740\u548c\u7aef\u53e3\uff0c\u4fdd\u5b58master\u4fe1\u606f \u6b65\u9aa42\uff1a\u5efa\u7acbsocket\u8fde\u63a5 \u6b65\u9aa43\uff1a\u53d1\u9001ping\u547d\u4ee4\uff08\u5b9a\u65f6\u5668\u4efb\u52a1\uff09 \u6b65\u9aa44\uff1a\u8eab\u4efd\u9a8c\u8bc1 \u6b65\u9aa45\uff1a\u53d1\u9001slave\u7aef\u53e3\u4fe1\u606f \u81f3\u6b64\uff0c\u4e3b\u4ece\u8fde\u63a5\u6210\u529f\uff01 \u5f53\u524d\u72b6\u6001\uff1a slave\uff1a\u4fdd\u5b58master\u7684\u5730\u5740\u4e0e\u7aef\u53e3 master\uff1a\u4fdd\u5b58slave\u7684\u7aef\u53e3 \u603b\u4f53\uff1a\u4e4b\u95f4\u521b\u5efa\u4e86\u8fde\u63a5\u7684socket master\u548cslave\u4e92\u8054 \u63a5\u4e0b\u6765\u5c31\u8981\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u5c06master\u548cslave\u8fde\u63a5\u5230\u4e00\u8d77 \u65b9\u5f0f\u4e00\uff1a\u5ba2\u6237\u7aef\u53d1\u9001\u547d\u4ee4 slaveof masterip masterport \u65b9\u5f0f\u4e8c\uff1a\u542f\u52a8\u670d\u52a1\u5668\u53c2\u6570 redis-server --slaveof masterip masterport \u65b9\u5f0f\u4e09\uff1a\u670d\u52a1\u5668\u914d\u7f6e\uff08 \u4e3b\u6d41\u65b9\u5f0f \uff09 slaveof masterip masterport slave\u7cfb\u7edf\u4fe1\u606f master_link_down_since_seconds masterhost & masterport master\u7cfb\u7edf\u4fe1\u606f uslave_listening_port(\u591a\u4e2a) \u4e3b\u4ece\u65ad\u5f00\u8fde\u63a5 \u65ad\u5f00slave\u4e0emaster\u7684\u8fde\u63a5\uff0cslave\u65ad\u5f00\u8fde\u63a5\u540e\uff0c\u4e0d\u4f1a\u5220\u9664\u5df2\u6709\u6570\u636e\uff0c\u53ea\u662f\u4e0d\u518d\u63a5\u53d7master\u53d1\u9001\u7684\u6570\u636e slaveof no one \u6388\u6743\u8bbf\u95ee master\u5ba2\u6237\u7aef\u53d1\u9001\u547d\u4ee4\u8bbe\u7f6e\u5bc6\u7801 requirepass password master\u914d\u7f6e\u6587\u4ef6\u8bbe\u7f6e\u5bc6\u7801 config set requirepass password config get requirepass slave\u5ba2\u6237\u7aef\u53d1\u9001\u547d\u4ee4\u8bbe\u7f6e\u5bc6\u7801 auth password slave\u914d\u7f6e\u6587\u4ef6\u8bbe\u7f6e\u5bc6\u7801 masterauth password slave\u542f\u52a8\u670d\u52a1\u5668\u8bbe\u7f6e\u5bc6\u7801 redis-server \u2013a password","title":"2.2.1.1 \u9636\u6bb5\u4e00\uff1a\u5efa\u7acb\u8fde\u63a5"},{"location":"redis/day02/#2212","text":"\u5728slave\u521d\u6b21\u8fde\u63a5master\u540e\uff0c\u590d\u5236master\u4e2d\u7684\u6240\u6709\u6570\u636e\u5230slave \u5c06slave\u7684\u6570\u636e\u5e93\u72b6\u6001\u66f4\u65b0\u6210master\u5f53\u524d\u7684\u6570\u636e\u5e93\u72b6\u6001 \u540c\u6b65\u8fc7\u7a0b\u5982\u4e0b\uff1a \u6b65\u9aa41\uff1a\u8bf7\u6c42\u540c\u6b65\u6570\u636e \u6b65\u9aa42\uff1a\u521b\u5efaRDB\u540c\u6b65\u6570\u636e \u6b65\u9aa43\uff1a\u6062\u590dRDB\u540c\u6b65\u6570\u636e \u6b65\u9aa44\uff1a\u8bf7\u6c42\u90e8\u5206\u540c\u6b65\u6570\u636e \u6b65\u9aa45\uff1a\u6062\u590d\u90e8\u5206\u540c\u6b65\u6570\u636e \u81f3\u6b64\uff0c\u6570\u636e\u540c\u6b65\u5de5\u4f5c\u5b8c\u6210\uff01 \u5f53\u524d\u72b6\u6001\uff1a slave\uff1a\u5177\u6709master\u7aef\u5168\u90e8\u6570\u636e\uff0c\u5305\u542bRDB\u8fc7\u7a0b\u63a5\u6536\u7684\u6570\u636e master\uff1a\u4fdd\u5b58slave\u5f53\u524d\u6570\u636e\u540c\u6b65\u7684\u4f4d\u7f6e \u603b\u4f53\uff1a\u4e4b\u95f4\u5b8c\u6210\u4e86\u6570\u636e\u514b\u9686 \u6570\u636e\u540c\u6b65\u9636\u6bb5master\u8bf4\u660e 1\uff1a\u5982\u679cmaster\u6570\u636e\u91cf\u5de8\u5927\uff0c\u6570\u636e\u540c\u6b65\u9636\u6bb5\u5e94\u907f\u5f00\u6d41\u91cf\u9ad8\u5cf0\u671f\uff0c\u907f\u514d\u9020\u6210master\u963b\u585e\uff0c\u5f71\u54cd\u4e1a\u52a1\u6b63\u5e38\u6267\u884c 2\uff1a\u590d\u5236\u7f13\u51b2\u533a\u5927\u5c0f\u8bbe\u5b9a\u4e0d\u5408\u7406\uff0c\u4f1a\u5bfc\u81f4\u6570\u636e\u6ea2\u51fa\u3002\u5982\u8fdb\u884c\u5168\u91cf\u590d\u5236\u5468\u671f\u592a\u957f\uff0c\u8fdb\u884c\u90e8\u5206\u590d\u5236\u65f6\u53d1\u73b0\u6570\u636e\u5df2\u7ecf\u5b58\u5728\u4e22\u5931\u7684\u60c5\u51b5\uff0c\u5fc5\u987b\u8fdb\u884c\u7b2c\u4e8c\u6b21\u5168\u91cf\u590d\u5236\uff0c\u81f4\u4f7fslave\u9677\u5165\u6b7b\u5faa\u73af\u72b6\u6001\u3002 repl-backlog-size ?mb master\u5355\u673a\u5185\u5b58\u5360\u7528\u4e3b\u673a\u5185\u5b58\u7684\u6bd4\u4f8b\u4e0d\u5e94\u8fc7\u5927\uff0c\u5efa\u8bae\u4f7f\u752850%-70%\u7684\u5185\u5b58\uff0c\u7559\u4e0b30%-50%\u7684\u5185\u5b58\u7528\u4e8e\u6267 \u884cbgsave\u547d\u4ee4\u548c\u521b\u5efa\u590d\u5236\u7f13\u51b2\u533a \u6570\u636e\u540c\u6b65\u9636\u6bb5slave\u8bf4\u660e \u4e3a\u907f\u514dslave\u8fdb\u884c\u5168\u91cf\u590d\u5236\u3001\u90e8\u5206\u590d\u5236\u65f6\u670d\u52a1\u5668\u54cd\u5e94\u963b\u585e\u6216\u6570\u636e\u4e0d\u540c\u6b65\uff0c\u5efa\u8bae\u5173\u95ed\u6b64\u671f\u95f4\u7684\u5bf9\u5916\u670d\u52a1 slave-serve-stale-data yes|no \u6570\u636e\u540c\u6b65\u9636\u6bb5\uff0cmaster\u53d1\u9001\u7ed9slave\u4fe1\u606f\u53ef\u4ee5\u7406\u89e3master\u662fslave\u7684\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0c\u4e3b\u52a8\u5411slave\u53d1\u9001\u547d\u4ee4 \u591a\u4e2aslave\u540c\u65f6\u5bf9master\u8bf7\u6c42\u6570\u636e\u540c\u6b65\uff0cmaster\u53d1\u9001\u7684RDB\u6587\u4ef6\u589e\u591a\uff0c\u4f1a\u5bf9\u5e26\u5bbd\u9020\u6210\u5de8\u5927\u51b2\u51fb\uff0c\u5982\u679cmaster\u5e26\u5bbd\u4e0d\u8db3\uff0c\u56e0\u6b64\u6570\u636e\u540c\u6b65\u9700\u8981\u6839\u636e\u4e1a\u52a1\u9700\u6c42\uff0c\u9002\u91cf\u9519\u5cf0 slave\u8fc7\u591a\u65f6\uff0c\u5efa\u8bae\u8c03\u6574\u62d3\u6251\u7ed3\u6784\uff0c\u7531\u4e00\u4e3b\u591a\u4ece\u7ed3\u6784\u53d8\u4e3a\u6811\u72b6\u7ed3\u6784\uff0c\u4e2d\u95f4\u7684\u8282\u70b9\u65e2\u662fmaster\uff0c\u4e5f\u662f slave\u3002\u6ce8\u610f\u4f7f\u7528\u6811\u72b6\u7ed3\u6784\u65f6\uff0c\u7531\u4e8e\u5c42\u7ea7\u6df1\u5ea6\uff0c\u5bfc\u81f4\u6df1\u5ea6\u8d8a\u9ad8\u7684slave\u4e0e\u6700\u9876\u5c42master\u95f4\u6570\u636e\u540c\u6b65\u5ef6\u8fdf \u8f83\u5927\uff0c\u6570\u636e\u4e00\u81f4\u6027\u53d8\u5dee\uff0c\u5e94\u8c28\u614e\u9009\u62e9","title":"2.2.1.2 \u9636\u6bb5\u4e8c\uff1a\u6570\u636e\u540c\u6b65"},{"location":"redis/day02/#2213","text":"\u5f53master\u6570\u636e\u5e93\u72b6\u6001\u88ab\u4fee\u6539\u540e\uff0c\u5bfc\u81f4\u4e3b\u4ece\u670d\u52a1\u5668\u6570\u636e\u5e93\u72b6\u6001\u4e0d\u4e00\u81f4\uff0c\u6b64\u65f6\u9700\u8981\u8ba9\u4e3b\u4ece\u6570\u636e\u540c\u6b65\u5230\u4e00\u81f4\u7684\u72b6\u6001\uff0c\u540c\u6b65\u7684\u52a8\u4f5c\u79f0\u4e3a\u547d\u4ee4\u4f20\u64ad master\u5c06\u63a5\u6536\u5230\u7684\u6570\u636e\u53d8\u66f4\u547d\u4ee4\u53d1\u9001\u7ed9slave\uff0cslave\u63a5\u6536\u547d\u4ee4\u540e\u6267\u884c\u547d\u4ee4 \u547d\u4ee4\u4f20\u64ad\u9636\u6bb5\u7684\u90e8\u5206\u590d\u5236 \u547d\u4ee4\u4f20\u64ad\u9636\u6bb5\u51fa\u73b0\u4e86\u65ad\u7f51\u73b0\u8c61\uff1a \u7f51\u7edc\u95ea\u65ad\u95ea\u8fde\uff1a\u5ffd\u7565 \u77ed\u65f6\u95f4\u7f51\u7edc\u4e2d\u65ad\uff1a\u90e8\u5206\u590d\u5236 \u957f\u65f6\u95f4\u7f51\u7edc\u4e2d\u65ad\uff1a\u5168\u91cf\u590d\u5236 \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u6765\u770b\u90e8\u5206\u590d\u5236\uff0c\u90e8\u5206\u590d\u5236\u7684\u4e09\u4e2a\u6838\u5fc3\u8981\u7d20 \u670d\u52a1\u5668\u7684\u8fd0\u884c id\uff08run id\uff09 \u4e3b\u670d\u52a1\u5668\u7684\u590d\u5236\u79ef\u538b\u7f13\u51b2\u533a \u4e3b\u4ece\u670d\u52a1\u5668\u7684\u590d\u5236\u504f\u79fb\u91cf \u670d\u52a1\u5668\u8fd0\u884cID\uff08runid\uff09 \u6982\u5ff5\uff1a\u670d\u52a1\u5668\u8fd0\u884cID\u662f\u6bcf\u4e00\u53f0\u670d\u52a1\u5668\u6bcf\u6b21\u8fd0\u884c\u7684\u8eab\u4efd\u8bc6\u522b\u7801\uff0c\u4e00\u53f0\u670d\u52a1\u5668\u591a\u6b21\u8fd0\u884c\u53ef\u4ee5\u751f\u6210\u591a\u4e2a\u8fd0\u884cid \u7ec4\u6210\uff1a\u8fd0\u884cid\u753140\u4f4d\u5b57\u7b26\u7ec4\u6210\uff0c\u662f\u4e00\u4e2a\u968f\u673a\u7684\u5341\u516d\u8fdb\u5236\u5b57\u7b26 \u4f8b\u5982\uff1afdc9ff13b9bbaab28db42b3d50f852bb5e3fcdce \u4f5c\u7528\uff1a\u8fd0\u884cid\u88ab\u7528\u4e8e\u5728\u670d\u52a1\u5668\u95f4\u8fdb\u884c\u4f20\u8f93\uff0c\u8bc6\u522b\u8eab\u4efd \u5982\u679c\u60f3\u4e24\u6b21\u64cd\u4f5c\u5747\u5bf9\u540c\u4e00\u53f0\u670d\u52a1\u5668\u8fdb\u884c\uff0c\u5fc5\u987b\u6bcf\u6b21\u64cd\u4f5c\u643a\u5e26\u5bf9\u5e94\u7684\u8fd0\u884cid\uff0c\u7528\u4e8e\u5bf9\u65b9\u8bc6\u522b \u5b9e\u73b0\u65b9\u5f0f\uff1a\u8fd0\u884cid\u5728\u6bcf\u53f0\u670d\u52a1\u5668\u542f\u52a8\u65f6\u81ea\u52a8\u751f\u6210\u7684\uff0cmaster\u5728\u9996\u6b21\u8fde\u63a5slave\u65f6\uff0c\u4f1a\u5c06\u81ea\u5df1\u7684\u8fd0\u884cID\u53d1\u9001\u7ed9slave\uff0c slave\u4fdd\u5b58\u6b64ID\uff0c\u901a\u8fc7info Server\u547d\u4ee4\uff0c\u53ef\u4ee5\u67e5\u770b\u8282\u70b9\u7684runid \u590d\u5236\u7f13\u51b2\u533a \u6982\u5ff5\uff1a\u590d\u5236\u7f13\u51b2\u533a\uff0c\u53c8\u540d\u590d\u5236\u79ef\u538b\u7f13\u51b2\u533a\uff0c\u662f\u4e00\u4e2a\u5148\u8fdb\u5148\u51fa\uff08FIFO\uff09\u7684\u961f\u5217\uff0c\u7528\u4e8e\u5b58\u50a8\u670d\u52a1\u5668\u6267\u884c\u8fc7\u7684\u547d\u4ee4\uff0c\u6bcf\u6b21\u4f20\u64ad\u547d\u4ee4\uff0cmaster\u90fd\u4f1a\u5c06\u4f20\u64ad\u7684\u547d\u4ee4\u8bb0\u5f55\u4e0b\u6765\uff0c\u5e76\u5b58\u50a8\u5728\u590d\u5236\u7f13\u51b2\u533a \u590d\u5236\u7f13\u51b2\u533a\u9ed8\u8ba4\u6570\u636e\u5b58\u50a8\u7a7a\u95f4\u5927\u5c0f\u662f1M \u5f53\u5165\u961f\u5143\u7d20\u7684\u6570\u91cf\u5927\u4e8e\u961f\u5217\u957f\u5ea6\u65f6\uff0c\u6700\u5148\u5165\u961f\u7684\u5143\u7d20\u4f1a\u88ab\u5f39\u51fa\uff0c\u800c\u65b0\u5143\u7d20\u4f1a\u88ab\u653e\u5165\u961f\u5217 \u4f5c\u7528\uff1a\u7528\u4e8e\u4fdd\u5b58master\u6536\u5230\u7684\u6240\u6709\u6307\u4ee4\uff08\u4ec5\u5f71\u54cd\u6570\u636e\u53d8\u66f4\u7684\u6307\u4ee4\uff0c\u4f8b\u5982set\uff0cselect\uff09 \u6570\u636e\u6765\u6e90\uff1a\u5f53master\u63a5\u6536\u5230\u4e3b\u5ba2\u6237\u7aef\u7684\u6307\u4ee4\u65f6\uff0c\u9664\u4e86\u5c06\u6307\u4ee4\u6267\u884c\uff0c\u4f1a\u5c06\u8be5\u6307\u4ee4\u5b58\u50a8\u5230\u7f13\u51b2\u533a\u4e2d \u590d\u5236\u7f13\u51b2\u533a\u5185\u90e8\u5de5\u4f5c\u539f\u7406\uff1a \u7ec4\u6210 \u504f\u79fb\u91cf \u6982\u5ff5\uff1a\u4e00\u4e2a\u6570\u5b57\uff0c\u63cf\u8ff0\u590d\u5236\u7f13\u51b2\u533a\u4e2d\u7684\u6307\u4ee4\u5b57\u8282\u4f4d\u7f6e \u5206\u7c7b\uff1a master\u590d\u5236\u504f\u79fb\u91cf\uff1a\u8bb0\u5f55\u53d1\u9001\u7ed9\u6240\u6709slave\u7684\u6307\u4ee4\u5b57\u8282\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff08\u591a\u4e2a\uff09 slave\u590d\u5236\u504f\u79fb\u91cf\uff1a\u8bb0\u5f55slave\u63a5\u6536master\u53d1\u9001\u8fc7\u6765\u7684\u6307\u4ee4\u5b57\u8282\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff08\u4e00\u4e2a\uff09 \u4f5c\u7528\uff1a\u540c\u6b65\u4fe1\u606f\uff0c\u6bd4\u5bf9master\u4e0eslave\u7684\u5dee\u5f02\uff0c\u5f53slave\u65ad\u7ebf\u540e\uff0c\u6062\u590d\u6570\u636e\u4f7f\u7528 \u6570\u636e\u6765\u6e90\uff1a master\u7aef\uff1a\u53d1\u9001\u4e00\u6b21\u8bb0\u5f55\u4e00\u6b21 slave\u7aef\uff1a\u63a5\u6536\u4e00\u6b21\u8bb0\u5f55\u4e00\u6b21 \u5b57\u8282\u503c \u5de5\u4f5c\u539f\u7406 \u901a\u8fc7offset\u533a\u5206\u4e0d\u540c\u7684slave\u5f53\u524d\u6570\u636e\u4f20\u64ad\u7684\u5dee\u5f02 master\u8bb0\u5f55\u5df2\u53d1\u9001\u7684\u4fe1\u606f\u5bf9\u5e94\u7684offset slave\u8bb0\u5f55\u5df2\u63a5\u6536\u7684\u4fe1\u606f\u5bf9\u5e94\u7684offset","title":"2.2.1.3 \u9636\u6bb5\u4e09\uff1a\u547d\u4ee4\u4f20\u64ad"},{"location":"redis/day02/#222","text":"\u6211\u4eec\u518d\u6b21\u7684\u603b\u7ed3\u4e00\u4e0b\u4e3b\u4ece\u590d\u5236\u7684\u4e09\u4e2a\u9636\u6bb5\u7684\u5de5\u4f5c\u6d41\u7a0b\uff1a","title":"2.2.2 \u6d41\u7a0b\u66f4\u65b0(\u5168\u91cf\u590d\u5236/\u90e8\u5206\u590d\u5236)"},{"location":"redis/day02/#223","text":"\u4ec0\u4e48\u662f\u5fc3\u8df3\u673a\u5236\uff1f \u8fdb\u5165\u547d\u4ee4\u4f20\u64ad\u9636\u6bb5\u5019\uff0cmaster\u4e0eslave\u95f4\u9700\u8981\u8fdb\u884c\u4fe1\u606f\u4ea4\u6362\uff0c\u4f7f\u7528\u5fc3\u8df3\u673a\u5236\u8fdb\u884c\u7ef4\u62a4\uff0c\u5b9e\u73b0\u53cc\u65b9\u8fde\u63a5\u4fdd\u6301\u5728\u7ebf master\u5fc3\u8df3\uff1a \u5185\u90e8\u6307\u4ee4\uff1aPING \u5468\u671f\uff1a\u7531repl-ping-slave-period\u51b3\u5b9a\uff0c\u9ed8\u8ba410\u79d2 \u4f5c\u7528\uff1a\u5224\u65adslave\u662f\u5426\u5728\u7ebf \u67e5\u8be2\uff1aINFO replication \u83b7\u53d6slave\u6700\u540e\u4e00\u6b21\u8fde\u63a5\u65f6\u95f4\u95f4\u9694\uff0clag\u9879\u7ef4\u6301\u57280\u62161\u89c6\u4e3a\u6b63\u5e38 slave\u5fc3\u8df3\u4efb\u52a1 \u5185\u90e8\u6307\u4ee4\uff1aREPLCONF ACK {offset} \u5468\u671f\uff1a1\u79d2 \u4f5c\u75281\uff1a\u6c47\u62a5slave\u81ea\u5df1\u7684\u590d\u5236\u504f\u79fb\u91cf\uff0c\u83b7\u53d6\u6700\u65b0\u7684\u6570\u636e\u53d8\u66f4\u6307\u4ee4 \u4f5c\u75282\uff1a\u5224\u65admaster\u662f\u5426\u5728\u7ebf \u5fc3\u8df3\u9636\u6bb5\u6ce8\u610f\u4e8b\u9879\uff1a \u5f53slave\u591a\u6570\u6389\u7ebf\uff0c\u6216\u5ef6\u8fdf\u8fc7\u9ad8\u65f6\uff0cmaster\u4e3a\u4fdd\u969c\u6570\u636e\u7a33\u5b9a\u6027\uff0c\u5c06\u62d2\u7edd\u6240\u6709\u4fe1\u606f\u540c\u6b65 min-slaves-to-write 2 min-slaves-max-lag 8 slave\u6570\u91cf\u5c11\u4e8e2\u4e2a\uff0c\u6216\u8005\u6240\u6709slave\u7684\u5ef6\u8fdf\u90fd\u5927\u4e8e\u7b49\u4e8e8\u79d2\u65f6\uff0c\u5f3a\u5236\u5173\u95edmaster\u5199\u529f\u80fd\uff0c\u505c\u6b62\u6570\u636e\u540c\u6b65 slave\u6570\u91cf\u7531slave\u53d1\u9001REPLCONF ACK\u547d\u4ee4\u505a\u786e\u8ba4 slave\u5ef6\u8fdf\u7531slave\u53d1\u9001REPLCONF ACK\u547d\u4ee4\u505a\u786e\u8ba4 \u81f3\u6b64\uff1a\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\u5b8c\u6574\u7684\u4e3b\u4ece\u590d\u5236\u6d41\u7a0b\uff1a","title":"2.2.3 \u5fc3\u8df3\u673a\u5236"},{"location":"redis/day02/#23","text":"","title":"2.3 \u4e3b\u4ece\u590d\u5236\u5e38\u89c1\u95ee\u9898"},{"location":"redis/day02/#231","text":"\u4f34\u968f\u7740\u7cfb\u7edf\u7684\u8fd0\u884c\uff0cmaster\u7684\u6570\u636e\u91cf\u4f1a\u8d8a\u6765\u8d8a\u5927\uff0c\u4e00\u65e6master\u91cd\u542f\uff0crunid\u5c06\u53d1\u751f\u53d8\u5316\uff0c\u4f1a\u5bfc\u81f4\u5168\u90e8slave\u7684\u5168\u91cf\u590d\u5236\u64cd\u4f5c \u5185\u90e8\u4f18\u5316\u8c03\u6574\u65b9\u6848\uff1a 1\uff1amaster\u5185\u90e8\u521b\u5efamaster_replid\u53d8\u91cf\uff0c\u4f7f\u7528runid\u76f8\u540c\u7684\u7b56\u7565\u751f\u6210\uff0c\u957f\u5ea641\u4f4d\uff0c\u5e76\u53d1\u9001\u7ed9\u6240\u6709slave 2\uff1a\u5728master\u5173\u95ed\u65f6\u6267\u884c\u547d\u4ee4shutdown save\uff0c\u8fdb\u884cRDB\u6301\u4e45\u5316,\u5c06runid\u4e0eoffset\u4fdd\u5b58\u5230RDB\u6587\u4ef6\u4e2d repl-id repl-offset \u901a\u8fc7redis-check-rdb\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u8be5\u4fe1\u606f 3\uff1amaster\u91cd\u542f\u540e\u52a0\u8f7dRDB\u6587\u4ef6\uff0c\u6062\u590d\u6570\u636e\uff0c\u91cd\u542f\u540e\uff0c\u5c06RDB\u6587\u4ef6\u4e2d\u4fdd\u5b58\u7684repl-id\u4e0erepl-offset\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d master_repl_id=repl master_repl_offset =repl-offset \u901a\u8fc7info\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u8be5\u4fe1\u606f \u4f5c\u7528\uff1a\u672c\u673a\u4fdd\u5b58\u4e0a\u6b21runid\uff0c\u91cd\u542f\u540e\u6062\u590d\u8be5\u503c\uff0c\u4f7f\u6240\u6709slave\u8ba4\u4e3a\u8fd8\u662f\u4e4b\u524d\u7684master \u7b2c\u4e8c\u79cd\u51fa\u73b0\u9891\u7e41\u5168\u91cf\u590d\u5236\u7684\u95ee\u9898\u73b0\u8c61\uff1a\u7f51\u7edc\u73af\u5883\u4e0d\u4f73\uff0c\u51fa\u73b0\u7f51\u7edc\u4e2d\u65ad\uff0cslave\u4e0d\u63d0\u4f9b\u670d\u52a1 \u95ee\u9898\u539f\u56e0\uff1a\u590d\u5236\u7f13\u51b2\u533a\u8fc7\u5c0f\uff0c\u65ad\u7f51\u540eslave\u7684offset\u8d8a\u754c\uff0c\u89e6\u53d1\u5168\u91cf\u590d\u5236 \u6700\u7ec8\u7ed3\u679c\uff1aslave\u53cd\u590d\u8fdb\u884c\u5168\u91cf\u590d\u5236 \u89e3\u51b3\u65b9\u6848\uff1a\u4fee\u6539\u590d\u5236\u7f13\u51b2\u533a\u5927\u5c0f repl-backlog-size ?mb \u5efa\u8bae\u8bbe\u7f6e\u5982\u4e0b\uff1a 1.\u6d4b\u7b97\u4ecemaster\u5230slave\u7684\u91cd\u8fde\u5e73\u5747\u65f6\u957fsecond 2.\u83b7\u53d6master\u5e73\u5747\u6bcf\u79d2\u4ea7\u751f\u5199\u547d\u4ee4\u6570\u636e\u603b\u91cfwrite_size_per_second 3.\u6700\u4f18\u590d\u5236\u7f13\u51b2\u533a\u7a7a\u95f4 = 2 * second * write_size_per_second","title":"2.3.1 \u9891\u7e41\u7684\u5168\u91cf\u590d\u5236"},{"location":"redis/day02/#232","text":"\u95ee\u9898\u73b0\u8c61\uff1amaster\u7684CPU\u5360\u7528\u8fc7\u9ad8 \u6216 slave\u9891\u7e41\u65ad\u5f00\u8fde\u63a5 \u95ee\u9898\u539f\u56e0 slave\u6bcf1\u79d2\u53d1\u9001REPLCONFACK\u547d\u4ee4\u5230master \u5f53slave\u63a5\u5230\u4e86\u6162\u67e5\u8be2\u65f6\uff08keys * \uff0chgetall\u7b49\uff09\uff0c\u4f1a\u5927\u91cf\u5360\u7528CPU\u6027\u80fd master\u6bcf1\u79d2\u8c03\u7528\u590d\u5236\u5b9a\u65f6\u51fd\u6570replicationCron()\uff0c\u6bd4\u5bf9slave\u53d1\u73b0\u957f\u65f6\u95f4\u6ca1\u6709\u8fdb\u884c\u54cd\u5e94 \u6700\u7ec8\u7ed3\u679c\uff1amaster\u5404\u79cd\u8d44\u6e90\uff08\u8f93\u51fa\u7f13\u51b2\u533a\u3001\u5e26\u5bbd\u3001\u8fde\u63a5\u7b49\uff09\u88ab\u4e25\u91cd\u5360\u7528 \u89e3\u51b3\u65b9\u6848\uff1a\u901a\u8fc7\u8bbe\u7f6e\u5408\u7406\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u786e\u8ba4\u662f\u5426\u91ca\u653eslave repl-timeout seconds \u8be5\u53c2\u6570\u5b9a\u4e49\u4e86\u8d85\u65f6\u65f6\u95f4\u7684\u9608\u503c\uff08\u9ed8\u8ba460\u79d2\uff09\uff0c\u8d85\u8fc7\u8be5\u503c\uff0c\u91ca\u653eslave \u95ee\u9898\u73b0\u8c61\uff1aslave\u4e0emaster\u8fde\u63a5\u65ad\u5f00 \u95ee\u9898\u539f\u56e0 master\u53d1\u9001ping\u6307\u4ee4\u9891\u5ea6\u8f83\u4f4e master\u8bbe\u5b9a\u8d85\u65f6\u65f6\u95f4\u8f83\u77ed ping\u6307\u4ee4\u5728\u7f51\u7edc\u4e2d\u5b58\u5728\u4e22\u5305 \u89e3\u51b3\u65b9\u6848\uff1a\u63d0\u9ad8ping\u6307\u4ee4\u53d1\u9001\u7684\u9891\u5ea6 repl-ping-slave-period seconds \u8d85\u65f6\u65f6\u95f4repl-time\u7684\u65f6\u95f4\u81f3\u5c11\u662fping\u6307\u4ee4\u9891\u5ea6\u76845\u523010\u500d\uff0c\u5426\u5219slave\u5f88\u5bb9\u6613\u5224\u5b9a\u8d85\u65f6","title":"2.3.2 \u9891\u7e41\u7684\u7f51\u7edc\u4e2d\u65ad"},{"location":"redis/day02/#233","text":"\u95ee\u9898\u73b0\u8c61\uff1a\u591a\u4e2aslave\u83b7\u53d6\u76f8\u540c\u6570\u636e\u4e0d\u540c\u6b65 \u95ee\u9898\u539f\u56e0\uff1a\u7f51\u7edc\u4fe1\u606f\u4e0d\u540c\u6b65\uff0c\u6570\u636e\u53d1\u9001\u6709\u5ef6\u8fdf \u89e3\u51b3\u65b9\u6848 \u4f18\u5316\u4e3b\u4ece\u95f4\u7684\u7f51\u7edc\u73af\u5883\uff0c\u901a\u5e38\u653e\u7f6e\u5728\u540c\u4e00\u4e2a\u673a\u623f\u90e8\u7f72\uff0c\u5982\u4f7f\u7528\u963f\u91cc\u4e91\u7b49\u4e91\u670d\u52a1\u5668\u65f6\u8981\u6ce8\u610f\u6b64\u73b0\u8c61 \u76d1\u63a7\u4e3b\u4ece\u8282\u70b9\u5ef6\u8fdf\uff08\u901a\u8fc7offset\uff09\u5224\u65ad\uff0c\u5982\u679cslave\u5ef6\u8fdf\u8fc7\u5927\uff0c\u6682\u65f6\u5c4f\u853d\u7a0b\u5e8f\u5bf9\u8be5slave\u7684\u6570\u636e\u8bbf\u95ee slave-serve-stale-data yes|no \u5f00\u542f\u540e\u4ec5\u54cd\u5e94info\u3001slaveof\u7b49\u5c11\u6570\u547d\u4ee4\uff08\u614e\u7528\uff0c\u9664\u975e\u5bf9\u6570\u636e\u4e00\u81f4\u6027\u8981\u6c42\u5f88\u9ad8\uff09","title":"2.3.3 \u6570\u636e\u4e0d\u4e00\u81f4"},{"location":"redis/day02/#3","text":"","title":"3.\u54e8\u5175\u6a21\u5f0f"},{"location":"redis/day02/#31","text":"","title":"3.1 \u54e8\u5175\u7b80\u4ecb"},{"location":"redis/day02/#311","text":"\u9996\u5148\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4e1a\u52a1\u573a\u666f\uff1a\u5982\u679credis\u7684master\u5b95\u673a\u4e86\uff0c\u6b64\u65f6\u5e94\u8be5\u600e\u4e48\u529e\uff1f \u90a3\u6b64\u65f6\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4ece\u4e00\u5806\u7684slave\u4e2d\u91cd\u65b0\u9009\u4e3e\u51fa\u4e00\u4e2a\u65b0\u7684master\uff0c\u90a3\u8fd9\u4e2a\u64cd\u4f5c\u8fc7\u7a0b\u662f\u4ec0\u4e48\u6837\u7684\u5462\uff1f\u8fd9\u91cc\u9762\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\u51fa\u73b0\u5462\uff1f \u8981\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd\uff0c\u6211\u4eec\u5c31\u9700\u8981redis\u7684\u54e8\u5175\uff0c\u90a3\u54e8\u5175\u662f\u4ec0\u4e48\u5462\uff1f \u54e8\u5175 \u54e8\u5175(sentinel) \u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf\uff0c\u7528\u4e8e\u5bf9\u4e3b\u4ece\u7ed3\u6784\u4e2d\u7684\u6bcf\u53f0\u670d\u52a1\u5668\u8fdb\u884c \u76d1\u63a7 \uff0c\u5f53\u51fa\u73b0\u6545\u969c\u65f6\u901a\u8fc7 \u6295\u7968 \u673a\u5236 \u9009\u62e9 \u65b0\u7684master\u5e76\u5c06\u6240\u6709slave\u8fde\u63a5\u5230\u65b0\u7684master\u3002","title":"3.1.1 \u54e8\u5175\u6982\u5ff5"},{"location":"redis/day02/#312","text":"\u54e8\u5175\u7684\u4f5c\u7528\uff1a \u76d1\u63a7\uff1a\u76d1\u63a7master\u548cslave \u4e0d\u65ad\u7684\u68c0\u67e5master\u548cslave\u662f\u5426\u6b63\u5e38\u8fd0\u884c master\u5b58\u6d3b\u68c0\u6d4b\u3001master\u4e0eslave\u8fd0\u884c\u60c5\u51b5\u68c0\u6d4b \u901a\u77e5\uff08\u63d0\u9192\uff09\uff1a\u5f53\u88ab\u76d1\u63a7\u7684\u670d\u52a1\u5668\u51fa\u73b0\u95ee\u9898\u65f6\uff0c\u5411\u5176\u4ed6\uff08\u54e8\u5175\u95f4\uff0c\u5ba2\u6237\u7aef\uff09\u53d1\u9001\u901a\u77e5 \u81ea\u52a8\u6545\u969c\u8f6c\u79fb\uff1a\u65ad\u5f00master\u4e0eslave\u8fde\u63a5\uff0c\u9009\u53d6\u4e00\u4e2aslave\u4f5c\u4e3amaster\uff0c\u5c06\u5176\u4ed6slave\u8fde\u63a5\u65b0\u7684master\uff0c\u5e76\u544a\u77e5\u5ba2\u6237\u7aef\u65b0\u7684\u670d\u52a1\u5668\u5730\u5740 \u6ce8\u610f\uff1a\u54e8\u5175\u4e5f\u662f\u4e00\u53f0redis\u670d\u52a1\u5668\uff0c\u53ea\u662f\u4e0d\u63d0\u4f9b\u6570\u636e\u76f8\u5173\u670d\u52a1\uff0c\u901a\u5e38\u54e8\u5175\u7684\u6570\u91cf\u914d\u7f6e\u4e3a\u5355\u6570","title":"3.1.2 \u54e8\u5175\u4f5c\u7528"},{"location":"redis/day02/#32","text":"\u914d\u7f6e\u54e8\u5175 \u914d\u7f6e\u4e00\u62d6\u4e8c\u7684\u4e3b\u4ece\u7ed3\u6784\uff08\u5229\u7528\u4e4b\u524d\u7684\u65b9\u5f0f\u542f\u52a8\u5373\u53ef\uff09 \u914d\u7f6e\u4e09\u4e2a\u54e8\u5175\uff08\u914d\u7f6e\u76f8\u540c\uff0c\u7aef\u53e3\u4e0d\u540c\uff09\uff0c\u53c2\u770bsentinel.conf 1\uff1a\u8bbe\u7f6e\u54e8\u5175\u76d1\u542c\u7684\u4e3b\u670d\u52a1\u5668\u4fe1\u606f\uff0c sentinel_number\u8868\u793a\u53c2\u4e0e\u6295\u7968\u7684\u54e8\u5175\u6570\u91cf sentinel monitor master_name master_host master_port sentinel_number 2\uff1a\u8bbe\u7f6e\u5224\u5b9a\u670d\u52a1\u5668\u5b95\u673a\u65f6\u957f\uff0c\u8be5\u8bbe\u7f6e\u63a7\u5236\u662f\u5426\u8fdb\u884c\u4e3b\u4ece\u5207\u6362 sentinel down-after-milliseconds master_name million_seconds 3\uff1a\u8bbe\u7f6e\u6545\u969c\u5207\u6362\u7684\u6700\u5927\u8d85\u65f6\u65f6 sentinel failover-timeout master_name million_seconds 4\uff1a\u8bbe\u7f6e\u4e3b\u4ece\u5207\u6362\u540e\uff0c\u540c\u65f6\u8fdb\u884c\u6570\u636e\u540c\u6b65\u7684slave\u6570\u91cf\uff0c\u6570\u503c\u8d8a\u5927\uff0c\u8981\u6c42\u7f51\u7edc\u8d44\u6e90\u8d8a\u9ad8\uff0c\u6570\u503c\u8d8a\u5c0f\uff0c\u540c\u6b65\u65f6\u95f4\u8d8a\u957f sentinel parallel-syncs master_name sync_slave_number \u542f\u52a8\u54e8\u5175 redis-sentinel filename","title":"3.2 \u542f\u7528\u54e8\u5175"},{"location":"redis/day02/#33","text":"\u54e8\u5175\u5728\u8fdb\u884c\u4e3b\u4ece\u5207\u6362\u8fc7\u7a0b\u4e2d\u7ecf\u5386\u4e09\u4e2a\u9636\u6bb5 \u76d1\u63a7 \u901a\u77e5 \u6545\u969c\u8f6c\u79fb","title":"3.3 \u54e8\u5175\u5de5\u4f5c\u539f\u7406"},{"location":"redis/day02/#331","text":"\u7528\u4e8e\u540c\u6b65\u5404\u4e2a\u8282\u70b9\u7684\u72b6\u6001\u4fe1\u606f \u83b7\u53d6\u5404\u4e2asentinel\u7684\u72b6\u6001\uff08\u662f\u5426\u5728\u7ebf\uff09 \u83b7\u53d6master\u7684\u72b6\u6001 master\u5c5e\u6027 prunid prole\uff1amaster \u5404\u4e2aslave\u7684\u8be6\u7ec6\u4fe1\u606f \u83b7\u53d6\u6240\u6709slave\u7684\u72b6\u6001\uff08\u6839\u636emaster\u4e2d\u7684slave\u4fe1\u606f\uff09 slave\u5c5e\u6027 prunid prole\uff1aslave pmaster_host\u3001master_port poffset \u5176\u5185\u90e8\u7684\u5de5\u4f5c\u539f\u7406\u5177\u4f53\u5982\u4e0b\uff1a","title":"3.3.1 \u76d1\u63a7"},{"location":"redis/day02/#332","text":"sentinel\u5728\u901a\u77e5\u9636\u6bb5\u8981\u4e0d\u65ad\u7684\u53bb\u83b7\u53d6master/slave\u7684\u4fe1\u606f\uff0c\u7136\u540e\u5728\u5404\u4e2asentinel\u4e4b\u95f4\u8fdb\u884c\u5171\u4eab\uff0c\u5177\u4f53\u7684\u6d41\u7a0b\u5982\u4e0b\uff1a","title":"3.3.2 \u901a\u77e5"},{"location":"redis/day02/#333","text":"\u5f53master\u5b95\u673a\u540esentinel\u662f\u5982\u4f55\u77e5\u6653\u5e76\u5224\u65ad\u51famaster\u662f\u771f\u7684\u5b95\u673a\u4e86\u5462\uff1f\u6211\u4eec\u6765\u770b\u5177\u4f53\u7684\u64cd\u4f5c\u6d41\u7a0b \u5f53sentinel\u8ba4\u5b9amaster\u4e0b\u7ebf\u4e4b\u540e\uff0c\u6b64\u65f6\u9700\u8981\u51b3\u5b9a\u66f4\u6362master\uff0c\u90a3\u8fd9\u4ef6\u4e8b\u7531\u54ea\u4e2asentinel\u6765\u505a\u5462\uff1f\u8fd9\u65f6\u5019sentinel\u4e4b\u95f4\u8981\u8fdb\u884c\u9009\u4e3e\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5728\u9009\u4e3e\u7684\u65f6\u5019\u6bcf\u4e00\u4e2a\u4eba\u624b\u91cc\u90fd\u6709\u4e00\u7968\uff0c\u800c\u6bcf\u4e00\u4e2a\u4eba\u7684\u53c8\u90fd\u60f3\u5f53\u8fd9\u4e2a\u5904\u7406\u4e8b\u6545\u7684\u4eba\uff0c\u90a3\u600e\u4e48\u529e\uff1f\u5927\u5bb6\u5c31\u5f00\u59cb\u62a2\uff0c\u4e8e\u662f\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u53d1\u51fa\u4e00\u4e2a\u6307\u4ee4\uff0c\u5728\u5185\u7f51\u91cc\u8fb9\u544a\u8bc9\u5927\u5bb6\u6211\u8981\u5f53\u9009\u4e3e\u4eba\uff0c\u6bd4\u5982\u8bf4\u73b0\u5728\u7684sentinel1\u548csentinel4\u53d1\u51fa\u8fd9\u4e2a\u9009\u4e3e\u6307\u4ee4\u4e86\uff0c\u90a3\u4e48sentinel2\u65e2\u80fd\u63a5\u5230sentinel1\u7684\u4e5f\u80fd\u63a5\u5230sentinel4\u7684\uff0c\u63a5\u5230\u4e86\u4ed6\u4eec\u7684\u7533\u8bf7\u4ee5\u540e\u5462\uff0csentinel2\u4ed6\u5c31\u4f1a\u628a\u4ed6\u7684\u4e00\u7968\u6295\u7ed9\u5176\u4e2d\u4e00\u65b9\uff0c\u6295\u7ed9\u8c01\u5462\uff1f\u8c01\u5148\u8fc7\u6765\u6211\u6295\u7ed9\u8c01\uff0c\u5047\u8bbesentinel1\u5148\u8fc7\u6765\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7968\u5c31\u7ed9\u5230\u4e86sentinel1\u3002\u90a3\u4e48\u7ed9\u8fc7\u53bb\u4ee5\u540e\u5462\uff0c\u73b0\u5728sentinel1\u5c31\u62ff\u5230\u4e86\u4e00\u7968\uff0c\u6309\u7167\u8fd9\u6837\u7684\u4e00\u79cd\u5f62\u5f0f\uff0c\u6700\u7ec8\u4f1a\u6709\u4e00\u4e2a\u9009\u4e3e\u7ed3\u679c\u3002\u5bf9\u5e94\u7684\u9009\u4e3e\u6700\u7ec8\u5f97\u7968\u591a\u7684\uff0c\u90a3\u81ea\u7136\u5c31\u6210\u4e3a\u4e86\u5904\u7406\u4e8b\u6545\u7684\u4eba\u3002\u9700\u8981\u6ce8\u610f\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6709\u53ef\u80fd\u4f1a\u5b58\u5728\u5931\u8d25\u7684\u73b0\u8c61\uff0c\u5c31\u662f\u4e00\u8f6e\u9009\u4e3e\u5b8c\u6ca1\u6709\u9009\u53d6\uff0c\u90a3\u5c31\u4f1a\u63a5\u7740\u8fdb\u884c\u7b2c\u4e8c\u8f6e\u7b2c\u4e09\u8f6e\u76f4\u5230\u5b8c\u6210\u9009\u4e3e\u3002 \u63a5\u4e0b\u6765\u5c31\u662f\u7531\u9009\u4e3e\u80dc\u51fa\u7684sentinel\u53bb\u4eceslave\u4e2d\u9009\u4e00\u4e2a\u65b0\u7684master\u51fa\u6765\u7684\u5de5\u4f5c\uff0c\u8fd9\u4e2a\u6d41\u7a0b\u662f\u4ec0\u4e48\u6837\u7684\u5462\uff1f \u9996\u5148\u5b83\u6709\u4e00\u4e2a\u5728\u670d\u52a1\u5668\u5217\u8868\u4e2d\u6311\u9009\u5907\u9009master\u7684\u539f\u5219 \u4e0d\u5728\u7ebf\u7684OUT \u54cd\u5e94\u6162\u7684OUT \u4e0e\u539fmaster\u65ad\u5f00\u65f6\u95f4\u4e45\u7684OUT \u4f18\u5148\u539f\u5219 \u4f18\u5148\u7ea7 offset runid \u9009\u51fa\u65b0\u7684master\u4e4b\u540e\uff0c\u53d1\u9001\u6307\u4ee4\uff08 sentinel \uff09\u7ed9\u5176\u4ed6\u7684slave\uff1a \u5411\u65b0\u7684master\u53d1\u9001slaveof no one \u5411\u5176\u4ed6slave\u53d1\u9001slaveof \u65b0masterIP\u7aef\u53e3 \u603b\u7ed3 \uff1a\u6545\u969c\u8f6c\u79fb\u9636\u6bb5 \u53d1\u73b0\u95ee\u9898\uff0c\u4e3b\u89c2\u4e0b\u7ebf\u4e0e\u5ba2\u89c2\u4e0b\u7ebf \u7ade\u9009\u8d1f\u8d23\u4eba \u4f18\u9009\u65b0master \u65b0master\u4e0a\u4efb\uff0c\u5176\u4ed6slave\u5207\u6362master\uff0c\u539fmaster\u4f5c\u4e3aslave\u6545\u969c\u6062\u590d\u540e\u8fde\u63a5","title":"3.3.3 \u6545\u969c\u8f6c\u79fb"},{"location":"redis/day02/#4cluster","text":"\u73b0\u72b6\u95ee\u9898\uff1a\u4e1a\u52a1\u53d1\u5c55\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u5cf0\u503c\u74f6\u9888 redis\u63d0\u4f9b\u7684\u670d\u52a1OPS\u53ef\u4ee5\u8fbe\u523010\u4e07/\u79d2\uff0c\u5f53\u524d\u4e1a\u52a1OPS\u5df2\u7ecf\u8fbe\u523010\u4e07/\u79d2 \u5185\u5b58\u5355\u673a\u5bb9\u91cf\u8fbe\u5230256G\uff0c\u5f53\u524d\u4e1a\u52a1\u9700\u6c42\u5185\u5b58\u5bb9\u91cf1T \u4f7f\u7528\u96c6\u7fa4\u7684\u65b9\u5f0f\u53ef\u4ee5\u5feb\u901f\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898","title":"4.\u96c6\u7fa4cluster"},{"location":"redis/day02/#41","text":"\u96c6\u7fa4\u5c31\u662f\u4f7f\u7528\u7f51\u7edc\u5c06\u82e5\u5e72\u53f0\u8ba1\u7b97\u673a\u8054\u901a\u8d77\u6765\uff0c\u5e76\u63d0\u4f9b\u7edf\u4e00\u7684\u7ba1\u7406\u65b9\u5f0f\uff0c\u4f7f\u5176\u5bf9\u5916\u5448\u73b0\u5355\u673a\u7684\u670d\u52a1\u6548\u679c \u96c6\u7fa4\u4f5c\u7528\uff1a \u5206\u6563\u5355\u53f0\u670d\u52a1\u5668\u7684\u8bbf\u95ee\u538b\u529b\uff0c\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861 \u5206\u6563\u5355\u53f0\u670d\u52a1\u5668\u7684\u5b58\u50a8\u538b\u529b\uff0c\u5b9e\u73b0\u53ef\u6269\u5c55\u6027 \u964d\u4f4e\u5355\u53f0\u670d\u52a1\u5668\u5b95\u673a\u5e26\u6765\u7684\u4e1a\u52a1\u707e\u96be","title":"4.1 \u96c6\u7fa4\u7b80\u4ecb"},{"location":"redis/day02/#42_cluster","text":"\u6570\u636e\u5b58\u50a8\u8bbe\u8ba1\uff1a \u901a\u8fc7\u7b97\u6cd5\u8bbe\u8ba1\uff0c\u8ba1\u7b97\u51fakey\u5e94\u8be5\u4fdd\u5b58\u7684\u4f4d\u7f6e \u5c06\u6240\u6709\u7684\u5b58\u50a8\u7a7a\u95f4\u8ba1\u5212\u5207\u5272\u621016384\u4efd\uff0c\u6bcf\u53f0\u4e3b\u673a\u4fdd\u5b58\u4e00\u90e8\u5206 \u6ce8\u610f\uff1a\u6bcf\u4efd\u4ee3\u8868\u7684\u662f\u4e00\u4e2a\u5b58\u50a8\u7a7a\u95f4\uff0c\u4e0d\u662f\u4e00\u4e2akey\u7684\u4fdd\u5b58\u7a7a\u95f4 \u5c06key\u6309\u7167\u8ba1\u7b97\u51fa\u7684\u7ed3\u679c\u653e\u5230\u5bf9\u5e94\u7684\u5b58\u50a8\u7a7a\u95f4 \u90a3redis\u7684\u96c6\u7fa4\u662f\u5982\u4f55\u589e\u5f3a\u53ef\u6269\u5c55\u6027\u7684\u5462\uff1f\u8b6c\u5982\u6211\u4eec\u8981\u589e\u52a0\u4e00\u4e2a\u96c6\u7fa4\u8282\u70b9 \u5f53\u6211\u4eec\u67e5\u627e\u6570\u636e\u65f6\uff0c\u96c6\u7fa4\u662f\u5982\u4f55\u64cd\u4f5c\u7684\u5462\uff1f \u5404\u4e2a\u6570\u636e\u5e93\u76f8\u4e92\u901a\u4fe1\uff0c\u4fdd\u5b58\u5404\u4e2a\u5e93\u4e2d\u69fd\u7684\u7f16\u53f7\u6570\u636e \u4e00\u6b21\u547d\u4e2d\uff0c\u76f4\u63a5\u8fd4\u56de \u4e00\u6b21\u672a\u547d\u4e2d\uff0c\u544a\u77e5\u5177\u4f53\u4f4d\u7f6e","title":"4.2 Cluster\u96c6\u7fa4\u7ed3\u6784\u8bbe\u8ba1"},{"location":"redis/day02/#43_cluster","text":"\u9996\u5148\u8981\u660e\u786e\u7684\u51e0\u4e2a\u8981\u70b9\uff1a \u914d\u7f6e\u670d\u52a1\u5668\uff083\u4e3b3\u4ece\uff09 \u5efa\u7acb\u901a\u4fe1\uff08Meet\uff09 \u5206\u69fd\uff08Slot\uff09 \u642d\u5efa\u4e3b\u4ece\uff08master-slave\uff09 Cluster\u914d\u7f6e \u662f\u5426\u542f\u7528cluster\uff0c\u52a0\u5165cluster\u8282\u70b9 cluster-enabled yes|no cluster\u914d\u7f6e\u6587\u4ef6\u540d\uff0c\u8be5\u6587\u4ef6\u5c5e\u4e8e\u81ea\u52a8\u751f\u6210\uff0c\u4ec5\u7528\u4e8e\u5feb\u901f\u67e5\u627e\u6587\u4ef6\u5e76\u67e5\u8be2\u6587\u4ef6\u5185\u5bb9 cluster-config-file filename \u8282\u70b9\u670d\u52a1\u54cd\u5e94\u8d85\u65f6\u65f6\u95f4\uff0c\u7528\u4e8e\u5224\u5b9a\u8be5\u8282\u70b9\u662f\u5426\u4e0b\u7ebf\u6216\u5207\u6362\u4e3a\u4ece\u8282\u70b9 cluster-node-timeout milliseconds master\u8fde\u63a5\u7684slave\u6700\u5c0f\u6570\u91cf cluster-migration-barrier min_slave_number Cluster\u8282\u70b9\u64cd\u4f5c\u547d\u4ee4 \u67e5\u770b\u96c6\u7fa4\u8282\u70b9\u4fe1\u606f cluster nodes \u66f4\u6539slave\u6307\u5411\u65b0\u7684master cluster replicate master-id \u53d1\u73b0\u4e00\u4e2a\u65b0\u8282\u70b9\uff0c\u65b0\u589emaster cluster meet ip : port \u5ffd\u7565\u4e00\u4e2a\u6ca1\u6709solt\u7684\u8282\u70b9 cluster forget server_id \u624b\u52a8\u6545\u969c\u8f6c\u79fb cluster failover \u96c6\u7fa4\u64cd\u4f5c\u547d\u4ee4\uff1a \u521b\u5efa\u96c6\u7fa4 redis-cli \u2013-cluster create masterhost1 : masterport1 masterhost2:masterport2 masterhost3:masterport3 [masterhostn:masterportn \u2026] slavehost1:slaveport1 slavehost2:slaveport2 slavehost3:slaveport3 -\u2013cluster-replicas n \u6ce8\u610f\uff1amaster\u4e0eslave\u7684\u6570\u91cf\u8981\u5339\u914d\uff0c\u4e00\u4e2amaster\u5bf9\u5e94n\u4e2aslave\uff0c\u7531\u6700\u540e\u7684\u53c2\u6570n\u51b3\u5b9a master\u4e0eslave\u7684\u5339\u914d\u987a\u5e8f\u4e3a\u7b2c\u4e00\u4e2amaster\u4e0e\u524dn\u4e2aslave\u5206\u4e3a\u4e00\u7ec4\uff0c\u5f62\u6210\u4e3b\u4ece\u7ed3\u6784 \u6dfb\u52a0master\u5230\u5f53\u524d\u96c6\u7fa4\u4e2d\uff0c\u8fde\u63a5\u65f6\u53ef\u4ee5\u6307\u5b9a\u4efb\u610f\u73b0\u6709\u8282\u70b9\u5730\u5740\u4e0e\u7aef\u53e3 redis-cli --cluster add-node new-master-host : new-master-port now-host:now-port \u6dfb\u52a0slave redis-cli --cluster add-node new-slave-host : new-slave-port master-host:master-port --cluster-slave --cluster-master-id masterid \u5220\u9664\u8282\u70b9\uff0c\u5982\u679c\u5220\u9664\u7684\u8282\u70b9\u662fmaster\uff0c\u5fc5\u987b\u4fdd\u969c\u5176\u4e2d\u6ca1\u6709\u69fdslot redis-cli --cluster del-node del-slave-host : del-slave-port del-slave-id \u91cd\u65b0\u5206\u69fd\uff0c\u5206\u69fd\u662f\u4ece\u5177\u6709\u69fd\u7684master\u4e2d\u5212\u5206\u4e00\u90e8\u5206\u7ed9\u5176\u4ed6master\uff0c\u8fc7\u7a0b\u4e2d\u4e0d\u521b\u5efa\u65b0\u7684\u69fd redis-cli --cluster reshard new-master-host : new-master:port --cluster-from src- master-id1, src-master-id2, src-master-idn --cluster-to target-master-id -- cluster-slots slots \u6ce8\u610f\uff1a\u5c06\u9700\u8981\u53c2\u4e0e\u5206\u69fd\u7684\u6240\u6709masterid\u4e0d\u5206\u5148\u540e\u987a\u5e8f\u6dfb\u52a0\u5230\u53c2\u6570\u4e2d\uff0c\u4f7f\u7528\uff0c\u5206\u9694 \u6307\u5b9a\u76ee\u6807\u5f97\u5230\u7684\u69fd\u7684\u6570\u91cf\uff0c\u6240\u6709\u7684\u69fd\u5c06\u5e73\u5747\u4ece\u6bcf\u4e2a\u6765\u6e90\u7684master\u5904\u83b7\u53d6 \u91cd\u65b0\u5206\u914d\u69fd\uff0c\u4ece\u5177\u6709\u69fd\u7684master\u4e2d\u5206\u914d\u6307\u5b9a\u6570\u91cf\u7684\u69fd\u5230\u53e6\u4e00\u4e2amaster\u4e2d\uff0c\u5e38\u7528\u4e8e\u6e05\u7a7a\u6307\u5b9amaster\u4e2d\u7684\u69fd redis-cli --cluster reshard src-master-host : src-master-port --cluster-from src- master-id --cluster-to target-master-id --cluster-slots slots --cluster-yes","title":"4.3 Cluster\u96c6\u7fa4\u7ed3\u6784\u642d\u5efa"},{"location":"redis/day02/#5","text":"","title":"5.\u4f01\u4e1a\u7ea7\u89e3\u51b3\u65b9\u6848"},{"location":"redis/day02/#51","text":"\u573a\u666f \uff1a\u201c\u5b95\u673a\u201d \u670d\u52a1\u5668\u542f\u52a8\u540e\u8fc5\u901f\u5b95\u673a \u95ee\u9898\u6392\u67e5 \uff1a 1.\u8bf7\u6c42\u6570\u91cf\u8f83\u9ad8\uff0c\u5927\u91cf\u7684\u8bf7\u6c42\u8fc7\u6765\u4e4b\u540e\u90fd\u9700\u8981\u53bb\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u6570\u636e\uff0c\u4f46\u662f\u7f13\u5b58\u4e2d\u53c8\u6ca1\u6709\uff0c\u6b64\u65f6\u4ece\u6570\u636e\u5e93\u4e2d\u67e5\u627e\u6570\u636e\u7136\u540e\u5c06\u6570\u636e\u518d\u5b58\u5165\u7f13\u5b58\uff0c\u9020\u6210\u4e86\u77ed\u671f\u5185\u5bf9redis\u7684\u9ad8\u5f3a\u5ea6\u64cd\u4f5c\u4ece\u800c\u5bfc\u81f4\u95ee\u9898 2.\u4e3b\u4ece\u4e4b\u95f4\u6570\u636e\u541e\u5410\u91cf\u8f83\u5927\uff0c\u6570\u636e\u540c\u6b65\u64cd\u4f5c\u9891\u5ea6\u8f83\u9ad8 \u89e3\u51b3\u65b9\u6848\uff1a \u524d\u7f6e\u51c6\u5907\u5de5\u4f5c\uff1a 1.\u65e5\u5e38\u4f8b\u884c\u7edf\u8ba1\u6570\u636e\u8bbf\u95ee\u8bb0\u5f55\uff0c\u7edf\u8ba1\u8bbf\u95ee\u9891\u5ea6\u8f83\u9ad8\u7684\u70ed\u70b9\u6570\u636e 2.\u5229\u7528LRU\u6570\u636e\u5220\u9664\u7b56\u7565\uff0c\u6784\u5efa\u6570\u636e\u7559\u5b58\u961f\u5217\u4f8b\u5982\uff1astorm\u4e0ekafka\u914d\u5408 \u51c6\u5907\u5de5\u4f5c\uff1a 1.\u5c06\u7edf\u8ba1\u7ed3\u679c\u4e2d\u7684\u6570\u636e\u5206\u7c7b\uff0c\u6839\u636e\u7ea7\u522b\uff0credis\u4f18\u5148\u52a0\u8f7d\u7ea7\u522b\u8f83\u9ad8\u7684\u70ed\u70b9\u6570\u636e 2.\u5229\u7528\u5206\u5e03\u5f0f\u591a\u670d\u52a1\u5668\u540c\u65f6\u8fdb\u884c\u6570\u636e\u8bfb\u53d6\uff0c\u63d0\u901f\u6570\u636e\u52a0\u8f7d\u8fc7\u7a0b 3.\u70ed\u70b9\u6570\u636e\u4e3b\u4ece\u540c\u65f6\u9884\u70ed \u5b9e\u65bd\uff1a 4.\u4f7f\u7528\u811a\u672c\u7a0b\u5e8f\u56fa\u5b9a\u89e6\u53d1\u6570\u636e\u9884\u70ed\u8fc7\u7a0b 5.\u5982\u679c\u6761\u4ef6\u5141\u8bb8\uff0c\u4f7f\u7528\u4e86CDN\uff08\u5185\u5bb9\u5206\u53d1\u7f51\u7edc\uff09\uff0c\u6548\u679c\u4f1a\u66f4\u597d \u603b\u7684\u6765\u8bf4 \uff1a\u7f13\u5b58\u9884\u70ed\u5c31\u662f\u7cfb\u7edf\u542f\u52a8\u524d\uff0c\u63d0\u524d\u5c06\u76f8\u5173\u7684\u7f13\u5b58\u6570\u636e\u76f4\u63a5\u52a0\u8f7d\u5230\u7f13\u5b58\u7cfb\u7edf\u3002\u907f\u514d\u5728\u7528\u6237\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u5148\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u7136\u540e\u518d\u5c06\u6570\u636e\u7f13\u5b58\u7684\u95ee\u9898\uff01\u7528\u6237\u76f4\u63a5\u67e5\u8be2\u4e8b\u5148\u88ab\u9884\u70ed\u7684\u7f13\u5b58\u6570\u636e\uff01","title":"5.1 \u7f13\u5b58\u9884\u70ed"},{"location":"redis/day02/#52","text":"\u573a\u666f \uff1a\u6570\u636e\u5e93\u670d\u52a1\u5668\u5d29\u6e83\uff0c\u4e00\u8fde\u4e32\u7684\u573a\u666f\u4f1a\u968f\u4e4b\u513f\u6765 1.\u7cfb\u7edf\u5e73\u7a33\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5ffd\u7136\u6570\u636e\u5e93\u8fde\u63a5\u91cf\u6fc0\u589e 2.\u5e94\u7528\u670d\u52a1\u5668\u65e0\u6cd5\u53ca\u65f6\u5904\u7406\u8bf7\u6c42 3.\u5927\u91cf408\uff0c500\u9519\u8bef\u9875\u9762\u51fa\u73b0 4.\u5ba2\u6237\u53cd\u590d\u5237\u65b0\u9875\u9762\u83b7\u53d6\u6570\u636e 5.\u6570\u636e\u5e93\u5d29\u6e83 6.\u5e94\u7528\u670d\u52a1\u5668\u5d29\u6e83 7.\u91cd\u542f\u5e94\u7528\u670d\u52a1\u5668\u65e0\u6548 8.Redis\u670d\u52a1\u5668\u5d29\u6e83 9.Redis\u96c6\u7fa4\u5d29\u6e83 10.\u91cd\u542f\u6570\u636e\u5e93\u540e\u518d\u6b21\u88ab\u77ac\u95f4\u6d41\u91cf\u653e\u5012 \u95ee\u9898\u6392\u67e5 \uff1a 1.\u5728\u4e00\u4e2a\u8f83\u77ed\u7684\u65f6\u95f4\u5185\uff0c\u7f13\u5b58\u4e2d\u8f83\u591a\u7684key\u96c6\u4e2d\u8fc7\u671f 2.\u6b64\u5468\u671f\u5185\u8bf7\u6c42\u8bbf\u95ee\u8fc7\u671f\u7684\u6570\u636e\uff0credis\u672a\u547d\u4e2d\uff0credis\u5411\u6570\u636e\u5e93\u83b7\u53d6\u6570\u636e 3.\u6570\u636e\u5e93\u540c\u65f6\u63a5\u6536\u5230\u5927\u91cf\u7684\u8bf7\u6c42\u65e0\u6cd5\u53ca\u65f6\u5904\u7406 4.Redis\u5927\u91cf\u8bf7\u6c42\u88ab\u79ef\u538b\uff0c\u5f00\u59cb\u51fa\u73b0\u8d85\u65f6\u73b0\u8c61 5.\u6570\u636e\u5e93\u6d41\u91cf\u6fc0\u589e\uff0c\u6570\u636e\u5e93\u5d29\u6e83 6.\u91cd\u542f\u540e\u4ecd\u7136\u9762\u5bf9\u7f13\u5b58\u4e2d\u65e0\u6570\u636e\u53ef\u7528 7.Redis\u670d\u52a1\u5668\u8d44\u6e90\u88ab\u4e25\u91cd\u5360\u7528\uff0cRedis\u670d\u52a1\u5668\u5d29\u6e83 8.Redis\u96c6\u7fa4\u5448\u73b0\u5d29\u584c\uff0c\u96c6\u7fa4\u74e6\u89e3 9.\u5e94\u7528\u670d\u52a1\u5668\u65e0\u6cd5\u53ca\u65f6\u5f97\u5230\u6570\u636e\u54cd\u5e94\u8bf7\u6c42\uff0c\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u6570\u91cf\u8d8a\u6765\u8d8a\u591a\uff0c\u5e94\u7528\u670d\u52a1\u5668\u5d29\u6e83 10.\u5e94\u7528\u670d\u52a1\u5668\uff0credis\uff0c\u6570\u636e\u5e93\u5168\u90e8\u91cd\u542f\uff0c\u6548\u679c\u4e0d\u7406\u60f3 \u603b\u800c\u8a00\u4e4b\u5c31\u4e24\u70b9\uff1a\u77ed\u65f6\u95f4\u8303\u56f4\u5185\uff0c\u5927\u91cfkey\u96c6\u4e2d\u8fc7\u671f \u89e3\u51b3\u65b9\u6848 \u601d\u8def\uff1a 1.\u66f4\u591a\u7684\u9875\u9762\u9759\u6001\u5316\u5904\u7406 2.\u6784\u5efa\u591a\u7ea7\u7f13\u5b58\u67b6\u6784 Nginx\u7f13\u5b58+redis\u7f13\u5b58+ehcache\u7f13\u5b58 3.\u68c0\u6d4bMysql\u4e25\u91cd\u8017\u65f6\u4e1a\u52a1\u8fdb\u884c\u4f18\u5316 \u5bf9\u6570\u636e\u5e93\u7684\u74f6\u9888\u6392\u67e5\uff1a\u4f8b\u5982\u8d85\u65f6\u67e5\u8be2\u3001\u8017\u65f6\u8f83\u9ad8\u4e8b\u52a1\u7b49 4.\u707e\u96be\u9884\u8b66\u673a\u5236 \u76d1\u63a7redis\u670d\u52a1\u5668\u6027\u80fd\u6307\u6807 CPU\u5360\u7528\u3001CPU\u4f7f\u7528\u7387 \u5185\u5b58\u5bb9\u91cf \u67e5\u8be2\u5e73\u5747\u54cd\u5e94\u65f6\u95f4 \u7ebf\u7a0b\u6570 5.\u9650\u6d41\u3001\u964d\u7ea7 \u77ed\u65f6\u95f4\u8303\u56f4\u5185\u727a\u7272\u4e00\u4e9b\u5ba2\u6237\u4f53\u9a8c\uff0c\u9650\u5236\u4e00\u90e8\u5206\u8bf7\u6c42\u8bbf\u95ee\uff0c\u964d\u4f4e\u5e94\u7528\u670d\u52a1\u5668\u538b\u529b\uff0c\u5f85\u4e1a\u52a1\u4f4e\u901f\u8fd0\u8f6c\u540e\u518d\u9010\u6b65\u653e\u5f00\u8bbf\u95ee \u843d\u5730\u5b9e\u8df5\uff1a 1.LRU\u4e0eLFU\u5207\u6362 2.\u6570\u636e\u6709\u6548\u671f\u7b56\u7565\u8c03\u6574 \u6839\u636e\u4e1a\u52a1\u6570\u636e\u6709\u6548\u671f\u8fdb\u884c\u5206\u7c7b\u9519\u5cf0\uff0cA\u7c7b90\u5206\u949f\uff0cB\u7c7b80\u5206\u949f\uff0cC\u7c7b70\u5206\u949f \u8fc7\u671f\u65f6\u95f4\u4f7f\u7528\u56fa\u5b9a\u65f6\u95f4+\u968f\u673a\u503c\u7684\u5f62\u5f0f\uff0c\u7a00\u91ca\u96c6\u4e2d\u5230\u671f\u7684key\u7684\u6570\u91cf 3.\u8d85\u70ed\u6570\u636e\u4f7f\u7528\u6c38\u4e45key 4.\u5b9a\u671f\u7ef4\u62a4\uff08\u81ea\u52a8+\u4eba\u5de5\uff09 \u5bf9\u5373\u5c06\u8fc7\u671f\u6570\u636e\u505a\u8bbf\u95ee\u91cf\u5206\u6790\uff0c\u786e\u8ba4\u662f\u5426\u5ef6\u65f6\uff0c\u914d\u5408\u8bbf\u95ee\u91cf\u7edf\u8ba1\uff0c\u505a\u70ed\u70b9\u6570\u636e\u7684\u5ef6\u65f6 5.\u52a0\u9501\uff1a\u614e\u7528\uff01 \u603b\u7684\u6765\u8bf4 \uff1a\u7f13\u5b58\u96ea\u5d29\u5c31\u662f\u77ac\u95f4\u8fc7\u671f\u6570\u636e\u91cf\u592a\u5927\uff0c\u5bfc\u81f4\u5bf9\u6570\u636e\u5e93\u670d\u52a1\u5668\u9020\u6210\u538b\u529b\u3002\u5982\u80fd\u591f\u6709\u6548\u907f\u514d\u8fc7\u671f\u65f6\u95f4\u96c6\u4e2d\uff0c\u53ef\u4ee5\u6709\u6548\u89e3\u51b3\u96ea\u5d29\u73b0\u8c61\u7684 \u51fa\u73b0\uff08\u7ea640%\uff09\uff0c\u914d\u5408\u5176\u4ed6\u7b56\u7565\u4e00\u8d77\u4f7f\u7528\uff0c\u5e76\u76d1\u63a7\u670d\u52a1\u5668\u7684\u8fd0\u884c\u6570\u636e\uff0c\u6839\u636e\u8fd0\u884c\u8bb0\u5f55\u505a\u5feb\u901f\u8c03\u6574\u3002","title":"5.2 \u7f13\u5b58\u96ea\u5d29"},{"location":"redis/day02/#53","text":"\u573a\u666f \uff1a\u8fd8\u662f\u6570\u636e\u5e93\u670d\u52a1\u5668\u5d29\u6e83\uff0c\u4f46\u662f\u8ddf\u4e4b\u524d\u7684\u573a\u666f\u6709\u70b9\u4e0d\u592a\u4e00\u6837 1.\u7cfb\u7edf\u5e73\u7a33\u8fd0\u884c\u8fc7\u7a0b\u4e2d 2.\u6570\u636e\u5e93\u8fde\u63a5\u91cf\u77ac\u95f4\u6fc0\u589e 3.Redis\u670d\u52a1\u5668\u65e0\u5927\u91cfkey\u8fc7\u671f 4.Redis\u5185\u5b58\u5e73\u7a33\uff0c\u65e0\u6ce2\u52a8 5.Redis\u670d\u52a1\u5668CPU\u6b63\u5e38 6.\u6570\u636e\u5e93\u5d29\u6e83 \u95ee\u9898\u6392\u67e5\uff1a 1.Redis\u4e2d\u67d0\u4e2akey\u8fc7\u671f\uff0c\u8be5key\u8bbf\u95ee\u91cf\u5de8\u5927 2.\u591a\u4e2a\u6570\u636e\u8bf7\u6c42\u4ece\u670d\u52a1\u5668\u76f4\u63a5\u538b\u5230Redis\u540e\uff0c\u5747\u672a\u547d\u4e2d 3.Redis\u5728\u77ed\u65f6\u95f4\u5185\u53d1\u8d77\u4e86\u5927\u91cf\u5bf9\u6570\u636e\u5e93\u4e2d\u540c\u4e00\u6570\u636e\u7684\u8bbf\u95ee \u603b\u800c\u8a00\u4e4b\u5c31\u4e24\u70b9\uff1a\u5355\u4e2akey\u9ad8\u70ed\u6570\u636e\uff0ckey\u8fc7\u671f \u89e3\u51b3\u65b9\u6848 \uff1a 1.\u9884\u5148\u8bbe\u5b9a \u4ee5\u7535\u5546\u4e3a\u4f8b\uff0c\u6bcf\u4e2a\u5546\u5bb6\u6839\u636e\u5e97\u94fa\u7b49\u7ea7\uff0c\u6307\u5b9a\u82e5\u5e72\u6b3e\u4e3b\u6253\u5546\u54c1\uff0c\u5728\u8d2d\u7269\u8282\u671f\u95f4\uff0c\u52a0\u5927\u6b64\u7c7b\u4fe1\u606fkey\u7684\u8fc7\u671f\u65f6\u957f \u6ce8\u610f\uff1a\u8d2d\u7269\u8282\u4e0d\u4ec5\u4ec5\u6307\u5f53\u5929\uff0c\u4ee5\u53ca\u540e\u7eed\u82e5\u5e72\u5929\uff0c\u8bbf\u95ee\u5cf0\u503c\u5448\u73b0\u9010\u6e10\u964d\u4f4e\u7684\u8d8b\u52bf 2.\u73b0\u573a\u8c03\u6574 \u76d1\u63a7\u8bbf\u95ee\u91cf\uff0c\u5bf9\u81ea\u7136\u6d41\u91cf\u6fc0\u589e\u7684\u6570\u636e\u5ef6\u957f\u8fc7\u671f\u65f6\u95f4\u6216\u8bbe\u7f6e\u4e3a\u6c38\u4e45\u6027key 3.\u540e\u53f0\u5237\u65b0\u6570\u636e \u542f\u52a8\u5b9a\u65f6\u4efb\u52a1\uff0c\u9ad8\u5cf0\u671f\u6765\u4e34\u4e4b\u524d\uff0c\u5237\u65b0\u6570\u636e\u6709\u6548\u671f\uff0c\u786e\u4fdd\u4e0d\u4e22\u5931 4.\u4e8c\u7ea7\u7f13\u5b58 \u8bbe\u7f6e\u4e0d\u540c\u7684\u5931\u6548\u65f6\u95f4\uff0c\u4fdd\u969c\u4e0d\u4f1a\u88ab\u540c\u65f6\u6dd8\u6c70\u5c31\u884c 5.\u52a0\u9501 \u5206\u5e03\u5f0f\u9501\uff0c\u9632\u6b62\u88ab\u51fb\u7a7f\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u4e5f\u662f\u6027\u80fd\u74f6\u9888\uff0c\u614e\u91cd\uff01 \u603b\u7684\u6765\u8bf4 \uff1a\u7f13\u5b58\u51fb\u7a7f\u5c31\u662f\u5355\u4e2a\u9ad8\u70ed\u6570\u636e\u8fc7\u671f\u7684\u77ac\u95f4\uff0c\u6570\u636e\u8bbf\u95ee\u91cf\u8f83\u5927\uff0c\u672a\u547d\u4e2dredis\u540e\uff0c\u53d1\u8d77\u4e86\u5927\u91cf\u5bf9\u540c\u4e00\u6570\u636e\u7684\u6570\u636e\u5e93\u8bbf\u95ee\uff0c\u5bfc\u81f4\u5bf9\u6570 \u636e\u5e93\u670d\u52a1\u5668\u9020\u6210\u538b\u529b\u3002\u5e94\u5bf9\u7b56\u7565\u5e94\u8be5\u5728\u4e1a\u52a1\u6570\u636e\u5206\u6790\u4e0e\u9884\u9632\u65b9\u9762\u8fdb\u884c\uff0c\u914d\u5408\u8fd0\u884c\u76d1\u63a7\u6d4b\u8bd5\u4e0e\u5373\u65f6\u8c03\u6574\u7b56\u7565\uff0c\u6bd5\u7adf\u5355\u4e2akey\u7684\u8fc7 \u671f\u76d1\u63a7\u96be\u5ea6\u8f83\u9ad8\uff0c\u914d\u5408\u96ea\u5d29\u5904\u7406\u7b56\u7565\u5373\u53ef\u3002","title":"5.3 \u7f13\u5b58\u51fb\u7a7f"},{"location":"redis/day02/#54","text":"\u573a\u666f \uff1a\u6570\u636e\u5e93\u670d\u52a1\u5668\u53c8\u5d29\u6e83\u4e86\uff0c\u8ddf\u4e4b\u524d\u7684\u4e00\u6837\u5417\uff1f 1.\u7cfb\u7edf\u5e73\u7a33\u8fd0\u884c\u8fc7\u7a0b\u4e2d 2.\u5e94\u7528\u670d\u52a1\u5668\u6d41\u91cf\u968f\u65f6\u95f4\u589e\u91cf\u8f83\u5927 3.Redis\u670d\u52a1\u5668\u547d\u4e2d\u7387\u968f\u65f6\u95f4\u9010\u6b65\u964d\u4f4e 4.Redis\u5185\u5b58\u5e73\u7a33\uff0c\u5185\u5b58\u65e0\u538b\u529b 5.Redis\u670d\u52a1\u5668CPU\u5360\u7528\u6fc0\u589e 6.\u6570\u636e\u5e93\u670d\u52a1\u5668\u538b\u529b\u6fc0\u589e 7.\u6570\u636e\u5e93\u5d29\u6e83 \u95ee\u9898\u6392\u67e5\uff1a 1.Redis\u4e2d\u5927\u9762\u79ef\u51fa\u73b0\u672a\u547d\u4e2d 2.\u51fa\u73b0\u975e\u6b63\u5e38URL\u8bbf\u95ee \u95ee\u9898\u5206\u6790 \uff1a \u83b7\u53d6\u7684\u6570\u636e\u5728\u6570\u636e\u5e93\u4e2d\u4e5f\u4e0d\u5b58\u5728\uff0c\u6570\u636e\u5e93\u67e5\u8be2\u672a\u5f97\u5230\u5bf9\u5e94\u6570\u636e Redis\u83b7\u53d6\u5230null\u6570\u636e\u672a\u8fdb\u884c\u6301\u4e45\u5316\uff0c\u76f4\u63a5\u8fd4\u56de \u4e0b\u6b21\u6b64\u7c7b\u6570\u636e\u5230\u8fbe\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b \u51fa\u73b0\u9ed1\u5ba2\u653b\u51fb\u670d\u52a1\u5668 \u89e3\u51b3\u65b9\u6848 \uff1a 1.\u7f13\u5b58null \u5bf9\u67e5\u8be2\u7ed3\u679c\u4e3anull\u7684\u6570\u636e\u8fdb\u884c\u7f13\u5b58\uff08\u957f\u671f\u4f7f\u7528\uff0c\u5b9a\u671f\u6e05\u7406\uff09\uff0c\u8bbe\u5b9a\u77ed\u65f6\u9650\uff0c\u4f8b\u598230-60\u79d2\uff0c\u6700\u9ad85\u5206\u949f 2.\u767d\u540d\u5355\u7b56\u7565 \u63d0\u524d\u9884\u70ed\u5404\u79cd\u5206\u7c7b\u6570\u636eid\u5bf9\u5e94\u7684bitmaps\uff0cid\u4f5c\u4e3abitmaps\u7684offset\uff0c\u76f8\u5f53\u4e8e\u8bbe\u7f6e\u4e86\u6570\u636e\u767d\u540d\u5355\u3002\u5f53\u52a0\u8f7d\u6b63\u5e38\u6570\u636e\u65f6\u653e\u884c\uff0c\u52a0\u8f7d\u5f02\u5e38\u6570\u636e\u65f6\u76f4\u63a5\u62e6\u622a\uff08\u6548\u7387\u504f\u4f4e\uff09 \u4f7f\u7528\u5e03\u9686\u8fc7\u6ee4\u5668\uff08\u6709\u5173\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u547d\u4e2d\u95ee\u9898\u5bf9\u5f53\u524d\u72b6\u51b5\u53ef\u4ee5\u5ffd\u7565\uff09 2.\u5b9e\u65bd\u76d1\u63a7 \u5b9e\u65f6\u76d1\u63a7redis\u547d\u4e2d\u7387\uff08\u4e1a\u52a1\u6b63\u5e38\u8303\u56f4\u65f6\uff0c\u901a\u5e38\u4f1a\u6709\u4e00\u4e2a\u6ce2\u52a8\u503c\uff09\u4e0enull\u6570\u636e\u7684\u5360\u6bd4 \u975e\u6d3b\u52a8\u65f6\u6bb5\u6ce2\u52a8\uff1a\u901a\u5e38\u68c0\u6d4b3-5\u500d\uff0c\u8d85\u8fc75\u500d\u7eb3\u5165\u91cd\u70b9\u6392\u67e5\u5bf9\u8c61 \u6d3b\u52a8\u65f6\u6bb5\u6ce2\u52a8\uff1a\u901a\u5e38\u68c0\u6d4b10-50\u500d\uff0c\u8d85\u8fc750\u500d\u7eb3\u5165\u91cd\u70b9\u6392\u67e5\u5bf9\u8c61 \u6839\u636e\u500d\u6570\u4e0d\u540c\uff0c\u542f\u52a8\u4e0d\u540c\u7684\u6392\u67e5\u6d41\u7a0b\u3002\u7136\u540e\u4f7f\u7528\u9ed1\u540d\u5355\u8fdb\u884c\u9632\u63a7\uff08\u8fd0\u8425\uff09 4.key\u52a0\u5bc6 \u95ee\u9898\u51fa\u73b0\u540e\uff0c\u4e34\u65f6\u542f\u52a8\u9632\u707e\u4e1a\u52a1key\uff0c\u5bf9key\u8fdb\u884c\u4e1a\u52a1\u5c42\u4f20\u8f93\u52a0\u5bc6\u670d\u52a1\uff0c\u8bbe\u5b9a\u6821\u9a8c\u7a0b\u5e8f\uff0c\u8fc7\u6765\u7684key\u6821\u9a8c \u4f8b\u5982\u6bcf\u5929\u968f\u673a\u5206\u914d60\u4e2a\u52a0\u5bc6\u4e32\uff0c\u6311\u90092\u52303\u4e2a\uff0c\u6df7\u6dc6\u5230\u9875\u9762\u6570\u636eid\u4e2d\uff0c\u53d1\u73b0\u8bbf\u95eekey\u4e0d\u6ee1\u8db3\u89c4\u5219\uff0c\u9a73\u56de\u6570\u636e\u8bbf\u95ee \u603b\u7684\u6765\u8bf4 \uff1a\u7f13\u5b58\u51fb\u7a7f\u662f\u6307\u8bbf\u95ee\u4e86\u4e0d\u5b58\u5728\u7684\u6570\u636e\uff0c\u8df3\u8fc7\u4e86\u5408\u6cd5\u6570\u636e\u7684redis\u6570\u636e\u7f13\u5b58\u9636\u6bb5\uff0c\u6bcf\u6b21\u8bbf\u95ee\u6570\u636e\u5e93\uff0c\u5bfc\u81f4\u5bf9\u6570\u636e\u5e93\u670d\u52a1\u5668\u9020\u6210\u538b\u529b\u3002\u901a\u5e38\u6b64\u7c7b\u6570\u636e\u7684\u51fa\u73b0\u91cf\u662f\u4e00\u4e2a\u8f83\u4f4e\u7684\u503c\uff0c\u5f53\u51fa\u73b0\u6b64\u7c7b\u60c5\u51b5\u4ee5\u6bd2\u653b\u6bd2\uff0c\u5e76\u53ca\u65f6\u62a5\u8b66\u3002\u5e94\u5bf9\u7b56\u7565\u5e94\u8be5\u5728\u4e34\u65f6\u9884\u6848\u9632\u8303\u65b9\u9762\u591a\u505a\u6587\u7ae0\u3002 \u65e0\u8bba\u662f\u9ed1\u540d\u5355\u8fd8\u662f\u767d\u540d\u5355\uff0c\u90fd\u662f\u5bf9\u6574\u4f53\u7cfb\u7edf\u7684\u538b\u529b\uff0c\u8b66\u62a5\u89e3\u9664\u540e\u5c3d\u5feb\u79fb\u9664\u3002","title":"5.4 \u7f13\u5b58\u7a7f\u900f"},{"location":"redis/day02/#55","text":"redis\u4e2d\u7684\u76d1\u63a7\u6307\u6807\u5982\u4e0b\uff1a \u6027\u80fd\u6307\u6807\uff1aPerformance \u54cd\u5e94\u8bf7\u6c42\u7684\u5e73\u5747\u65f6\u95f4: properties latency \u5e73\u5747\u6bcf\u79d2\u5904\u7406\u8bf7\u6c42\u603b\u6570 properties instantaneous_ops_per_sec \u7f13\u5b58\u67e5\u8be2\u547d\u4e2d\u7387\uff08\u901a\u8fc7\u67e5\u8be2\u603b\u6b21\u6570\u4e0e\u67e5\u8be2\u5f97\u5230\u975enil\u6570\u636e\u603b\u6b21\u6570\u8ba1\u7b97\u800c\u6765\uff09 ```properties hit_rate(calculated) ``` \u5185\u5b58\u6307\u6807\uff1aMemory \u5f53\u524d\u5185\u5b58\u4f7f\u7528\u91cf properties used_memory \u5185\u5b58\u788e\u7247\u7387\uff08\u5173\u7cfb\u5230\u662f\u5426\u8fdb\u884c\u788e\u7247\u6574\u7406\uff09 properties mem_fragmentation_ratio \u4e3a\u907f\u514d\u5185\u5b58\u6ea2\u51fa\u5220\u9664\u7684key\u7684\u603b\u6570\u91cf properties evicted_keys \u57fa\u4e8e\u963b\u585e\u64cd\u4f5c\uff08BLPOP\u7b49\uff09\u5f71\u54cd\u7684\u5ba2\u6237\u7aef\u6570\u91cf properties blocked_clients \u57fa\u672c\u6d3b\u52a8\u6307\u6807\uff1aBasic_activity \u5f53\u524d\u5ba2\u6237\u7aef\u8fde\u63a5\u603b\u6570 properties connected_clients \u5f53\u524d\u8fde\u63a5slave\u603b\u6570 properties connected_slaves \u6700\u540e\u4e00\u6b21\u4e3b\u4ece\u4fe1\u606f\u4ea4\u6362\u8ddd\u73b0\u5728\u7684\u79d2 properties master_last_io_seconds_ago key\u7684\u603b\u6570 properties keyspace \u6301\u4e45\u6027\u6307\u6807\uff1aPersistence \u5f53\u524d\u670d\u52a1\u5668\u6700\u540e\u4e00\u6b21RDB\u6301\u4e45\u5316\u7684\u65f6\u95f4 properties rdb_last_save_time \u5f53\u524d\u670d\u52a1\u5668\u6700\u540e\u4e00\u6b21RDB\u6301\u4e45\u5316\u540e\u6570\u636e\u53d8\u5316\u603b\u91cf properties rdb_changes_since_last_save \u9519\u8bef\u6307\u6807\uff1aError \u88ab\u62d2\u7edd\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\u603b\u6570\uff08\u57fa\u4e8e\u8fbe\u5230\u6700\u5927\u8fde\u63a5\u503c\u7684\u56e0\u7d20\uff09 properties rejected_connections key\u672a\u547d\u4e2d\u7684\u603b\u6b21\u6570 properties keyspace_misses \u4e3b\u4ece\u65ad\u5f00\u7684\u79d2\u6570 properties master_link_down_since_seconds \u8981\u5bf9redis\u7684\u76f8\u5173\u6307\u6807\u8fdb\u884c\u76d1\u63a7\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u4e00\u4e9b\u7528\u5177\uff1a CloudInsight Redis Prometheus Redis-stat Redis-faina RedisLive zabbix \u4e5f\u6709\u4e00\u4e9b\u547d\u4ee4\u5de5\u5177\uff1a benchmark \u6d4b\u8bd5\u5f53\u524d\u670d\u52a1\u5668\u7684\u5e76\u53d1\u6027\u80fd properties redis-benchmark [-h ] [-p ] [-c ] [-n <requests]> [-k ] \u8303\u4f8b1\uff1a50\u4e2a\u8fde\u63a5\uff0c10000\u6b21\u8bf7\u6c42\u5bf9\u5e94\u7684\u6027\u80fd properties redis-benchmark \u8303\u4f8b2\uff1a100\u4e2a\u8fde\u63a5\uff0c5000\u6b21\u8bf7\u6c42\u5bf9\u5e94\u7684\u6027\u80fd properties redis-benchmark -c 100 -n 5000 redis-cli monitor\uff1a\u542f\u52a8\u670d\u52a1\u5668\u8c03\u8bd5\u4fe1\u606f properties monitor slowlog\uff1a\u6162\u65e5\u5fd7 \u83b7\u53d6\u6162\u67e5\u8be2\u65e5\u5fd7 properties slowlog [operator] get \uff1a\u83b7\u53d6\u6162\u67e5\u8be2\u65e5\u5fd7\u4fe1\u606f len \uff1a\u83b7\u53d6\u6162\u67e5\u8be2\u65e5\u5fd7\u6761\u76ee\u6570 reset \uff1a\u91cd\u7f6e\u6162\u67e5\u8be2\u65e5\u5fd7 \u76f8\u5173\u914d\u7f6e properties slowlog-log-slower-than 1000 #\u8bbe\u7f6e\u6162\u67e5\u8be2\u7684\u65f6\u95f4\u4e0b\u7ebf\uff0c\u5355\u4f4d\uff1a\u5fae\u5999 slowlog-max-len 100 #\u8bbe\u7f6e\u6162\u67e5\u8be2\u547d\u4ee4\u5bf9\u5e94\u7684\u65e5\u5fd7\u663e\u793a\u957f\u5ea6\uff0c\u5355\u4f4d\uff1a\u547d\u4ee4\u6570","title":"5.5 \u6027\u80fd\u6307\u6807\u76d1\u63a7"},{"location":"tantan/day01/","text":"\u8bfe\u7a0b\u4ecb\u7ecd \u300a\u63a2\u82b1\u4ea4\u53cb\u300b \u00b6 \u529f\u80fd\u4ecb\u7ecd \u9879\u76ee\u4ecb\u7ecd \u5de5\u7a0b\u642d\u5efa \u77ed\u4fe1\u9a8c\u8bc1\u7801 \u5b9e\u73b0\u7528\u6237\u767b\u5f55\u529f\u80fd 1\u3001\u529f\u80fd\u4ecb\u7ecd \u00b6 \u63a2\u82b1\u4ea4\u53cb\u662f\u4e00\u4e2a\u964c\u751f\u4eba\u7684\u5728\u7ebf\u4ea4\u53cb\u5e73\u53f0\uff0c\u5728\u8be5\u5e73\u53f0\u4e2d\u53ef\u4ee5\u641c\u7d22\u9644\u8fd1\u7684\u4eba\uff0c\u67e5\u770b\u597d\u53cb\u52a8\u6001\uff0c\u5e73\u53f0\u8fd8\u4f1a\u901a\u8fc7\u5927\u6570\u636e\u8ba1\u7b97\u8fdb\u884c\u667a\u80fd\u63a8\u8350\uff0c\u901a\u8fc7\u667a\u80fd\u63a8\u8350\u53ef\u4ee5\u627e\u5230\u66f4\u52a0\u5339\u914d\u7684\u597d\u53cb\uff0c\u8fd9\u6837\u624d\u80fd\u589e\u8fdb\u7528\u6237\u5bf9\u4ea7\u54c1\u7684\u559c\u7231\u5ea6\u3002\u63a2\u82b1\u5e73\u53f0\u8fd8\u63d0\u4f9b\u4e86\u5728\u7ebf\u5373\u65f6\u901a\u8baf\u529f\u80fd\uff0c\u53ef\u4ee5\u5b9e\u65f6\u7684\u4e0e\u597d\u53cb\u8fdb\u884c\u6c9f\u901a\uff0c\u8ba9\u6c9f\u901a\u968f\u65f6\u968f\u5730\u7684\u8fdb\u884c\u3002 1.1\u3001\u529f\u80fd\u5217\u8868 \u00b6 \u529f\u80fd \u8bf4\u660e \u5907\u6ce8 \u6ce8\u518c\u3001\u767b\u5f55 \u7528\u6237\u65e0\u9700\u5355\u72ec\u6ce8\u518c\uff0c\u76f4\u63a5\u901a\u8fc7\u624b\u673a\u53f7\u767b\u5f55\u5373\u53ef \u9996\u6b21\u767b\u5f55\u6210\u529f\u540e\u9700\u8981\u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f \u4ea4\u53cb \u4e3b\u8981\u529f\u80fd\u6709\uff1a\u6d4b\u7075\u9b42\u3001\u6843\u82b1\u4f20\u97f3\u3001\u641c\u9644\u8fd1\u3001\u63a2\u82b1\u7b49 \u5708\u5b50 \u7c7b\u4f3c\u5fae\u4fe1\u670b\u53cb\u5708\uff0c\u7528\u6237\u53ef\u4ee5\u53d1\u52a8\u6001\u3001\u67e5\u770b\u597d\u53cb\u52a8\u6001\u7b49 \u6d88\u606f \u901a\u77e5\u7c7b\u6d88\u606f + \u5373\u65f6\u901a\u8baf\u6d88\u606f \u5c0f\u89c6\u9891 \u7c7b\u4f3c\u6296\u97f3\uff0c\u7528\u6237\u53ef\u4ee5\u53d1\u5c0f\u89c6\u9891\uff0c\u8bc4\u8bba\u7b49 \u663e\u793a\u5c0f\u89c6\u9891\u5217\u8868\u9700\u8981\u8fdb\u884c\u63a8\u8350\u7b97\u6cd5\u8ba1\u7b97\u540e\u8fdb\u884c\u5c55\u73b0\u3002 \u6211\u7684 \u6211\u7684\u52a8\u6001\u3001\u5173\u6ce8\u6570\u3001\u7c89\u4e1d\u6570\u3001\u901a\u7528\u8bbe\u7f6e\u7b49 1.2\u3001\u6ce8\u518c\u767b\u5f55 \u00b6 \u4e1a\u52a1\u8bf4\u660e\uff1a \u7528\u6237\u901a\u8fc7\u624b\u673a\u9a8c\u8bc1\u7801\u8fdb\u884c\u767b\u5f55\uff0c\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u767b\u5f55\u5219\u9700\u8981\u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f\uff0c\u5728\u4e0a\u4f20\u56fe\u7247\u65f6\uff0c\u9700\u8981\u5bf9\u4e0a\u4f20\u7684\u56fe\u7247\u505a\u4eba\u50cf\u7684\u6821\u9a8c\uff0c\u9632\u6b62\u7528\u6237\u4e0a\u4f20\u975e\u4eba\u50cf\u7684\u56fe\u7247\u4f5c\u4e3a\u5934\u50cf\u3002\u6d41\u7a0b\u5b8c\u6210\u540e\uff0c\u5219\u767b\u5f55\u6210\u529f\u3002 1.3\u3001\u4ea4\u53cb \u00b6 \u4ea4\u53cb\u662f\u63a2\u82b1\u9879\u76ee\u7684\u6838\u5fc3\u529f\u80fd\u4e4b\u4e00\uff0c\u7528\u6237\u53ef\u4ee5\u67e5\u770b\u597d\u53cb\uff0c\u6dfb\u52a0\u597d\u53cb\uff0c\u641c\u7d22\u597d\u53cb\u7b49\u64cd\u4f5c\u3002 1.3.1\u3001\u9996\u9875 \u00b6 \u5728\u9996\u9875\u4e2d\uff0c\u4e3b\u8981\u529f\u80fd\u6709\u201c\u4eca\u65e5\u4f73\u4eba\u201d\u3001\u201c\u63a8\u8350\u201d\u3001\u201c\u6700\u8fd1\u8bbf\u5ba2\u201d\u7b49 \u4eca\u65e5\u4f73\u4eba \u6309\u7167\u201c\u7f18\u5206\u503c\u201d\u8fdb\u884c\u5339\u914d\uff0c\u5c06\u201c\u7f18\u5206\u503c\u201d\u6700\u9ad8\u7684\u7528\u6237\u5c55\u73b0\u51fa\u6765 \u63a8\u8350 \u6309\u7167\u201c\u7f18\u5206\u503c\u201d\u8fdb\u884c\u63a8\u8350\uff0c\u7531\u540e\u53f0\u7684\u63a8\u8350\u7cfb\u7edf\u8ba1\u7b97\u5f97\u51fa\uff0c\u5c55\u73b0\u51fa\u6765 \u6700\u8fd1\u8bbf\u5ba2 \u663e\u793a\u6700\u8fd1\u6765\u770b\u201c\u6211\u201d\u7684\u7528\u6237 1.3.2\u3001\u63a2\u82b1 \u00b6 \u8bf4\u660e\uff1a\u5de6\u5212\u559c\u6b22\uff0c\u53f3\u5212\u4e0d\u559c\u6b22\uff0c\u6bcf\u5929\u9650\u91cf\u4e0d\u8d85\u8fc7100\u4e2a\uff0c\u5f00\u901a\u4f1a\u5458\u53ef\u589e\u52a0\u9650\u989d\u3002\u53cc\u65b9\u4e92\u76f8\u559c\u6b22\u5219\u914d\u5bf9\u6210\u529f\u3002 \u5b9e\u73b0\uff1a\u6570\u636e\u6765\u6e90\u63a8\u8350\u7cfb\u7edf\u8ba1\u7b97\u540e\u7684\u7ed3\u679c\u3002 1.3.3\u3001\u641c\u9644\u8fd1 \u00b6 \u6839\u636e\u7528\u6237\u5f53\u524d\u6240\u5728\u7684\u4f4d\u7f6e\u8fdb\u884c\u67e5\u8be2\uff0c\u5e76\u4e14\u572810km\u7684\u8303\u56f4\u5185\u8fdb\u884c\u67e5\u8be2\uff0c\u53ef\u4ee5\u901a\u8fc7\u7b5b\u9009\u6309\u94ae\u8fdb\u884c\u6761\u4ef6\u7b5b\u9009\u3002 1.3.4\u3001\u6843\u82b1\u4f20\u97f3 \u00b6 \u529f\u80fd\u7c7b\u4f3cQQ\u4e2d\u7684\u6f02\u6d41\u74f6\uff0c\u7528\u6237\u53ef\u4ee5\u53d1\u9001\u548c\u63a5\u6536\u8bed\u97f3\u6d88\u606f\uff0c\u964c\u751f\u4eba\u5c31\u4f1a\u63a5\u6536\u5230\u6d88\u606f\u3002 1.3.5\u3001\u6d4b\u7075\u9b42 \u00b6 \u6d4b\u8bd5\u9898\u7528\u4e8e\u5bf9\u7528\u6237\u8fdb\u884c\u5206\u7c7b\uff0c\u6bcf\u6b21\u63d0\u4ea4\u7b54\u6848\u540e\u66f4\u65b0\u7528\u6237\u5c5e\u6027 \u6d4b\u8bd5\u9898\u5728\u540e\u53f0\u8fdb\u884c\u7ef4\u62a4 \u6d4b\u8bd5\u9898\u6d4b\u8bd5\u5b8c\u540e\u4ea7\u751f\u7ed3\u679c\u9875\u53ef\u4ee5\u8fdb\u884c\u5206\u4eab \u6d4b\u8bd5\u9898\u4e3a\u987a\u5e8f\u56de\u7b54\uff0c\u56de\u7b54\u5b8c\u521d\u7ea7\u9898\u89e3\u9501\u4e0b\u4e00\u7ea7\u95ee\u9898 \u70b9\u51fb\u9501\u5b9a\u95ee\u9898 \u663e\u793a\u63d0\u793a \u8bf7\u5148\u56de\u7b54\u4e0a\u4e00\u7ea7\u95ee\u9898 1.4\u3001\u5708\u5b50 \u00b6 1\u3001\u63a8\u8350\u9891\u9053\u4e3a\u6839\u636e\u95ee\u5377\u53ca\u559c\u597d\u63a8\u8350\u76f8\u4f3c\u7528\u6237\u52a8\u6001 2\u3001\u663e\u793a\u5185\u5bb9\u4e3a\u7528\u6237\u5934\u50cf\u3001\u7528\u6237\u6635\u79f0\u3001\u7528\u6237\u6027\u522b\u3001\u7528\u6237\u5e74\u9f84\u3001\u7528\u6237\u6807\u7b7e\u548c\u7528\u6237\u53d1\u5e03\u52a8\u6001 3\u3001\u56fe\u7247\u6700\u591a\u4e0d\u8d85\u8fc76\u5f20\u6216\u53d1\u5e03\u4e00\u4e2a\u5c0f\u89c6\u9891 4\u3001\u52a8\u6001\u4e0b\u65b9\u663e\u793a\u53d1\u5e03\u65f6\u95f4\u8ddd\u79bb\u5f53\u65f6\u65f6\u95f4\uff0c\u4f8b\u598210\u5206\u949f\u524d\u30013\u5c0f\u65f6\u524d\u30012\u5929\u524d\uff0c\u663e\u793a\u65f6\u95f4\u8fdb\u884c\u53d6\u6574 5\u3001\u52a8\u6001\u4e0b\u65b9\u663e\u793a\u8ddd\u79bb\u4e3a\u53d1\u5e03\u52a8\u6001\u5730\u4e0e\u672c\u5730\u8ddd\u79bb 6\u3001\u663e\u793a\u7528\u6237\u6d4f\u89c8\u91cf 7\u3001\u663e\u793a\u70b9\u8d5e\u6570\u3001\u8bc4\u8bba\u6570 \u8f6c\u53d1\u6570 1.5\u3001\u6d88\u606f \u00b6 \u6d88\u606f\u5305\u542b\u901a\u77e5\u7c7b\u7684\u6d88\u606f\u548c\u597d\u53cb\u6d88\u606f\u3002 1.6\u3001\u5c0f\u89c6\u9891 \u00b6 \u7528\u6237\u53ef\u4ee5\u4e0a\u4f20\u5c0f\u89c6\u9891\uff0c\u4e5f\u53ef\u4ee5\u67e5\u770b\u5c0f\u89c6\u9891\u5217\u8868\uff0c\u5e76\u4e14\u53ef\u4ee5\u8fdb\u884c\u70b9\u8d5e\u64cd\u4f5c\u3002 1.7\u3001\u6211\u7684 \u00b6 \u663e\u793a\u5173\u6ce8\u6570\u3001\u559c\u6b22\u6570\u3001\u7c89\u4e1d\u6570\u3001\u6211\u7684\u52a8\u6001\u7b49\u4fe1\u606f\u3002 2\u3001\u9879\u76ee\u4ecb\u7ecd \u00b6 2.1\u3001\u9879\u76ee\u80cc\u666f \u00b6 \u5728\u7ebf\u793e\u4ea4\u662f\u4e92\u8054\u7f51\u65f6\u4ee3\u7684\u4ea7\u7269\uff0c\u5df2\u6210\u4e3a\u4e92\u8054\u7f51\u7528\u6237\u7684\u57fa\u7840\u9700\u6c42\u4e4b\u4e00\u3002\u79fb\u52a8\u4e92\u8054\u7f51\u81ea2003\u5e74\u8d77\u5feb\u901f\u53d1\u5c55\uff0c\u4fc3\u4f7f\u5728\u7ebf\u793e\u4ea4\u9010\u6e10\u4ecePC\u7aef\u8f6c\u79fb\u81f3\u79fb\u52a8\u7aef\u3002\u79fb\u52a8\u793e\u4ea4\u6700\u521d\u4ee5\u719f\u4eba\u793e\u4ea4\u4e3a\u4e3b\uff0c\u4ee5\u7ef4\u7cfb\u719f\u4eba\u5173\u7cfb\u3001\u5171\u4eab\u8d44\u6e90\u4fe1\u606f\u7684\u5f62\u5f0f\u5b58\u5728\u3002\u968f\u7740\u4eba\u4eec\u4ea4\u53cb\u9700\u6c42\u7684\u5ef6\u4f38\uff0c\u79fb\u52a8\u793e\u4ea4\u5f00\u59cb\u5411\u964c\u751f\u4eba\u793e\u4ea4\u3001\u5174\u8da3\u793e\u4ea4\u7b49\u5782\u76f4\u65b9\u5411\u53d1\u5c55\uff0c\u5f62\u5f0f\u4e30\u5bcc\u591a\u6837\u3002 2.2\u3001\u5e02\u573a\u5206\u6790 \u00b6 \u63a2\u82b1\u4ea4\u53cb\u9879\u76ee\u5b9a\u4f4d\u4e8e \u964c\u751f\u4eba\u4ea4\u53cb\u5e02\u573a \u3002 \u6839\u636e\u300a2018\u793e\u4ea4\u9886\u57df\u6295\u878d\u8d44\u62a5\u544a\u300b\u4e2d\u6307\u51fa\uff1a\u867d\u7136\u76f8\u6bd42017\u5e74\uff0c\u6295\u878d\u8d44\u4e8b\u4ef6\u51cf\u5c1129.5%\uff0c\u4f46\u662f\u878d\u8d44\u7684\u603b\u989d\u5374\u5927\u5e45\u589e\u957f\uff0c\u8fbe\u523068%\u3002 \u8fd9\u4e9b\u8ff9\u8c61\u8bf4\u660e\uff1a\u793e\u4ea4\u9886\u57df\u7684\u53d1\u5c55\u89c4\u6a21\u6b63\u5728\u6269\u5927\uff0c\u800c\u5f88\u591a\u6ca1\u6709\u7279\u8272\u7684\u4ea7\u54c1\u4e5f\u4f1a\u88ab\u6dd8\u6c70\u3002\u800c\u968f\u7740\u90a3\u4e9b\u5c3e\u90e8\u4ea7\u54c1\u7684\u5012\u4e0b\uff0c\u5bf9\u6211\u4eec\u6765\u8bf4\u5c31\u662f\u673a\u4f1a\uff0c\u53ca\u65f6\u6293\u4f4f\u4e0d\u540c\u793e\u4ea4\u9700\u6c42\u7684\u673a\u4f1a\u3002\u4ee5\u793e\u4ea4\u4e3a\u6838\u5fc3\u5411\u4e0d\u540c\u7684\u7ec6\u5206\u9886\u57df\u884d\u751f\u6b63\u5728\u9010\u6e10\u8d70\u5411\u6210\u719f\u5316\u3002 \u800c\u6211\u4eec\u6309\u7167\u5a31\u4e50\u5f62\u5f0f\u548c\u5185\u5bb9\u4e3a\u4e3b\u4e24\u4e2a\u7ef4\u5ea6\uff0c\u5c06\u793e\u4ea4\u884c\u4e1a\u516c\u53f8\u5206\u7c7b\u4e3a\uff1a\u5373\u65f6\u901a\u4fe1\u3001\u5185\u5bb9\u793e\u7fa4\u3001\u964c\u751f\u4eba\u793e\u4ea4\u3001\u6cdb\u5a31\u4e50\u793e\u4ea4\u4ee5\u53ca\u5174\u8da3\u793e\u4ea4\u51e0\u4e2a\u9886\u57df\u3002 \u800c\u57282018\u5e74\u793e\u4ea4\u7684\u5404\u4e2a\u7ec6\u5206\u9886\u57df\u4e0b\uff0c\u5747\u6709\u5907\u53d7\u8d44\u672c\u6240\u5173\u6ce8\u7684\u9879\u76ee\uff0c\u6839\u636e\u70ef\u725b\u6570\u636e2018\u5e74\u7684\u62a5\u544a\u4e2d\uff0c\u4e5f\u540c\u6837\u6307\u51fa\uff1a\u5185\u5bb9\u793e\u4ea4\u53ca\u964c\u751f\u4eba\u793e\u4ea4\u4e3a\u8d44\u672c\u91cd\u8981\u5173\u6ce8\u9886\u57df\uff0c\u5408\u8ba1\u878d\u8d44\u5360\u6bd4\u8fbe73%\u3002 \u6839\u636e\u5e02\u573a\u73b0\u72b6\u4ee5\u53ca\u878d\u8d44\u4e8b\u4ef6\u6765\u770b\uff1a\u964c\u751f\u4eba\u793e\u4ea4\u3001\u5185\u5bb9\u793e\u7fa4\u3001\u5174\u8da3\u793e\u4ea4\u57282019\u5e74\u4ecd\u7136\u4fdd\u6301\u5f3a\u52b2\u7684\u52a8\u529b\uff0c\u5360\u5230\u8fd170%\u7684\u6bd4\u4f8b\uff0c\u5b83\u4eec\u4ecd\u7136\u662f\u8d44\u672c\u5e02\u573a\u4e3b\u8981\u5173\u6ce8\u9886\u57df\u3002\u4ece\u589e\u957f\u7387\u6765\u770b\u964c\u751f\u4eba\u793e\u4ea4\u7684\u589e\u957f\u901f\u5ea6\u8fdc\u8fdc\u5927\u4e8e\u5176\u4ed6\u51e0\u7c7b\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u4ece\u8fd9\u4e2a\u65b9\u5411\u5165\u624b\u3002 2.3\u3001\u76ee\u6807\u7528\u6237\u7fa4\u4f53 \u00b6 \u4ece\u6574\u4f53\u5e74\u9f84\u6bb5\u6765\u770b\uff1a\u76ee\u524d\u76ee\u6807\u7528\u6237\u7fa4\u4f53\u4e3b\u8981\u4ee530\u5c81\u4ee5\u4e0b\u4e3a\u4e3b\uff0c\u5176\u4e2d\u4ee518-25\u5c81\u5e74\u9f84\u7fa4\u4f53\u4e3a\u4e3b\u8981\u53d7\u4f17\u4eba\u7fa4\u3002 \u4e0a\u73ed\u7fa4\u4f53\uff1a \u70ed\u8877\u4e8e\u901a\u8fc7\u5206\u4eab\u5185\u5bb9\u6216\u8868\u8fbe\u201c\u4e2a\u4eba\u60c5\u7eea\u201d\u5728\u964c\u751f\u4eba\u9762\u524d\u5efa\u7acb\u7279\u6b8a\u7684\u4eba\u8bbe\uff0c\u5e76\u501f\u6b64\u63d0\u5347\u81ea\u6211\u4ef7\u503c\u6269\u5927\u81ea\u5df1\u7684\u4ea4\u9645\u5708\uff1b \u5b66\u751f\u7fa4\u4f53\uff1a \u8ffd\u6c42\u4e2a\u6027\u9009\u62e9\uff0c\u66f4\u503e\u5411\u627e\u5230\u6709\u5171\u540c\u8bdd\u9898\u7684\u964c\u751f\u4eba\u5bf9\u8c61\u5e76\u5efa\u7acb\u957f\u671f\u7684\u5173\u7cfb\uff0c\u4e50\u4e8e\u5c55\u73b0\u81ea\u6211\uff1b \u6587\u827a\u7fa4\u4f53\uff1a \u62e5\u6709\u81ea\u5df1\u72ec\u7279\u7684\u7231\u597d\u4e14\u62e5\u6709\u7279\u522b\u7684\u4e2a\u4eba\u8ffd\u6c42\uff0c\u8ffd\u6c42\u6587\u827a\u5708\u5b50\u5185\u7684\u4ea4\u6d41\uff0c\u5e0c\u671b\u901a\u8fc7\u5206\u4eab\u7ed3\u4ea4\u66f4\u591a\u597d\u53cb\uff1b \u6c9f\u901a\u5f31\u52bf\u7fa4\u4f53\uff1a \u5bf9\u73b0\u6709\u957f\u671f\u4fdd\u6301\u7ebf\u4e0a\u5bf9\u793e\u4ea4\u6a21\u5f0f\u8868\u73b0\u65e0\u529b\u4e14\u65e0\u6548\uff0c\u6e34\u671b\u6709\u66f4\u52a0\u6709\u6548\u4e14\u5b89\u5168\u7684\u793e\u4ea4\u65b9\u5f0f\u51fa\u73b0\uff0c\u89e3\u51b3\u76ee\u524d\u5355\u8c03\u4e4f\u5473\u7684\u6c9f\u901a\u65b9\u5f0f\uff1b 2.4\u3001\u6280\u672f\u65b9\u6848 \u00b6 \u524d\u7aef\uff1a flutter + android + \u73af\u4fe1SDK + redux + shared_preferences + connectivity + iconfont + webview + sqflite \u540e\u7aef\uff1a Spring Boot + SpringMVC + Mybatis + MybatisPlus + Dubbo Elasticsearch geo \u5b9e\u73b0\u5730\u7406\u4f4d\u7f6e\u67e5\u8be2 MongoDB \u5b9e\u73b0\u6d77\u91cf\u6570\u636e\u7684\u5b58\u50a8 Redis \u6570\u636e\u7684\u7f13\u5b58 Spark + MLlib \u5b9e\u73b0\u667a\u80fd\u63a8\u8350 \u7b2c\u4e09\u65b9\u670d\u52a1 \u73af\u4fe1\u5373\u65f6\u901a\u8baf \u7b2c\u4e09\u65b9\u670d\u52a1 \u963f\u91cc\u4e91 OSS \u3001 \u77ed\u4fe1\u670d\u52a1 \u7b2c\u4e09\u65b9\u670d\u52a1 \u8679\u8f6f\u5f00\u653e\u5e73\u53f0 2.5\u3001\u6280\u672f\u67b6\u6784 \u00b6 2.6\u3001\u6280\u672f\u89e3\u51b3\u65b9\u6848 \u00b6 \u4f7f\u7528Elasticsearch geo\u5b9e\u73b0\u9644\u8fd1\u7684\u4eba\u7684\u89e3\u51b3\u65b9\u6848 \u4f7f\u7528Spark + Mllib\u5b9e\u73b0\u667a\u80fd\u63a8\u8350\u7684\u89e3\u51b3\u65b9\u6848 \u4f7f\u7528MongoDB\u8fdb\u884c\u6d77\u91cf\u6570\u636e\u7684\u5b58\u50a8\u7684\u89e3\u51b3\u65b9\u6848 \u4f7f\u7528\u91c7\u7528\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf\u5b58\u50a8\u5c0f\u89c6\u9891\u6570\u636e\u7684\u89e3\u51b3\u65b9\u6848 \u4f7f\u7528\u8679\u8f6f\u5f00\u653e\u5e73\u53f0\u8fdb\u884c\u4eba\u8138\u8bc6\u522b\u7684\u89e3\u51b3\u65b9\u6848 2.7\u3001\u6280\u672f\u4eae\u70b9 \u00b6 \u91c7\u7528Elasticsearch geo\u5b9e\u73b0\u5730\u7406\u4f4d\u7f6e\u67e5\u8be2 \u91c7\u7528RocketMQ\u4f5c\u4e3a\u6d88\u606f\u670d\u52a1\u4e2d\u95f4\u4ef6 \u91c7\u7528MongoDB\u8fdb\u884c\u6d77\u91cf\u6570\u636e\u7684\u5b58\u50a8 \u91c7\u7528Spark + Mllib\u5b9e\u73b0\u667a\u80fd\u63a8\u8350 \u91c7\u7528\u73af\u4fe1\u670d\u52a1\u5b9e\u73b0\u5373\u65f6\u901a\u8baf \u91c7\u7528\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf\u5b58\u50a8\u5c0f\u89c6\u9891\u6570\u636e \u91c7\u7528Apache Dobbo\u4f5c\u4e3a\u5fae\u670d\u52a1\u67b6\u6784\u6280\u672f \u91c7\u7528SpringBoot + Mybatis\u5b9e\u73b0\u7cfb\u7edf\u4e3b\u67b6\u6784 \u91c7\u7528Redis\u96c6\u7fa4\u5b9e\u73b0\u7f13\u5b58\u7684\u9ad8\u53ef\u7528 2.8\u3001\u5f00\u53d1\u65b9\u5f0f \u00b6 \u63a2\u82b1\u4ea4\u53cb\u9879\u76ee\u91c7\u7528\u524d\u540e\u7aef\u5206\u79bb\u7684\u65b9\u5f0f\u5f00\u53d1\uff0c\u5c31\u662f\u524d\u7aef\u7531\u524d\u7aef\u56e2\u961f\u8d1f\u8d23\u5f00\u53d1\uff0c\u540e\u7aef\u8d1f\u8d23\u63a5\u53e3\u7684\u5f00\u53d1\uff0c\u8fd9\u79cd\u5f00\u53d1\u65b9\u5f0f\u67092\u70b9\u597d\u5904\uff1a \u626c\u957f\u907f\u77ed\uff0c\u6bcf\u4e2a\u56e2\u961f\u505a\u81ea\u5df1\u64c5\u957f\u7684\u4e8b\u60c5 \u524d\u540e\u7aef\u5e76\u884c\u5f00\u53d1\uff0c\u9700\u8981\u4e8b\u5148\u7ea6\u5b9a\u597d\u63a5\u53e3\u5730\u5740\u4ee5\u53ca\u5404\u79cd\u53c2\u6570\u3001\u54cd\u5e94\u6570\u636e\u7ed3\u6784\u7b49 \u5bf9\u4e8e\u63a5\u53e3\u7684\u5b9a\u4e49\u6211\u4eec\u91c7\u7528YApi\u8fdb\u884c\u7ba1\u7406\uff0cYApi\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u63a5\u53e3\u5b9a\u4e49\u3001\u7ba1\u7406\u3001\u63d0\u4f9bmock\u6570\u636e\u7684\u7ba1\u7406\u5e73\u53f0\u3002 \u5730\u5740\uff1ahttps://mock-java.itheima.net/ \u7528\u6237\u540d\uff1atanhua@itcast.cn \u5bc6\u7801\uff1a123456 \u63a5\u53e3\u5b9a\u4e49\uff1a mock\u6570\u636e\uff0cYApi\u63d0\u4f9b\u4e86mock\u529f\u80fd\uff0c\u5c31\u662f\u6a21\u62df\u670d\u52a1\u7aef\u8fd4\u56de\u6d4b\u8bd5\u6570\u636e\uff1a \u8fd8\u53ef\u4ee5\u8fd0\u884chttp\u8bf7\u6c42\uff08\u9700\u8981\u5728Chrome\u4e2d\u5b89\u88c5\u652f\u6301\u8de8\u57df\u6269\u5c55 https://juejin.im/post/6844904057707085832\uff09\uff1a 2.9\u3001\u57fa\u7840\u73af\u5883 \u00b6 \u63a2\u82b1\u4ea4\u53cb\u9879\u76ee\u7684\u5f00\u53d1\u7edf\u4e00\u4f7f\u7528\u63d0\u4f9b\u7684Centos7\u73af\u5883\uff0c\u8be5\u73af\u5883\u4e2d\u90e8\u7f72\u5b89\u88c5\u4e86\u9879\u76ee\u6240\u9700\u8981\u7684\u5404\u79cd\u670d\u52a1\uff0c\u5982\uff1aMySQL\u3001MongoDB\u3001Redis\u3001RocketMQ\u7b49\u3002 \u865a\u62df\u673a\u7684root\u7528\u6237\u5bc6\u7801\u4e3a\uff1aroot123 \u9ed8\u8ba4\u53c2\u6570\uff1aCPU\uff1a2\u6838\uff0c\u5185\u5b58\uff1a4G\uff0c\u786c\u76d8\uff1a60G IP\u5730\u5740\u5efa\u8bae\u8bbe\u7f6e\u4e3a192.168.31.81\uff0c\u5426\u5219\u6709\u4e9b\u670d\u52a1\u5c06\u4e0d\u53ef\u7528\uff0c\u6bd4\u5982\uff1aRedis\u3001RocketMQ\u7b49\u3002 3\u3001\u6ce8\u518c\u767b\u5f55 \u00b6 \u4e1a\u52a1\u8bf4\u660e\uff1a \u7528\u6237\u901a\u8fc7\u624b\u673a\u9a8c\u8bc1\u7801\u8fdb\u884c\u767b\u5f55\uff0c\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u767b\u5f55\u5219\u9700\u8981\u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f\uff0c\u5728\u4e0a\u4f20\u56fe\u7247\u65f6\uff0c\u9700\u8981\u5bf9\u4e0a\u4f20\u7684\u56fe\u7247\u505a\u4eba\u50cf\u7684\u6821\u9a8c\uff0c\u9632\u6b62\u7528\u6237\u4e0a\u4f20\u975e\u4eba\u50cf\u7684\u56fe\u7247\u4f5c\u4e3a\u5934\u50cf\u3002\u6d41\u7a0b\u5b8c\u6210\u540e\uff0c\u5219\u767b\u5f55\u6210\u529f\u3002 \u6d41\u7a0b\uff1a 3.1\u3001\u5355\u70b9\u767b\u5f55\u7cfb\u7edf \u00b6 \u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u5355\u70b9\u767b\u5f55\u7cfb\u7edf\uff1f \u4ee5\u524d\u5b9e\u73b0\u7684\u767b\u5f55\u548c\u6ce8\u518c\u662f\u5728\u540c\u4e00\u4e2atomcat\u5185\u90e8\u5b8c\u6210\uff0c\u6211\u4eec\u73b0\u5728\u7684\u7cfb\u7edf\u67b6\u6784\u662f\u6bcf\u4e00\u4e2a\u7cfb\u7edf\u90fd\u662f\u7531\u4e00\u4e2a\u56e2\u961f\u8fdb\u884c\u7ef4\u62a4\uff0c\u6bcf\u4e2a\u7cfb\u7edf\u90fd\u662f\u5355\u72ec\u90e8\u7f72\u8fd0\u884c\u4e00\u4e2a\u5355\u72ec\u7684tomcat\uff0c\u6240\u4ee5\uff0c\u4e0d\u80fd\u5c06\u7528\u6237\u7684\u767b\u5f55\u4fe1\u606f\u4fdd\u5b58\u5230session\u4e2d\uff08\u591a\u4e2atomcat\u7684session\u662f\u4e0d\u80fd\u5171\u4eab\u7684\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5355\u72ec\u7684\u7cfb\u7edf\u6765\u7ef4\u62a4\u7528\u6237\u7684\u767b\u5f55\u4fe1\u606f\u3002 \u7531\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff1a \u5ba2\u6237\u7aef\u9700\u8981\u901a\u8fc7SSO\u7cfb\u7edf\u624d\u80fd\u83b7\u53d6\u5230token\uff1b \u5ba2\u6237\u7aef\u5728\u8bf7\u6c42\u670d\u52a1\u7cfb\u7edf\u65f6\uff0c\u670d\u52a1\u7cfb\u7edf\u9700\u8981\u901a\u8fc7SSO\u7cfb\u7edf\u8fdb\u884c\u5bf9token\u8fdb\u884c\u6821\u9a8c\uff1b SSO\u7cfb\u7edf\u5728\u6574\u4e2a\u7cfb\u7edf\u67b6\u6784\u4e2d\u5904\u4e8e\u6838\u5fc3\u4f4d\u7f6e\uff1b 3.2\u3001\u642d\u5efa\u5de5\u7a0b \u00b6 3.2.1\u3001my-tanhua \u00b6 itcast-tanhua\u662f\u7236\u5de5\u7a0b\uff0c\u96c6\u4e2d\u5b9a\u4e49\u4e86\u4f9d\u8d56\u7684\u7248\u672c\u4ee5\u53ca\u6240\u9700\u8981\u7684\u4f9d\u8d56\u4fe1\u606f\u3002 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-parent </artifactId> <version> 2.1.0.RELEASE </version> </parent> <groupId> cn.itcast.tanhua </groupId> <artifactId> my-tanhua </artifactId> <version> 1.0-SNAPSHOT </version> <!-- \u96c6\u4e2d\u5b9a\u4e49\u4f9d\u8d56\u7248\u672c\u53f7 --> <properties> <mysql.version> 5.1.47 </mysql.version> <jackson.version> 2.9.9 </jackson.version> <druid.version> 1.0.9 </druid.version> <servlet-api.version> 2.5 </servlet-api.version> <jsp-api.version> 2.0 </jsp-api.version> <joda-time.version> 2.9.9 </joda-time.version> <commons-lang3.version> 3.7 </commons-lang3.version> <commons-io.version> 1.3.2 </commons-io.version> <mybatis.version> 3.2.8 </mybatis.version> <mybatis.mybatis-plus> 3.1.1 </mybatis.mybatis-plus> <lombok.version> 1.18.4 </lombok.version> </properties> <!--\u901a\u7528\u4f9d\u8d56--> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-test </artifactId> <scope> test </scope> </dependency> <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> <version> 4.12 </version> <scope> test </scope> </dependency> </dependencies> <dependencyManagement> <dependencies> <!-- mybatis-plus\u63d2\u4ef6\u4f9d\u8d56 --> <dependency> <groupId> com.baomidou </groupId> <artifactId> mybatis-plus </artifactId> <version> ${mybatis.mybatis-plus} </version> </dependency> <dependency> <groupId> com.baomidou </groupId> <artifactId> mybatis-plus-boot-starter </artifactId> <version> ${mybatis.mybatis-plus} </version> </dependency> <!-- MySql --> <dependency> <groupId> mysql </groupId> <artifactId> mysql-connector-java </artifactId> <version> ${mysql.version} </version> </dependency> <dependency> <groupId> org.mongodb </groupId> <artifactId> mongodb-driver-sync </artifactId> <version> 3.9.1 </version> </dependency> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> <optional> true </optional> <version> ${lombok.version} </version> </dependency> <dependency> <groupId> org.apache.commons </groupId> <artifactId> commons-lang3 </artifactId> <version> ${commons-lang3.version} </version> </dependency> <!--RocketMQ\u76f8\u5173--> <dependency> <groupId> org.apache.rocketmq </groupId> <artifactId> rocketmq-spring-boot-starter </artifactId> <version> 2.0.3 </version> </dependency> <dependency> <groupId> org.apache.rocketmq </groupId> <artifactId> rocketmq-client </artifactId> <version> 4.6.0 </version> </dependency> <!-- Jackson Json\u5904\u7406\u5de5\u5177\u5305 --> <dependency> <groupId> com.fasterxml.jackson.core </groupId> <artifactId> jackson-databind </artifactId> <version> ${jackson.version} </version> </dependency> <dependency> <groupId> com.alibaba </groupId> <artifactId> druid </artifactId> <version> ${druid.version} </version> </dependency> <dependency> <groupId> commons-codec </groupId> <artifactId> commons-codec </artifactId> <version> 1.11 </version> </dependency> <dependency> <groupId> joda-time </groupId> <artifactId> joda-time </artifactId> <version> ${joda-time.version} </version> </dependency> <dependency> <groupId> io.netty </groupId> <artifactId> netty-all </artifactId> <version> 4.1.32.Final </version> </dependency> <!--zk\u4f9d\u8d56--> <dependency> <groupId> org.apache.zookeeper </groupId> <artifactId> zookeeper </artifactId> <version> 3.4.13 </version> </dependency> <dependency> <groupId> com.github.sgroschupf </groupId> <artifactId> zkclient </artifactId> <version> 0.1 </version> </dependency> <!--dubbo\u7684springboot\u652f\u6301--> <dependency> <groupId> com.alibaba.boot </groupId> <artifactId> dubbo-spring-boot-starter </artifactId> <version> 0.2.0 </version> </dependency> <!--dubbo\u6846\u67b6--> <dependency> <groupId> com.alibaba </groupId> <artifactId> dubbo </artifactId> <version> 2.6.4 </version> </dependency> <dependency> <groupId> com.aliyun.oss </groupId> <artifactId> aliyun-sdk-oss </artifactId> <version> 2.8.3 </version> </dependency> <dependency> <groupId> com.aliyun </groupId> <artifactId> aliyun-java-sdk-core </artifactId> <version> 4.5.3 </version> </dependency> <dependency> <groupId> com.github.tobato </groupId> <artifactId> fastdfs-client </artifactId> <version> 1.26.7 </version> <exclusions> <exclusion> <groupId> ch.qos.logback </groupId> <artifactId> logback-classic </artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId> io.jsonwebtoken </groupId> <artifactId> jjwt </artifactId> <version> 0.9.1 </version> </dependency> </dependencies> </dependencyManagement> <build> <plugins> <!-- java\u7f16\u8bd1\u63d2\u4ef6 --> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-compiler-plugin </artifactId> <version> 3.2 </version> <configuration> <source> 1.8 </source> <target> 1.8 </target> <encoding> UTF-8 </encoding> </configuration> </plugin> </plugins> </build> </project> 3.2.2\u3001my-tanhua-sso \u00b6 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> my-tanhua </artifactId> <groupId> cn.itcast.tanhua </groupId> <version> 1.0-SNAPSHOT </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> my-tanhua-sso </artifactId> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> </dependency> <dependency> <groupId> com.baomidou </groupId> <artifactId> mybatis-plus </artifactId> </dependency> <dependency> <groupId> com.baomidou </groupId> <artifactId> mybatis-plus-boot-starter </artifactId> </dependency> <dependency> <groupId> mysql </groupId> <artifactId> mysql-connector-java </artifactId> </dependency> <dependency> <groupId> com.alibaba </groupId> <artifactId> druid </artifactId> </dependency> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> </dependency> <dependency> <groupId> org.apache.commons </groupId> <artifactId> commons-lang3 </artifactId> </dependency> <dependency> <groupId> com.fasterxml.jackson.core </groupId> <artifactId> jackson-databind </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-redis </artifactId> </dependency> <dependency> <groupId> commons-codec </groupId> <artifactId> commons-codec </artifactId> </dependency> <!--RocketMQ\u76f8\u5173--> <dependency> <groupId> org.apache.rocketmq </groupId> <artifactId> rocketmq-spring-boot-starter </artifactId> </dependency> <dependency> <groupId> org.apache.rocketmq </groupId> <artifactId> rocketmq-client </artifactId> </dependency> <!--\u7b80\u5316\u4ee3\u7801\u7684\u5de5\u5177\u5305--> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> <optional> true </optional> </dependency> <dependency> <groupId> com.aliyun </groupId> <artifactId> aliyun-java-sdk-core </artifactId> </dependency> <dependency> <groupId> io.jsonwebtoken </groupId> <artifactId> jjwt </artifactId> </dependency> <dependency> <groupId> joda-time </groupId> <artifactId> joda-time </artifactId> </dependency> </dependencies> </project> 3.2.3\u3001\u7f51\u6613\u6a21\u62df\u5668 \u00b6 \u63a2\u82b1\u4ea4\u53cb\u9879\u76ee\u7684\u524d\u7aef\u91c7\u7528Android APP\u7684\u5f62\u5f0f\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4f7f\u7528\u6a21\u62df\u5668\u6216\u771f\u673a\u8fdb\u884c\u6d4b\u8bd5\u3002 \u5bf9\u4e8e\u6a21\u62df\u5668\u8fd9\u91cc\u63a8\u8350\u4f7f\u7528\u7f51\u6613\u6a21\u62df\u5668\uff0c\u5176\u517c\u5bb9\u6027\u597d\u3001\u529f\u80fd\u5b8c\u5584\u800c\u4e14\u8fd8\u7b80\u6d01\uff0c\u7f3a\u70b9\u662f\u5b83\u4e0d\u652f\u6301\u865a\u62df\u673a\u4e2d\u5b89\u88c5\u3002 \u4e0b\u8f7d\uff1ahttps://mumu.163.com/ 3.3\u3001\u6570\u636e\u5e93\u8868 \u00b6 \u6570\u636e\u5e93\u4f7f\u7528\u7684mysql\uff1a CREATE TABLE ` tb_user ` ( ` id ` bigint ( 20 ) NOT NULL AUTO_INCREMENT , ` mobile ` varchar ( 11 ) DEFAULT NULL COMMENT '\u624b\u673a\u53f7' , ` password ` varchar ( 32 ) DEFAULT NULL COMMENT '\u5bc6\u7801\uff0c\u9700\u8981\u52a0\u5bc6' , ` created ` datetime DEFAULT NULL , ` updated ` datetime DEFAULT NULL , PRIMARY KEY ( ` id ` ), KEY ` mobile ` ( ` mobile ` ) USING BTREE ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8 COMMENT = '\u7528\u6237\u8868' ; CREATE TABLE ` tb_user_info ` ( ` id ` bigint ( 20 ) NOT NULL AUTO_INCREMENT , ` user_id ` bigint ( 20 ) NOT NULL COMMENT '\u7528\u6237id' , ` nick_name ` varchar ( 50 ) DEFAULT NULL COMMENT '\u6635\u79f0' , ` logo ` varchar ( 100 ) DEFAULT NULL COMMENT '\u7528\u6237\u5934\u50cf' , ` tags ` varchar ( 50 ) DEFAULT NULL COMMENT '\u7528\u6237\u6807\u7b7e\uff1a\u591a\u4e2a\u7528\u9017\u53f7\u5206\u9694' , ` sex ` int ( 1 ) DEFAULT '3' COMMENT '\u6027\u522b\uff0c1-\u7537\uff0c2-\u5973\uff0c3-\u672a\u77e5' , ` age ` int ( 11 ) DEFAULT NULL COMMENT '\u7528\u6237\u5e74\u9f84' , ` edu ` varchar ( 20 ) DEFAULT NULL COMMENT '\u5b66\u5386' , ` city ` varchar ( 20 ) DEFAULT NULL COMMENT '\u5c45\u4f4f\u57ce\u5e02' , ` birthday ` varchar ( 20 ) DEFAULT NULL COMMENT '\u751f\u65e5' , ` cover_pic ` varchar ( 50 ) DEFAULT NULL COMMENT '\u5c01\u9762\u56fe\u7247' , ` industry ` varchar ( 20 ) DEFAULT NULL COMMENT '\u884c\u4e1a' , ` income ` varchar ( 20 ) DEFAULT NULL COMMENT '\u6536\u5165' , ` marriage ` varchar ( 20 ) DEFAULT NULL COMMENT '\u5a5a\u59fb\u72b6\u6001' , ` created ` datetime DEFAULT NULL , ` updated ` datetime DEFAULT NULL , PRIMARY KEY ( ` id ` ), KEY ` user_id ` ( ` user_id ` ) ) ENGINE = InnoDB DEFAULT CHARSET = utf8 COMMENT = '\u7528\u6237\u4fe1\u606f\u8868' ; 3.4\u3001\u7f16\u5199\u914d\u7f6e \u00b6 application.properties\uff1a spring.application.name = itcast-tanhua-sso server.port = 18080 spring.datasource.driver-class-name = com.mysql.jdbc.Driver spring.datasource.url = jdbc:mysql://192.168.31.81:3306/mytanhua?useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true&useSSL=false spring.datasource.username = root spring.datasource.password = root # \u679a\u4e3e\u5305\u626b\u63cf mybatis-plus.type-enums-package = com.tanhua.sso.enums # \u8868\u540d\u524d\u7f00 mybatis-plus.global-config.db-config.table-prefix = tb_ # id\u7b56\u7565\u4e3a\u81ea\u589e\u957f mybatis-plus.global-config.db-config.id-type = auto # Redis\u76f8\u5173\u914d\u7f6e spring.redis.jedis.pool.max-wait = 5000ms spring.redis.jedis.pool.max-Idle = 100 spring.redis.jedis.pool.min-Idle = 10 spring.redis.timeout = 10s spring.redis.cluster.nodes = 192.168.31.81:6379,192.168.31.81:6380,192.168.31.81:6381 spring.redis.cluster.max-redirects = 5 # RocketMQ\u76f8\u5173\u914d\u7f6e rocketmq.name-server = 192.168.31.81:9876 rocketmq.producer.group = tanhua #itcast_tanhua #\u76d0 \u503c jwt.secret = 76bd425b6f29f7fcc2e0bfc286043df1 #\u8679\u8f6f\u76f8\u5173\u914d\u7f6e arcsoft.appid = ***** arcsoft.sdkKey = **** arcsoft.libPath = F:\\\\code\\\\WIN64 3.5\u3001\u7f16\u5199\u57fa\u7840\u4ee3\u7801 \u00b6 3.5.1\u3001Lombok \u00b6 lombok \u63d0\u4f9b\u4e86\u7b80\u5355\u7684\u6ce8\u89e3\u7684\u5f62\u5f0f\u6765\u5e2e\u52a9\u6211\u4eec\u7b80\u5316\u6d88\u9664\u4e00\u4e9b\u5fc5\u987b\u6709\u4f46\u663e\u5f97\u5f88\u81c3\u80bf\u7684 java \u4ee3\u7801\uff0c\u5c24\u5176\u662f\u9488\u5bf9pojo\u3002 \u5b98\u7f51\uff1ahttps://projectlombok.org/ 3.5.1.1\u3001\u914d\u7f6e\u5b89\u88c5 \u00b6 \u5bfc\u5165\u4f9d\u8d56\uff1a <!--\u7b80\u5316\u4ee3\u7801\u7684\u5de5\u5177\u5305--> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> <optional> true </optional> </dependency> \u5b89\u88c5IDEA\u63d2\u4ef6\uff1a \u5982\u679c\u4e0d\u5b89\u88c5\u63d2\u4ef6\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u6b63\u5e38\u6267\u884c\uff0c\u4f46\u662f\u770b\u4e0d\u5230\u751f\u6210\u7684\u4e00\u4e9b\u4ee3\u7801\uff0c\u5982\uff1aget\u3001set\u65b9\u6cd5\u3002 3.5.1.2\u3001\u5e38\u7528\u6ce8\u89e3 \u00b6 @Data\uff1a\u6ce8\u89e3\u5728\u7c7b\u4e0a\uff1b\u63d0\u4f9b\u7c7b\u6240\u6709\u5c5e\u6027\u7684 getting \u548c setting \u65b9\u6cd5\uff0c\u6b64\u5916\u8fd8\u63d0\u4f9b\u4e86equals\u3001canEqual\u3001hashCode\u3001toString \u65b9\u6cd5 @Setter\uff1a\u6ce8\u89e3\u5728\u5c5e\u6027\u4e0a\uff1b\u4e3a\u5c5e\u6027\u63d0\u4f9b setting \u65b9\u6cd5 @Getter\uff1a\u6ce8\u89e3\u5728\u5c5e\u6027\u4e0a\uff1b\u4e3a\u5c5e\u6027\u63d0\u4f9b getting \u65b9\u6cd5 @Slf4j\uff1a\u6ce8\u89e3\u5728\u7c7b\u4e0a\uff1b\u4e3a\u7c7b\u63d0\u4f9b\u4e00\u4e2a \u5c5e\u6027\u540d\u4e3alog \u7684 slf4j\u65e5\u5fd7\u5bf9\u8c61 @NoArgsConstructor\uff1a\u6ce8\u89e3\u5728\u7c7b\u4e0a\uff1b\u4e3a\u7c7b\u63d0\u4f9b\u4e00\u4e2a\u65e0\u53c2\u7684\u6784\u9020\u65b9\u6cd5 @AllArgsConstructor\uff1a\u6ce8\u89e3\u5728\u7c7b\u4e0a\uff1b\u4e3a\u7c7b\u63d0\u4f9b\u4e00\u4e2a\u5168\u53c2\u7684\u6784\u9020\u65b9\u6cd5 @Builder\uff1a\u4f7f\u7528Builder\u6a21\u5f0f\u6784\u5efa\u5bf9\u8c61 \u6d4b\u8bd5\u4e00\uff1a\u4f7f\u7528@Data\u6ce8\u89e3 \u662f\u4e0d\u662f\u5f88\u795e\u5947\uff1f\uff01 \u6d4b\u8bd5\u4e8c\uff1a\u4f7f\u7528@Slf4j\u6ce8\u89e3 \u6d4b\u8bd5\uff1a \u6d4b\u8bd5\u4e09\uff1a@AllArgsConstructor\u3001@NoArgsConstructor\u6ce8\u89e3\u7684\u4f7f\u7528 \u6d4b\u8bd5\u56db\uff1a@Builder \u6d4b\u8bd5\u7ed3\u679c\uff1a 3.5.2\u3001SexEnum \u00b6 \u7528\u6237\u7684\u6027\u522b\u7528\u679a\u4e3e\u8fdb\u884c\u8868\u793a\u3002 package com.tanhua.sso.enums ; import com.baomidou.mybatisplus.core.enums.IEnum ; public enum SexEnum implements IEnum < Integer > { MAN ( 1 , \"\u7537\" ), WOMAN ( 2 , \"\u5973\" ), UNKNOWN ( 3 , \"\u672a\u77e5\" ); private int value ; private String desc ; SexEnum ( int value , String desc ) { this . value = value ; this . desc = desc ; } @Override public Integer getValue () { return this . value ; } @Override public String toString () { return this . desc ; } } 3.5.3\u3001User\u3001UserInfo \u00b6 package com.tanhua.sso.pojo ; import com.baomidou.mybatisplus.annotation.FieldFill ; import com.baomidou.mybatisplus.annotation.TableField ; import lombok.Data ; import java.util.Date ; @Data public abstract class BasePojo { @TableField ( fill = FieldFill . INSERT ) //MP\u81ea\u52a8\u586b\u5145 private Date created ; @TableField ( fill = FieldFill . INSERT_UPDATE ) private Date updated ; } package com.tanhua.sso.pojo ; import com.fasterxml.jackson.annotation.JsonIgnore ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class User extends BasePojo { private Long id ; private String mobile ; //\u624b\u673a\u53f7 @JsonIgnore private String password ; //\u5bc6\u7801\uff0cjson\u5e8f\u5217\u5316\u65f6\u5ffd\u7565 } package com.tanhua.sso.pojo ; import com.tanhua.sso.enums.SexEnum ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class UserInfo extends BasePojo { private Long id ; private Long userId ; //\u7528\u6237id private String nickName ; //\u6635\u79f0 private String logo ; //\u7528\u6237\u5934\u50cf private String tags ; //\u7528\u6237\u6807\u7b7e\uff1a\u591a\u4e2a\u7528\u9017\u53f7\u5206\u9694 private SexEnum sex ; //\u6027\u522b private Integer age ; //\u5e74\u9f84 private String edu ; //\u5b66\u5386 private String city ; //\u57ce\u5e02 private String birthday ; //\u751f\u65e5 private String coverPic ; // \u5c01\u9762\u56fe\u7247 private String industry ; //\u884c\u4e1a private String income ; //\u6536\u5165 private String marriage ; //\u5a5a\u59fb\u72b6\u6001 } 3.5.4\u3001MyMetaObjectHandler \u00b6 \u5bf9\u81ea\u52a8\u586b\u5145\u5b57\u6bb5\u7684\u5904\u7406\uff1a package com.tanhua.sso.handler ; import com.baomidou.mybatisplus.core.handlers.MetaObjectHandler ; import org.apache.ibatis.reflection.MetaObject ; import org.springframework.stereotype.Component ; import java.util.Date ; @Component public class MyMetaObjectHandler implements MetaObjectHandler { @Override public void insertFill ( MetaObject metaObject ) { Object created = getFieldValByName ( \"created\" , metaObject ); if ( null == created ) { //\u5b57\u6bb5\u4e3a\u7a7a\uff0c\u53ef\u4ee5\u8fdb\u884c\u586b\u5145 setFieldValByName ( \"created\" , new Date (), metaObject ); } Object updated = getFieldValByName ( \"updated\" , metaObject ); if ( null == updated ) { //\u5b57\u6bb5\u4e3a\u7a7a\uff0c\u53ef\u4ee5\u8fdb\u884c\u586b\u5145 setFieldValByName ( \"updated\" , new Date (), metaObject ); } } @Override public void updateFill ( MetaObject metaObject ) { //\u66f4\u65b0\u6570\u636e\u65f6\uff0c\u76f4\u63a5\u66f4\u65b0\u5b57\u6bb5 setFieldValByName ( \"updated\" , new Date (), metaObject ); } } 3.5.5\u3001UserMapper \u00b6 package com.tanhua.sso.mapper ; import com.baomidou.mybatisplus.core.mapper.BaseMapper ; import com.tanhua.sso.pojo.User ; public interface UserMapper extends BaseMapper < User > { } package com.tanhua.sso.mapper ; import com.baomidou.mybatisplus.core.mapper.BaseMapper ; import com.tanhua.sso.pojo.UserInfo ; public interface UserInfoMapper extends BaseMapper < UserInfo > { } 3.5.6\u3001MyApplication \u00b6 SpringBoot\u7684\u542f\u52a8\u7c7b\u3002 package com.tanhua.sso ; import org.mybatis.spring.annotation.MapperScan ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @MapperScan ( \"com.tanhua.sso.mapper\" ) //\u8bbe\u7f6emapper\u63a5\u53e3\u7684\u626b\u63cf\u5305 @SpringBootApplication public class MyApplication { public static void main ( String [] args ) { SpringApplication . run ( MyApplication . class , args ); } } 3.6\u3001\u77ed\u4fe1\u9a8c\u8bc1\u7801 \u00b6 \u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801\u7684\u6d41\u7a0b\uff1a \u6d41\u7a0b\u8bf4\u660e\uff1a \u7528\u6237\u5411SSO\u7cfb\u7edf\u53d1\u9001\u8bf7\u6c42\uff0c\u5728\u8bf7\u6c42\u4e2d\u4f20\u9012\u624b\u673a\u53f7\uff1b SSO\u7cfb\u7edf\u63a5\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u751f\u6210\u968f\u673a\u9a8c\u8bc1\u7801\u4ee5\u53ca\u77ed\u4fe1\u5185\u5bb9\uff0c\u8bf7\u6c42\u963f\u91cc\u4e91\u77ed\u4fe1\u670d\u52a1\uff1b \u963f\u91cc\u4e91\u77ed\u4fe1\u670d\u52a1\u63a5\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u4f1a\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u9a8c\u8bc1\uff0c\u6bd4\u5982\u8d26\u53f7\u4f59\u989d\u3001\u77ed\u4fe1\u6a21\u677f\u662f\u5426\u6b63\u786e\u7b49\uff0c\u6700\u540e\u5411\u8fd0\u8425\u5546\u53d1\u8d77\u8bf7\u6c42\uff1b \u8fd0\u8425\u5546\u63a5\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u5411\u8be5\u624b\u673a\u53f7\u4e0b\u53d1\u77ed\u4fe1\uff0c\u7528\u6237\u5373\u53ef\u6536\u5230\u77ed\u4fe1\uff1b 3.6.1\u3001\u963f\u91cc\u4e91\u77ed\u4fe1\u670d\u52a1 \u00b6 3.6.1.1\u3001\u7533\u8bf7\u7b7e\u540d\u4e0e\u6a21\u677f \u00b6 https://dysms.console.aliyun.com/dysms.htm?spm=5176.12818093.0.ddysms.2a4316d0ql6PyD \u8bf4\u660e\uff1a\u7533\u8bf7\u7b7e\u540d\u65f6\uff0c\u4e2a\u4eba\u7528\u6237\u53ea\u80fd\u7533\u8bf7\u4e00\u4e2a\u5e76\u4e14\u7b7e\u540d\u7684\u540d\u79f0\u5fc5\u987b\u4e3a\u201cABC\u5546\u57ce\u201d\uff0c\u5426\u5219\u5ba1\u6838\u4e0d\u901a\u8fc7\u3002 \u7533\u8bf7\u6a21\u677f\uff1a \u5ba1\u6838\u65f6\u95f4\u9700\u89811~2\u5c0f\u65f6\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85~ 3.6.1.2\u3001\u8bbe\u7f6e\u7528\u6237\u6743\u9650 \u00b6 \u5728\u963f\u91cc\u4e91\u4e2d\uff0c\u9700\u8981\u5728RAM\u670d\u52a1\u4e2d\u521b\u5efa\u7528\u6237\u4ee5\u53ca\u6743\u9650\uff0c\u624d\u80fd\u901a\u8fc7api\u8fdb\u884c\u8bbf\u95ee\u63a5\u53e3\u3002 \u521b\u5efa\u7528\u6237\uff1a \u521b\u5efa\u5b8c\u6210\u540e\u8981\u4fdd\u5b58AccessKey Secret\u548cAccessKey ID\uff0cAccessKey Secret\u53ea\u663e\u793a\u8fd9\u4e00\u6b21\uff0c\u540e\u9762\u5c06\u4e0d\u518d\u663e\u793a\u3002 \u6dfb\u52a0\u6743\u9650\uff1a 3.6.1.3\u3001\u793a\u4f8b\u4ee3\u7801 \u00b6 \u6587\u6863\uff1ahttps://help.aliyun.com/document_detail/101414.html?spm=a2c4g.11186623.6.625.18705ffa8u4lwj\uff1a package com.tanhua.sso.service ; import com.aliyuncs.CommonRequest ; import com.aliyuncs.CommonResponse ; import com.aliyuncs.DefaultAcsClient ; import com.aliyuncs.IAcsClient ; import com.aliyuncs.exceptions.ClientException ; import com.aliyuncs.exceptions.ServerException ; import com.aliyuncs.http.MethodType ; import com.aliyuncs.profile.DefaultProfile ; /* pom.xml <dependency> <groupId>com.aliyun</groupId> <artifactId>aliyun-java-sdk-core</artifactId> <version>4.5.3</version> </dependency> */ public class SendSms { public static void main ( String [] args ) { DefaultProfile profile = DefaultProfile . getProfile ( \"cn-hangzhou\" , \"LTAI4G7d2Q9CHc741gighjTF\" , \"uKOOGdIKvmoGhHlej8cJY8H3nlU6Fj\" ); IAcsClient client = new DefaultAcsClient ( profile ); CommonRequest request = new CommonRequest (); request . setSysMethod ( MethodType . POST ); request . setSysDomain ( \"dysmsapi.aliyuncs.com\" ); request . setSysVersion ( \"2017-05-25\" ); request . setSysAction ( \"SendSms\" ); request . putQueryParameter ( \"RegionId\" , \"cn-hangzhou\" ); request . putQueryParameter ( \"PhoneNumbers\" , \"158****7944\" ); //\u76ee\u6807\u624b\u673a\u53f7 request . putQueryParameter ( \"SignName\" , \"ABC\u5546\u57ce\" ); //\u7b7e\u540d\u540d\u79f0 request . putQueryParameter ( \"TemplateCode\" , \"SMS_204756062\" ); //\u77ed\u4fe1\u6a21\u677fcode request . putQueryParameter ( \"TemplateParam\" , \"{\\\"code\\\":\\\"123456\\\"}\" ); //\u6a21\u677f\u4e2d\u53d8\u91cf\u66ff\u6362 try { CommonResponse response = client . getCommonResponse ( request ); //{\"Message\":\"OK\",\"RequestId\":\"EC2D4C9A-0EAC-4213-BE45-CE6176E1DF23\",\"BizId\":\"110903802851113360^0\",\"Code\":\"OK\"} System . out . println ( response . getData ()); } catch ( ServerException e ) { e . printStackTrace (); } catch ( ClientException e ) { e . printStackTrace (); } } } 3.6.1.4\u3001\u5b9e\u73b0\u53d1\u9001\u77ed\u4fe1\u65b9\u6cd5 \u00b6 \u914d\u7f6e\u6587\u4ef6\uff1aaliyun.properties aliyun.sms.regionId = cn-hangzhou aliyun.sms.accessKeyId = LTAI4G7d2Q9CHc741gighjTF aliyun.sms.accessKeySecret = uKOOGdIKvmoGhHlej8cJY8H3nlU6Fj aliyun.sms.domain = dysmsapi.aliyuncs.com aliyun.sms.signName = ABC\u5546\u57ce aliyun.sms.templateCode = SMS_204756062 \u9700\u8981\u6ce8\u610f\u4e2d\u6587\u7f16\u7801\u95ee\u9898\uff1a \u8bfb\u53d6\u914d\u7f6e\uff1a package com.tanhua.sso.config ; import lombok.Data ; import org.springframework.boot.context.properties.ConfigurationProperties ; import org.springframework.context.annotation.Configuration ; import org.springframework.context.annotation.PropertySource ; @Configuration @PropertySource ( \"classpath:aliyun.properties\" ) @ConfigurationProperties ( prefix = \"aliyun.sms\" ) @Data public class AliyunSMSConfig { private String regionId ; private String accessKeyId ; private String accessKeySecret ; private String domain ; private String signName ; private String templateCode ; } \u4ee3\u7801\u5b9e\u73b0\uff1a //SmsService.java /** * \u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801 * * @param mobile * @return */ public String sendSms ( String mobile ) { DefaultProfile profile = DefaultProfile . getProfile ( this . aliyunSMSConfig . getRegionId (), this . aliyunSMSConfig . getAccessKeyId (), this . aliyunSMSConfig . getAccessKeySecret ()); IAcsClient client = new DefaultAcsClient ( profile ); String code = RandomUtils . nextInt ( 100000 , 999999 ) + \"\" ; CommonRequest request = new CommonRequest (); request . setSysMethod ( MethodType . POST ); request . setSysDomain ( this . aliyunSMSConfig . getDomain ()); request . setSysVersion ( \"2017-05-25\" ); request . setSysAction ( \"SendSms\" ); request . putQueryParameter ( \"RegionId\" , this . aliyunSMSConfig . getRegionId ()); request . putQueryParameter ( \"PhoneNumbers\" , mobile ); //\u76ee\u6807\u624b\u673a\u53f7 request . putQueryParameter ( \"SignName\" , this . aliyunSMSConfig . getSignName ()); //\u7b7e\u540d\u540d\u79f0 request . putQueryParameter ( \"TemplateCode\" , this . aliyunSMSConfig . getTemplateCode ()); //\u77ed\u4fe1\u6a21\u677fcode request . putQueryParameter ( \"TemplateParam\" , \"{\\\"code\\\":\\\"\" + code + \"\\\"}\" ); //\u6a21\u677f\u4e2d\u53d8\u91cf\u66ff\u6362 try { CommonResponse response = client . getCommonResponse ( request ); String data = response . getData (); if ( StringUtils . contains ( data , \"\\\"Message\\\":\\\"OK\\\"\" )) { return code ; } log . info ( \"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801\u5931\u8d25~ data = \" + data ); } catch ( Exception e ) { log . error ( \"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801\u5931\u8d25~ mobile = \" + mobile , e ); } return null ; } 3.6.2\u3001SSO\u77ed\u4fe1\u63a5\u53e3\u670d\u52a1 \u00b6 3.6.2.1\u3001mock\u63a5\u53e3 \u00b6 \u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/581 3.6.2.2\u3001\u7f16\u5199\u63a5\u53e3\u670d\u52a1 \u00b6 \u7f16\u5199ErrorResult\uff0cErrorResult\u5bf9\u8c61\u662f\u4e0e\u524d\u7aef\u7ea6\u5b9a\u597d\u7684\u7ed3\u6784\uff0c\u5982\u679c\u53d1\u751f\u9519\u8bef\u9700\u8981\u8fd4\u56de\u8be5\u5bf9\u8c61\uff0c\u5982\u679c\u672a\u53d1\u751f\u9519\u8bef\u54cd\u5e94200\u5373\u53ef\u3002 package com.tanhua.sso.vo ; import lombok.Builder ; import lombok.Data ; @Data @Builder public class ErrorResult { private String errCode ; private String errMessage ; } SmsController\uff1a package com.tanhua.sso.controller ; import com.tanhua.sso.service.SmsService ; import com.tanhua.sso.vo.ErrorResult ; import lombok.extern.slf4j.Slf4j ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.PostMapping ; import org.springframework.web.bind.annotation.RequestBody ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RestController ; import java.util.Map ; @RestController @RequestMapping ( \"user\" ) @Slf4j public class SmsController { @Autowired private SmsService smsService ; /** * \u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801\u63a5\u53e3 * * @param param * @return */ @PostMapping ( \"login\" ) public ResponseEntity < ErrorResult > sendCheckCode ( @RequestBody Map < String , String > param ) { ErrorResult errorResult = null ; String phone = param . get ( \"phone\" ); try { errorResult = this . smsService . sendCheckCode ( phone ); if ( null == errorResult ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { log . error ( \"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801\u5931\u8d25~ phone = \" + phone , e ); errorResult = ErrorResult . builder (). errCode ( \"000002\" ). errMessage ( \"\u77ed\u4fe1\u9a8c\u8bc1\u7801\u53d1\u9001\u5931\u8d25\uff01\" ). build (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). body ( errorResult ); } } SmsService\uff1a package com.tanhua.sso.service ; import com.aliyuncs.CommonRequest ; import com.aliyuncs.CommonResponse ; import com.aliyuncs.DefaultAcsClient ; import com.aliyuncs.IAcsClient ; import com.aliyuncs.exceptions.ClientException ; import com.aliyuncs.exceptions.ServerException ; import com.aliyuncs.http.MethodType ; import com.aliyuncs.profile.DefaultProfile ; import com.tanhua.sso.config.AliyunSMSConfig ; import com.tanhua.sso.vo.ErrorResult ; import lombok.extern.slf4j.Slf4j ; import org.apache.commons.lang3.RandomUtils ; import org.apache.commons.lang3.StringUtils ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.redis.core.RedisTemplate ; import org.springframework.stereotype.Service ; import java.time.Duration ; @Service @Slf4j public class SmsService { @Autowired private AliyunSMSConfig aliyunSMSConfig ; @Autowired private RedisTemplate < String , String > redisTemplate ; /** * \u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801 * * @param mobile * @return */ public String sendSms ( String mobile ) { DefaultProfile profile = DefaultProfile . getProfile ( this . aliyunSMSConfig . getRegionId (), this . aliyunSMSConfig . getAccessKeyId (), this . aliyunSMSConfig . getAccessKeySecret ()); IAcsClient client = new DefaultAcsClient ( profile ); String code = RandomUtils . nextInt ( 100000 , 999999 ) + \"\" ; CommonRequest request = new CommonRequest (); request . setSysMethod ( MethodType . POST ); request . setSysDomain ( this . aliyunSMSConfig . getDomain ()); request . setSysVersion ( \"2017-05-25\" ); request . setSysAction ( \"SendSms\" ); request . putQueryParameter ( \"RegionId\" , this . aliyunSMSConfig . getRegionId ()); request . putQueryParameter ( \"PhoneNumbers\" , mobile ); //\u76ee\u6807\u624b\u673a\u53f7 request . putQueryParameter ( \"SignName\" , this . aliyunSMSConfig . getSignName ()); //\u7b7e\u540d\u540d\u79f0 request . putQueryParameter ( \"TemplateCode\" , this . aliyunSMSConfig . getTemplateCode ()); //\u77ed\u4fe1\u6a21\u677fcode request . putQueryParameter ( \"TemplateParam\" , \"{\\\"code\\\":\\\"\" + code + \"\\\"}\" ); //\u6a21\u677f\u4e2d\u53d8\u91cf\u66ff\u6362 try { CommonResponse response = client . getCommonResponse ( request ); String data = response . getData (); if ( StringUtils . contains ( data , \"\\\"Message\\\":\\\"OK\\\"\" )) { return code ; } log . info ( \"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801\u5931\u8d25~ data = \" + data ); } catch ( Exception e ) { log . error ( \"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801\u5931\u8d25~ mobile = \" + mobile , e ); } return null ; } /** * \u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801 * \u5b9e\u73b0\uff1a\u53d1\u9001\u5b8c\u6210\u77ed\u4fe1\u9a8c\u8bc1\u7801\u540e\uff0c\u9700\u8981\u5c06\u9a8c\u8bc1\u7801\u4fdd\u5b58\u5230redis\u4e2d * @param phone * @return */ public ErrorResult sendCheckCode ( String phone ) { String redisKey = \"CHECK_CODE_\" + phone ; //\u5148\u5224\u65ad\u8be5\u624b\u673a\u53f7\u53d1\u9001\u7684\u9a8c\u8bc1\u7801\u662f\u5426\u8fd8\u672a\u5931\u6548 if ( this . redisTemplate . hasKey ( redisKey )){ String msg = \"\u4e0a\u4e00\u6b21\u53d1\u9001\u7684\u9a8c\u8bc1\u7801\u8fd8\u672a\u5931\u6548\uff01\" ; return ErrorResult . builder (). errCode ( \"000001\" ). errMessage ( msg ). build (); } String code = this . sendSms ( phone ); if ( StringUtils . isEmpty ( code )){ String msg = \"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801\u5931\u8d25\uff01\" ; return ErrorResult . builder (). errCode ( \"000000\" ). errMessage ( msg ). build (); } //\u77ed\u4fe1\u53d1\u9001\u6210\u529f\uff0c\u5c06\u9a8c\u8bc1\u7801\u4fdd\u5b58\u5230redis\u4e2d\uff0c\u6709\u6548\u671f\u4e3a5\u5206\u949f this . redisTemplate . opsForValue (). set ( redisKey , code , Duration . ofMinutes ( 5 )); return null ; } } 3.7\u3001JWT \u00b6 3.7.1\u3001\u7b80\u4ecb \u00b6 JSON Web token\u7b80\u79f0JWT\uff0c \u662f\u7528\u4e8e\u5bf9\u5e94\u7528\u7a0b\u5e8f\u4e0a\u7684\u7528\u6237\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u7684\u6807\u8bb0\u3002\u4e5f\u5c31\u662f\u8bf4, \u4f7f\u7528 JWTS \u7684\u5e94\u7528\u7a0b\u5e8f\u4e0d\u518d\u9700\u8981\u4fdd\u5b58\u6709\u5173\u5176\u7528\u6237\u7684 cookie \u6216\u5176\u4ed6session\u6570\u636e\u3002\u6b64\u7279\u6027\u4fbf\u4e8e\u53ef\u4f38\u7f29\u6027, \u540c\u65f6\u4fdd\u8bc1\u5e94\u7528\u7a0b\u5e8f\u7684\u5b89\u5168\u3002 \u5728\u8eab\u4efd\u9a8c\u8bc1\u8fc7\u7a0b\u4e2d, \u5f53\u7528\u6237\u4f7f\u7528\u5176\u51ed\u636e\u6210\u529f\u767b\u5f55\u65f6, \u5c06\u8fd4\u56de JSON Web token, \u5e76\u4e14\u5fc5\u987b\u5728\u672c\u5730\u4fdd\u5b58 (\u901a\u5e38\u5728\u672c\u5730\u5b58\u50a8\u4e2d)\u3002 \u6bcf\u5f53\u7528\u6237\u8981\u8bbf\u95ee\u53d7\u4fdd\u62a4\u7684\u8def\u7531\u6216\u8d44\u6e90 (\u7aef\u70b9) \u65f6, \u7528\u6237\u4ee3\u7406(user agent)\u5fc5\u987b\u8fde\u540c\u8bf7\u6c42\u4e00\u8d77\u53d1\u9001 JWT, \u901a\u5e38\u5728\u6388\u6743\u6807\u5934\u4e2d\u4f7f\u7528Bearer schema\u3002\u540e\u7aef\u670d\u52a1\u5668\u63a5\u6536\u5230\u5e26\u6709 JWT \u7684\u8bf7\u6c42\u65f6, \u9996\u5148\u8981\u505a\u7684\u662f\u9a8c\u8bc1token\u3002 3.7.2\u3001\u683c\u5f0f \u00b6 JWT\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7ecf\u8fc7\u52a0\u5bc6\u5904\u7406\u4e0e\u6821\u9a8c\u5904\u7406\u7684\u5b57\u7b26\u4e32\uff0c\u5f62\u5f0f\u4e3a\uff1aA.B.C A\u7531JWT\u5934\u90e8\u4fe1\u606fheader\u7ecf\u8fc7base64\u52a0\u5bc6\u5f97\u5230 ~~~json #\u9ed8\u8ba4\u7684\u5934\u4fe1\u606f { \"alg\": \"HS256\", \"typ\": \"JWT\" } \u5b98\u7f51\u6d4b\u8bd5\uff1ahttps://jwt.io/ \u00b6 base64\u52a0\u5bc6\u540e\u7684\u5b57\u7b26\u4e32\u4e3a\uff1aeyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 \u00b6 ~~~ B\u662fpayload\uff0c\u5b58\u653e\u6709\u6548\u4fe1\u606f\u7684\u5730\u65b9\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5305\u542b\u4e09\u4e2a\u90e8\u5206\uff1a \u6807\u51c6\u4e2d\u6ce8\u518c\u7684\u58f0\u660e (\u5efa\u8bae\u4f46\u4e0d\u5f3a\u5236\u4f7f\u7528) iss: jwt\u7b7e\u53d1\u8005 sub: jwt\u6240\u9762\u5411\u7684\u7528\u6237 aud: \u63a5\u6536jwt\u7684\u4e00\u65b9 exp: jwt\u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u8fd9\u4e2a\u8fc7\u671f\u65f6\u95f4\u5fc5\u987b\u8981\u5927\u4e8e\u7b7e\u53d1\u65f6\u95f4 nbf: \u5b9a\u4e49\u5728\u4ec0\u4e48\u65f6\u95f4\u4e4b\u524d\uff0c\u8be5jwt\u90fd\u662f\u4e0d\u53ef\u7528\u7684. iat: jwt\u7684\u7b7e\u53d1\u65f6\u95f4 jti: jwt\u7684\u552f\u4e00\u8eab\u4efd\u6807\u8bc6\uff0c\u4e3b\u8981\u7528\u6765\u4f5c\u4e3a\u4e00\u6b21\u6027token,\u4ece\u800c\u56de\u907f\u91cd\u653e\u653b\u51fb\u3002 \u516c\u5171\u7684\u58f0\u660e \u516c\u5171\u7684\u58f0\u660e\u53ef\u4ee5\u6dfb\u52a0\u4efb\u4f55\u7684\u4fe1\u606f\uff0c\u4e00\u822c\u6dfb\u52a0\u7528\u6237\u7684\u76f8\u5173\u4fe1\u606f\u6216\u5176\u4ed6\u4e1a\u52a1\u9700\u8981\u7684\u5fc5\u8981\u4fe1\u606f.\u4f46\u4e0d\u5efa\u8bae\u6dfb\u52a0\u654f\u611f\u4fe1\u606f\uff0c\u56e0\u4e3a\u8be5\u90e8\u5206\u5728\u5ba2\u6237\u7aef\u53ef\u89e3\u5bc6. \u79c1\u6709\u7684\u58f0\u660e \u79c1\u6709\u58f0\u660e\u662f\u63d0\u4f9b\u8005\u548c\u6d88\u8d39\u8005\u6240\u5171\u540c\u5b9a\u4e49\u7684\u58f0\u660e\uff0c\u4e00\u822c\u4e0d\u5efa\u8bae\u5b58\u653e\u654f\u611f\u4fe1\u606f\uff0c\u56e0\u4e3abase64\u662f\u5bf9\u79f0\u89e3\u5bc6\u7684\uff0c\u610f\u5473\u7740\u8be5\u90e8\u5206\u4fe1\u606f\u53ef\u4ee5\u5f52\u7c7b\u4e3a\u660e\u6587\u4fe1\u606f\u3002 ~~~json #\u5b58\u653e\u7684\u6570\u636e\uff1a { \"sub\": \"1234567890\", \"name\": \"John Doe\", \"iat\": 1516239022 } base64\u540e\u7684\u5b57\u7b26\u4e32\u4e3a\uff1a \u00b6 eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ ~~~ C\u7531A\u548cB\u901a\u8fc7\u52a0\u5bc6\u7b97\u6cd5\u5f97\u5230\uff0c\u7528\u4f5c\u5bf9token\u8fdb\u884c\u6821\u9a8c\uff0c\u770b\u662f\u5426\u6709\u6548 \u8fd9\u4e2a\u90e8\u5206\u9700\u8981base64\u52a0\u5bc6\u540e\u7684header\u548cbase64\u52a0\u5bc6\u540e\u7684payload\u4f7f\u7528 . \u8fde\u63a5\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u901a\u8fc7header\u4e2d\u58f0\u660e\u7684\u52a0\u5bc6\u65b9\u5f0f\u8fdb\u884c\u52a0\u76d0 secret \u7ec4\u5408\u52a0\u5bc6\uff0c\u7136\u540e\u5c31\u6784\u6210\u4e86jwt\u7684\u7b2c\u4e09\u90e8\u5206\u3002 ~~~json #secret\u4e3a\uff1aitcast #\u5f97\u5230\u7684\u52a0\u5bc6\u5b57\u7b26\u4e32\u4e3a\uff1aDwMTjJktoFFdClHqjJMRgYzICo6FJOUc3Jmev9EScBc \u6574\u4f53\u7684token\u4e3a\uff1aeyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.DwMTjJktoFFdClHqjJMRgYzICo6FJOUc3Jmev9EScBc \u00b6 ~~~ 3.7.3\u3001\u6d41\u7a0b \u00b6 3.7.4\u3001\u793a\u4f8b \u00b6 \u5bfc\u5165\u4f9d\u8d56\uff1a <dependency> <groupId> io.jsonwebtoken </groupId> <artifactId> jjwt </artifactId> <version> 0.9.1 </version> </dependency> \u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\uff1a package com.tanhua.sso.service ; import io.jsonwebtoken.ExpiredJwtException ; import io.jsonwebtoken.JwsHeader ; import io.jsonwebtoken.Jwts ; import io.jsonwebtoken.SignatureAlgorithm ; import org.junit.Test ; import java.util.Date ; import java.util.HashMap ; import java.util.Map ; public class TestJWT { String secret = \"itcast\" ; @Test public void testCreateToken (){ Map < String , Object > header = new HashMap < String , Object > (); header . put ( JwsHeader . TYPE , JwsHeader . JWT_TYPE ); header . put ( JwsHeader . ALGORITHM , \"HS256\" ); Map < String , Object > claims = new HashMap < String , Object > (); claims . put ( \"mobile\" , \"1333333333\" ); claims . put ( \"id\" , \"2\" ); // \u751f\u6210token String jwt = Jwts . builder () . setHeader ( header ) //header\uff0c\u53ef\u7701\u7565 . setClaims ( claims ) //payload\uff0c\u5b58\u653e\u6570\u636e\u7684\u4f4d\u7f6e\uff0c\u4e0d\u80fd\u653e\u7f6e\u654f\u611f\u6570\u636e\uff0c\u5982\uff1a\u5bc6\u7801\u7b49 . signWith ( SignatureAlgorithm . HS256 , secret ) //\u8bbe\u7f6e\u52a0\u5bc6\u65b9\u6cd5\u548c\u52a0\u5bc6\u76d0 . setExpiration ( new Date ( System . currentTimeMillis () + 3000 )) //\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0c3\u79d2\u540e\u8fc7\u671f . compact (); System . out . println ( jwt ); } @Test public void testDecodeToken (){ String token = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2JpbGUiOiIxMzMzMzMzMzMzIiwiaWQiOiIyIiwiZXhwIjoxNjA1NTEzMDA2fQ.1eG3LpudD4XBycUG39UQDaKVBQHgaup-E1OLWo_m8m8\" ; try { // \u901a\u8fc7token\u89e3\u6790\u6570\u636e Map < String , Object > body = Jwts . parser () . setSigningKey ( secret ) . parseClaimsJws ( token ) . getBody (); System . out . println ( body ); //{mobile=1333333333, id=2, exp=1605513392} } catch ( ExpiredJwtException e ) { System . out . println ( \"token\u5df2\u7ecf\u8fc7\u671f\uff01\" ); } catch ( Exception e ) { System . out . println ( \"token\u4e0d\u5408\u6cd5\uff01\" ); } } } 3.8\u3001\u7528\u6237\u767b\u5f55 \u00b6 \u7528\u6237\u63a5\u6536\u5230\u9a8c\u8bc1\u7801\u540e\uff0c\u8fdb\u884c\u8f93\u5165\u9a8c\u8bc1\u7801\uff0c\u70b9\u51fb\u767b\u5f55\uff0c\u524d\u7aef\u7cfb\u7edf\u5c06\u624b\u673a\u53f7\u4ee5\u53ca\u9a8c\u8bc1\u7801\u63d0\u4ea4\u5230SSO\u8fdb\u884c\u6821\u9a8c\u3002 3.7.1\u3001mock\u63a5\u53e3 \u00b6 \u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/164/interface/api/12593 3.7.2\u3001UserController \u00b6 package com.tanhua.sso.controller ; import com.tanhua.sso.service.UserService ; import com.tanhua.sso.vo.ErrorResult ; import org.apache.commons.lang3.StringUtils ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.PostMapping ; import org.springframework.web.bind.annotation.RequestBody ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RestController ; import java.util.HashMap ; import java.util.Map ; @RestController @RequestMapping ( \"user\" ) public class UserController { @Autowired private UserService userService ; /** * \u7528\u6237\u767b\u5f55 * * @param param * @return */ @PostMapping ( \"loginVerification\" ) public ResponseEntity < Object > login ( @RequestBody Map < String , String > param ){ try { String phone = param . get ( \"phone\" ); String code = param . get ( \"verificationCode\" ); String data = this . userService . login ( phone , code ); if ( StringUtils . isNotEmpty ( data )){ //\u767b\u5f55\u6210\u529f Map < String , Object > result = new HashMap <> ( 2 ); String [] ss = StringUtils . split ( data , '|' ); result . put ( \"token\" , ss [ 0 ] ); result . put ( \"isNew\" , Boolean . valueOf ( ss [ 1 ] )); return ResponseEntity . ok ( result ); } } catch ( Exception e ) { e . printStackTrace (); } ErrorResult errorResult = ErrorResult . builder (). errCode ( \"000002\" ). errMessage ( \"\u767b\u5f55\u5931\u8d25\uff01\" ). build (); return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). body ( errorResult ); } } 3.7.3\u3001UserService \u00b6 package com.tanhua.sso.service ; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper ; import com.baomidou.mybatisplus.core.toolkit.Wrappers ; import com.tanhua.sso.mapper.UserMapper ; import com.tanhua.sso.pojo.User ; import io.jsonwebtoken.Jwts ; import io.jsonwebtoken.SignatureAlgorithm ; import lombok.extern.slf4j.Slf4j ; import org.apache.commons.codec.digest.DigestUtils ; import org.apache.commons.lang3.StringUtils ; import org.apache.rocketmq.spring.core.RocketMQTemplate ; import org.joda.time.DateTime ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.beans.factory.annotation.Value ; import org.springframework.data.redis.core.RedisTemplate ; import org.springframework.messaging.MessagingException ; import org.springframework.stereotype.Service ; import java.util.HashMap ; import java.util.Map ; @Service @Slf4j public class UserService { @Autowired private RedisTemplate < String , String > redisTemplate ; @Autowired private UserMapper userMapper ; @Value ( \"${jwt.secret}\" ) private String secret ; @Autowired private RocketMQTemplate rocketMQTemplate ; /** * \u7528\u6237\u767b\u5f55 * * @param phone \u624b\u673a\u53f7 * @param code \u9a8c\u8bc1\u7801 * @return */ public String login ( String phone , String code ) { String redisKey = \"CHECK_CODE_\" + phone ; boolean isNew = false ; //\u6821\u9a8c\u9a8c\u8bc1\u7801 String redisData = this . redisTemplate . opsForValue (). get ( redisKey ); if ( ! StringUtils . equals ( code , redisData )) { return null ; //\u9a8c\u8bc1\u7801\u9519\u8bef } //\u9a8c\u8bc1\u7801\u5728\u6821\u9a8c\u5b8c\u6210\u540e\uff0c\u9700\u8981\u5e9f\u5f03 this . redisTemplate . delete ( redisKey ); QueryWrapper < User > queryWrapper = new QueryWrapper <> (); queryWrapper . eq ( \"mobile\" , phone ); User user = this . userMapper . selectOne ( queryWrapper ); if ( null == user ) { //\u9700\u8981\u6ce8\u518c\u8be5\u7528\u6237 user = new User (); user . setMobile ( phone ); user . setPassword ( DigestUtils . md5Hex ( \"123456\" )); //\u6ce8\u518c\u65b0\u7528\u6237 this . userMapper . insert ( user ); isNew = true ; } //\u751f\u6210token Map < String , Object > claims = new HashMap < String , Object > (); claims . put ( \"id\" , user . getId ()); // \u751f\u6210token String token = Jwts . builder () . setClaims ( claims ) //payload\uff0c\u5b58\u653e\u6570\u636e\u7684\u4f4d\u7f6e\uff0c\u4e0d\u80fd\u653e\u7f6e\u654f\u611f\u6570\u636e\uff0c\u5982\uff1a\u5bc6\u7801\u7b49 . signWith ( SignatureAlgorithm . HS256 , secret ) //\u8bbe\u7f6e\u52a0\u5bc6\u65b9\u6cd5\u548c\u52a0\u5bc6\u76d0 . setExpiration ( new DateTime (). plusHours ( 12 ). toDate ()) //\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0c12\u5c0f\u65f6\u540e\u8fc7\u671f . compact (); try { //\u53d1\u9001\u7528\u6237\u767b\u5f55\u6210\u529f\u7684\u6d88\u606f Map < String , Object > msg = new HashMap <> (); msg . put ( \"id\" , user . getId ()); msg . put ( \"date\" , System . currentTimeMillis ()); this . rocketMQTemplate . convertAndSend ( \"tanhua-sso-login\" , msg ); } catch ( MessagingException e ) { log . error ( \"\u53d1\u9001\u6d88\u606f\u5931\u8d25\uff01\" , e ); } return token + \"|\" + isNew ; } } 3.7.4\u3001\u6d4b\u8bd5 \u00b6","title":"day01"},{"location":"tantan/day01/#_1","text":"\u529f\u80fd\u4ecb\u7ecd \u9879\u76ee\u4ecb\u7ecd \u5de5\u7a0b\u642d\u5efa \u77ed\u4fe1\u9a8c\u8bc1\u7801 \u5b9e\u73b0\u7528\u6237\u767b\u5f55\u529f\u80fd","title":"\u8bfe\u7a0b\u4ecb\u7ecd  \u300a\u63a2\u82b1\u4ea4\u53cb\u300b"},{"location":"tantan/day01/#1","text":"\u63a2\u82b1\u4ea4\u53cb\u662f\u4e00\u4e2a\u964c\u751f\u4eba\u7684\u5728\u7ebf\u4ea4\u53cb\u5e73\u53f0\uff0c\u5728\u8be5\u5e73\u53f0\u4e2d\u53ef\u4ee5\u641c\u7d22\u9644\u8fd1\u7684\u4eba\uff0c\u67e5\u770b\u597d\u53cb\u52a8\u6001\uff0c\u5e73\u53f0\u8fd8\u4f1a\u901a\u8fc7\u5927\u6570\u636e\u8ba1\u7b97\u8fdb\u884c\u667a\u80fd\u63a8\u8350\uff0c\u901a\u8fc7\u667a\u80fd\u63a8\u8350\u53ef\u4ee5\u627e\u5230\u66f4\u52a0\u5339\u914d\u7684\u597d\u53cb\uff0c\u8fd9\u6837\u624d\u80fd\u589e\u8fdb\u7528\u6237\u5bf9\u4ea7\u54c1\u7684\u559c\u7231\u5ea6\u3002\u63a2\u82b1\u5e73\u53f0\u8fd8\u63d0\u4f9b\u4e86\u5728\u7ebf\u5373\u65f6\u901a\u8baf\u529f\u80fd\uff0c\u53ef\u4ee5\u5b9e\u65f6\u7684\u4e0e\u597d\u53cb\u8fdb\u884c\u6c9f\u901a\uff0c\u8ba9\u6c9f\u901a\u968f\u65f6\u968f\u5730\u7684\u8fdb\u884c\u3002","title":"1\u3001\u529f\u80fd\u4ecb\u7ecd"},{"location":"tantan/day01/#11","text":"\u529f\u80fd \u8bf4\u660e \u5907\u6ce8 \u6ce8\u518c\u3001\u767b\u5f55 \u7528\u6237\u65e0\u9700\u5355\u72ec\u6ce8\u518c\uff0c\u76f4\u63a5\u901a\u8fc7\u624b\u673a\u53f7\u767b\u5f55\u5373\u53ef \u9996\u6b21\u767b\u5f55\u6210\u529f\u540e\u9700\u8981\u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f \u4ea4\u53cb \u4e3b\u8981\u529f\u80fd\u6709\uff1a\u6d4b\u7075\u9b42\u3001\u6843\u82b1\u4f20\u97f3\u3001\u641c\u9644\u8fd1\u3001\u63a2\u82b1\u7b49 \u5708\u5b50 \u7c7b\u4f3c\u5fae\u4fe1\u670b\u53cb\u5708\uff0c\u7528\u6237\u53ef\u4ee5\u53d1\u52a8\u6001\u3001\u67e5\u770b\u597d\u53cb\u52a8\u6001\u7b49 \u6d88\u606f \u901a\u77e5\u7c7b\u6d88\u606f + \u5373\u65f6\u901a\u8baf\u6d88\u606f \u5c0f\u89c6\u9891 \u7c7b\u4f3c\u6296\u97f3\uff0c\u7528\u6237\u53ef\u4ee5\u53d1\u5c0f\u89c6\u9891\uff0c\u8bc4\u8bba\u7b49 \u663e\u793a\u5c0f\u89c6\u9891\u5217\u8868\u9700\u8981\u8fdb\u884c\u63a8\u8350\u7b97\u6cd5\u8ba1\u7b97\u540e\u8fdb\u884c\u5c55\u73b0\u3002 \u6211\u7684 \u6211\u7684\u52a8\u6001\u3001\u5173\u6ce8\u6570\u3001\u7c89\u4e1d\u6570\u3001\u901a\u7528\u8bbe\u7f6e\u7b49","title":"1.1\u3001\u529f\u80fd\u5217\u8868"},{"location":"tantan/day01/#12","text":"\u4e1a\u52a1\u8bf4\u660e\uff1a \u7528\u6237\u901a\u8fc7\u624b\u673a\u9a8c\u8bc1\u7801\u8fdb\u884c\u767b\u5f55\uff0c\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u767b\u5f55\u5219\u9700\u8981\u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f\uff0c\u5728\u4e0a\u4f20\u56fe\u7247\u65f6\uff0c\u9700\u8981\u5bf9\u4e0a\u4f20\u7684\u56fe\u7247\u505a\u4eba\u50cf\u7684\u6821\u9a8c\uff0c\u9632\u6b62\u7528\u6237\u4e0a\u4f20\u975e\u4eba\u50cf\u7684\u56fe\u7247\u4f5c\u4e3a\u5934\u50cf\u3002\u6d41\u7a0b\u5b8c\u6210\u540e\uff0c\u5219\u767b\u5f55\u6210\u529f\u3002","title":"1.2\u3001\u6ce8\u518c\u767b\u5f55"},{"location":"tantan/day01/#13","text":"\u4ea4\u53cb\u662f\u63a2\u82b1\u9879\u76ee\u7684\u6838\u5fc3\u529f\u80fd\u4e4b\u4e00\uff0c\u7528\u6237\u53ef\u4ee5\u67e5\u770b\u597d\u53cb\uff0c\u6dfb\u52a0\u597d\u53cb\uff0c\u641c\u7d22\u597d\u53cb\u7b49\u64cd\u4f5c\u3002","title":"1.3\u3001\u4ea4\u53cb"},{"location":"tantan/day01/#131","text":"\u5728\u9996\u9875\u4e2d\uff0c\u4e3b\u8981\u529f\u80fd\u6709\u201c\u4eca\u65e5\u4f73\u4eba\u201d\u3001\u201c\u63a8\u8350\u201d\u3001\u201c\u6700\u8fd1\u8bbf\u5ba2\u201d\u7b49 \u4eca\u65e5\u4f73\u4eba \u6309\u7167\u201c\u7f18\u5206\u503c\u201d\u8fdb\u884c\u5339\u914d\uff0c\u5c06\u201c\u7f18\u5206\u503c\u201d\u6700\u9ad8\u7684\u7528\u6237\u5c55\u73b0\u51fa\u6765 \u63a8\u8350 \u6309\u7167\u201c\u7f18\u5206\u503c\u201d\u8fdb\u884c\u63a8\u8350\uff0c\u7531\u540e\u53f0\u7684\u63a8\u8350\u7cfb\u7edf\u8ba1\u7b97\u5f97\u51fa\uff0c\u5c55\u73b0\u51fa\u6765 \u6700\u8fd1\u8bbf\u5ba2 \u663e\u793a\u6700\u8fd1\u6765\u770b\u201c\u6211\u201d\u7684\u7528\u6237","title":"1.3.1\u3001\u9996\u9875"},{"location":"tantan/day01/#132","text":"\u8bf4\u660e\uff1a\u5de6\u5212\u559c\u6b22\uff0c\u53f3\u5212\u4e0d\u559c\u6b22\uff0c\u6bcf\u5929\u9650\u91cf\u4e0d\u8d85\u8fc7100\u4e2a\uff0c\u5f00\u901a\u4f1a\u5458\u53ef\u589e\u52a0\u9650\u989d\u3002\u53cc\u65b9\u4e92\u76f8\u559c\u6b22\u5219\u914d\u5bf9\u6210\u529f\u3002 \u5b9e\u73b0\uff1a\u6570\u636e\u6765\u6e90\u63a8\u8350\u7cfb\u7edf\u8ba1\u7b97\u540e\u7684\u7ed3\u679c\u3002","title":"1.3.2\u3001\u63a2\u82b1"},{"location":"tantan/day01/#133","text":"\u6839\u636e\u7528\u6237\u5f53\u524d\u6240\u5728\u7684\u4f4d\u7f6e\u8fdb\u884c\u67e5\u8be2\uff0c\u5e76\u4e14\u572810km\u7684\u8303\u56f4\u5185\u8fdb\u884c\u67e5\u8be2\uff0c\u53ef\u4ee5\u901a\u8fc7\u7b5b\u9009\u6309\u94ae\u8fdb\u884c\u6761\u4ef6\u7b5b\u9009\u3002","title":"1.3.3\u3001\u641c\u9644\u8fd1"},{"location":"tantan/day01/#134","text":"\u529f\u80fd\u7c7b\u4f3cQQ\u4e2d\u7684\u6f02\u6d41\u74f6\uff0c\u7528\u6237\u53ef\u4ee5\u53d1\u9001\u548c\u63a5\u6536\u8bed\u97f3\u6d88\u606f\uff0c\u964c\u751f\u4eba\u5c31\u4f1a\u63a5\u6536\u5230\u6d88\u606f\u3002","title":"1.3.4\u3001\u6843\u82b1\u4f20\u97f3"},{"location":"tantan/day01/#135","text":"\u6d4b\u8bd5\u9898\u7528\u4e8e\u5bf9\u7528\u6237\u8fdb\u884c\u5206\u7c7b\uff0c\u6bcf\u6b21\u63d0\u4ea4\u7b54\u6848\u540e\u66f4\u65b0\u7528\u6237\u5c5e\u6027 \u6d4b\u8bd5\u9898\u5728\u540e\u53f0\u8fdb\u884c\u7ef4\u62a4 \u6d4b\u8bd5\u9898\u6d4b\u8bd5\u5b8c\u540e\u4ea7\u751f\u7ed3\u679c\u9875\u53ef\u4ee5\u8fdb\u884c\u5206\u4eab \u6d4b\u8bd5\u9898\u4e3a\u987a\u5e8f\u56de\u7b54\uff0c\u56de\u7b54\u5b8c\u521d\u7ea7\u9898\u89e3\u9501\u4e0b\u4e00\u7ea7\u95ee\u9898 \u70b9\u51fb\u9501\u5b9a\u95ee\u9898 \u663e\u793a\u63d0\u793a \u8bf7\u5148\u56de\u7b54\u4e0a\u4e00\u7ea7\u95ee\u9898","title":"1.3.5\u3001\u6d4b\u7075\u9b42"},{"location":"tantan/day01/#14","text":"1\u3001\u63a8\u8350\u9891\u9053\u4e3a\u6839\u636e\u95ee\u5377\u53ca\u559c\u597d\u63a8\u8350\u76f8\u4f3c\u7528\u6237\u52a8\u6001 2\u3001\u663e\u793a\u5185\u5bb9\u4e3a\u7528\u6237\u5934\u50cf\u3001\u7528\u6237\u6635\u79f0\u3001\u7528\u6237\u6027\u522b\u3001\u7528\u6237\u5e74\u9f84\u3001\u7528\u6237\u6807\u7b7e\u548c\u7528\u6237\u53d1\u5e03\u52a8\u6001 3\u3001\u56fe\u7247\u6700\u591a\u4e0d\u8d85\u8fc76\u5f20\u6216\u53d1\u5e03\u4e00\u4e2a\u5c0f\u89c6\u9891 4\u3001\u52a8\u6001\u4e0b\u65b9\u663e\u793a\u53d1\u5e03\u65f6\u95f4\u8ddd\u79bb\u5f53\u65f6\u65f6\u95f4\uff0c\u4f8b\u598210\u5206\u949f\u524d\u30013\u5c0f\u65f6\u524d\u30012\u5929\u524d\uff0c\u663e\u793a\u65f6\u95f4\u8fdb\u884c\u53d6\u6574 5\u3001\u52a8\u6001\u4e0b\u65b9\u663e\u793a\u8ddd\u79bb\u4e3a\u53d1\u5e03\u52a8\u6001\u5730\u4e0e\u672c\u5730\u8ddd\u79bb 6\u3001\u663e\u793a\u7528\u6237\u6d4f\u89c8\u91cf 7\u3001\u663e\u793a\u70b9\u8d5e\u6570\u3001\u8bc4\u8bba\u6570 \u8f6c\u53d1\u6570","title":"1.4\u3001\u5708\u5b50"},{"location":"tantan/day01/#15","text":"\u6d88\u606f\u5305\u542b\u901a\u77e5\u7c7b\u7684\u6d88\u606f\u548c\u597d\u53cb\u6d88\u606f\u3002","title":"1.5\u3001\u6d88\u606f"},{"location":"tantan/day01/#16","text":"\u7528\u6237\u53ef\u4ee5\u4e0a\u4f20\u5c0f\u89c6\u9891\uff0c\u4e5f\u53ef\u4ee5\u67e5\u770b\u5c0f\u89c6\u9891\u5217\u8868\uff0c\u5e76\u4e14\u53ef\u4ee5\u8fdb\u884c\u70b9\u8d5e\u64cd\u4f5c\u3002","title":"1.6\u3001\u5c0f\u89c6\u9891"},{"location":"tantan/day01/#17","text":"\u663e\u793a\u5173\u6ce8\u6570\u3001\u559c\u6b22\u6570\u3001\u7c89\u4e1d\u6570\u3001\u6211\u7684\u52a8\u6001\u7b49\u4fe1\u606f\u3002","title":"1.7\u3001\u6211\u7684"},{"location":"tantan/day01/#2","text":"","title":"2\u3001\u9879\u76ee\u4ecb\u7ecd"},{"location":"tantan/day01/#21","text":"\u5728\u7ebf\u793e\u4ea4\u662f\u4e92\u8054\u7f51\u65f6\u4ee3\u7684\u4ea7\u7269\uff0c\u5df2\u6210\u4e3a\u4e92\u8054\u7f51\u7528\u6237\u7684\u57fa\u7840\u9700\u6c42\u4e4b\u4e00\u3002\u79fb\u52a8\u4e92\u8054\u7f51\u81ea2003\u5e74\u8d77\u5feb\u901f\u53d1\u5c55\uff0c\u4fc3\u4f7f\u5728\u7ebf\u793e\u4ea4\u9010\u6e10\u4ecePC\u7aef\u8f6c\u79fb\u81f3\u79fb\u52a8\u7aef\u3002\u79fb\u52a8\u793e\u4ea4\u6700\u521d\u4ee5\u719f\u4eba\u793e\u4ea4\u4e3a\u4e3b\uff0c\u4ee5\u7ef4\u7cfb\u719f\u4eba\u5173\u7cfb\u3001\u5171\u4eab\u8d44\u6e90\u4fe1\u606f\u7684\u5f62\u5f0f\u5b58\u5728\u3002\u968f\u7740\u4eba\u4eec\u4ea4\u53cb\u9700\u6c42\u7684\u5ef6\u4f38\uff0c\u79fb\u52a8\u793e\u4ea4\u5f00\u59cb\u5411\u964c\u751f\u4eba\u793e\u4ea4\u3001\u5174\u8da3\u793e\u4ea4\u7b49\u5782\u76f4\u65b9\u5411\u53d1\u5c55\uff0c\u5f62\u5f0f\u4e30\u5bcc\u591a\u6837\u3002","title":"2.1\u3001\u9879\u76ee\u80cc\u666f"},{"location":"tantan/day01/#22","text":"\u63a2\u82b1\u4ea4\u53cb\u9879\u76ee\u5b9a\u4f4d\u4e8e \u964c\u751f\u4eba\u4ea4\u53cb\u5e02\u573a \u3002 \u6839\u636e\u300a2018\u793e\u4ea4\u9886\u57df\u6295\u878d\u8d44\u62a5\u544a\u300b\u4e2d\u6307\u51fa\uff1a\u867d\u7136\u76f8\u6bd42017\u5e74\uff0c\u6295\u878d\u8d44\u4e8b\u4ef6\u51cf\u5c1129.5%\uff0c\u4f46\u662f\u878d\u8d44\u7684\u603b\u989d\u5374\u5927\u5e45\u589e\u957f\uff0c\u8fbe\u523068%\u3002 \u8fd9\u4e9b\u8ff9\u8c61\u8bf4\u660e\uff1a\u793e\u4ea4\u9886\u57df\u7684\u53d1\u5c55\u89c4\u6a21\u6b63\u5728\u6269\u5927\uff0c\u800c\u5f88\u591a\u6ca1\u6709\u7279\u8272\u7684\u4ea7\u54c1\u4e5f\u4f1a\u88ab\u6dd8\u6c70\u3002\u800c\u968f\u7740\u90a3\u4e9b\u5c3e\u90e8\u4ea7\u54c1\u7684\u5012\u4e0b\uff0c\u5bf9\u6211\u4eec\u6765\u8bf4\u5c31\u662f\u673a\u4f1a\uff0c\u53ca\u65f6\u6293\u4f4f\u4e0d\u540c\u793e\u4ea4\u9700\u6c42\u7684\u673a\u4f1a\u3002\u4ee5\u793e\u4ea4\u4e3a\u6838\u5fc3\u5411\u4e0d\u540c\u7684\u7ec6\u5206\u9886\u57df\u884d\u751f\u6b63\u5728\u9010\u6e10\u8d70\u5411\u6210\u719f\u5316\u3002 \u800c\u6211\u4eec\u6309\u7167\u5a31\u4e50\u5f62\u5f0f\u548c\u5185\u5bb9\u4e3a\u4e3b\u4e24\u4e2a\u7ef4\u5ea6\uff0c\u5c06\u793e\u4ea4\u884c\u4e1a\u516c\u53f8\u5206\u7c7b\u4e3a\uff1a\u5373\u65f6\u901a\u4fe1\u3001\u5185\u5bb9\u793e\u7fa4\u3001\u964c\u751f\u4eba\u793e\u4ea4\u3001\u6cdb\u5a31\u4e50\u793e\u4ea4\u4ee5\u53ca\u5174\u8da3\u793e\u4ea4\u51e0\u4e2a\u9886\u57df\u3002 \u800c\u57282018\u5e74\u793e\u4ea4\u7684\u5404\u4e2a\u7ec6\u5206\u9886\u57df\u4e0b\uff0c\u5747\u6709\u5907\u53d7\u8d44\u672c\u6240\u5173\u6ce8\u7684\u9879\u76ee\uff0c\u6839\u636e\u70ef\u725b\u6570\u636e2018\u5e74\u7684\u62a5\u544a\u4e2d\uff0c\u4e5f\u540c\u6837\u6307\u51fa\uff1a\u5185\u5bb9\u793e\u4ea4\u53ca\u964c\u751f\u4eba\u793e\u4ea4\u4e3a\u8d44\u672c\u91cd\u8981\u5173\u6ce8\u9886\u57df\uff0c\u5408\u8ba1\u878d\u8d44\u5360\u6bd4\u8fbe73%\u3002 \u6839\u636e\u5e02\u573a\u73b0\u72b6\u4ee5\u53ca\u878d\u8d44\u4e8b\u4ef6\u6765\u770b\uff1a\u964c\u751f\u4eba\u793e\u4ea4\u3001\u5185\u5bb9\u793e\u7fa4\u3001\u5174\u8da3\u793e\u4ea4\u57282019\u5e74\u4ecd\u7136\u4fdd\u6301\u5f3a\u52b2\u7684\u52a8\u529b\uff0c\u5360\u5230\u8fd170%\u7684\u6bd4\u4f8b\uff0c\u5b83\u4eec\u4ecd\u7136\u662f\u8d44\u672c\u5e02\u573a\u4e3b\u8981\u5173\u6ce8\u9886\u57df\u3002\u4ece\u589e\u957f\u7387\u6765\u770b\u964c\u751f\u4eba\u793e\u4ea4\u7684\u589e\u957f\u901f\u5ea6\u8fdc\u8fdc\u5927\u4e8e\u5176\u4ed6\u51e0\u7c7b\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u4ece\u8fd9\u4e2a\u65b9\u5411\u5165\u624b\u3002","title":"2.2\u3001\u5e02\u573a\u5206\u6790"},{"location":"tantan/day01/#23","text":"\u4ece\u6574\u4f53\u5e74\u9f84\u6bb5\u6765\u770b\uff1a\u76ee\u524d\u76ee\u6807\u7528\u6237\u7fa4\u4f53\u4e3b\u8981\u4ee530\u5c81\u4ee5\u4e0b\u4e3a\u4e3b\uff0c\u5176\u4e2d\u4ee518-25\u5c81\u5e74\u9f84\u7fa4\u4f53\u4e3a\u4e3b\u8981\u53d7\u4f17\u4eba\u7fa4\u3002 \u4e0a\u73ed\u7fa4\u4f53\uff1a \u70ed\u8877\u4e8e\u901a\u8fc7\u5206\u4eab\u5185\u5bb9\u6216\u8868\u8fbe\u201c\u4e2a\u4eba\u60c5\u7eea\u201d\u5728\u964c\u751f\u4eba\u9762\u524d\u5efa\u7acb\u7279\u6b8a\u7684\u4eba\u8bbe\uff0c\u5e76\u501f\u6b64\u63d0\u5347\u81ea\u6211\u4ef7\u503c\u6269\u5927\u81ea\u5df1\u7684\u4ea4\u9645\u5708\uff1b \u5b66\u751f\u7fa4\u4f53\uff1a \u8ffd\u6c42\u4e2a\u6027\u9009\u62e9\uff0c\u66f4\u503e\u5411\u627e\u5230\u6709\u5171\u540c\u8bdd\u9898\u7684\u964c\u751f\u4eba\u5bf9\u8c61\u5e76\u5efa\u7acb\u957f\u671f\u7684\u5173\u7cfb\uff0c\u4e50\u4e8e\u5c55\u73b0\u81ea\u6211\uff1b \u6587\u827a\u7fa4\u4f53\uff1a \u62e5\u6709\u81ea\u5df1\u72ec\u7279\u7684\u7231\u597d\u4e14\u62e5\u6709\u7279\u522b\u7684\u4e2a\u4eba\u8ffd\u6c42\uff0c\u8ffd\u6c42\u6587\u827a\u5708\u5b50\u5185\u7684\u4ea4\u6d41\uff0c\u5e0c\u671b\u901a\u8fc7\u5206\u4eab\u7ed3\u4ea4\u66f4\u591a\u597d\u53cb\uff1b \u6c9f\u901a\u5f31\u52bf\u7fa4\u4f53\uff1a \u5bf9\u73b0\u6709\u957f\u671f\u4fdd\u6301\u7ebf\u4e0a\u5bf9\u793e\u4ea4\u6a21\u5f0f\u8868\u73b0\u65e0\u529b\u4e14\u65e0\u6548\uff0c\u6e34\u671b\u6709\u66f4\u52a0\u6709\u6548\u4e14\u5b89\u5168\u7684\u793e\u4ea4\u65b9\u5f0f\u51fa\u73b0\uff0c\u89e3\u51b3\u76ee\u524d\u5355\u8c03\u4e4f\u5473\u7684\u6c9f\u901a\u65b9\u5f0f\uff1b","title":"2.3\u3001\u76ee\u6807\u7528\u6237\u7fa4\u4f53"},{"location":"tantan/day01/#24","text":"\u524d\u7aef\uff1a flutter + android + \u73af\u4fe1SDK + redux + shared_preferences + connectivity + iconfont + webview + sqflite \u540e\u7aef\uff1a Spring Boot + SpringMVC + Mybatis + MybatisPlus + Dubbo Elasticsearch geo \u5b9e\u73b0\u5730\u7406\u4f4d\u7f6e\u67e5\u8be2 MongoDB \u5b9e\u73b0\u6d77\u91cf\u6570\u636e\u7684\u5b58\u50a8 Redis \u6570\u636e\u7684\u7f13\u5b58 Spark + MLlib \u5b9e\u73b0\u667a\u80fd\u63a8\u8350 \u7b2c\u4e09\u65b9\u670d\u52a1 \u73af\u4fe1\u5373\u65f6\u901a\u8baf \u7b2c\u4e09\u65b9\u670d\u52a1 \u963f\u91cc\u4e91 OSS \u3001 \u77ed\u4fe1\u670d\u52a1 \u7b2c\u4e09\u65b9\u670d\u52a1 \u8679\u8f6f\u5f00\u653e\u5e73\u53f0","title":"2.4\u3001\u6280\u672f\u65b9\u6848"},{"location":"tantan/day01/#25","text":"","title":"2.5\u3001\u6280\u672f\u67b6\u6784"},{"location":"tantan/day01/#26","text":"\u4f7f\u7528Elasticsearch geo\u5b9e\u73b0\u9644\u8fd1\u7684\u4eba\u7684\u89e3\u51b3\u65b9\u6848 \u4f7f\u7528Spark + Mllib\u5b9e\u73b0\u667a\u80fd\u63a8\u8350\u7684\u89e3\u51b3\u65b9\u6848 \u4f7f\u7528MongoDB\u8fdb\u884c\u6d77\u91cf\u6570\u636e\u7684\u5b58\u50a8\u7684\u89e3\u51b3\u65b9\u6848 \u4f7f\u7528\u91c7\u7528\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf\u5b58\u50a8\u5c0f\u89c6\u9891\u6570\u636e\u7684\u89e3\u51b3\u65b9\u6848 \u4f7f\u7528\u8679\u8f6f\u5f00\u653e\u5e73\u53f0\u8fdb\u884c\u4eba\u8138\u8bc6\u522b\u7684\u89e3\u51b3\u65b9\u6848","title":"2.6\u3001\u6280\u672f\u89e3\u51b3\u65b9\u6848"},{"location":"tantan/day01/#27","text":"\u91c7\u7528Elasticsearch geo\u5b9e\u73b0\u5730\u7406\u4f4d\u7f6e\u67e5\u8be2 \u91c7\u7528RocketMQ\u4f5c\u4e3a\u6d88\u606f\u670d\u52a1\u4e2d\u95f4\u4ef6 \u91c7\u7528MongoDB\u8fdb\u884c\u6d77\u91cf\u6570\u636e\u7684\u5b58\u50a8 \u91c7\u7528Spark + Mllib\u5b9e\u73b0\u667a\u80fd\u63a8\u8350 \u91c7\u7528\u73af\u4fe1\u670d\u52a1\u5b9e\u73b0\u5373\u65f6\u901a\u8baf \u91c7\u7528\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf\u5b58\u50a8\u5c0f\u89c6\u9891\u6570\u636e \u91c7\u7528Apache Dobbo\u4f5c\u4e3a\u5fae\u670d\u52a1\u67b6\u6784\u6280\u672f \u91c7\u7528SpringBoot + Mybatis\u5b9e\u73b0\u7cfb\u7edf\u4e3b\u67b6\u6784 \u91c7\u7528Redis\u96c6\u7fa4\u5b9e\u73b0\u7f13\u5b58\u7684\u9ad8\u53ef\u7528","title":"2.7\u3001\u6280\u672f\u4eae\u70b9"},{"location":"tantan/day01/#28","text":"\u63a2\u82b1\u4ea4\u53cb\u9879\u76ee\u91c7\u7528\u524d\u540e\u7aef\u5206\u79bb\u7684\u65b9\u5f0f\u5f00\u53d1\uff0c\u5c31\u662f\u524d\u7aef\u7531\u524d\u7aef\u56e2\u961f\u8d1f\u8d23\u5f00\u53d1\uff0c\u540e\u7aef\u8d1f\u8d23\u63a5\u53e3\u7684\u5f00\u53d1\uff0c\u8fd9\u79cd\u5f00\u53d1\u65b9\u5f0f\u67092\u70b9\u597d\u5904\uff1a \u626c\u957f\u907f\u77ed\uff0c\u6bcf\u4e2a\u56e2\u961f\u505a\u81ea\u5df1\u64c5\u957f\u7684\u4e8b\u60c5 \u524d\u540e\u7aef\u5e76\u884c\u5f00\u53d1\uff0c\u9700\u8981\u4e8b\u5148\u7ea6\u5b9a\u597d\u63a5\u53e3\u5730\u5740\u4ee5\u53ca\u5404\u79cd\u53c2\u6570\u3001\u54cd\u5e94\u6570\u636e\u7ed3\u6784\u7b49 \u5bf9\u4e8e\u63a5\u53e3\u7684\u5b9a\u4e49\u6211\u4eec\u91c7\u7528YApi\u8fdb\u884c\u7ba1\u7406\uff0cYApi\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u63a5\u53e3\u5b9a\u4e49\u3001\u7ba1\u7406\u3001\u63d0\u4f9bmock\u6570\u636e\u7684\u7ba1\u7406\u5e73\u53f0\u3002 \u5730\u5740\uff1ahttps://mock-java.itheima.net/ \u7528\u6237\u540d\uff1atanhua@itcast.cn \u5bc6\u7801\uff1a123456 \u63a5\u53e3\u5b9a\u4e49\uff1a mock\u6570\u636e\uff0cYApi\u63d0\u4f9b\u4e86mock\u529f\u80fd\uff0c\u5c31\u662f\u6a21\u62df\u670d\u52a1\u7aef\u8fd4\u56de\u6d4b\u8bd5\u6570\u636e\uff1a \u8fd8\u53ef\u4ee5\u8fd0\u884chttp\u8bf7\u6c42\uff08\u9700\u8981\u5728Chrome\u4e2d\u5b89\u88c5\u652f\u6301\u8de8\u57df\u6269\u5c55 https://juejin.im/post/6844904057707085832\uff09\uff1a","title":"2.8\u3001\u5f00\u53d1\u65b9\u5f0f"},{"location":"tantan/day01/#29","text":"\u63a2\u82b1\u4ea4\u53cb\u9879\u76ee\u7684\u5f00\u53d1\u7edf\u4e00\u4f7f\u7528\u63d0\u4f9b\u7684Centos7\u73af\u5883\uff0c\u8be5\u73af\u5883\u4e2d\u90e8\u7f72\u5b89\u88c5\u4e86\u9879\u76ee\u6240\u9700\u8981\u7684\u5404\u79cd\u670d\u52a1\uff0c\u5982\uff1aMySQL\u3001MongoDB\u3001Redis\u3001RocketMQ\u7b49\u3002 \u865a\u62df\u673a\u7684root\u7528\u6237\u5bc6\u7801\u4e3a\uff1aroot123 \u9ed8\u8ba4\u53c2\u6570\uff1aCPU\uff1a2\u6838\uff0c\u5185\u5b58\uff1a4G\uff0c\u786c\u76d8\uff1a60G IP\u5730\u5740\u5efa\u8bae\u8bbe\u7f6e\u4e3a192.168.31.81\uff0c\u5426\u5219\u6709\u4e9b\u670d\u52a1\u5c06\u4e0d\u53ef\u7528\uff0c\u6bd4\u5982\uff1aRedis\u3001RocketMQ\u7b49\u3002","title":"2.9\u3001\u57fa\u7840\u73af\u5883"},{"location":"tantan/day01/#3","text":"\u4e1a\u52a1\u8bf4\u660e\uff1a \u7528\u6237\u901a\u8fc7\u624b\u673a\u9a8c\u8bc1\u7801\u8fdb\u884c\u767b\u5f55\uff0c\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u767b\u5f55\u5219\u9700\u8981\u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f\uff0c\u5728\u4e0a\u4f20\u56fe\u7247\u65f6\uff0c\u9700\u8981\u5bf9\u4e0a\u4f20\u7684\u56fe\u7247\u505a\u4eba\u50cf\u7684\u6821\u9a8c\uff0c\u9632\u6b62\u7528\u6237\u4e0a\u4f20\u975e\u4eba\u50cf\u7684\u56fe\u7247\u4f5c\u4e3a\u5934\u50cf\u3002\u6d41\u7a0b\u5b8c\u6210\u540e\uff0c\u5219\u767b\u5f55\u6210\u529f\u3002 \u6d41\u7a0b\uff1a","title":"3\u3001\u6ce8\u518c\u767b\u5f55"},{"location":"tantan/day01/#31","text":"\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u5355\u70b9\u767b\u5f55\u7cfb\u7edf\uff1f \u4ee5\u524d\u5b9e\u73b0\u7684\u767b\u5f55\u548c\u6ce8\u518c\u662f\u5728\u540c\u4e00\u4e2atomcat\u5185\u90e8\u5b8c\u6210\uff0c\u6211\u4eec\u73b0\u5728\u7684\u7cfb\u7edf\u67b6\u6784\u662f\u6bcf\u4e00\u4e2a\u7cfb\u7edf\u90fd\u662f\u7531\u4e00\u4e2a\u56e2\u961f\u8fdb\u884c\u7ef4\u62a4\uff0c\u6bcf\u4e2a\u7cfb\u7edf\u90fd\u662f\u5355\u72ec\u90e8\u7f72\u8fd0\u884c\u4e00\u4e2a\u5355\u72ec\u7684tomcat\uff0c\u6240\u4ee5\uff0c\u4e0d\u80fd\u5c06\u7528\u6237\u7684\u767b\u5f55\u4fe1\u606f\u4fdd\u5b58\u5230session\u4e2d\uff08\u591a\u4e2atomcat\u7684session\u662f\u4e0d\u80fd\u5171\u4eab\u7684\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5355\u72ec\u7684\u7cfb\u7edf\u6765\u7ef4\u62a4\u7528\u6237\u7684\u767b\u5f55\u4fe1\u606f\u3002 \u7531\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff1a \u5ba2\u6237\u7aef\u9700\u8981\u901a\u8fc7SSO\u7cfb\u7edf\u624d\u80fd\u83b7\u53d6\u5230token\uff1b \u5ba2\u6237\u7aef\u5728\u8bf7\u6c42\u670d\u52a1\u7cfb\u7edf\u65f6\uff0c\u670d\u52a1\u7cfb\u7edf\u9700\u8981\u901a\u8fc7SSO\u7cfb\u7edf\u8fdb\u884c\u5bf9token\u8fdb\u884c\u6821\u9a8c\uff1b SSO\u7cfb\u7edf\u5728\u6574\u4e2a\u7cfb\u7edf\u67b6\u6784\u4e2d\u5904\u4e8e\u6838\u5fc3\u4f4d\u7f6e\uff1b","title":"3.1\u3001\u5355\u70b9\u767b\u5f55\u7cfb\u7edf"},{"location":"tantan/day01/#32","text":"","title":"3.2\u3001\u642d\u5efa\u5de5\u7a0b"},{"location":"tantan/day01/#321my-tanhua","text":"itcast-tanhua\u662f\u7236\u5de5\u7a0b\uff0c\u96c6\u4e2d\u5b9a\u4e49\u4e86\u4f9d\u8d56\u7684\u7248\u672c\u4ee5\u53ca\u6240\u9700\u8981\u7684\u4f9d\u8d56\u4fe1\u606f\u3002 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-parent </artifactId> <version> 2.1.0.RELEASE </version> </parent> <groupId> cn.itcast.tanhua </groupId> <artifactId> my-tanhua </artifactId> <version> 1.0-SNAPSHOT </version> <!-- \u96c6\u4e2d\u5b9a\u4e49\u4f9d\u8d56\u7248\u672c\u53f7 --> <properties> <mysql.version> 5.1.47 </mysql.version> <jackson.version> 2.9.9 </jackson.version> <druid.version> 1.0.9 </druid.version> <servlet-api.version> 2.5 </servlet-api.version> <jsp-api.version> 2.0 </jsp-api.version> <joda-time.version> 2.9.9 </joda-time.version> <commons-lang3.version> 3.7 </commons-lang3.version> <commons-io.version> 1.3.2 </commons-io.version> <mybatis.version> 3.2.8 </mybatis.version> <mybatis.mybatis-plus> 3.1.1 </mybatis.mybatis-plus> <lombok.version> 1.18.4 </lombok.version> </properties> <!--\u901a\u7528\u4f9d\u8d56--> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-test </artifactId> <scope> test </scope> </dependency> <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> <version> 4.12 </version> <scope> test </scope> </dependency> </dependencies> <dependencyManagement> <dependencies> <!-- mybatis-plus\u63d2\u4ef6\u4f9d\u8d56 --> <dependency> <groupId> com.baomidou </groupId> <artifactId> mybatis-plus </artifactId> <version> ${mybatis.mybatis-plus} </version> </dependency> <dependency> <groupId> com.baomidou </groupId> <artifactId> mybatis-plus-boot-starter </artifactId> <version> ${mybatis.mybatis-plus} </version> </dependency> <!-- MySql --> <dependency> <groupId> mysql </groupId> <artifactId> mysql-connector-java </artifactId> <version> ${mysql.version} </version> </dependency> <dependency> <groupId> org.mongodb </groupId> <artifactId> mongodb-driver-sync </artifactId> <version> 3.9.1 </version> </dependency> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> <optional> true </optional> <version> ${lombok.version} </version> </dependency> <dependency> <groupId> org.apache.commons </groupId> <artifactId> commons-lang3 </artifactId> <version> ${commons-lang3.version} </version> </dependency> <!--RocketMQ\u76f8\u5173--> <dependency> <groupId> org.apache.rocketmq </groupId> <artifactId> rocketmq-spring-boot-starter </artifactId> <version> 2.0.3 </version> </dependency> <dependency> <groupId> org.apache.rocketmq </groupId> <artifactId> rocketmq-client </artifactId> <version> 4.6.0 </version> </dependency> <!-- Jackson Json\u5904\u7406\u5de5\u5177\u5305 --> <dependency> <groupId> com.fasterxml.jackson.core </groupId> <artifactId> jackson-databind </artifactId> <version> ${jackson.version} </version> </dependency> <dependency> <groupId> com.alibaba </groupId> <artifactId> druid </artifactId> <version> ${druid.version} </version> </dependency> <dependency> <groupId> commons-codec </groupId> <artifactId> commons-codec </artifactId> <version> 1.11 </version> </dependency> <dependency> <groupId> joda-time </groupId> <artifactId> joda-time </artifactId> <version> ${joda-time.version} </version> </dependency> <dependency> <groupId> io.netty </groupId> <artifactId> netty-all </artifactId> <version> 4.1.32.Final </version> </dependency> <!--zk\u4f9d\u8d56--> <dependency> <groupId> org.apache.zookeeper </groupId> <artifactId> zookeeper </artifactId> <version> 3.4.13 </version> </dependency> <dependency> <groupId> com.github.sgroschupf </groupId> <artifactId> zkclient </artifactId> <version> 0.1 </version> </dependency> <!--dubbo\u7684springboot\u652f\u6301--> <dependency> <groupId> com.alibaba.boot </groupId> <artifactId> dubbo-spring-boot-starter </artifactId> <version> 0.2.0 </version> </dependency> <!--dubbo\u6846\u67b6--> <dependency> <groupId> com.alibaba </groupId> <artifactId> dubbo </artifactId> <version> 2.6.4 </version> </dependency> <dependency> <groupId> com.aliyun.oss </groupId> <artifactId> aliyun-sdk-oss </artifactId> <version> 2.8.3 </version> </dependency> <dependency> <groupId> com.aliyun </groupId> <artifactId> aliyun-java-sdk-core </artifactId> <version> 4.5.3 </version> </dependency> <dependency> <groupId> com.github.tobato </groupId> <artifactId> fastdfs-client </artifactId> <version> 1.26.7 </version> <exclusions> <exclusion> <groupId> ch.qos.logback </groupId> <artifactId> logback-classic </artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId> io.jsonwebtoken </groupId> <artifactId> jjwt </artifactId> <version> 0.9.1 </version> </dependency> </dependencies> </dependencyManagement> <build> <plugins> <!-- java\u7f16\u8bd1\u63d2\u4ef6 --> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-compiler-plugin </artifactId> <version> 3.2 </version> <configuration> <source> 1.8 </source> <target> 1.8 </target> <encoding> UTF-8 </encoding> </configuration> </plugin> </plugins> </build> </project>","title":"3.2.1\u3001my-tanhua"},{"location":"tantan/day01/#322my-tanhua-sso","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> my-tanhua </artifactId> <groupId> cn.itcast.tanhua </groupId> <version> 1.0-SNAPSHOT </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> my-tanhua-sso </artifactId> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> </dependency> <dependency> <groupId> com.baomidou </groupId> <artifactId> mybatis-plus </artifactId> </dependency> <dependency> <groupId> com.baomidou </groupId> <artifactId> mybatis-plus-boot-starter </artifactId> </dependency> <dependency> <groupId> mysql </groupId> <artifactId> mysql-connector-java </artifactId> </dependency> <dependency> <groupId> com.alibaba </groupId> <artifactId> druid </artifactId> </dependency> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> </dependency> <dependency> <groupId> org.apache.commons </groupId> <artifactId> commons-lang3 </artifactId> </dependency> <dependency> <groupId> com.fasterxml.jackson.core </groupId> <artifactId> jackson-databind </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-redis </artifactId> </dependency> <dependency> <groupId> commons-codec </groupId> <artifactId> commons-codec </artifactId> </dependency> <!--RocketMQ\u76f8\u5173--> <dependency> <groupId> org.apache.rocketmq </groupId> <artifactId> rocketmq-spring-boot-starter </artifactId> </dependency> <dependency> <groupId> org.apache.rocketmq </groupId> <artifactId> rocketmq-client </artifactId> </dependency> <!--\u7b80\u5316\u4ee3\u7801\u7684\u5de5\u5177\u5305--> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> <optional> true </optional> </dependency> <dependency> <groupId> com.aliyun </groupId> <artifactId> aliyun-java-sdk-core </artifactId> </dependency> <dependency> <groupId> io.jsonwebtoken </groupId> <artifactId> jjwt </artifactId> </dependency> <dependency> <groupId> joda-time </groupId> <artifactId> joda-time </artifactId> </dependency> </dependencies> </project>","title":"3.2.2\u3001my-tanhua-sso"},{"location":"tantan/day01/#323","text":"\u63a2\u82b1\u4ea4\u53cb\u9879\u76ee\u7684\u524d\u7aef\u91c7\u7528Android APP\u7684\u5f62\u5f0f\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4f7f\u7528\u6a21\u62df\u5668\u6216\u771f\u673a\u8fdb\u884c\u6d4b\u8bd5\u3002 \u5bf9\u4e8e\u6a21\u62df\u5668\u8fd9\u91cc\u63a8\u8350\u4f7f\u7528\u7f51\u6613\u6a21\u62df\u5668\uff0c\u5176\u517c\u5bb9\u6027\u597d\u3001\u529f\u80fd\u5b8c\u5584\u800c\u4e14\u8fd8\u7b80\u6d01\uff0c\u7f3a\u70b9\u662f\u5b83\u4e0d\u652f\u6301\u865a\u62df\u673a\u4e2d\u5b89\u88c5\u3002 \u4e0b\u8f7d\uff1ahttps://mumu.163.com/","title":"3.2.3\u3001\u7f51\u6613\u6a21\u62df\u5668"},{"location":"tantan/day01/#33","text":"\u6570\u636e\u5e93\u4f7f\u7528\u7684mysql\uff1a CREATE TABLE ` tb_user ` ( ` id ` bigint ( 20 ) NOT NULL AUTO_INCREMENT , ` mobile ` varchar ( 11 ) DEFAULT NULL COMMENT '\u624b\u673a\u53f7' , ` password ` varchar ( 32 ) DEFAULT NULL COMMENT '\u5bc6\u7801\uff0c\u9700\u8981\u52a0\u5bc6' , ` created ` datetime DEFAULT NULL , ` updated ` datetime DEFAULT NULL , PRIMARY KEY ( ` id ` ), KEY ` mobile ` ( ` mobile ` ) USING BTREE ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8 COMMENT = '\u7528\u6237\u8868' ; CREATE TABLE ` tb_user_info ` ( ` id ` bigint ( 20 ) NOT NULL AUTO_INCREMENT , ` user_id ` bigint ( 20 ) NOT NULL COMMENT '\u7528\u6237id' , ` nick_name ` varchar ( 50 ) DEFAULT NULL COMMENT '\u6635\u79f0' , ` logo ` varchar ( 100 ) DEFAULT NULL COMMENT '\u7528\u6237\u5934\u50cf' , ` tags ` varchar ( 50 ) DEFAULT NULL COMMENT '\u7528\u6237\u6807\u7b7e\uff1a\u591a\u4e2a\u7528\u9017\u53f7\u5206\u9694' , ` sex ` int ( 1 ) DEFAULT '3' COMMENT '\u6027\u522b\uff0c1-\u7537\uff0c2-\u5973\uff0c3-\u672a\u77e5' , ` age ` int ( 11 ) DEFAULT NULL COMMENT '\u7528\u6237\u5e74\u9f84' , ` edu ` varchar ( 20 ) DEFAULT NULL COMMENT '\u5b66\u5386' , ` city ` varchar ( 20 ) DEFAULT NULL COMMENT '\u5c45\u4f4f\u57ce\u5e02' , ` birthday ` varchar ( 20 ) DEFAULT NULL COMMENT '\u751f\u65e5' , ` cover_pic ` varchar ( 50 ) DEFAULT NULL COMMENT '\u5c01\u9762\u56fe\u7247' , ` industry ` varchar ( 20 ) DEFAULT NULL COMMENT '\u884c\u4e1a' , ` income ` varchar ( 20 ) DEFAULT NULL COMMENT '\u6536\u5165' , ` marriage ` varchar ( 20 ) DEFAULT NULL COMMENT '\u5a5a\u59fb\u72b6\u6001' , ` created ` datetime DEFAULT NULL , ` updated ` datetime DEFAULT NULL , PRIMARY KEY ( ` id ` ), KEY ` user_id ` ( ` user_id ` ) ) ENGINE = InnoDB DEFAULT CHARSET = utf8 COMMENT = '\u7528\u6237\u4fe1\u606f\u8868' ;","title":"3.3\u3001\u6570\u636e\u5e93\u8868"},{"location":"tantan/day01/#34","text":"application.properties\uff1a spring.application.name = itcast-tanhua-sso server.port = 18080 spring.datasource.driver-class-name = com.mysql.jdbc.Driver spring.datasource.url = jdbc:mysql://192.168.31.81:3306/mytanhua?useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true&useSSL=false spring.datasource.username = root spring.datasource.password = root # \u679a\u4e3e\u5305\u626b\u63cf mybatis-plus.type-enums-package = com.tanhua.sso.enums # \u8868\u540d\u524d\u7f00 mybatis-plus.global-config.db-config.table-prefix = tb_ # id\u7b56\u7565\u4e3a\u81ea\u589e\u957f mybatis-plus.global-config.db-config.id-type = auto # Redis\u76f8\u5173\u914d\u7f6e spring.redis.jedis.pool.max-wait = 5000ms spring.redis.jedis.pool.max-Idle = 100 spring.redis.jedis.pool.min-Idle = 10 spring.redis.timeout = 10s spring.redis.cluster.nodes = 192.168.31.81:6379,192.168.31.81:6380,192.168.31.81:6381 spring.redis.cluster.max-redirects = 5 # RocketMQ\u76f8\u5173\u914d\u7f6e rocketmq.name-server = 192.168.31.81:9876 rocketmq.producer.group = tanhua #itcast_tanhua #\u76d0 \u503c jwt.secret = 76bd425b6f29f7fcc2e0bfc286043df1 #\u8679\u8f6f\u76f8\u5173\u914d\u7f6e arcsoft.appid = ***** arcsoft.sdkKey = **** arcsoft.libPath = F:\\\\code\\\\WIN64","title":"3.4\u3001\u7f16\u5199\u914d\u7f6e"},{"location":"tantan/day01/#35","text":"","title":"3.5\u3001\u7f16\u5199\u57fa\u7840\u4ee3\u7801"},{"location":"tantan/day01/#351lombok","text":"lombok \u63d0\u4f9b\u4e86\u7b80\u5355\u7684\u6ce8\u89e3\u7684\u5f62\u5f0f\u6765\u5e2e\u52a9\u6211\u4eec\u7b80\u5316\u6d88\u9664\u4e00\u4e9b\u5fc5\u987b\u6709\u4f46\u663e\u5f97\u5f88\u81c3\u80bf\u7684 java \u4ee3\u7801\uff0c\u5c24\u5176\u662f\u9488\u5bf9pojo\u3002 \u5b98\u7f51\uff1ahttps://projectlombok.org/","title":"3.5.1\u3001Lombok"},{"location":"tantan/day01/#3511","text":"\u5bfc\u5165\u4f9d\u8d56\uff1a <!--\u7b80\u5316\u4ee3\u7801\u7684\u5de5\u5177\u5305--> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> <optional> true </optional> </dependency> \u5b89\u88c5IDEA\u63d2\u4ef6\uff1a \u5982\u679c\u4e0d\u5b89\u88c5\u63d2\u4ef6\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u6b63\u5e38\u6267\u884c\uff0c\u4f46\u662f\u770b\u4e0d\u5230\u751f\u6210\u7684\u4e00\u4e9b\u4ee3\u7801\uff0c\u5982\uff1aget\u3001set\u65b9\u6cd5\u3002","title":"3.5.1.1\u3001\u914d\u7f6e\u5b89\u88c5"},{"location":"tantan/day01/#3512","text":"@Data\uff1a\u6ce8\u89e3\u5728\u7c7b\u4e0a\uff1b\u63d0\u4f9b\u7c7b\u6240\u6709\u5c5e\u6027\u7684 getting \u548c setting \u65b9\u6cd5\uff0c\u6b64\u5916\u8fd8\u63d0\u4f9b\u4e86equals\u3001canEqual\u3001hashCode\u3001toString \u65b9\u6cd5 @Setter\uff1a\u6ce8\u89e3\u5728\u5c5e\u6027\u4e0a\uff1b\u4e3a\u5c5e\u6027\u63d0\u4f9b setting \u65b9\u6cd5 @Getter\uff1a\u6ce8\u89e3\u5728\u5c5e\u6027\u4e0a\uff1b\u4e3a\u5c5e\u6027\u63d0\u4f9b getting \u65b9\u6cd5 @Slf4j\uff1a\u6ce8\u89e3\u5728\u7c7b\u4e0a\uff1b\u4e3a\u7c7b\u63d0\u4f9b\u4e00\u4e2a \u5c5e\u6027\u540d\u4e3alog \u7684 slf4j\u65e5\u5fd7\u5bf9\u8c61 @NoArgsConstructor\uff1a\u6ce8\u89e3\u5728\u7c7b\u4e0a\uff1b\u4e3a\u7c7b\u63d0\u4f9b\u4e00\u4e2a\u65e0\u53c2\u7684\u6784\u9020\u65b9\u6cd5 @AllArgsConstructor\uff1a\u6ce8\u89e3\u5728\u7c7b\u4e0a\uff1b\u4e3a\u7c7b\u63d0\u4f9b\u4e00\u4e2a\u5168\u53c2\u7684\u6784\u9020\u65b9\u6cd5 @Builder\uff1a\u4f7f\u7528Builder\u6a21\u5f0f\u6784\u5efa\u5bf9\u8c61 \u6d4b\u8bd5\u4e00\uff1a\u4f7f\u7528@Data\u6ce8\u89e3 \u662f\u4e0d\u662f\u5f88\u795e\u5947\uff1f\uff01 \u6d4b\u8bd5\u4e8c\uff1a\u4f7f\u7528@Slf4j\u6ce8\u89e3 \u6d4b\u8bd5\uff1a \u6d4b\u8bd5\u4e09\uff1a@AllArgsConstructor\u3001@NoArgsConstructor\u6ce8\u89e3\u7684\u4f7f\u7528 \u6d4b\u8bd5\u56db\uff1a@Builder \u6d4b\u8bd5\u7ed3\u679c\uff1a","title":"3.5.1.2\u3001\u5e38\u7528\u6ce8\u89e3"},{"location":"tantan/day01/#352sexenum","text":"\u7528\u6237\u7684\u6027\u522b\u7528\u679a\u4e3e\u8fdb\u884c\u8868\u793a\u3002 package com.tanhua.sso.enums ; import com.baomidou.mybatisplus.core.enums.IEnum ; public enum SexEnum implements IEnum < Integer > { MAN ( 1 , \"\u7537\" ), WOMAN ( 2 , \"\u5973\" ), UNKNOWN ( 3 , \"\u672a\u77e5\" ); private int value ; private String desc ; SexEnum ( int value , String desc ) { this . value = value ; this . desc = desc ; } @Override public Integer getValue () { return this . value ; } @Override public String toString () { return this . desc ; } }","title":"3.5.2\u3001SexEnum"},{"location":"tantan/day01/#353useruserinfo","text":"package com.tanhua.sso.pojo ; import com.baomidou.mybatisplus.annotation.FieldFill ; import com.baomidou.mybatisplus.annotation.TableField ; import lombok.Data ; import java.util.Date ; @Data public abstract class BasePojo { @TableField ( fill = FieldFill . INSERT ) //MP\u81ea\u52a8\u586b\u5145 private Date created ; @TableField ( fill = FieldFill . INSERT_UPDATE ) private Date updated ; } package com.tanhua.sso.pojo ; import com.fasterxml.jackson.annotation.JsonIgnore ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class User extends BasePojo { private Long id ; private String mobile ; //\u624b\u673a\u53f7 @JsonIgnore private String password ; //\u5bc6\u7801\uff0cjson\u5e8f\u5217\u5316\u65f6\u5ffd\u7565 } package com.tanhua.sso.pojo ; import com.tanhua.sso.enums.SexEnum ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class UserInfo extends BasePojo { private Long id ; private Long userId ; //\u7528\u6237id private String nickName ; //\u6635\u79f0 private String logo ; //\u7528\u6237\u5934\u50cf private String tags ; //\u7528\u6237\u6807\u7b7e\uff1a\u591a\u4e2a\u7528\u9017\u53f7\u5206\u9694 private SexEnum sex ; //\u6027\u522b private Integer age ; //\u5e74\u9f84 private String edu ; //\u5b66\u5386 private String city ; //\u57ce\u5e02 private String birthday ; //\u751f\u65e5 private String coverPic ; // \u5c01\u9762\u56fe\u7247 private String industry ; //\u884c\u4e1a private String income ; //\u6536\u5165 private String marriage ; //\u5a5a\u59fb\u72b6\u6001 }","title":"3.5.3\u3001User\u3001UserInfo"},{"location":"tantan/day01/#354mymetaobjecthandler","text":"\u5bf9\u81ea\u52a8\u586b\u5145\u5b57\u6bb5\u7684\u5904\u7406\uff1a package com.tanhua.sso.handler ; import com.baomidou.mybatisplus.core.handlers.MetaObjectHandler ; import org.apache.ibatis.reflection.MetaObject ; import org.springframework.stereotype.Component ; import java.util.Date ; @Component public class MyMetaObjectHandler implements MetaObjectHandler { @Override public void insertFill ( MetaObject metaObject ) { Object created = getFieldValByName ( \"created\" , metaObject ); if ( null == created ) { //\u5b57\u6bb5\u4e3a\u7a7a\uff0c\u53ef\u4ee5\u8fdb\u884c\u586b\u5145 setFieldValByName ( \"created\" , new Date (), metaObject ); } Object updated = getFieldValByName ( \"updated\" , metaObject ); if ( null == updated ) { //\u5b57\u6bb5\u4e3a\u7a7a\uff0c\u53ef\u4ee5\u8fdb\u884c\u586b\u5145 setFieldValByName ( \"updated\" , new Date (), metaObject ); } } @Override public void updateFill ( MetaObject metaObject ) { //\u66f4\u65b0\u6570\u636e\u65f6\uff0c\u76f4\u63a5\u66f4\u65b0\u5b57\u6bb5 setFieldValByName ( \"updated\" , new Date (), metaObject ); } }","title":"3.5.4\u3001MyMetaObjectHandler"},{"location":"tantan/day01/#355usermapper","text":"package com.tanhua.sso.mapper ; import com.baomidou.mybatisplus.core.mapper.BaseMapper ; import com.tanhua.sso.pojo.User ; public interface UserMapper extends BaseMapper < User > { } package com.tanhua.sso.mapper ; import com.baomidou.mybatisplus.core.mapper.BaseMapper ; import com.tanhua.sso.pojo.UserInfo ; public interface UserInfoMapper extends BaseMapper < UserInfo > { }","title":"3.5.5\u3001UserMapper"},{"location":"tantan/day01/#356myapplication","text":"SpringBoot\u7684\u542f\u52a8\u7c7b\u3002 package com.tanhua.sso ; import org.mybatis.spring.annotation.MapperScan ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @MapperScan ( \"com.tanhua.sso.mapper\" ) //\u8bbe\u7f6emapper\u63a5\u53e3\u7684\u626b\u63cf\u5305 @SpringBootApplication public class MyApplication { public static void main ( String [] args ) { SpringApplication . run ( MyApplication . class , args ); } }","title":"3.5.6\u3001MyApplication"},{"location":"tantan/day01/#36","text":"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801\u7684\u6d41\u7a0b\uff1a \u6d41\u7a0b\u8bf4\u660e\uff1a \u7528\u6237\u5411SSO\u7cfb\u7edf\u53d1\u9001\u8bf7\u6c42\uff0c\u5728\u8bf7\u6c42\u4e2d\u4f20\u9012\u624b\u673a\u53f7\uff1b SSO\u7cfb\u7edf\u63a5\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u751f\u6210\u968f\u673a\u9a8c\u8bc1\u7801\u4ee5\u53ca\u77ed\u4fe1\u5185\u5bb9\uff0c\u8bf7\u6c42\u963f\u91cc\u4e91\u77ed\u4fe1\u670d\u52a1\uff1b \u963f\u91cc\u4e91\u77ed\u4fe1\u670d\u52a1\u63a5\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u4f1a\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u9a8c\u8bc1\uff0c\u6bd4\u5982\u8d26\u53f7\u4f59\u989d\u3001\u77ed\u4fe1\u6a21\u677f\u662f\u5426\u6b63\u786e\u7b49\uff0c\u6700\u540e\u5411\u8fd0\u8425\u5546\u53d1\u8d77\u8bf7\u6c42\uff1b \u8fd0\u8425\u5546\u63a5\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u5411\u8be5\u624b\u673a\u53f7\u4e0b\u53d1\u77ed\u4fe1\uff0c\u7528\u6237\u5373\u53ef\u6536\u5230\u77ed\u4fe1\uff1b","title":"3.6\u3001\u77ed\u4fe1\u9a8c\u8bc1\u7801"},{"location":"tantan/day01/#361","text":"","title":"3.6.1\u3001\u963f\u91cc\u4e91\u77ed\u4fe1\u670d\u52a1"},{"location":"tantan/day01/#3611","text":"https://dysms.console.aliyun.com/dysms.htm?spm=5176.12818093.0.ddysms.2a4316d0ql6PyD \u8bf4\u660e\uff1a\u7533\u8bf7\u7b7e\u540d\u65f6\uff0c\u4e2a\u4eba\u7528\u6237\u53ea\u80fd\u7533\u8bf7\u4e00\u4e2a\u5e76\u4e14\u7b7e\u540d\u7684\u540d\u79f0\u5fc5\u987b\u4e3a\u201cABC\u5546\u57ce\u201d\uff0c\u5426\u5219\u5ba1\u6838\u4e0d\u901a\u8fc7\u3002 \u7533\u8bf7\u6a21\u677f\uff1a \u5ba1\u6838\u65f6\u95f4\u9700\u89811~2\u5c0f\u65f6\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85~","title":"3.6.1.1\u3001\u7533\u8bf7\u7b7e\u540d\u4e0e\u6a21\u677f"},{"location":"tantan/day01/#3612","text":"\u5728\u963f\u91cc\u4e91\u4e2d\uff0c\u9700\u8981\u5728RAM\u670d\u52a1\u4e2d\u521b\u5efa\u7528\u6237\u4ee5\u53ca\u6743\u9650\uff0c\u624d\u80fd\u901a\u8fc7api\u8fdb\u884c\u8bbf\u95ee\u63a5\u53e3\u3002 \u521b\u5efa\u7528\u6237\uff1a \u521b\u5efa\u5b8c\u6210\u540e\u8981\u4fdd\u5b58AccessKey Secret\u548cAccessKey ID\uff0cAccessKey Secret\u53ea\u663e\u793a\u8fd9\u4e00\u6b21\uff0c\u540e\u9762\u5c06\u4e0d\u518d\u663e\u793a\u3002 \u6dfb\u52a0\u6743\u9650\uff1a","title":"3.6.1.2\u3001\u8bbe\u7f6e\u7528\u6237\u6743\u9650"},{"location":"tantan/day01/#3613","text":"\u6587\u6863\uff1ahttps://help.aliyun.com/document_detail/101414.html?spm=a2c4g.11186623.6.625.18705ffa8u4lwj\uff1a package com.tanhua.sso.service ; import com.aliyuncs.CommonRequest ; import com.aliyuncs.CommonResponse ; import com.aliyuncs.DefaultAcsClient ; import com.aliyuncs.IAcsClient ; import com.aliyuncs.exceptions.ClientException ; import com.aliyuncs.exceptions.ServerException ; import com.aliyuncs.http.MethodType ; import com.aliyuncs.profile.DefaultProfile ; /* pom.xml <dependency> <groupId>com.aliyun</groupId> <artifactId>aliyun-java-sdk-core</artifactId> <version>4.5.3</version> </dependency> */ public class SendSms { public static void main ( String [] args ) { DefaultProfile profile = DefaultProfile . getProfile ( \"cn-hangzhou\" , \"LTAI4G7d2Q9CHc741gighjTF\" , \"uKOOGdIKvmoGhHlej8cJY8H3nlU6Fj\" ); IAcsClient client = new DefaultAcsClient ( profile ); CommonRequest request = new CommonRequest (); request . setSysMethod ( MethodType . POST ); request . setSysDomain ( \"dysmsapi.aliyuncs.com\" ); request . setSysVersion ( \"2017-05-25\" ); request . setSysAction ( \"SendSms\" ); request . putQueryParameter ( \"RegionId\" , \"cn-hangzhou\" ); request . putQueryParameter ( \"PhoneNumbers\" , \"158****7944\" ); //\u76ee\u6807\u624b\u673a\u53f7 request . putQueryParameter ( \"SignName\" , \"ABC\u5546\u57ce\" ); //\u7b7e\u540d\u540d\u79f0 request . putQueryParameter ( \"TemplateCode\" , \"SMS_204756062\" ); //\u77ed\u4fe1\u6a21\u677fcode request . putQueryParameter ( \"TemplateParam\" , \"{\\\"code\\\":\\\"123456\\\"}\" ); //\u6a21\u677f\u4e2d\u53d8\u91cf\u66ff\u6362 try { CommonResponse response = client . getCommonResponse ( request ); //{\"Message\":\"OK\",\"RequestId\":\"EC2D4C9A-0EAC-4213-BE45-CE6176E1DF23\",\"BizId\":\"110903802851113360^0\",\"Code\":\"OK\"} System . out . println ( response . getData ()); } catch ( ServerException e ) { e . printStackTrace (); } catch ( ClientException e ) { e . printStackTrace (); } } }","title":"3.6.1.3\u3001\u793a\u4f8b\u4ee3\u7801"},{"location":"tantan/day01/#3614","text":"\u914d\u7f6e\u6587\u4ef6\uff1aaliyun.properties aliyun.sms.regionId = cn-hangzhou aliyun.sms.accessKeyId = LTAI4G7d2Q9CHc741gighjTF aliyun.sms.accessKeySecret = uKOOGdIKvmoGhHlej8cJY8H3nlU6Fj aliyun.sms.domain = dysmsapi.aliyuncs.com aliyun.sms.signName = ABC\u5546\u57ce aliyun.sms.templateCode = SMS_204756062 \u9700\u8981\u6ce8\u610f\u4e2d\u6587\u7f16\u7801\u95ee\u9898\uff1a \u8bfb\u53d6\u914d\u7f6e\uff1a package com.tanhua.sso.config ; import lombok.Data ; import org.springframework.boot.context.properties.ConfigurationProperties ; import org.springframework.context.annotation.Configuration ; import org.springframework.context.annotation.PropertySource ; @Configuration @PropertySource ( \"classpath:aliyun.properties\" ) @ConfigurationProperties ( prefix = \"aliyun.sms\" ) @Data public class AliyunSMSConfig { private String regionId ; private String accessKeyId ; private String accessKeySecret ; private String domain ; private String signName ; private String templateCode ; } \u4ee3\u7801\u5b9e\u73b0\uff1a //SmsService.java /** * \u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801 * * @param mobile * @return */ public String sendSms ( String mobile ) { DefaultProfile profile = DefaultProfile . getProfile ( this . aliyunSMSConfig . getRegionId (), this . aliyunSMSConfig . getAccessKeyId (), this . aliyunSMSConfig . getAccessKeySecret ()); IAcsClient client = new DefaultAcsClient ( profile ); String code = RandomUtils . nextInt ( 100000 , 999999 ) + \"\" ; CommonRequest request = new CommonRequest (); request . setSysMethod ( MethodType . POST ); request . setSysDomain ( this . aliyunSMSConfig . getDomain ()); request . setSysVersion ( \"2017-05-25\" ); request . setSysAction ( \"SendSms\" ); request . putQueryParameter ( \"RegionId\" , this . aliyunSMSConfig . getRegionId ()); request . putQueryParameter ( \"PhoneNumbers\" , mobile ); //\u76ee\u6807\u624b\u673a\u53f7 request . putQueryParameter ( \"SignName\" , this . aliyunSMSConfig . getSignName ()); //\u7b7e\u540d\u540d\u79f0 request . putQueryParameter ( \"TemplateCode\" , this . aliyunSMSConfig . getTemplateCode ()); //\u77ed\u4fe1\u6a21\u677fcode request . putQueryParameter ( \"TemplateParam\" , \"{\\\"code\\\":\\\"\" + code + \"\\\"}\" ); //\u6a21\u677f\u4e2d\u53d8\u91cf\u66ff\u6362 try { CommonResponse response = client . getCommonResponse ( request ); String data = response . getData (); if ( StringUtils . contains ( data , \"\\\"Message\\\":\\\"OK\\\"\" )) { return code ; } log . info ( \"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801\u5931\u8d25~ data = \" + data ); } catch ( Exception e ) { log . error ( \"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801\u5931\u8d25~ mobile = \" + mobile , e ); } return null ; }","title":"3.6.1.4\u3001\u5b9e\u73b0\u53d1\u9001\u77ed\u4fe1\u65b9\u6cd5"},{"location":"tantan/day01/#362sso","text":"","title":"3.6.2\u3001SSO\u77ed\u4fe1\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day01/#3621mock","text":"\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/581","title":"3.6.2.1\u3001mock\u63a5\u53e3"},{"location":"tantan/day01/#3622","text":"\u7f16\u5199ErrorResult\uff0cErrorResult\u5bf9\u8c61\u662f\u4e0e\u524d\u7aef\u7ea6\u5b9a\u597d\u7684\u7ed3\u6784\uff0c\u5982\u679c\u53d1\u751f\u9519\u8bef\u9700\u8981\u8fd4\u56de\u8be5\u5bf9\u8c61\uff0c\u5982\u679c\u672a\u53d1\u751f\u9519\u8bef\u54cd\u5e94200\u5373\u53ef\u3002 package com.tanhua.sso.vo ; import lombok.Builder ; import lombok.Data ; @Data @Builder public class ErrorResult { private String errCode ; private String errMessage ; } SmsController\uff1a package com.tanhua.sso.controller ; import com.tanhua.sso.service.SmsService ; import com.tanhua.sso.vo.ErrorResult ; import lombok.extern.slf4j.Slf4j ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.PostMapping ; import org.springframework.web.bind.annotation.RequestBody ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RestController ; import java.util.Map ; @RestController @RequestMapping ( \"user\" ) @Slf4j public class SmsController { @Autowired private SmsService smsService ; /** * \u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801\u63a5\u53e3 * * @param param * @return */ @PostMapping ( \"login\" ) public ResponseEntity < ErrorResult > sendCheckCode ( @RequestBody Map < String , String > param ) { ErrorResult errorResult = null ; String phone = param . get ( \"phone\" ); try { errorResult = this . smsService . sendCheckCode ( phone ); if ( null == errorResult ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { log . error ( \"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801\u5931\u8d25~ phone = \" + phone , e ); errorResult = ErrorResult . builder (). errCode ( \"000002\" ). errMessage ( \"\u77ed\u4fe1\u9a8c\u8bc1\u7801\u53d1\u9001\u5931\u8d25\uff01\" ). build (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). body ( errorResult ); } } SmsService\uff1a package com.tanhua.sso.service ; import com.aliyuncs.CommonRequest ; import com.aliyuncs.CommonResponse ; import com.aliyuncs.DefaultAcsClient ; import com.aliyuncs.IAcsClient ; import com.aliyuncs.exceptions.ClientException ; import com.aliyuncs.exceptions.ServerException ; import com.aliyuncs.http.MethodType ; import com.aliyuncs.profile.DefaultProfile ; import com.tanhua.sso.config.AliyunSMSConfig ; import com.tanhua.sso.vo.ErrorResult ; import lombok.extern.slf4j.Slf4j ; import org.apache.commons.lang3.RandomUtils ; import org.apache.commons.lang3.StringUtils ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.redis.core.RedisTemplate ; import org.springframework.stereotype.Service ; import java.time.Duration ; @Service @Slf4j public class SmsService { @Autowired private AliyunSMSConfig aliyunSMSConfig ; @Autowired private RedisTemplate < String , String > redisTemplate ; /** * \u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801 * * @param mobile * @return */ public String sendSms ( String mobile ) { DefaultProfile profile = DefaultProfile . getProfile ( this . aliyunSMSConfig . getRegionId (), this . aliyunSMSConfig . getAccessKeyId (), this . aliyunSMSConfig . getAccessKeySecret ()); IAcsClient client = new DefaultAcsClient ( profile ); String code = RandomUtils . nextInt ( 100000 , 999999 ) + \"\" ; CommonRequest request = new CommonRequest (); request . setSysMethod ( MethodType . POST ); request . setSysDomain ( this . aliyunSMSConfig . getDomain ()); request . setSysVersion ( \"2017-05-25\" ); request . setSysAction ( \"SendSms\" ); request . putQueryParameter ( \"RegionId\" , this . aliyunSMSConfig . getRegionId ()); request . putQueryParameter ( \"PhoneNumbers\" , mobile ); //\u76ee\u6807\u624b\u673a\u53f7 request . putQueryParameter ( \"SignName\" , this . aliyunSMSConfig . getSignName ()); //\u7b7e\u540d\u540d\u79f0 request . putQueryParameter ( \"TemplateCode\" , this . aliyunSMSConfig . getTemplateCode ()); //\u77ed\u4fe1\u6a21\u677fcode request . putQueryParameter ( \"TemplateParam\" , \"{\\\"code\\\":\\\"\" + code + \"\\\"}\" ); //\u6a21\u677f\u4e2d\u53d8\u91cf\u66ff\u6362 try { CommonResponse response = client . getCommonResponse ( request ); String data = response . getData (); if ( StringUtils . contains ( data , \"\\\"Message\\\":\\\"OK\\\"\" )) { return code ; } log . info ( \"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801\u5931\u8d25~ data = \" + data ); } catch ( Exception e ) { log . error ( \"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801\u5931\u8d25~ mobile = \" + mobile , e ); } return null ; } /** * \u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801 * \u5b9e\u73b0\uff1a\u53d1\u9001\u5b8c\u6210\u77ed\u4fe1\u9a8c\u8bc1\u7801\u540e\uff0c\u9700\u8981\u5c06\u9a8c\u8bc1\u7801\u4fdd\u5b58\u5230redis\u4e2d * @param phone * @return */ public ErrorResult sendCheckCode ( String phone ) { String redisKey = \"CHECK_CODE_\" + phone ; //\u5148\u5224\u65ad\u8be5\u624b\u673a\u53f7\u53d1\u9001\u7684\u9a8c\u8bc1\u7801\u662f\u5426\u8fd8\u672a\u5931\u6548 if ( this . redisTemplate . hasKey ( redisKey )){ String msg = \"\u4e0a\u4e00\u6b21\u53d1\u9001\u7684\u9a8c\u8bc1\u7801\u8fd8\u672a\u5931\u6548\uff01\" ; return ErrorResult . builder (). errCode ( \"000001\" ). errMessage ( msg ). build (); } String code = this . sendSms ( phone ); if ( StringUtils . isEmpty ( code )){ String msg = \"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801\u5931\u8d25\uff01\" ; return ErrorResult . builder (). errCode ( \"000000\" ). errMessage ( msg ). build (); } //\u77ed\u4fe1\u53d1\u9001\u6210\u529f\uff0c\u5c06\u9a8c\u8bc1\u7801\u4fdd\u5b58\u5230redis\u4e2d\uff0c\u6709\u6548\u671f\u4e3a5\u5206\u949f this . redisTemplate . opsForValue (). set ( redisKey , code , Duration . ofMinutes ( 5 )); return null ; } }","title":"3.6.2.2\u3001\u7f16\u5199\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day01/#37jwt","text":"","title":"3.7\u3001JWT"},{"location":"tantan/day01/#371","text":"JSON Web token\u7b80\u79f0JWT\uff0c \u662f\u7528\u4e8e\u5bf9\u5e94\u7528\u7a0b\u5e8f\u4e0a\u7684\u7528\u6237\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u7684\u6807\u8bb0\u3002\u4e5f\u5c31\u662f\u8bf4, \u4f7f\u7528 JWTS \u7684\u5e94\u7528\u7a0b\u5e8f\u4e0d\u518d\u9700\u8981\u4fdd\u5b58\u6709\u5173\u5176\u7528\u6237\u7684 cookie \u6216\u5176\u4ed6session\u6570\u636e\u3002\u6b64\u7279\u6027\u4fbf\u4e8e\u53ef\u4f38\u7f29\u6027, \u540c\u65f6\u4fdd\u8bc1\u5e94\u7528\u7a0b\u5e8f\u7684\u5b89\u5168\u3002 \u5728\u8eab\u4efd\u9a8c\u8bc1\u8fc7\u7a0b\u4e2d, \u5f53\u7528\u6237\u4f7f\u7528\u5176\u51ed\u636e\u6210\u529f\u767b\u5f55\u65f6, \u5c06\u8fd4\u56de JSON Web token, \u5e76\u4e14\u5fc5\u987b\u5728\u672c\u5730\u4fdd\u5b58 (\u901a\u5e38\u5728\u672c\u5730\u5b58\u50a8\u4e2d)\u3002 \u6bcf\u5f53\u7528\u6237\u8981\u8bbf\u95ee\u53d7\u4fdd\u62a4\u7684\u8def\u7531\u6216\u8d44\u6e90 (\u7aef\u70b9) \u65f6, \u7528\u6237\u4ee3\u7406(user agent)\u5fc5\u987b\u8fde\u540c\u8bf7\u6c42\u4e00\u8d77\u53d1\u9001 JWT, \u901a\u5e38\u5728\u6388\u6743\u6807\u5934\u4e2d\u4f7f\u7528Bearer schema\u3002\u540e\u7aef\u670d\u52a1\u5668\u63a5\u6536\u5230\u5e26\u6709 JWT \u7684\u8bf7\u6c42\u65f6, \u9996\u5148\u8981\u505a\u7684\u662f\u9a8c\u8bc1token\u3002","title":"3.7.1\u3001\u7b80\u4ecb"},{"location":"tantan/day01/#372","text":"JWT\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7ecf\u8fc7\u52a0\u5bc6\u5904\u7406\u4e0e\u6821\u9a8c\u5904\u7406\u7684\u5b57\u7b26\u4e32\uff0c\u5f62\u5f0f\u4e3a\uff1aA.B.C A\u7531JWT\u5934\u90e8\u4fe1\u606fheader\u7ecf\u8fc7base64\u52a0\u5bc6\u5f97\u5230 ~~~json #\u9ed8\u8ba4\u7684\u5934\u4fe1\u606f { \"alg\": \"HS256\", \"typ\": \"JWT\" }","title":"3.7.2\u3001\u683c\u5f0f"},{"location":"tantan/day01/#httpsjwtio","text":"","title":"\u5b98\u7f51\u6d4b\u8bd5\uff1ahttps://jwt.io/"},{"location":"tantan/day01/#base64eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9","text":"~~~ B\u662fpayload\uff0c\u5b58\u653e\u6709\u6548\u4fe1\u606f\u7684\u5730\u65b9\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5305\u542b\u4e09\u4e2a\u90e8\u5206\uff1a \u6807\u51c6\u4e2d\u6ce8\u518c\u7684\u58f0\u660e (\u5efa\u8bae\u4f46\u4e0d\u5f3a\u5236\u4f7f\u7528) iss: jwt\u7b7e\u53d1\u8005 sub: jwt\u6240\u9762\u5411\u7684\u7528\u6237 aud: \u63a5\u6536jwt\u7684\u4e00\u65b9 exp: jwt\u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u8fd9\u4e2a\u8fc7\u671f\u65f6\u95f4\u5fc5\u987b\u8981\u5927\u4e8e\u7b7e\u53d1\u65f6\u95f4 nbf: \u5b9a\u4e49\u5728\u4ec0\u4e48\u65f6\u95f4\u4e4b\u524d\uff0c\u8be5jwt\u90fd\u662f\u4e0d\u53ef\u7528\u7684. iat: jwt\u7684\u7b7e\u53d1\u65f6\u95f4 jti: jwt\u7684\u552f\u4e00\u8eab\u4efd\u6807\u8bc6\uff0c\u4e3b\u8981\u7528\u6765\u4f5c\u4e3a\u4e00\u6b21\u6027token,\u4ece\u800c\u56de\u907f\u91cd\u653e\u653b\u51fb\u3002 \u516c\u5171\u7684\u58f0\u660e \u516c\u5171\u7684\u58f0\u660e\u53ef\u4ee5\u6dfb\u52a0\u4efb\u4f55\u7684\u4fe1\u606f\uff0c\u4e00\u822c\u6dfb\u52a0\u7528\u6237\u7684\u76f8\u5173\u4fe1\u606f\u6216\u5176\u4ed6\u4e1a\u52a1\u9700\u8981\u7684\u5fc5\u8981\u4fe1\u606f.\u4f46\u4e0d\u5efa\u8bae\u6dfb\u52a0\u654f\u611f\u4fe1\u606f\uff0c\u56e0\u4e3a\u8be5\u90e8\u5206\u5728\u5ba2\u6237\u7aef\u53ef\u89e3\u5bc6. \u79c1\u6709\u7684\u58f0\u660e \u79c1\u6709\u58f0\u660e\u662f\u63d0\u4f9b\u8005\u548c\u6d88\u8d39\u8005\u6240\u5171\u540c\u5b9a\u4e49\u7684\u58f0\u660e\uff0c\u4e00\u822c\u4e0d\u5efa\u8bae\u5b58\u653e\u654f\u611f\u4fe1\u606f\uff0c\u56e0\u4e3abase64\u662f\u5bf9\u79f0\u89e3\u5bc6\u7684\uff0c\u610f\u5473\u7740\u8be5\u90e8\u5206\u4fe1\u606f\u53ef\u4ee5\u5f52\u7c7b\u4e3a\u660e\u6587\u4fe1\u606f\u3002 ~~~json #\u5b58\u653e\u7684\u6570\u636e\uff1a { \"sub\": \"1234567890\", \"name\": \"John Doe\", \"iat\": 1516239022 }","title":"base64\u52a0\u5bc6\u540e\u7684\u5b57\u7b26\u4e32\u4e3a\uff1aeyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"},{"location":"tantan/day01/#base64","text":"eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ ~~~ C\u7531A\u548cB\u901a\u8fc7\u52a0\u5bc6\u7b97\u6cd5\u5f97\u5230\uff0c\u7528\u4f5c\u5bf9token\u8fdb\u884c\u6821\u9a8c\uff0c\u770b\u662f\u5426\u6709\u6548 \u8fd9\u4e2a\u90e8\u5206\u9700\u8981base64\u52a0\u5bc6\u540e\u7684header\u548cbase64\u52a0\u5bc6\u540e\u7684payload\u4f7f\u7528 . \u8fde\u63a5\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u901a\u8fc7header\u4e2d\u58f0\u660e\u7684\u52a0\u5bc6\u65b9\u5f0f\u8fdb\u884c\u52a0\u76d0 secret \u7ec4\u5408\u52a0\u5bc6\uff0c\u7136\u540e\u5c31\u6784\u6210\u4e86jwt\u7684\u7b2c\u4e09\u90e8\u5206\u3002 ~~~json #secret\u4e3a\uff1aitcast #\u5f97\u5230\u7684\u52a0\u5bc6\u5b57\u7b26\u4e32\u4e3a\uff1aDwMTjJktoFFdClHqjJMRgYzICo6FJOUc3Jmev9EScBc","title":"base64\u540e\u7684\u5b57\u7b26\u4e32\u4e3a\uff1a"},{"location":"tantan/day01/#tokeneyjhbgcioijiuzi1niisinr5cci6ikpxvcj9eyjzdwiioiixmjm0nty3odkwiiwibmftzsi6ikpvag4grg9liiwiawf0ijoxnte2mjm5mdiyfqdwmtjjktoffdclhqjjmrgyzico6fjouc3jmev9escbc","text":"~~~","title":"\u6574\u4f53\u7684token\u4e3a\uff1aeyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.DwMTjJktoFFdClHqjJMRgYzICo6FJOUc3Jmev9EScBc"},{"location":"tantan/day01/#373","text":"","title":"3.7.3\u3001\u6d41\u7a0b"},{"location":"tantan/day01/#374","text":"\u5bfc\u5165\u4f9d\u8d56\uff1a <dependency> <groupId> io.jsonwebtoken </groupId> <artifactId> jjwt </artifactId> <version> 0.9.1 </version> </dependency> \u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\uff1a package com.tanhua.sso.service ; import io.jsonwebtoken.ExpiredJwtException ; import io.jsonwebtoken.JwsHeader ; import io.jsonwebtoken.Jwts ; import io.jsonwebtoken.SignatureAlgorithm ; import org.junit.Test ; import java.util.Date ; import java.util.HashMap ; import java.util.Map ; public class TestJWT { String secret = \"itcast\" ; @Test public void testCreateToken (){ Map < String , Object > header = new HashMap < String , Object > (); header . put ( JwsHeader . TYPE , JwsHeader . JWT_TYPE ); header . put ( JwsHeader . ALGORITHM , \"HS256\" ); Map < String , Object > claims = new HashMap < String , Object > (); claims . put ( \"mobile\" , \"1333333333\" ); claims . put ( \"id\" , \"2\" ); // \u751f\u6210token String jwt = Jwts . builder () . setHeader ( header ) //header\uff0c\u53ef\u7701\u7565 . setClaims ( claims ) //payload\uff0c\u5b58\u653e\u6570\u636e\u7684\u4f4d\u7f6e\uff0c\u4e0d\u80fd\u653e\u7f6e\u654f\u611f\u6570\u636e\uff0c\u5982\uff1a\u5bc6\u7801\u7b49 . signWith ( SignatureAlgorithm . HS256 , secret ) //\u8bbe\u7f6e\u52a0\u5bc6\u65b9\u6cd5\u548c\u52a0\u5bc6\u76d0 . setExpiration ( new Date ( System . currentTimeMillis () + 3000 )) //\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0c3\u79d2\u540e\u8fc7\u671f . compact (); System . out . println ( jwt ); } @Test public void testDecodeToken (){ String token = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2JpbGUiOiIxMzMzMzMzMzMzIiwiaWQiOiIyIiwiZXhwIjoxNjA1NTEzMDA2fQ.1eG3LpudD4XBycUG39UQDaKVBQHgaup-E1OLWo_m8m8\" ; try { // \u901a\u8fc7token\u89e3\u6790\u6570\u636e Map < String , Object > body = Jwts . parser () . setSigningKey ( secret ) . parseClaimsJws ( token ) . getBody (); System . out . println ( body ); //{mobile=1333333333, id=2, exp=1605513392} } catch ( ExpiredJwtException e ) { System . out . println ( \"token\u5df2\u7ecf\u8fc7\u671f\uff01\" ); } catch ( Exception e ) { System . out . println ( \"token\u4e0d\u5408\u6cd5\uff01\" ); } } }","title":"3.7.4\u3001\u793a\u4f8b"},{"location":"tantan/day01/#38","text":"\u7528\u6237\u63a5\u6536\u5230\u9a8c\u8bc1\u7801\u540e\uff0c\u8fdb\u884c\u8f93\u5165\u9a8c\u8bc1\u7801\uff0c\u70b9\u51fb\u767b\u5f55\uff0c\u524d\u7aef\u7cfb\u7edf\u5c06\u624b\u673a\u53f7\u4ee5\u53ca\u9a8c\u8bc1\u7801\u63d0\u4ea4\u5230SSO\u8fdb\u884c\u6821\u9a8c\u3002","title":"3.8\u3001\u7528\u6237\u767b\u5f55"},{"location":"tantan/day01/#371mock","text":"\u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/164/interface/api/12593","title":"3.7.1\u3001mock\u63a5\u53e3"},{"location":"tantan/day01/#372usercontroller","text":"package com.tanhua.sso.controller ; import com.tanhua.sso.service.UserService ; import com.tanhua.sso.vo.ErrorResult ; import org.apache.commons.lang3.StringUtils ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.PostMapping ; import org.springframework.web.bind.annotation.RequestBody ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RestController ; import java.util.HashMap ; import java.util.Map ; @RestController @RequestMapping ( \"user\" ) public class UserController { @Autowired private UserService userService ; /** * \u7528\u6237\u767b\u5f55 * * @param param * @return */ @PostMapping ( \"loginVerification\" ) public ResponseEntity < Object > login ( @RequestBody Map < String , String > param ){ try { String phone = param . get ( \"phone\" ); String code = param . get ( \"verificationCode\" ); String data = this . userService . login ( phone , code ); if ( StringUtils . isNotEmpty ( data )){ //\u767b\u5f55\u6210\u529f Map < String , Object > result = new HashMap <> ( 2 ); String [] ss = StringUtils . split ( data , '|' ); result . put ( \"token\" , ss [ 0 ] ); result . put ( \"isNew\" , Boolean . valueOf ( ss [ 1 ] )); return ResponseEntity . ok ( result ); } } catch ( Exception e ) { e . printStackTrace (); } ErrorResult errorResult = ErrorResult . builder (). errCode ( \"000002\" ). errMessage ( \"\u767b\u5f55\u5931\u8d25\uff01\" ). build (); return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). body ( errorResult ); } }","title":"3.7.2\u3001UserController"},{"location":"tantan/day01/#373userservice","text":"package com.tanhua.sso.service ; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper ; import com.baomidou.mybatisplus.core.toolkit.Wrappers ; import com.tanhua.sso.mapper.UserMapper ; import com.tanhua.sso.pojo.User ; import io.jsonwebtoken.Jwts ; import io.jsonwebtoken.SignatureAlgorithm ; import lombok.extern.slf4j.Slf4j ; import org.apache.commons.codec.digest.DigestUtils ; import org.apache.commons.lang3.StringUtils ; import org.apache.rocketmq.spring.core.RocketMQTemplate ; import org.joda.time.DateTime ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.beans.factory.annotation.Value ; import org.springframework.data.redis.core.RedisTemplate ; import org.springframework.messaging.MessagingException ; import org.springframework.stereotype.Service ; import java.util.HashMap ; import java.util.Map ; @Service @Slf4j public class UserService { @Autowired private RedisTemplate < String , String > redisTemplate ; @Autowired private UserMapper userMapper ; @Value ( \"${jwt.secret}\" ) private String secret ; @Autowired private RocketMQTemplate rocketMQTemplate ; /** * \u7528\u6237\u767b\u5f55 * * @param phone \u624b\u673a\u53f7 * @param code \u9a8c\u8bc1\u7801 * @return */ public String login ( String phone , String code ) { String redisKey = \"CHECK_CODE_\" + phone ; boolean isNew = false ; //\u6821\u9a8c\u9a8c\u8bc1\u7801 String redisData = this . redisTemplate . opsForValue (). get ( redisKey ); if ( ! StringUtils . equals ( code , redisData )) { return null ; //\u9a8c\u8bc1\u7801\u9519\u8bef } //\u9a8c\u8bc1\u7801\u5728\u6821\u9a8c\u5b8c\u6210\u540e\uff0c\u9700\u8981\u5e9f\u5f03 this . redisTemplate . delete ( redisKey ); QueryWrapper < User > queryWrapper = new QueryWrapper <> (); queryWrapper . eq ( \"mobile\" , phone ); User user = this . userMapper . selectOne ( queryWrapper ); if ( null == user ) { //\u9700\u8981\u6ce8\u518c\u8be5\u7528\u6237 user = new User (); user . setMobile ( phone ); user . setPassword ( DigestUtils . md5Hex ( \"123456\" )); //\u6ce8\u518c\u65b0\u7528\u6237 this . userMapper . insert ( user ); isNew = true ; } //\u751f\u6210token Map < String , Object > claims = new HashMap < String , Object > (); claims . put ( \"id\" , user . getId ()); // \u751f\u6210token String token = Jwts . builder () . setClaims ( claims ) //payload\uff0c\u5b58\u653e\u6570\u636e\u7684\u4f4d\u7f6e\uff0c\u4e0d\u80fd\u653e\u7f6e\u654f\u611f\u6570\u636e\uff0c\u5982\uff1a\u5bc6\u7801\u7b49 . signWith ( SignatureAlgorithm . HS256 , secret ) //\u8bbe\u7f6e\u52a0\u5bc6\u65b9\u6cd5\u548c\u52a0\u5bc6\u76d0 . setExpiration ( new DateTime (). plusHours ( 12 ). toDate ()) //\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0c12\u5c0f\u65f6\u540e\u8fc7\u671f . compact (); try { //\u53d1\u9001\u7528\u6237\u767b\u5f55\u6210\u529f\u7684\u6d88\u606f Map < String , Object > msg = new HashMap <> (); msg . put ( \"id\" , user . getId ()); msg . put ( \"date\" , System . currentTimeMillis ()); this . rocketMQTemplate . convertAndSend ( \"tanhua-sso-login\" , msg ); } catch ( MessagingException e ) { log . error ( \"\u53d1\u9001\u6d88\u606f\u5931\u8d25\uff01\" , e ); } return token + \"|\" + isNew ; } }","title":"3.7.3\u3001UserService"},{"location":"tantan/day01/#374_1","text":"","title":"3.7.4\u3001\u6d4b\u8bd5"},{"location":"tantan/day01/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/","text":"\u4e86\u89e3\u9879\u76ee\u7684\u80cc\u666f \u4e86\u89e3\u9879\u76ee\u7684\u6280\u672f\u67b6\u6784\u3001\u65b9\u6848 \u4e86\u89e3\u9879\u76ee\u7684\u529f\u80fd\u8bbe\u8ba1 \u638c\u63e1\u6a21\u62df\u5668\u7684\u4f7f\u7528 \u638c\u63e1\u5de5\u7a0b\u7684\u642d\u5efa \u638c\u63e1\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801 \u5b8c\u6210\u7528\u6237\u767b\u5f55\u529f\u80fd","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"tantan/day02/","text":"\u8bfe\u7a0b\u4ecb\u7ecd \u00b6 \u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f \u963f\u91cc\u4e91OSS\u670d\u52a1\u5e94\u7528 \u4eba\u8138\u8bc6\u522b MongoDB\u5feb\u901f\u5165\u95e8 SpringBoot\u6574\u5408MongoDB 1\u3001\u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f \u00b6 \u7528\u6237\u5728\u9996\u6b21\u767b\u5f55\u65f6\u9700\u8981\u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f\uff0c\u5305\u62ec\u6027\u522b\u3001\u6635\u79f0\u3001\u751f\u65e5\u3001\u57ce\u5e02\u3001\u5934\u50cf\u7b49\u3002 \u5176\u4e2d\uff0c\u5934\u50cf\u6570\u636e\u9700\u8981\u505a\u56fe\u7247\u4e0a\u4f20\uff0c\u8fd9\u91cc\u91c7\u7528\u963f\u91cc\u4e91\u7684OSS\u670d\u52a1\u4f5c\u4e3a\u6211\u4eec\u7684\u56fe\u7247\u670d\u52a1\u5668\uff0c\u5e76\u4e14\u5bf9\u5934\u50cf\u8981\u505a\u4eba\u8138\u8bc6\u522b\uff0c\u975e\u4eba\u8138\u7167\u7247\u4e0d\u5f97\u4e0a\u4f20\u3002 1.1\u3001\u56fe\u7247\u4e0a\u4f20 \u00b6 1.1.1\u3001\u56fe\u7247\u5b58\u50a8\u89e3\u51b3\u65b9\u6848 \u00b6 \u5b9e\u73b0\u56fe\u7247\u4e0a\u4f20\u670d\u52a1\uff0c\u9700\u8981\u6709\u5b58\u50a8\u7684\u652f\u6301\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u89e3\u51b3\u65b9\u6848\u5c06\u4ee5\u4e0b\u51e0\u79cd\uff1a \u76f4\u63a5\u5c06\u56fe\u7247\u4fdd\u5b58\u5230\u670d\u52a1\u7684\u786c\u76d8 \u4f18\u70b9\uff1a\u5f00\u53d1\u4fbf\u6377\uff0c\u6210\u672c\u4f4e \u7f3a\u70b9\uff1a\u6269\u5bb9\u56f0\u96be \u4f7f\u7528\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf\u8fdb\u884c\u5b58\u50a8 \u4f18\u70b9\uff1a\u5bb9\u6613\u5b9e\u73b0\u6269\u5bb9 \u7f3a\u70b9\uff1a\u5f00\u53d1\u590d\u6742\u5ea6\u7a0d\u5927\uff08\u6709\u6210\u719f\u7684\u4ea7\u54c1\u53ef\u4ee5\u4f7f\u7528\uff0c\u6bd4\u5982\uff1aFastDFS\uff09 \u4f7f\u7528nfs\u505a\u5b58\u50a8 \u4f18\u70b9\uff1a\u5f00\u53d1\u8f83\u4e3a\u4fbf\u6377 \u7f3a\u70b9\uff1a\u9700\u8981\u6709\u4e00\u5b9a\u7684\u8fd0\u7ef4\u77e5\u8bc6\u8fdb\u884c\u90e8\u7f72\u548c\u7ef4\u62a4 \u4f7f\u7528\u7b2c\u4e09\u65b9\u7684\u5b58\u50a8\u670d\u52a1 \u4f18\u70b9\uff1a\u5f00\u53d1\u7b80\u5355\uff0c\u62e5\u6709\u5f3a\u5927\u529f\u80fd\uff0c\u514d\u7ef4\u62a4 \u7f3a\u70b9\uff1a\u4ed8\u8d39 \u5728\u672c\u5957\u8bfe\u7a0b\u4e2d\u9009\u7528\u963f\u91cc\u4e91\u7684OSS\u670d\u52a1\u8fdb\u884c\u56fe\u7247\u5b58\u50a8\u3002 1.1.2\u3001\u963f\u91cc\u4e91OSS\u5b58\u50a8 \u00b6 \u6d41\u7a0b\uff1a 1.1.2.1\u3001\u4ec0\u4e48\u662fOSS\u670d\u52a1\uff1f \u00b6 \u5730\u5740\uff1ahttps://www.aliyun.com/product/oss 1.1.2.2\u3001\u8d2d\u4e70\u670d\u52a1 \u00b6 \u4f7f\u7528\u7b2c\u4e09\u65b9\u670d\u52a1\u6700\u5927\u7684\u7f3a\u70b9\u5c31\u662f\u9700\u8981\u4ed8\u8d39\uff0c\u4e0b\u9762\uff0c\u6211\u4eec\u770b\u4e0b\u5982\u4f55\u8d2d\u4e70\u5f00\u901a\u670d\u52a1\u3002 \u8d2d\u4e70\u4e0b\u884c\u6d41\u91cf\u5305\uff1a \uff08\u4e0d\u8d2d\u4e70\u4e5f\u53ef\u4ee5\u4f7f\u7528\uff0c\u6309\u7167\u6d41\u91cf\u4ed8\u8d39\uff09 \u8bf4\u660e\uff1aOSS\u7684\u4e0a\u884c\u6d41\u91cf\u662f\u514d\u8d39\u7684\uff0c\u4f46\u662f\u4e0b\u884c\u6d41\u91cf\u662f\u9700\u8981\u8d2d\u4e70\u7684\u3002 1.1.2.3\u3001\u521b\u5efaBucket \u00b6 \u4f7f\u7528OSS\uff0c\u9996\u5148\u9700\u8981\u521b\u5efaBucket\uff0cBucket\u7ffb\u8bd1\u6210\u4e2d\u6587\u662f\u6c34\u6876\u7684\u610f\u601d\uff0c\u628a\u5b58\u50a8\u7684\u56fe\u7247\u8d44\u6e90\u770b\u505a\u662f\u6c34\uff0c\u60f3\u8981\u76db\u6c34\u5fc5\u987b\u5f97\u6709\u6876\uff0c\u5c31\u662f\u8fd9\u4e2a\u610f\u601d\u4e86\u3002 \u8fdb\u5165\u63a7\u5236\u53f0\uff0chttps://oss.console.aliyun.com/overview \u9009\u62e9Bucket\u540e\uff0c\u5373\u53ef\u770b\u5230\u5bf9\u5e94\u7684\u4fe1\u606f\uff0c\u5982\uff1aurl\u3001\u6d88\u8017\u6d41\u91cf\u7b49 : \u6587\u4ef6\u7ba1\u7406\uff1a \u67e5\u770b\u6587\u4ef6\uff1a 1.1.2.4\u3001\u521b\u5efa\u7528\u6237 \u00b6 \u521b\u5efa\u7528\u6237\u7684\u65b9\u5f0f\u4e0e\u77ed\u4fe1\u63a5\u53e3\u4e2d\u7684\u65b9\u5f0f\u4e00\u6837\uff0c\u9700\u8981\u8bbe\u7f6eoss\u6743\u9650\u3002 1.1.3\u3001\u5bfc\u5165\u4f9d\u8d56 \u00b6 <dependency> <groupId> com.aliyun.oss </groupId> <artifactId> aliyun-sdk-oss </artifactId> <version> 2.8.3 </version> </dependency> 1.1.4\u3001OSS\u914d\u7f6e \u00b6 aliyun.properties\uff1a aliyun.endpoint = http://oss-cn-zhangjiakou.aliyuncs.com aliyun.accessKeyId = *********** aliyun.accessKeySecret = *************** aliyun.bucketName = tanhua-dev aliyun.urlPrefix = http://tanhua-dev.oss-cn-zhangjiakou.aliyuncs.com/ AliyunConfig\uff1a package com.tanhua.sso.config ; import com.aliyun.oss.OSSClient ; import lombok.Data ; import org.springframework.boot.context.properties.ConfigurationProperties ; import org.springframework.context.annotation.Bean ; import org.springframework.context.annotation.Configuration ; import org.springframework.context.annotation.PropertySource ; @Configuration @PropertySource ( \"classpath:aliyun.properties\" ) @ConfigurationProperties ( prefix = \"aliyun\" ) @Data public class AliyunConfig { private String endpoint ; private String accessKeyId ; private String accessKeySecret ; private String bucketName ; private String urlPrefix ; @Bean public OSSClient oSSClient () { return new OSSClient ( endpoint , accessKeyId , accessKeySecret ); } } 1.1.5\u3001PicUploadService \u00b6 package com.tanhua.sso.service ; import com.aliyun.oss.OSSClient ; import com.tanhua.sso.config.AliyunConfig ; import com.tanhua.sso.vo.PicUploadResult ; import org.apache.commons.lang3.RandomUtils ; import org.apache.commons.lang3.StringUtils ; import org.joda.time.DateTime ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import org.springframework.web.multipart.MultipartFile ; import java.io.ByteArrayInputStream ; @Service public class PicUploadService { // \u5141\u8bb8\u4e0a\u4f20\u7684\u683c\u5f0f private static final String [] IMAGE_TYPE = new String [] { \".bmp\" , \".jpg\" , \".jpeg\" , \".gif\" , \".png\" }; @Autowired private OSSClient ossClient ; @Autowired private AliyunConfig aliyunConfig ; public PicUploadResult upload ( MultipartFile uploadFile ) { PicUploadResult fileUploadResult = new PicUploadResult (); //\u56fe\u7247\u505a\u6821\u9a8c\uff0c\u5bf9\u540e\u7f00\u540d boolean isLegal = false ; for ( String type : IMAGE_TYPE ) { if ( StringUtils . endsWithIgnoreCase ( uploadFile . getOriginalFilename (), type )) { isLegal = true ; break ; } } if ( ! isLegal ) { fileUploadResult . setStatus ( \"error\" ); return fileUploadResult ; } // \u6587\u4ef6\u65b0\u8def\u5f84 String fileName = uploadFile . getOriginalFilename (); String filePath = getFilePath ( fileName ); // \u4e0a\u4f20\u5230\u963f\u91cc\u4e91 try { // \u76ee\u5f55\u7ed3\u6784\uff1aimages/2018/12/29/xxxx.jpg ossClient . putObject ( aliyunConfig . getBucketName (), filePath , new ByteArrayInputStream ( uploadFile . getBytes ())); } catch ( Exception e ) { e . printStackTrace (); //\u4e0a\u4f20\u5931\u8d25 fileUploadResult . setStatus ( \"error\" ); return fileUploadResult ; } // \u4e0a\u4f20\u6210\u529f fileUploadResult . setStatus ( \"done\" ); fileUploadResult . setName ( this . aliyunConfig . getUrlPrefix () + filePath ); fileUploadResult . setUid ( String . valueOf ( System . currentTimeMillis ())); return fileUploadResult ; } private String getFilePath ( String sourceFileName ) { DateTime dateTime = new DateTime (); return \"images/\" + dateTime . toString ( \"yyyy\" ) + \"/\" + dateTime . toString ( \"MM\" ) + \"/\" + dateTime . toString ( \"dd\" ) + \"/\" + System . currentTimeMillis () + RandomUtils . nextInt ( 100 , 9999 ) + \".\" + StringUtils . substringAfterLast ( sourceFileName , \".\" ); } } \u6240\u9700\u5176\u4ed6\u7684\u4ee3\u7801\uff1a PicUploadResult: package com.tanhua.sso.vo ; import lombok.Data ; @Data public class PicUploadResult { // \u6587\u4ef6\u552f\u4e00\u6807\u8bc6 private String uid ; // \u6587\u4ef6\u540d private String name ; // \u72b6\u6001\u6709\uff1auploading done error removed private String status ; // \u670d\u52a1\u7aef\u54cd\u5e94\u5185\u5bb9\uff0c\u5982\uff1a'{\"status\": \"success\"}' private String response ; } 1.1.6\u3001PicUploadController \u00b6 package com.tanhua.sso.controller ; import com.tanhua.sso.service.PicUploadService ; import com.tanhua.sso.vo.PicUploadResult ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Controller ; import org.springframework.web.bind.annotation.PostMapping ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RequestParam ; import org.springframework.web.bind.annotation.ResponseBody ; import org.springframework.web.multipart.MultipartFile ; @RequestMapping ( \"pic/upload\" ) @Controller public class PicUploadController { @Autowired private PicUploadService picUploadService ; @PostMapping @ResponseBody public PicUploadResult upload ( @RequestParam ( \"file\" ) MultipartFile multipartFile ) { return this . picUploadService . upload ( multipartFile ); } } 1.1.7\u3001\u6d4b\u8bd5 \u00b6 1.2\u3001\u4eba\u8138\u8bc6\u522b \u00b6 \u4eba\u8138\u8bc6\u522b\u6280\u672f\u91c7\u7528\u8679\u8f6f\u5f00\u653e\u5e73\u53f0\u5b9e\u73b0\uff08\u514d\u8d39\u4f7f\u7528\uff09\u3002\u5b98\u7f51\uff1ahttps://www.arcsoft.com.cn/ 1.2.1\u3001\u4f7f\u7528\u8bf4\u660e \u00b6 \u4f7f\u7528\u8679\u8f6f\u5e73\u53f0\u9700\u8981\u5148\u6ce8\u518c\u5f00\u53d1\u8005\u8d26\u53f7\uff1ahttps://ai.arcsoft.com.cn/ucenter/user/userlogin \u6ce8\u518c\u5b8c\u6210\u540e\u8fdb\u884c\u767b\u5f55\uff0c\u7136\u540e\u8fdb\u884c\u521b\u5efa\u5e94\u7528\uff1a \u521b\u5efa\u5b8c\u6210\u540e\uff0c\u9700\u8981\u8fdb\u884c\u5b9e\u540d\u8ba4\u8bc1\uff0c\u5426\u5219\u76f8\u5173\u7684SDK\u662f\u4e0d\u80fd\u4f7f\u7528\u7684\u3002 \u5b9e\u540d\u8ba4\u8bc1\u540e\u5373\u53ef\u4e0b\u8f7d\u5bf9\u5e94\u5e73\u53f0\u7684SDk\uff0c\u6211\u4eec\u9700\u8981\u4e0b\u8f7dwindows\u4ee5\u53calinux\u5e73\u53f0\u3002 \u6dfb\u52a0SDK\uff08Linux\u4e0eWindows\u5e73\u53f0\uff09\uff1a \u4e0b\u8f7dSDK\uff0c\u6253\u5f00\u89e3\u538b\u5305\uff0c\u53ef\u4ee5\u770b\u5230\u6709\u63d0\u4f9b\u76f8\u5e94\u7684jar\u5305\u4ee5\u53ca\u793a\u4f8b\u4ee3\u7801\uff1a \u9700\u8981\u7279\u522b\u8bf4\u660e\u7684\u662f\uff1a\u6bcf\u4e2a\u8d26\u53f7\u7684SDK\u5305\u4e0d\u901a\u7528\uff0c\u6240\u4ee5\u81ea\u5df1\u8981\u4e0b\u8f7d\u81ea\u5df1\u7684SDK\u5305\u3002 1.2.2\u3001\u5b89\u88c5jar\u5230\u672c\u5730\u4ed3\u5e93 \u00b6 \u8fdb\u5165\u5230libs\u76ee\u5f55\uff0c\u9700\u8981\u5c06arcsoft-sdk-face-3.0.0.0.jar\u5b89\u88c5\u5230\u672c\u5730\u4ed3\u5e93\uff1a mvn install:install-file -DgroupId = com.arcsoft.face -DartifactId = arcsoft-sdk-face -Dversion = 3 .0.0.0 -Dpackaging = jar -Dfile = arcsoft-sdk-face-3.0.0.0.jar \u5b89\u88c5\u6210\u529f\u540e\uff0c\u5373\u53ef\u901a\u8fc7maven\u5750\u6807\u5f15\u7528\u4e86\uff1a <dependency> <groupId> com.arcsoft.face </groupId> <artifactId> arcsoft-sdk-face </artifactId> <version> 3.0.0.0 </version> <!--<scope>system</scope>--> <!--\u5982\u679c\u6ca1\u6709\u5b89\u88c5\u5230\u672c\u5730\u4ed3\u5e93\uff0c\u53ef\u4ee5\u5c06jar\u5305\u62f7\u8d1d\u5230\u5de5\u7a0b\u7684lib\u4e0b\u9762\u4e0b\uff0c\u76f4\u63a5\u5f15\u7528--> <!--<systemPath>${project.basedir}/lib/arcsoft-sdk-face-3.0.0.0.jar</systemPath>--> </dependency> 1.2.3\u3001\u5f00\u59cb\u4f7f\u7528 \u00b6 \u8bf4\u660e\uff1a\u8679\u8f6f\u7684SDK\u662f\u514d\u8d39\u4f7f\u7528\u7684\uff0c\u4f46\u662f\u9996\u6b21\u4f7f\u7528\u65f6\u9700\u8981\u8054\u7f51\u6fc0\u6d3b\uff0c\u6fc0\u6d3b\u540e\u53ef\u79bb\u7ebf\u4f7f\u7528\u3002\u4f7f\u7528\u5468\u671f\u4e3a1\u5e74\uff0c1\u5e74\u540e\u9700\u8981\u8054\u7f51\u518d\u6b21\u6fc0\u6d3b\u3002 \u4e2a\u4eba\u514d\u8d39\u6fc0\u6d3bSDK\u603b\u6570\u91cf\u4e3a100\u3002 \u914d\u7f6e\uff1aapplication.properties #\u8679\u8f6f\u76f8\u5173\u914d\u7f6e(\u5728\u8679\u8f6f\u5e94\u7528\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u53c2\u6570) arcsoft.appid = ****************** arcsoft.sdkKey = ***************** arcsoft.libPath = F:\\\\code\\\\WIN64 FaceEngineService\uff1a package com.tanhua.sso.service ; import com.arcsoft.face.EngineConfiguration ; import com.arcsoft.face.FaceEngine ; import com.arcsoft.face.FaceInfo ; import com.arcsoft.face.FunctionConfiguration ; import com.arcsoft.face.enums.DetectMode ; import com.arcsoft.face.enums.DetectOrient ; import com.arcsoft.face.enums.ErrorInfo ; import com.arcsoft.face.enums.ImageFormat ; import com.arcsoft.face.toolkit.ImageFactory ; import com.arcsoft.face.toolkit.ImageInfo ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; import org.springframework.beans.factory.annotation.Value ; import org.springframework.stereotype.Service ; import javax.annotation.PostConstruct ; import java.io.File ; import java.util.ArrayList ; import java.util.List ; @Service public class FaceEngineService { private static final Logger LOGGER = LoggerFactory . getLogger ( FaceEngineService . class ); @Value ( \"${arcsoft.appid}\" ) private String appid ; @Value ( \"${arcsoft.sdkKey}\" ) private String sdkKey ; @Value ( \"${arcsoft.libPath}\" ) private String libPath ; private FaceEngine faceEngine ; @PostConstruct public void init () { // \u6fc0\u6d3b\u5e76\u4e14\u521d\u59cb\u5316\u5f15\u64ce FaceEngine faceEngine = new FaceEngine ( libPath ); int activeCode = faceEngine . activeOnline ( appid , sdkKey ); if ( activeCode != ErrorInfo . MOK . getValue () && activeCode != ErrorInfo . MERR_ASF_ALREADY_ACTIVATED . getValue ()) { LOGGER . error ( \"\u5f15\u64ce\u6fc0\u6d3b\u5931\u8d25\" ); throw new RuntimeException ( \"\u5f15\u64ce\u6fc0\u6d3b\u5931\u8d25\" ); } //\u5f15\u64ce\u914d\u7f6e EngineConfiguration engineConfiguration = new EngineConfiguration (); //IMAGE\u68c0\u6d4b\u6a21\u5f0f\uff0c\u7528\u4e8e\u5904\u7406\u5355\u5f20\u7684\u56fe\u50cf\u6570\u636e engineConfiguration . setDetectMode ( DetectMode . ASF_DETECT_MODE_IMAGE ); //\u4eba\u8138\u68c0\u6d4b\u89d2\u5ea6\uff0c\u5168\u89d2\u5ea6 engineConfiguration . setDetectFaceOrientPriority ( DetectOrient . ASF_OP_ALL_OUT ); //\u529f\u80fd\u914d\u7f6e FunctionConfiguration functionConfiguration = new FunctionConfiguration (); functionConfiguration . setSupportAge ( true ); functionConfiguration . setSupportFace3dAngle ( true ); functionConfiguration . setSupportFaceDetect ( true ); functionConfiguration . setSupportFaceRecognition ( true ); functionConfiguration . setSupportGender ( true ); functionConfiguration . setSupportLiveness ( true ); functionConfiguration . setSupportIRLiveness ( true ); engineConfiguration . setFunctionConfiguration ( functionConfiguration ); //\u521d\u59cb\u5316\u5f15\u64ce int initCode = faceEngine . init ( engineConfiguration ); if ( initCode != ErrorInfo . MOK . getValue ()) { LOGGER . error ( \"\u521d\u59cb\u5316\u5f15\u64ce\u51fa\u9519!\" ); throw new RuntimeException ( \"\u521d\u59cb\u5316\u5f15\u64ce\u51fa\u9519!\" ); } this . faceEngine = faceEngine ; } /** * \u68c0\u6d4b\u56fe\u7247\u662f\u5426\u4e3a\u4eba\u50cf * * @param imageInfo \u56fe\u50cf\u5bf9\u8c61 * @return true:\u4eba\u50cf\uff0cfalse:\u975e\u4eba\u50cf */ public boolean checkIsPortrait ( ImageInfo imageInfo ) { // \u5b9a\u4e49\u4eba\u8138\u5217\u8868 List < FaceInfo > faceInfoList = new ArrayList < FaceInfo > (); faceEngine . detectFaces ( imageInfo . getImageData (), imageInfo . getWidth (), imageInfo . getHeight (), ImageFormat . CP_PAF_BGR24 , faceInfoList ); return ! faceInfoList . isEmpty (); } public boolean checkIsPortrait ( byte [] imageData ) { return this . checkIsPortrait ( ImageFactory . getRGBData ( imageData )); } public boolean checkIsPortrait ( File file ) { return this . checkIsPortrait ( ImageFactory . getRGBData ( file )); } } #\u95ee\u9898\uff1a Caused by: java.lang.UnsatisfiedLinkError: D: \\g ongju \\r enlian \\h aha \\l ibs \\W IN64 \\l ibarcsoft_face.dll: Can ' t find dependent libraries \u89e3\u51b3\uff1a \u5b89\u88c5\u8d44\u6599\u4e2d\u7684\uff1avcredist_x64.exe\uff0c\u5373\u53ef\u89e3\u51b3\u3002 1.2.4\u3001\u6d4b\u8bd5 \u00b6 package com.tanhua.sso.service ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner ; import java.io.File ; @SpringBootTest @RunWith ( SpringJUnit4ClassRunner . class ) public class TestFaceEngineService { @Autowired private FaceEngineService faceEngineService ; @Test public void testCheckIsPortrait (){ File file = new File ( \"F:\\\\1.jpg\" ); boolean checkIsPortrait = this . faceEngineService . checkIsPortrait ( file ); System . out . println ( checkIsPortrait ); // true|false } } 1.3\u3001\u5b9e\u73b0\u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f \u00b6 \u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f\u7684\u529f\u80fd\u5b9e\u73b0\uff0c\u5206\u4e3a2\u4e2a\u63a5\u53e3\u5b8c\u6210\uff0c\u5206\u522b\u662f\uff1a\u5b8c\u5584\u4e2a\u4eba\u8d44\u6599\u4fe1\u606f\u3001\u5934\u50cf\u4e0a\u4f20\u3002 mock\u63a5\u53e3\uff1a \u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f https://mock.boxuegu.com/project/164/interface/api/28553 \u4e0a\u4f20\u5934\u50cf https://mock.boxuegu.com/project/164/interface/api/39725 1.3.1\u3001UserInfoMapper \u00b6 package com.tanhua.sso.mapper ; import com.baomidou.mybatisplus.core.mapper.BaseMapper ; import com.tanhua.sso.pojo.UserInfo ; public interface UserInfoMapper extends BaseMapper < UserInfo > { } 1.3.2\u3001UserInfoService \u00b6 package com.tanhua.sso.service ; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper ; import com.tanhua.sso.enums.SexEnum ; import com.tanhua.sso.mapper.UserInfoMapper ; import com.tanhua.sso.pojo.User ; import com.tanhua.sso.pojo.UserInfo ; import com.tanhua.sso.vo.PicUploadResult ; import org.apache.commons.lang3.StringUtils ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import org.springframework.web.multipart.MultipartFile ; import java.io.IOException ; import java.util.Map ; @Service public class UserInfoService { @Autowired private UserService userService ; @Autowired private UserInfoMapper userInfoMapper ; @Autowired private FaceEngineService faceEngineService ; @Autowired private PicUploadService picUploadService ; public Boolean saveUserInfo ( Map < String , String > param , String token ) { //\u6821\u9a8ctoken User user = this . userService . queryUserByToken ( token ); if ( null == user ) { return false ; } UserInfo userInfo = new UserInfo (); userInfo . setUserId ( user . getId ()); userInfo . setSex ( StringUtils . equalsIgnoreCase ( param . get ( \"gender\" ), \"man\" ) ? SexEnum . MAN : SexEnum . WOMAN ); userInfo . setNickName ( param . get ( \"nickname\" )); userInfo . setBirthday ( param . get ( \"birthday\" )); userInfo . setCity ( param . get ( \"city\" )); return this . userInfoMapper . insert ( userInfo ) == 1 ; } public Boolean saveUserLogo ( MultipartFile file , String token ) { //\u6821\u9a8ctoken User user = this . userService . queryUserByToken ( token ); if ( null == user ) { return false ; } try { //\u6821\u9a8c\u56fe\u7247\u662f\u5426\u662f\u4eba\u50cf\uff0c\u5982\u679c\u4e0d\u662f\u4eba\u50cf\u5c31\u8fd4\u56defalse boolean b = this . faceEngineService . checkIsPortrait ( file . getBytes ()); if ( ! b ) { return false ; } } catch ( IOException e ) { e . printStackTrace (); } //\u56fe\u7247\u4e0a\u4f20\u5230\u963f\u91cc\u4e91OSS PicUploadResult result = this . picUploadService . upload ( file ); if ( StringUtils . isEmpty ( result . getName ())) { //\u4e0a\u4f20\u5931\u8d25 return false ; } //\u628a\u5934\u50cf\u4fdd\u5b58\u5230\u7528\u6237\u4fe1\u606f\u8868\u4e2d UserInfo userInfo = new UserInfo (); userInfo . setLogo ( result . getName ()); QueryWrapper < UserInfo > queryWrapper = new QueryWrapper <> (); queryWrapper . eq ( \"user_id\" , user . getId ()); return this . userInfoMapper . update ( userInfo , queryWrapper ) == 1 ; } } 1.3.3\u3001UserInfoController \u00b6 package com.tanhua.sso.controller ; import com.tanhua.sso.service.UserInfoService ; import com.tanhua.sso.service.UserService ; import com.tanhua.sso.vo.ErrorResult ; import org.apache.commons.lang3.StringUtils ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.* ; import org.springframework.web.multipart.MultipartFile ; import java.util.HashMap ; import java.util.Map ; @RestController @RequestMapping ( \"user\" ) public class UserInfoController { @Autowired private UserInfoService userInfoService ; /** * \u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f-\u57fa\u672c\u4fe1\u606f * * @param param * @return */ @PostMapping ( \"loginReginfo\" ) public ResponseEntity < Object > saveUserInfo ( @RequestBody Map < String , String > param , @RequestHeader ( \"Authorization\" ) String token ) { try { Boolean bool = this . userInfoService . saveUserInfo ( param , token ); if ( bool ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } ErrorResult errorResult = ErrorResult . builder (). errCode ( \"000001\" ). errMessage ( \"\u4fdd\u5b58\u7528\u6237\u4fe1\u606f\u5931\u8d25\uff01\" ). build (); return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). body ( errorResult ); } /** * \u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f-\u7528\u6237\u5934\u50cf * * @return */ @PostMapping ( \"loginReginfo/head\" ) public ResponseEntity < Object > saveUserLogo ( @RequestParam ( \"headPhoto\" ) MultipartFile file , @RequestHeader ( \"Authorization\" ) String token ) { try { Boolean bool = this . userInfoService . saveUserLogo ( file , token ); if ( bool ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } ErrorResult errorResult = ErrorResult . builder (). errCode ( \"000001\" ). errMessage ( \"\u4fdd\u5b58\u7528\u6237logo\u5931\u8d25\uff01\" ). build (); return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). body ( errorResult ); } } 1.4.4\u3001\u6d4b\u8bd5 \u00b6 \u56fe\u7247\u4e0a\u4f20\u8d85\u8fc71MB\u51fa\u9519\u7684\u89e3\u51b3\u65b9\u6848\uff1a #\u5728application.properties\u6587\u4ef6\u4e2d\uff0c\u586b\u5165\u4e0b\u9762\u7684\u914d\u7f6e #\u8bbe\u7f6e\u6700\u5927\u7684\u6587\u4ef6\u4e0a\u4f20\u5927\u5c0f spring.servlet.multipart.max-request-size = 30MB spring.servlet.multipart.max-file-size = 30MB 2\u3001\u6821\u9a8ctoken \u00b6 \u5728\u6574\u4e2a\u7cfb\u7edf\u67b6\u6784\u4e2d\uff0c\u53ea\u6709SSO\u4fdd\u5b58\u4e86JWT\u4e2d\u7684\u79d8\u94a5\uff0c\u6240\u4ee5\u53ea\u80fd\u901a\u8fc7SSO\u7cfb\u7edf\u63d0\u4f9b\u7684\u63a5\u53e3\u670d\u52a1\u8fdb\u884c\u5bf9token\u7684\u6821\u9a8c\uff0c\u6240\u4ee5\u5728SSO\u7cfb\u7edf\u4e2d\uff0c\u9700\u8981\u5bf9\u5916\u5f00\u653e\u63a5\u53e3\uff0c\u901a\u8fc7token\u8fdb\u884c\u67e5\u8be2\u7528\u6237\u4fe1\u606f\uff0c\u5982\u679c\u8fd4\u56denull\u8bf4\u660e\u7528\u6237\u72b6\u6001\u5df2\u8fc7\u671f\u6216\u8005\u662f\u975e\u6cd5\u7684token\uff0c\u5426\u5219\u8fd4\u56deUser\u5bf9\u8c61\u6570\u636e\u3002 2.1\u3001UserController \u00b6 /** * \u6821\u9a8ctoken\uff0c\u6839\u636etoken\u67e5\u8be2\u7528\u6237\u6570\u636e * * @param token * @return */ @GetMapping ( \"{token}\" ) public User queryUserByToken ( @PathVariable ( \"token\" ) String token ) { return this . userService . queryUserByToken ( token ); } 2.2\u3001UserService \u00b6 public User queryUserByToken ( String token ) { try { // \u901a\u8fc7token\u89e3\u6790\u6570\u636e Map < String , Object > body = Jwts . parser () . setSigningKey ( secret ) . parseClaimsJws ( token ) . getBody (); User user = new User (); user . setId ( Long . valueOf ( body . get ( \"id\" ). toString ())); //\u9700\u8981\u8fd4\u56deuser\u5bf9\u8c61\u4e2d\u7684mobile\uff0c\u9700\u8981\u67e5\u8be2\u6570\u636e\u5e93\u83b7\u53d6\u5230mobile\u6570\u636e //\u5982\u679c\u6bcf\u6b21\u90fd\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u5fc5\u7136\u4f1a\u5bfc\u81f4\u6027\u80fd\u95ee\u9898\uff0c\u9700\u8981\u5bf9\u7528\u6237\u7684\u624b\u673a\u53f7\u8fdb\u884c\u7f13\u5b58\u64cd\u4f5c //\u6570\u636e\u7f13\u5b58\u65f6\uff0c\u9700\u8981\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0c\u8fc7\u671f\u65f6\u95f4\u8981\u4e0etoken\u7684\u65f6\u95f4\u4e00\u81f4 //\u5982\u679c\u7528\u6237\u4fee\u6539\u4e86\u624b\u673a\u53f7\uff0c\u9700\u8981\u540c\u6b65\u4fee\u6539redis\u4e2d\u7684\u6570\u636e String redisKey = \"TANHUA_USER_MOBILE_\" + user . getId (); if ( this . redisTemplate . hasKey ( redisKey )){ String mobile = this . redisTemplate . opsForValue (). get ( redisKey ); user . setMobile ( mobile ); } else { //\u67e5\u8be2\u6570\u636e\u5e93 User u = this . userMapper . selectById ( user . getId ()); user . setMobile ( u . getMobile ()); //\u5c06\u624b\u673a\u53f7\u5199\u5165\u5230redis\u4e2d //\u5728jwt\u4e2d\u7684\u8fc7\u671f\u65f6\u95f4\u7684\u5355\u4f4d\u4e3a\uff1a\u79d2 long timeout = Long . valueOf ( body . get ( \"exp\" ). toString ()) * 1000 - System . currentTimeMillis (); this . redisTemplate . opsForValue (). set ( redisKey , u . getMobile (), timeout , TimeUnit . MILLISECONDS ); } return user ; } catch ( ExpiredJwtException e ) { log . info ( \"token\u5df2\u7ecf\u8fc7\u671f\uff01 token = \" + token ); } catch ( Exception e ) { log . error ( \"token\u4e0d\u5408\u6cd5\uff01 token = \" + token , e ); } return null ; } 2.3\u3001\u6d4b\u8bd5 \u00b6 \u6570\u636e\u5df2\u7ecf\u5b58\u50a8\u5230redis\u4e2d\uff1a 3\u3001MongoDB\u5feb\u901f\u5165\u95e8 \u00b6 3.1\u3001MongoDB\u7b80\u4ecb \u00b6 MongoDB\u662f\u4e00\u4e2a\u57fa\u4e8e\u5206\u5e03\u5f0f\u6587\u4ef6\u5b58\u50a8\u7684\u6570\u636e\u5e93\u3002\u7531C++\u8bed\u8a00\u7f16\u5199\u3002\u65e8\u5728\u4e3aWEB\u5e94\u7528\u63d0\u4f9b\u53ef\u6269\u5c55\u7684\u9ad8\u6027\u80fd\u6570\u636e\u5b58\u50a8\u89e3\u51b3\u65b9\u6848\u3002 MongoDB\u662f\u4e00\u4e2a\u4ecb\u4e8e\u5173\u7cfb\u6570\u636e\u5e93\u548c\u975e\u5173\u7cfb\u6570\u636e\u5e93\u4e4b\u95f4\u7684\u4ea7\u54c1\uff0c\u662f\u975e\u5173\u7cfb\u6570\u636e\u5e93\u5f53\u4e2d\u529f\u80fd\u6700\u4e30\u5bcc\uff0c\u6700\u50cf\u5173\u7cfb\u6570\u636e\u5e93\u7684\uff0c\u5b83\u652f\u6301\u7684\u6570\u636e\u7ed3\u6784\u975e\u5e38\u677e\u6563\uff0c\u662f\u7c7b\u4f3cjson\u7684bson\u683c\u5f0f\uff0c\u56e0\u6b64\u53ef\u4ee5\u5b58\u50a8\u6bd4\u8f83\u590d\u6742\u7684\u6570\u636e\u7c7b\u578b\u3002 MongoDB\u6700\u5927\u7684\u7279\u70b9\u662f\u5b83\u652f\u6301\u7684\u67e5\u8be2\u8bed\u8a00\u975e\u5e38\u5f3a\u5927\uff0c\u5176\u8bed\u6cd5\u6709\u70b9\u7c7b\u4f3c\u4e8e\u9762\u5411\u5bf9\u8c61\u7684\u67e5\u8be2\u8bed\u8a00\uff0c\u51e0\u4e4e\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u4f3c\u5173\u7cfb\u6570\u636e\u5e93\u5355\u8868\u67e5\u8be2\u7684\u7edd\u5927\u90e8\u5206\u529f\u80fd\uff0c\u800c\u4e14\u8fd8\u652f\u6301\u5bf9\u6570\u636e\u5efa\u7acb\u7d22\u5f15\u3002 \u5b98\u7f51\uff1ahttps://www.mongodb.com 3.2\u3001\u901a\u8fc7docker\u5b89\u88c5MongoDB \u00b6 #\u62c9\u53d6\u955c\u50cf docker pull mongo:4.0.3 #\u521b\u5efa\u5bb9\u5668 docker create --name mongodb-server -p 27018 :27017 -v mongodb-data:/data/db mongo:4.0.3 --auth #\u542f\u52a8\u5bb9\u5668 docker start mongodb-server #\u8fdb\u5165\u5bb9\u5668 docker exec -it mongodb-server /bin/bash #\u8fdb\u5165admin\u6570\u636e\u5e93 mongo use admin #\u6dfb\u52a0\u7ba1\u7406\u5458\uff0c\u5176\u62e5\u6709\u7ba1\u7406\u7528\u6237\u548c\u89d2\u8272\u7684\u6743\u9650 db.createUser ({ user: 'root' , pwd: 'root' , roles: [ { role: \"root\" , db: \"admin\" } ] }) #\u6d4b\u8bd5\uff0c\u53d1\u73b0\u662f\u6ca1\u6709\u6743\u9650\u64cd\u4f5c\u7684 > show dbs 2020 -10-20T09:09:15.543+0000 E QUERY [ js ] Error: listDatabases failed: { \"ok\" : 0 , \"errmsg\" : \"command listDatabases requires authentication\" , \"code\" : 13 , \"codeName\" : \"Unauthorized\" } : #\u8fdb\u884c\u8ba4\u8bc1 mongo -u \"root\" -p \"root\" --authenticationDatabase \"admin\" #\u901a\u8fc7admin\u6dfb\u52a0\u666e\u901a\u7528\u6237 use admin db.createUser ({ user: 'tanhua' , pwd: 'l3SCjl0HvmSkTtiSbN0Swv40spYnHhDV' , roles: [ { role: \"readWrite\" , db: \"tanhua\" } ] }) ; #\u901a\u8fc7tanhua\u7528\u6237\u767b\u5f55\u8fdb\u884c\u6d4b\u8bd5 mongo -u \"tanhua\" -p \"l3SCjl0HvmSkTtiSbN0Swv40spYnHhDV\" --authenticationDatabase \"admin\" #\u6d4b\u8bd5 root@5d848955ff7e:/# mongo -u \"tanhua\" -p \"tanhua123\" --authenticationDatabase \"admin\" MongoDB shell version v4.0.3 connecting to: mongodb://127.0.0.1:27017 Implicit session: session { \"id\" : UUID ( \"6c368269-30f0-4b29-a224-05a38b5847e2\" ) } MongoDB server version: 4 .0.3 > use tanhua switched to db tanhua > db.user.insert ({ id:1,username: 'zhangsan' ,age:20 }) WriteResult ({ \"nInserted\" : 1 }) > db.user.find () { \"_id\" : ObjectId ( \"5f8eb2726e0de0aa9517afd3\" ) , \"id\" : 1 , \"username\" : \"zhangsan\" , \"age\" : 20 } 3.3\u3001MongoDB\u57fa\u672c\u64cd\u4f5c \u00b6 3.3.1\u3001\u57fa\u672c\u6982\u5ff5 \u00b6 \u4e3a\u4e86\u66f4\u597d\u7684\u7406\u89e3\uff0c\u4e0b\u9762\u4e0eSQL\u4e2d\u7684\u6982\u5ff5\u8fdb\u884c\u5bf9\u6bd4\uff1a SQL\u672f\u8bed/\u6982\u5ff5 MongoDB\u672f\u8bed/\u6982\u5ff5 \u89e3\u91ca/\u8bf4\u660e database database \u6570\u636e\u5e93 table collection \u6570\u636e\u5e93\u8868/\u96c6\u5408 row document \u6570\u636e\u8bb0\u5f55\u884c/\u6587\u6863 column field \u6570\u636e\u5b57\u6bb5/\u57df index index \u7d22\u5f15 table joins \u8868\u8fde\u63a5,MongoDB\u4e0d\u652f\u6301 primary key primary key \u4e3b\u952e,MongoDB\u81ea\u52a8\u5c06_id\u5b57\u6bb5\u8bbe\u7f6e\u4e3a\u4e3b\u952e 3.3.2\u3001\u6570\u636e\u5e93\u4ee5\u53ca\u8868\u7684\u64cd\u4f5c \u00b6 #\u67e5\u770b\u6240\u6709\u7684\u6570\u636e\u5e93 > show dbs admin 0 .000GB config 0 .000GB local 0 .000GB #\u901a\u8fc7use\u5173\u952e\u5b57\u5207\u6362\u6570\u636e\u5e93 > use admin switched to db admin #\u521b\u5efa\u6570\u636e\u5e93 #\u8bf4\u660e\uff1a\u5728MongoDB\u4e2d\uff0c\u6570\u636e\u5e93\u662f\u81ea\u52a8\u521b\u5efa\u7684\uff0c\u901a\u8fc7use\u5207\u6362\u5230\u65b0\u6570\u636e\u5e93\u4e2d\uff0c\u8fdb\u884c\u63d2\u5165\u6570\u636e\u5373\u53ef\u81ea\u52a8\u521b\u5efa\u6570\u636e\u5e93 > use testdb switched to db testdb > show dbs #\u5e76\u6ca1\u6709\u521b\u5efa\u6570\u636e\u5e93 admin 0 .000GB config 0 .000GB local 0 .000GB > db.user.insert ({ id:1,name: 'zhangsan' }) #\u63d2\u5165\u6570\u636e WriteResult ({ \"nInserted\" : 1 }) > show dbs admin 0 .000GB config 0 .000GB local 0 .000GB testdb 0 .000GB #\u6570\u636e\u5e93\u81ea\u52a8\u521b\u5efa #\u67e5\u770b\u8868 > show tables user > show collections user > #\u5220\u9664\u96c6\u5408\uff08\u8868\uff09 > db.user.drop () true #\u5982\u679c\u6210\u529f\u5220\u9664\u9009\u5b9a\u96c6\u5408\uff0c\u5219 drop() \u65b9\u6cd5\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false\u3002 #\u5220\u9664\u6570\u636e\u5e93 > use testdb #\u5148\u5207\u6362\u5230\u8981\u5220\u9664\u7684\u6570\u636e\u5e93\u4e2d switched to db testdb > db.dropDatabase () #\u5220\u9664\u6570\u636e\u5e93 { \"dropped\" : \"testdb\" , \"ok\" : 1 } > show dbs admin 0 .000GB config 0 .000GB local 0 .000GB 3.3.3\u3001\u65b0\u589e\u6570\u636e \u00b6 \u5728MongoDB\u4e2d\uff0c\u5b58\u50a8\u7684\u6587\u6863\u7ed3\u6784\u662f\u4e00\u79cd\u7c7b\u4f3c\u4e8ejson\u7684\u7ed3\u6784\uff0c\u79f0\u4e4b\u4e3abson\uff08\u5168\u79f0\u4e3a\uff1aBinary JSON\uff09\u3002 #\u63d2\u5165\u6570\u636e #\u8bed\u6cd5\uff1adb.COLLECTION_NAME.insert(document) > db.user.insert ({ id:1,username: 'zhangsan' ,age:20 }) WriteResult ({ \"nInserted\" : 1 }) > db.user.save ({ id:2,username: 'lisi' ,age:25 }) WriteResult ({ \"nInserted\" : 1 }) > db.user.find () #\u67e5\u8be2\u6570\u636e { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"id\" : 1 , \"username\" : \"zhangsan\" , \"age\" : 20 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 } 3.3.4\u3001\u66f4\u65b0\u6570\u636e \u00b6 update() \u65b9\u6cd5\u7528\u4e8e\u66f4\u65b0\u5df2\u5b58\u5728\u7684\u6587\u6863\u3002\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a db.collection.update ( <query>, <update>, [ upsert: <boolean>, multi: <boolean>, writeConcern: <document> ] ) \u53c2\u6570\u8bf4\u660e\uff1a query : update\u7684\u67e5\u8be2\u6761\u4ef6\uff0c\u7c7b\u4f3csql update\u67e5\u8be2\u5185where\u540e\u9762\u7684\u3002 update : update\u7684\u5bf9\u8c61\u548c\u4e00\u4e9b\u66f4\u65b0\u7684\u64cd\u4f5c\u7b26\uff08\u5982 , inc...\uff09\u7b49\uff0c\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3asql update\u67e5\u8be2\u5185set\u540e\u9762\u7684 upsert : \u53ef\u9009\uff0c\u8fd9\u4e2a\u53c2\u6570\u7684\u610f\u601d\u662f\uff0c\u5982\u679c\u4e0d\u5b58\u5728update\u7684\u8bb0\u5f55\uff0c\u662f\u5426\u63d2\u5165objNew,true\u4e3a\u63d2\u5165\uff0c\u9ed8\u8ba4\u662ffalse\uff0c\u4e0d\u63d2\u5165\u3002 multi : \u53ef\u9009\uff0cmongodb \u9ed8\u8ba4\u662ffalse,\u53ea\u66f4\u65b0\u627e\u5230\u7684\u7b2c\u4e00\u6761\u8bb0\u5f55\uff0c\u5982\u679c\u8fd9\u4e2a\u53c2\u6570\u4e3atrue,\u5c31\u628a\u6309\u6761\u4ef6\u67e5\u51fa\u6765\u591a\u6761\u8bb0\u5f55\u5168\u90e8\u66f4\u65b0\u3002 writeConcern :\u53ef\u9009\uff0c\u629b\u51fa\u5f02\u5e38\u7684\u7ea7\u522b\u3002 > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"id\" : 1 , \"username\" : \"zhangsan\" , \"age\" : 20 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 } > db.user.update ({ id:1 } , { $set : { age:22 }}) #\u66f4\u65b0\u6570\u636e WriteResult ({ \"nMatched\" : 1 , \"nUpserted\" : 0 , \"nModified\" : 1 }) > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"id\" : 1 , \"username\" : \"zhangsan\" , \"age\" : 22 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 } #\u6ce8\u610f\uff1a\u5982\u679c\u8fd9\u6837\u5199\uff0c\u4f1a\u5220\u9664\u6389\u5176\u4ed6\u7684\u5b57\u6bb5 > db.user.update ({ id:1 } , { age:25 }) WriteResult ({ \"nMatched\" : 1 , \"nUpserted\" : 0 , \"nModified\" : 1 }) > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"age\" : 25 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 } #\u66f4\u65b0\u4e0d\u5b58\u5728\u7684\u5b57\u6bb5\uff0c\u4f1a\u65b0\u589e\u5b57\u6bb5 > db.user.update ({ id:2 } , { $set : { sex:1 }}) #\u66f4\u65b0\u6570\u636e > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"age\" : 25 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 , \"sex\" : 1 } #\u66f4\u65b0\u4e0d\u5b58\u5728\u7684\u6570\u636e\uff0c\u9ed8\u8ba4\u4e0d\u4f1a\u65b0\u589e\u6570\u636e > db.user.update ({ id:3 } , { $set : { sex:1 }}) WriteResult ({ \"nMatched\" : 0 , \"nUpserted\" : 0 , \"nModified\" : 0 }) > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"age\" : 25 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 , \"sex\" : 1 } #\u5982\u679c\u8bbe\u7f6e\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3atrue\uff0c\u5c31\u662f\u65b0\u589e\u6570\u636e > db.user.update ({ id:3 } , { $set : { sex:1 }} ,true ) WriteResult ({ \"nMatched\" : 0 , \"nUpserted\" : 1 , \"nModified\" : 0 , \"_id\" : ObjectId ( \"5c08cb281418d073246bc642\" ) }) > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"age\" : 25 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 , \"sex\" : 1 } { \"_id\" : ObjectId ( \"5c08cb281418d073246bc642\" ) , \"id\" : 3 , \"sex\" : 1 } 3.3.5\u3001\u5220\u9664\u6570\u636e \u00b6 \u901a\u8fc7remove()\u65b9\u6cd5\u8fdb\u884c\u5220\u9664\u6570\u636e\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a db.collection.remove ( <query>, { justOne: <boolean>, writeConcern: <document> } ) \u53c2\u6570\u8bf4\u660e\uff1a query :\uff08\u53ef\u9009\uff09\u5220\u9664\u7684\u6587\u6863\u7684\u6761\u4ef6\u3002 justOne : \uff08\u53ef\u9009\uff09\u5982\u679c\u8bbe\u4e3a true \u6216 1\uff0c\u5219\u53ea\u5220\u9664\u4e00\u4e2a\u6587\u6863\uff0c\u5982\u679c\u4e0d\u8bbe\u7f6e\u8be5\u53c2\u6570\uff0c\u6216\u4f7f\u7528\u9ed8\u8ba4\u503c false\uff0c\u5219\u5220\u9664\u6240\u6709\u5339\u914d\u6761\u4ef6\u7684\u6587\u6863\u3002 writeConcern :\uff08\u53ef\u9009\uff09\u629b\u51fa\u5f02\u5e38\u7684\u7ea7\u522b\u3002 \u5b9e\u4f8b\uff1a > db.user.remove ({ age:25 }) WriteResult ({ \"nRemoved\" : 2 }) #\u5220\u9664\u4e862\u6761\u6570\u636e #\u63d2\u51654\u6761\u6d4b\u8bd5\u6570\u636e db.user.insert ({ id:1,username: 'zhangsan' ,age:20 }) db.user.insert ({ id:2,username: 'lisi' ,age:21 }) db.user.insert ({ id:3,username: 'wangwu' ,age:22 }) db.user.insert ({ id:4,username: 'zhaoliu' ,age:22 }) > db.user.remove ({ age:22 } ,true ) WriteResult ({ \"nRemoved\" : 1 }) #\u5220\u9664\u4e861\u6761\u6570\u636e #\u5220\u9664\u6240\u6709\u6570\u636e > db.user.remove ({}) #\u8bf4\u660e\uff1a\u4e3a\u4e86\u7b80\u5316\u64cd\u4f5c\uff0c\u5b98\u65b9\u63a8\u8350\u4f7f\u7528deleteOne()\u4e0edeleteMany()\u8fdb\u884c\u5220\u9664\u6570\u636e\u64cd\u4f5c\u3002 db.user.deleteOne ({ id:1 }) db.user.deleteMany ({}) #\u5220\u9664\u6240\u6709\u6570\u636e 3.3.6\u3001\u67e5\u8be2\u6570\u636e \u00b6 MongoDB \u67e5\u8be2\u6570\u636e\u7684\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a db . user . find ( [ query ] , [ fields ] ) query \uff1a\u53ef\u9009\uff0c\u4f7f\u7528\u67e5\u8be2\u64cd\u4f5c\u7b26\u6307\u5b9a\u67e5\u8be2\u6761\u4ef6 fields \uff1a\u53ef\u9009\uff0c\u4f7f\u7528\u6295\u5f71\u64cd\u4f5c\u7b26\u6307\u5b9a\u8fd4\u56de\u7684\u952e\u3002\u67e5\u8be2\u65f6\u8fd4\u56de\u6587\u6863\u4e2d\u6240\u6709\u952e\u503c\uff0c \u53ea\u9700\u7701\u7565\u8be5\u53c2\u6570\u5373\u53ef\uff08\u9ed8\u8ba4\u7701\u7565\uff09\u3002 \u5982\u679c\u4f60\u9700\u8981\u4ee5\u6613\u8bfb\u7684\u65b9\u5f0f\u6765\u8bfb\u53d6\u6570\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528 pretty() \u65b9\u6cd5\uff0c\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a >db.col.find().pretty() pretty() \u65b9\u6cd5\u4ee5\u683c\u5f0f\u5316\u7684\u65b9\u5f0f\u6765\u663e\u793a\u6240\u6709\u6587\u6863\u3002 \u6761\u4ef6\u67e5\u8be2\uff1a \u64cd\u4f5c \u683c\u5f0f \u8303\u4f8b RDBMS\u4e2d\u7684\u7c7b\u4f3c\u8bed\u53e5 \u7b49\u4e8e {<key>:<value> } db.col.find({\"by\":\"\u9ed1\u9a6c\u7a0b\u5e8f\u5458\"}).pretty() where by = '\u9ed1\u9a6c\u7a0b\u5e8f\u5458' \u5c0f\u4e8e {<key>:{$lt:<value>}} db.col.find({\"likes\":{$lt:50}}).pretty() where likes < 50 \u5c0f\u4e8e\u6216\u7b49\u4e8e {<key>:{$lte:<value>}} db.col.find({\"likes\":{$lte:50}}).pretty() where likes <= 50 \u5927\u4e8e {<key>:{$gt:<value>}} db.col.find({\"likes\":{$gt:50}}).pretty() where likes > 50 \u5927\u4e8e\u6216\u7b49\u4e8e {<key>:{$gte:<value>}} db.col.find({\"likes\":{$gte:50}}).pretty() where likes >= 50 \u4e0d\u7b49\u4e8e {<key>:{$ne:<value>}} db.col.find({\"likes\":{$ne:50}}).pretty() where likes != 50 \u5b9e\u4f8b\uff1a #\u63d2\u5165\u6d4b\u8bd5\u6570\u636e db.user.insert ({ id:1,username: 'zhangsan' ,age:20 }) db.user.insert ({ id:2,username: 'lisi' ,age:21 }) db.user.insert ({ id:3,username: 'wangwu' ,age:22 }) db.user.insert ({ id:4,username: 'zhaoliu' ,age:22 }) db.user.find () #\u67e5\u8be2\u5168\u90e8\u6570\u636e db.user.find ({} , { id:1,username:1 }) #\u53ea\u67e5\u8be2id\u4e0eusername\u5b57\u6bb5 db.user.find () .count () #\u67e5\u8be2\u6570\u636e\u6761\u6570 db.user.find ({ id:1 }) #\u67e5\u8be2id\u4e3a1\u7684\u6570\u636e db.user.find ({ age: { $lte :21 }}) #\u67e5\u8be2\u5c0f\u4e8e\u7b49\u4e8e21\u7684\u6570\u636e db.user.find ({ age: { $lte :21 } , id: { $gte :2 }}) #and\u67e5\u8be2\uff0cage\u5c0f\u4e8e\u7b49\u4e8e21\u5e76\u4e14id\u5927\u4e8e\u7b49\u4e8e2 db.user.find ({ $or : [{ id:1 } , { id:2 }]}) #\u67e5\u8be2id=1 or id=2 #\u5206\u9875\u67e5\u8be2\uff1aSkip()\u8df3\u8fc7\u51e0\u6761\uff0climit()\u67e5\u8be2\u6761\u6570 db.user.find () .limit ( 2 ) .skip ( 1 ) #\u8df3\u8fc71\u6761\u6570\u636e\uff0c\u67e5\u8be22\u6761\u6570\u636e db.user.find () .sort ({ id:-1 }) #\u6309\u7167age\u5012\u5e8f\u6392\u5e8f\uff0c-1\u4e3a\u5012\u5e8f\uff0c1\u4e3a\u6b63\u5e8f 3.4\u3001\u7d22\u5f15 \u00b6 \u7d22\u5f15\u901a\u5e38\u80fd\u591f\u6781\u5927\u7684\u63d0\u9ad8\u67e5\u8be2\u7684\u6548\u7387\uff0c\u5982\u679c\u6ca1\u6709\u7d22\u5f15\uff0cMongoDB\u5728\u8bfb\u53d6\u6570\u636e\u65f6\u5fc5\u987b\u626b\u63cf\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u6587\u4ef6\u5e76\u9009\u53d6\u90a3\u4e9b\u7b26\u5408\u67e5\u8be2\u6761\u4ef6\u7684\u8bb0\u5f55\u3002 \u8fd9\u79cd\u626b\u63cf\u5168\u96c6\u5408\u7684\u67e5\u8be2\u6548\u7387\u662f\u975e\u5e38\u4f4e\u7684\uff0c\u7279\u522b\u5728\u5904\u7406\u5927\u91cf\u7684\u6570\u636e\u65f6\uff0c\u67e5\u8be2\u53ef\u4ee5\u8981\u82b1\u8d39\u51e0\u5341\u79d2\u751a\u81f3\u51e0\u5206\u949f\uff0c\u8fd9\u5bf9\u7f51\u7ad9\u7684\u6027\u80fd\u662f\u975e\u5e38\u81f4\u547d\u7684\u3002 \u7d22\u5f15\u662f\u7279\u6b8a\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7d22\u5f15\u5b58\u50a8\u5728\u4e00\u4e2a\u6613\u4e8e\u904d\u5386\u8bfb\u53d6\u7684\u6570\u636e\u96c6\u5408\u4e2d\uff0c\u7d22\u5f15\u662f\u5bf9\u6570\u636e\u5e93\u8868\u4e2d\u4e00\u5217\u6216\u591a\u5217\u7684\u503c\u8fdb\u884c\u6392\u5e8f\u7684\u4e00\u79cd\u7ed3\u6784 #\u67e5\u770b\u7d22\u5f15 > db.user.getIndexes () [ { \"v\" : 2 , \"key\" : { \"_id\" : 1 } , \"name\" : \"_id_\" , \"ns\" : \"testdb.user\" } ] #\u8bf4\u660e\uff1a1\u8868\u793a\u5347\u5e8f\u521b\u5efa\u7d22\u5f15\uff0c-1\u8868\u793a\u964d\u5e8f\u521b\u5efa\u7d22\u5f15\u3002 #\u521b\u5efa\u7d22\u5f15 > db.user.createIndex ({ 'age' :1 }) { \"createdCollectionAutomatically\" : false, \"numIndexesBefore\" : 1 , \"numIndexesAfter\" : 2 , \"ok\" : 1 } #\u5220\u9664\u7d22\u5f15 db.user.dropIndex ( \"age_1\" ) #\u6216\u8005\uff0c\u5220\u9664\u9664\u4e86_id\u4e4b\u5916\u7684\u7d22\u5f15 db.user.dropIndexes () #\u521b\u5efa\u8054\u5408\u7d22\u5f15 db.user.createIndex ({ 'age' :1, 'id' :-1 }) #\u67e5\u770b\u7d22\u5f15\u5927\u5c0f\uff0c\u5355\u4f4d\uff1a\u5b57\u8282 db.user.totalIndexSize () 3.5\u3001\u6267\u884c\u8ba1\u5212 \u00b6 MongoDB \u67e5\u8be2\u5206\u6790\u53ef\u4ee5\u786e\u4fdd\u6211\u4eec\u5efa\u8bae\u7684\u7d22\u5f15\u662f\u5426\u6709\u6548\uff0c\u662f\u67e5\u8be2\u8bed\u53e5\u6027\u80fd\u5206\u6790\u7684\u91cd\u8981\u5de5\u5177\u3002 #\u63d2\u51651000\u6761\u6570\u636e for ( var i = 1 ; i< 1000 ; i++ ) db.user.insert ({ id:100+i,username: 'name_' +i,age:10+i }) #\u67e5\u770b\u6267\u884c\u8ba1\u5212 > db.user.find ({ age: { $gt :100 } ,id: { $lt :200 }}) .explain () { \"queryPlanner\" : { \"plannerVersion\" : 1 , \"namespace\" : \"testdb.user\" , \"indexFilterSet\" : false, \"parsedQuery\" : { \" $and \" : [ { \"id\" : { \" $lt \" : 200 } } , { \"age\" : { \" $gt \" : 100 } } ] } , \"winningPlan\" : { #\u6700\u4f73\u6267\u884c\u8ba1\u5212 \"stage\" : \"FETCH\" , #\u67e5\u8be2\u65b9\u5f0f\uff0c\u5e38\u89c1\u7684\u6709COLLSCAN/\u5168\u8868\u626b\u63cf\u3001IXSCAN/\u7d22\u5f15\u626b\u63cf\u3001FETCH/\u6839\u636e\u7d22\u5f15\u53bb\u68c0\u7d22\u6587\u6863\u3001SHARD_MERGE/\u5408\u5e76\u5206\u7247\u7ed3\u679c\u3001IDHACK/\u9488\u5bf9_id\u8fdb\u884c\u67e5\u8be2 \"inputStage\" : { \"stage\" : \"IXSCAN\" , \"keyPattern\" : { \"age\" : 1 , \"id\" : -1 } , \"indexName\" : \"age_1_id_-1\" , \"isMultiKey\" : false, \"multiKeyPaths\" : { \"age\" : [ ] , \"id\" : [ ] } , \"isUnique\" : false, \"isSparse\" : false, \"isPartial\" : false, \"indexVersion\" : 2 , \"direction\" : \"forward\" , \"indexBounds\" : { \"age\" : [ \"(100.0, inf.0]\" ] , \"id\" : [ \"(200.0, -inf.0]\" ] } } } , \"rejectedPlans\" : [ ] } , \"serverInfo\" : { \"host\" : \"c493d5ff750a\" , \"port\" : 27017 , \"version\" : \"4.0.3\" , \"gitVersion\" : \"7ea530946fa7880364d88c8d8b6026bbc9ffa48c\" } , \"ok\" : 1 } #\u6d4b\u8bd5\u6ca1\u6709\u4f7f\u7528\u7d22\u5f15 > db.user.find ({ username: 'zhangsan' }) .explain () { \"queryPlanner\" : { \"plannerVersion\" : 1 , \"namespace\" : \"testdb.user\" , \"indexFilterSet\" : false, \"parsedQuery\" : { \"username\" : { \" $eq \" : \"zhangsan\" } } , \"winningPlan\" : { \"stage\" : \"COLLSCAN\" , #\u5168\u8868\u626b\u63cf \"filter\" : { \"username\" : { \" $eq \" : \"zhangsan\" } } , \"direction\" : \"forward\" } , \"rejectedPlans\" : [ ] } , \"serverInfo\" : { \"host\" : \"c493d5ff750a\" , \"port\" : 27017 , \"version\" : \"4.0.3\" , \"gitVersion\" : \"7ea530946fa7880364d88c8d8b6026bbc9ffa48c\" } , \"ok\" : 1 } 3.6\u3001UI\u5ba2\u6237\u7aef\u5de5\u5177 \u00b6 Robo 3T\u662fMongoDB\u7684\u5ba2\u6237\u7aef\u5de5\u5177\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u64cd\u4f5cMongoDB\u3002 \u67e5\u770b\u6570\u636e\uff1a \u6216\u4f7f\u7528Navicat Premium 15\uff1a 4\u3001SpringBoot\u6574\u5408MongoDB \u00b6 spring-data\u5bf9MongoDB\u505a\u4e86\u652f\u6301\uff0c\u4f7f\u7528spring-data-mongodb\u53ef\u4ee5\u7b80\u5316MongoDB\u7684\u64cd\u4f5c\u3002 \u5730\u5740\uff1ahttps://spring.io/projects/spring-data-mongodb 4.1\u3001\u5bfc\u5165\u4f9d\u8d56 \u00b6 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-parent </artifactId> <version> 2.1.0.RELEASE </version> </parent> <groupId> cn.itcast.mongodb </groupId> <artifactId> itcast-mongodb </artifactId> <version> 1.0-SNAPSHOT </version> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-mongodb </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-test </artifactId> <scope> test </scope> </dependency> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> <optional> true </optional> <version> 1.18.4 </version> </dependency> </dependencies> <build> <plugins> <!-- java\u7f16\u8bd1\u63d2\u4ef6 --> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-compiler-plugin </artifactId> <version> 3.2 </version> <configuration> <source> 1.8 </source> <target> 1.8 </target> <encoding> UTF-8 </encoding> </configuration> </plugin> </plugins> </build> </project> 4.2\u3001\u7f16\u5199application.properties\u914d\u7f6e\u6587\u4ef6 \u00b6 # Spring boot application spring.application.name = itcast-mongodb #\u65e0\u8ba4\u8bc1\u4fe1\u606f\u7684\u914d\u7f6e #spring.data.mongodb.uri=mongodb://192.168.31.81:27017/tanhua #springboot \u914d\u7f6e spring.data.mongodb.username = tanhua spring.data.mongodb.password = l3SCjl0HvmSkTtiSbN0Swv40spYnHhDV spring.data.mongodb.authentication-database = admin spring.data.mongodb.database = tanhua spring.data.mongodb.port = 27018 spring.data.mongodb.host = 192.168.31.81 4.3\u3001\u7f16\u5199\u5b9e\u4f53 \u00b6 package cn.itcast.mongodb.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; @Data @AllArgsConstructor @NoArgsConstructor public class Person { private ObjectId id ; private String name ; private int age ; private Address address ; } package cn.itcast.mongodb.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @AllArgsConstructor @NoArgsConstructor public class Address { private String street ; private String city ; private String zip ; } 4.4\u3001\u7f16\u5199dao \u00b6 package cn.itcast.mongodb.dao ; import cn.itcast.mongodb.pojo.Person ; import com.mongodb.client.result.DeleteResult ; import com.mongodb.client.result.UpdateResult ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.mongodb.core.MongoTemplate ; import org.springframework.data.mongodb.core.query.Criteria ; import org.springframework.data.mongodb.core.query.Query ; import org.springframework.data.mongodb.core.query.Update ; import org.springframework.stereotype.Component ; import java.util.List ; @Component public class PersonDao { @Autowired private MongoTemplate mongoTemplate ; public void savePerson ( Person person ) { this . mongoTemplate . save ( person ); } public List < Person > queryPersonListByName ( String name ) { Query query = Query . query ( Criteria . where ( \"name\" ). is ( name )); return this . mongoTemplate . find ( query , Person . class ); } public List < Person > queryPersonPageList ( Integer page , Integer rows ) { Query query = new Query (). limit ( rows ). skip (( page - 1 ) * rows ); return this . mongoTemplate . find ( query , Person . class ); } public UpdateResult update ( Person person ) { Query query = Query . query ( Criteria . where ( \"id\" ). is ( person . getId ())); Update update = Update . update ( \"age\" , person . getAge ()); return this . mongoTemplate . updateFirst ( query , update , Person . class ); } public DeleteResult deleteById ( String id ) { Query query = Query . query ( Criteria . where ( \"id\" ). is ( id )); return this . mongoTemplate . remove ( query , Person . class ); } } 4.5\u3001\u7f16\u5199\u542f\u52a8\u7c7b \u00b6 package cn.itcast.mongodb ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @SpringBootApplication public class MongoApplication { public static void main ( String [] args ) { SpringApplication . run ( MongoApplication . class , args ); } } 4.6\u3001\u7f16\u5199\u5355\u5143\u6d4b\u8bd5 \u00b6 package cn.itcast.mongodb ; import cn.itcast.mongodb.dao.PersonDao ; import cn.itcast.mongodb.pojo.Address ; import cn.itcast.mongodb.pojo.Person ; import org.bson.types.ObjectId ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; import java.util.List ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestPersonDao { @Autowired private PersonDao personDao ; @Test public void testSave () { Person person = new Person ( ObjectId . get (), \"\u5f20\u4e09\" , 20 , new Address ( \"\u4eba\u6c11\u8def\" , \"\u4e0a\u6d77\u5e02\" , \"666666\" )); this . personDao . savePerson ( person ); } @Test public void testQuery () { List < Person > personList = this . personDao . queryPersonListByName ( \"\u5f20\u4e09\" ); for ( Person person : personList ) { System . out . println ( person ); } } @Test public void testQuery2 () { List < Person > personList = this . personDao . queryPersonPageList ( 2 , 2 ); for ( Person person : personList ) { System . out . println ( person ); } } @Test public void testUpdate () { Person person = new Person (); person . setId ( new ObjectId ( \"5c0956ce235e192520086736\" )); person . setAge ( 30 ); this . personDao . update ( person ); } @Test public void testDelete () { this . personDao . deleteById ( \"5c09ca05235e192d8887a389\" ); } }","title":"day02"},{"location":"tantan/day02/#_1","text":"\u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f \u963f\u91cc\u4e91OSS\u670d\u52a1\u5e94\u7528 \u4eba\u8138\u8bc6\u522b MongoDB\u5feb\u901f\u5165\u95e8 SpringBoot\u6574\u5408MongoDB","title":"\u8bfe\u7a0b\u4ecb\u7ecd"},{"location":"tantan/day02/#1","text":"\u7528\u6237\u5728\u9996\u6b21\u767b\u5f55\u65f6\u9700\u8981\u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f\uff0c\u5305\u62ec\u6027\u522b\u3001\u6635\u79f0\u3001\u751f\u65e5\u3001\u57ce\u5e02\u3001\u5934\u50cf\u7b49\u3002 \u5176\u4e2d\uff0c\u5934\u50cf\u6570\u636e\u9700\u8981\u505a\u56fe\u7247\u4e0a\u4f20\uff0c\u8fd9\u91cc\u91c7\u7528\u963f\u91cc\u4e91\u7684OSS\u670d\u52a1\u4f5c\u4e3a\u6211\u4eec\u7684\u56fe\u7247\u670d\u52a1\u5668\uff0c\u5e76\u4e14\u5bf9\u5934\u50cf\u8981\u505a\u4eba\u8138\u8bc6\u522b\uff0c\u975e\u4eba\u8138\u7167\u7247\u4e0d\u5f97\u4e0a\u4f20\u3002","title":"1\u3001\u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f"},{"location":"tantan/day02/#11","text":"","title":"1.1\u3001\u56fe\u7247\u4e0a\u4f20"},{"location":"tantan/day02/#111","text":"\u5b9e\u73b0\u56fe\u7247\u4e0a\u4f20\u670d\u52a1\uff0c\u9700\u8981\u6709\u5b58\u50a8\u7684\u652f\u6301\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u89e3\u51b3\u65b9\u6848\u5c06\u4ee5\u4e0b\u51e0\u79cd\uff1a \u76f4\u63a5\u5c06\u56fe\u7247\u4fdd\u5b58\u5230\u670d\u52a1\u7684\u786c\u76d8 \u4f18\u70b9\uff1a\u5f00\u53d1\u4fbf\u6377\uff0c\u6210\u672c\u4f4e \u7f3a\u70b9\uff1a\u6269\u5bb9\u56f0\u96be \u4f7f\u7528\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf\u8fdb\u884c\u5b58\u50a8 \u4f18\u70b9\uff1a\u5bb9\u6613\u5b9e\u73b0\u6269\u5bb9 \u7f3a\u70b9\uff1a\u5f00\u53d1\u590d\u6742\u5ea6\u7a0d\u5927\uff08\u6709\u6210\u719f\u7684\u4ea7\u54c1\u53ef\u4ee5\u4f7f\u7528\uff0c\u6bd4\u5982\uff1aFastDFS\uff09 \u4f7f\u7528nfs\u505a\u5b58\u50a8 \u4f18\u70b9\uff1a\u5f00\u53d1\u8f83\u4e3a\u4fbf\u6377 \u7f3a\u70b9\uff1a\u9700\u8981\u6709\u4e00\u5b9a\u7684\u8fd0\u7ef4\u77e5\u8bc6\u8fdb\u884c\u90e8\u7f72\u548c\u7ef4\u62a4 \u4f7f\u7528\u7b2c\u4e09\u65b9\u7684\u5b58\u50a8\u670d\u52a1 \u4f18\u70b9\uff1a\u5f00\u53d1\u7b80\u5355\uff0c\u62e5\u6709\u5f3a\u5927\u529f\u80fd\uff0c\u514d\u7ef4\u62a4 \u7f3a\u70b9\uff1a\u4ed8\u8d39 \u5728\u672c\u5957\u8bfe\u7a0b\u4e2d\u9009\u7528\u963f\u91cc\u4e91\u7684OSS\u670d\u52a1\u8fdb\u884c\u56fe\u7247\u5b58\u50a8\u3002","title":"1.1.1\u3001\u56fe\u7247\u5b58\u50a8\u89e3\u51b3\u65b9\u6848"},{"location":"tantan/day02/#112oss","text":"\u6d41\u7a0b\uff1a","title":"1.1.2\u3001\u963f\u91cc\u4e91OSS\u5b58\u50a8"},{"location":"tantan/day02/#1121oss","text":"\u5730\u5740\uff1ahttps://www.aliyun.com/product/oss","title":"1.1.2.1\u3001\u4ec0\u4e48\u662fOSS\u670d\u52a1\uff1f"},{"location":"tantan/day02/#1122","text":"\u4f7f\u7528\u7b2c\u4e09\u65b9\u670d\u52a1\u6700\u5927\u7684\u7f3a\u70b9\u5c31\u662f\u9700\u8981\u4ed8\u8d39\uff0c\u4e0b\u9762\uff0c\u6211\u4eec\u770b\u4e0b\u5982\u4f55\u8d2d\u4e70\u5f00\u901a\u670d\u52a1\u3002 \u8d2d\u4e70\u4e0b\u884c\u6d41\u91cf\u5305\uff1a \uff08\u4e0d\u8d2d\u4e70\u4e5f\u53ef\u4ee5\u4f7f\u7528\uff0c\u6309\u7167\u6d41\u91cf\u4ed8\u8d39\uff09 \u8bf4\u660e\uff1aOSS\u7684\u4e0a\u884c\u6d41\u91cf\u662f\u514d\u8d39\u7684\uff0c\u4f46\u662f\u4e0b\u884c\u6d41\u91cf\u662f\u9700\u8981\u8d2d\u4e70\u7684\u3002","title":"1.1.2.2\u3001\u8d2d\u4e70\u670d\u52a1"},{"location":"tantan/day02/#1123bucket","text":"\u4f7f\u7528OSS\uff0c\u9996\u5148\u9700\u8981\u521b\u5efaBucket\uff0cBucket\u7ffb\u8bd1\u6210\u4e2d\u6587\u662f\u6c34\u6876\u7684\u610f\u601d\uff0c\u628a\u5b58\u50a8\u7684\u56fe\u7247\u8d44\u6e90\u770b\u505a\u662f\u6c34\uff0c\u60f3\u8981\u76db\u6c34\u5fc5\u987b\u5f97\u6709\u6876\uff0c\u5c31\u662f\u8fd9\u4e2a\u610f\u601d\u4e86\u3002 \u8fdb\u5165\u63a7\u5236\u53f0\uff0chttps://oss.console.aliyun.com/overview \u9009\u62e9Bucket\u540e\uff0c\u5373\u53ef\u770b\u5230\u5bf9\u5e94\u7684\u4fe1\u606f\uff0c\u5982\uff1aurl\u3001\u6d88\u8017\u6d41\u91cf\u7b49 : \u6587\u4ef6\u7ba1\u7406\uff1a \u67e5\u770b\u6587\u4ef6\uff1a","title":"1.1.2.3\u3001\u521b\u5efaBucket"},{"location":"tantan/day02/#1124","text":"\u521b\u5efa\u7528\u6237\u7684\u65b9\u5f0f\u4e0e\u77ed\u4fe1\u63a5\u53e3\u4e2d\u7684\u65b9\u5f0f\u4e00\u6837\uff0c\u9700\u8981\u8bbe\u7f6eoss\u6743\u9650\u3002","title":"1.1.2.4\u3001\u521b\u5efa\u7528\u6237"},{"location":"tantan/day02/#113","text":"<dependency> <groupId> com.aliyun.oss </groupId> <artifactId> aliyun-sdk-oss </artifactId> <version> 2.8.3 </version> </dependency>","title":"1.1.3\u3001\u5bfc\u5165\u4f9d\u8d56"},{"location":"tantan/day02/#114oss","text":"aliyun.properties\uff1a aliyun.endpoint = http://oss-cn-zhangjiakou.aliyuncs.com aliyun.accessKeyId = *********** aliyun.accessKeySecret = *************** aliyun.bucketName = tanhua-dev aliyun.urlPrefix = http://tanhua-dev.oss-cn-zhangjiakou.aliyuncs.com/ AliyunConfig\uff1a package com.tanhua.sso.config ; import com.aliyun.oss.OSSClient ; import lombok.Data ; import org.springframework.boot.context.properties.ConfigurationProperties ; import org.springframework.context.annotation.Bean ; import org.springframework.context.annotation.Configuration ; import org.springframework.context.annotation.PropertySource ; @Configuration @PropertySource ( \"classpath:aliyun.properties\" ) @ConfigurationProperties ( prefix = \"aliyun\" ) @Data public class AliyunConfig { private String endpoint ; private String accessKeyId ; private String accessKeySecret ; private String bucketName ; private String urlPrefix ; @Bean public OSSClient oSSClient () { return new OSSClient ( endpoint , accessKeyId , accessKeySecret ); } }","title":"1.1.4\u3001OSS\u914d\u7f6e"},{"location":"tantan/day02/#115picuploadservice","text":"package com.tanhua.sso.service ; import com.aliyun.oss.OSSClient ; import com.tanhua.sso.config.AliyunConfig ; import com.tanhua.sso.vo.PicUploadResult ; import org.apache.commons.lang3.RandomUtils ; import org.apache.commons.lang3.StringUtils ; import org.joda.time.DateTime ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import org.springframework.web.multipart.MultipartFile ; import java.io.ByteArrayInputStream ; @Service public class PicUploadService { // \u5141\u8bb8\u4e0a\u4f20\u7684\u683c\u5f0f private static final String [] IMAGE_TYPE = new String [] { \".bmp\" , \".jpg\" , \".jpeg\" , \".gif\" , \".png\" }; @Autowired private OSSClient ossClient ; @Autowired private AliyunConfig aliyunConfig ; public PicUploadResult upload ( MultipartFile uploadFile ) { PicUploadResult fileUploadResult = new PicUploadResult (); //\u56fe\u7247\u505a\u6821\u9a8c\uff0c\u5bf9\u540e\u7f00\u540d boolean isLegal = false ; for ( String type : IMAGE_TYPE ) { if ( StringUtils . endsWithIgnoreCase ( uploadFile . getOriginalFilename (), type )) { isLegal = true ; break ; } } if ( ! isLegal ) { fileUploadResult . setStatus ( \"error\" ); return fileUploadResult ; } // \u6587\u4ef6\u65b0\u8def\u5f84 String fileName = uploadFile . getOriginalFilename (); String filePath = getFilePath ( fileName ); // \u4e0a\u4f20\u5230\u963f\u91cc\u4e91 try { // \u76ee\u5f55\u7ed3\u6784\uff1aimages/2018/12/29/xxxx.jpg ossClient . putObject ( aliyunConfig . getBucketName (), filePath , new ByteArrayInputStream ( uploadFile . getBytes ())); } catch ( Exception e ) { e . printStackTrace (); //\u4e0a\u4f20\u5931\u8d25 fileUploadResult . setStatus ( \"error\" ); return fileUploadResult ; } // \u4e0a\u4f20\u6210\u529f fileUploadResult . setStatus ( \"done\" ); fileUploadResult . setName ( this . aliyunConfig . getUrlPrefix () + filePath ); fileUploadResult . setUid ( String . valueOf ( System . currentTimeMillis ())); return fileUploadResult ; } private String getFilePath ( String sourceFileName ) { DateTime dateTime = new DateTime (); return \"images/\" + dateTime . toString ( \"yyyy\" ) + \"/\" + dateTime . toString ( \"MM\" ) + \"/\" + dateTime . toString ( \"dd\" ) + \"/\" + System . currentTimeMillis () + RandomUtils . nextInt ( 100 , 9999 ) + \".\" + StringUtils . substringAfterLast ( sourceFileName , \".\" ); } } \u6240\u9700\u5176\u4ed6\u7684\u4ee3\u7801\uff1a PicUploadResult: package com.tanhua.sso.vo ; import lombok.Data ; @Data public class PicUploadResult { // \u6587\u4ef6\u552f\u4e00\u6807\u8bc6 private String uid ; // \u6587\u4ef6\u540d private String name ; // \u72b6\u6001\u6709\uff1auploading done error removed private String status ; // \u670d\u52a1\u7aef\u54cd\u5e94\u5185\u5bb9\uff0c\u5982\uff1a'{\"status\": \"success\"}' private String response ; }","title":"1.1.5\u3001PicUploadService"},{"location":"tantan/day02/#116picuploadcontroller","text":"package com.tanhua.sso.controller ; import com.tanhua.sso.service.PicUploadService ; import com.tanhua.sso.vo.PicUploadResult ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Controller ; import org.springframework.web.bind.annotation.PostMapping ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RequestParam ; import org.springframework.web.bind.annotation.ResponseBody ; import org.springframework.web.multipart.MultipartFile ; @RequestMapping ( \"pic/upload\" ) @Controller public class PicUploadController { @Autowired private PicUploadService picUploadService ; @PostMapping @ResponseBody public PicUploadResult upload ( @RequestParam ( \"file\" ) MultipartFile multipartFile ) { return this . picUploadService . upload ( multipartFile ); } }","title":"1.1.6\u3001PicUploadController"},{"location":"tantan/day02/#117","text":"","title":"1.1.7\u3001\u6d4b\u8bd5"},{"location":"tantan/day02/#12","text":"\u4eba\u8138\u8bc6\u522b\u6280\u672f\u91c7\u7528\u8679\u8f6f\u5f00\u653e\u5e73\u53f0\u5b9e\u73b0\uff08\u514d\u8d39\u4f7f\u7528\uff09\u3002\u5b98\u7f51\uff1ahttps://www.arcsoft.com.cn/","title":"1.2\u3001\u4eba\u8138\u8bc6\u522b"},{"location":"tantan/day02/#121","text":"\u4f7f\u7528\u8679\u8f6f\u5e73\u53f0\u9700\u8981\u5148\u6ce8\u518c\u5f00\u53d1\u8005\u8d26\u53f7\uff1ahttps://ai.arcsoft.com.cn/ucenter/user/userlogin \u6ce8\u518c\u5b8c\u6210\u540e\u8fdb\u884c\u767b\u5f55\uff0c\u7136\u540e\u8fdb\u884c\u521b\u5efa\u5e94\u7528\uff1a \u521b\u5efa\u5b8c\u6210\u540e\uff0c\u9700\u8981\u8fdb\u884c\u5b9e\u540d\u8ba4\u8bc1\uff0c\u5426\u5219\u76f8\u5173\u7684SDK\u662f\u4e0d\u80fd\u4f7f\u7528\u7684\u3002 \u5b9e\u540d\u8ba4\u8bc1\u540e\u5373\u53ef\u4e0b\u8f7d\u5bf9\u5e94\u5e73\u53f0\u7684SDk\uff0c\u6211\u4eec\u9700\u8981\u4e0b\u8f7dwindows\u4ee5\u53calinux\u5e73\u53f0\u3002 \u6dfb\u52a0SDK\uff08Linux\u4e0eWindows\u5e73\u53f0\uff09\uff1a \u4e0b\u8f7dSDK\uff0c\u6253\u5f00\u89e3\u538b\u5305\uff0c\u53ef\u4ee5\u770b\u5230\u6709\u63d0\u4f9b\u76f8\u5e94\u7684jar\u5305\u4ee5\u53ca\u793a\u4f8b\u4ee3\u7801\uff1a \u9700\u8981\u7279\u522b\u8bf4\u660e\u7684\u662f\uff1a\u6bcf\u4e2a\u8d26\u53f7\u7684SDK\u5305\u4e0d\u901a\u7528\uff0c\u6240\u4ee5\u81ea\u5df1\u8981\u4e0b\u8f7d\u81ea\u5df1\u7684SDK\u5305\u3002","title":"1.2.1\u3001\u4f7f\u7528\u8bf4\u660e"},{"location":"tantan/day02/#122jar","text":"\u8fdb\u5165\u5230libs\u76ee\u5f55\uff0c\u9700\u8981\u5c06arcsoft-sdk-face-3.0.0.0.jar\u5b89\u88c5\u5230\u672c\u5730\u4ed3\u5e93\uff1a mvn install:install-file -DgroupId = com.arcsoft.face -DartifactId = arcsoft-sdk-face -Dversion = 3 .0.0.0 -Dpackaging = jar -Dfile = arcsoft-sdk-face-3.0.0.0.jar \u5b89\u88c5\u6210\u529f\u540e\uff0c\u5373\u53ef\u901a\u8fc7maven\u5750\u6807\u5f15\u7528\u4e86\uff1a <dependency> <groupId> com.arcsoft.face </groupId> <artifactId> arcsoft-sdk-face </artifactId> <version> 3.0.0.0 </version> <!--<scope>system</scope>--> <!--\u5982\u679c\u6ca1\u6709\u5b89\u88c5\u5230\u672c\u5730\u4ed3\u5e93\uff0c\u53ef\u4ee5\u5c06jar\u5305\u62f7\u8d1d\u5230\u5de5\u7a0b\u7684lib\u4e0b\u9762\u4e0b\uff0c\u76f4\u63a5\u5f15\u7528--> <!--<systemPath>${project.basedir}/lib/arcsoft-sdk-face-3.0.0.0.jar</systemPath>--> </dependency>","title":"1.2.2\u3001\u5b89\u88c5jar\u5230\u672c\u5730\u4ed3\u5e93"},{"location":"tantan/day02/#123","text":"\u8bf4\u660e\uff1a\u8679\u8f6f\u7684SDK\u662f\u514d\u8d39\u4f7f\u7528\u7684\uff0c\u4f46\u662f\u9996\u6b21\u4f7f\u7528\u65f6\u9700\u8981\u8054\u7f51\u6fc0\u6d3b\uff0c\u6fc0\u6d3b\u540e\u53ef\u79bb\u7ebf\u4f7f\u7528\u3002\u4f7f\u7528\u5468\u671f\u4e3a1\u5e74\uff0c1\u5e74\u540e\u9700\u8981\u8054\u7f51\u518d\u6b21\u6fc0\u6d3b\u3002 \u4e2a\u4eba\u514d\u8d39\u6fc0\u6d3bSDK\u603b\u6570\u91cf\u4e3a100\u3002 \u914d\u7f6e\uff1aapplication.properties #\u8679\u8f6f\u76f8\u5173\u914d\u7f6e(\u5728\u8679\u8f6f\u5e94\u7528\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u53c2\u6570) arcsoft.appid = ****************** arcsoft.sdkKey = ***************** arcsoft.libPath = F:\\\\code\\\\WIN64 FaceEngineService\uff1a package com.tanhua.sso.service ; import com.arcsoft.face.EngineConfiguration ; import com.arcsoft.face.FaceEngine ; import com.arcsoft.face.FaceInfo ; import com.arcsoft.face.FunctionConfiguration ; import com.arcsoft.face.enums.DetectMode ; import com.arcsoft.face.enums.DetectOrient ; import com.arcsoft.face.enums.ErrorInfo ; import com.arcsoft.face.enums.ImageFormat ; import com.arcsoft.face.toolkit.ImageFactory ; import com.arcsoft.face.toolkit.ImageInfo ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; import org.springframework.beans.factory.annotation.Value ; import org.springframework.stereotype.Service ; import javax.annotation.PostConstruct ; import java.io.File ; import java.util.ArrayList ; import java.util.List ; @Service public class FaceEngineService { private static final Logger LOGGER = LoggerFactory . getLogger ( FaceEngineService . class ); @Value ( \"${arcsoft.appid}\" ) private String appid ; @Value ( \"${arcsoft.sdkKey}\" ) private String sdkKey ; @Value ( \"${arcsoft.libPath}\" ) private String libPath ; private FaceEngine faceEngine ; @PostConstruct public void init () { // \u6fc0\u6d3b\u5e76\u4e14\u521d\u59cb\u5316\u5f15\u64ce FaceEngine faceEngine = new FaceEngine ( libPath ); int activeCode = faceEngine . activeOnline ( appid , sdkKey ); if ( activeCode != ErrorInfo . MOK . getValue () && activeCode != ErrorInfo . MERR_ASF_ALREADY_ACTIVATED . getValue ()) { LOGGER . error ( \"\u5f15\u64ce\u6fc0\u6d3b\u5931\u8d25\" ); throw new RuntimeException ( \"\u5f15\u64ce\u6fc0\u6d3b\u5931\u8d25\" ); } //\u5f15\u64ce\u914d\u7f6e EngineConfiguration engineConfiguration = new EngineConfiguration (); //IMAGE\u68c0\u6d4b\u6a21\u5f0f\uff0c\u7528\u4e8e\u5904\u7406\u5355\u5f20\u7684\u56fe\u50cf\u6570\u636e engineConfiguration . setDetectMode ( DetectMode . ASF_DETECT_MODE_IMAGE ); //\u4eba\u8138\u68c0\u6d4b\u89d2\u5ea6\uff0c\u5168\u89d2\u5ea6 engineConfiguration . setDetectFaceOrientPriority ( DetectOrient . ASF_OP_ALL_OUT ); //\u529f\u80fd\u914d\u7f6e FunctionConfiguration functionConfiguration = new FunctionConfiguration (); functionConfiguration . setSupportAge ( true ); functionConfiguration . setSupportFace3dAngle ( true ); functionConfiguration . setSupportFaceDetect ( true ); functionConfiguration . setSupportFaceRecognition ( true ); functionConfiguration . setSupportGender ( true ); functionConfiguration . setSupportLiveness ( true ); functionConfiguration . setSupportIRLiveness ( true ); engineConfiguration . setFunctionConfiguration ( functionConfiguration ); //\u521d\u59cb\u5316\u5f15\u64ce int initCode = faceEngine . init ( engineConfiguration ); if ( initCode != ErrorInfo . MOK . getValue ()) { LOGGER . error ( \"\u521d\u59cb\u5316\u5f15\u64ce\u51fa\u9519!\" ); throw new RuntimeException ( \"\u521d\u59cb\u5316\u5f15\u64ce\u51fa\u9519!\" ); } this . faceEngine = faceEngine ; } /** * \u68c0\u6d4b\u56fe\u7247\u662f\u5426\u4e3a\u4eba\u50cf * * @param imageInfo \u56fe\u50cf\u5bf9\u8c61 * @return true:\u4eba\u50cf\uff0cfalse:\u975e\u4eba\u50cf */ public boolean checkIsPortrait ( ImageInfo imageInfo ) { // \u5b9a\u4e49\u4eba\u8138\u5217\u8868 List < FaceInfo > faceInfoList = new ArrayList < FaceInfo > (); faceEngine . detectFaces ( imageInfo . getImageData (), imageInfo . getWidth (), imageInfo . getHeight (), ImageFormat . CP_PAF_BGR24 , faceInfoList ); return ! faceInfoList . isEmpty (); } public boolean checkIsPortrait ( byte [] imageData ) { return this . checkIsPortrait ( ImageFactory . getRGBData ( imageData )); } public boolean checkIsPortrait ( File file ) { return this . checkIsPortrait ( ImageFactory . getRGBData ( file )); } } #\u95ee\u9898\uff1a Caused by: java.lang.UnsatisfiedLinkError: D: \\g ongju \\r enlian \\h aha \\l ibs \\W IN64 \\l ibarcsoft_face.dll: Can ' t find dependent libraries \u89e3\u51b3\uff1a \u5b89\u88c5\u8d44\u6599\u4e2d\u7684\uff1avcredist_x64.exe\uff0c\u5373\u53ef\u89e3\u51b3\u3002","title":"1.2.3\u3001\u5f00\u59cb\u4f7f\u7528"},{"location":"tantan/day02/#124","text":"package com.tanhua.sso.service ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner ; import java.io.File ; @SpringBootTest @RunWith ( SpringJUnit4ClassRunner . class ) public class TestFaceEngineService { @Autowired private FaceEngineService faceEngineService ; @Test public void testCheckIsPortrait (){ File file = new File ( \"F:\\\\1.jpg\" ); boolean checkIsPortrait = this . faceEngineService . checkIsPortrait ( file ); System . out . println ( checkIsPortrait ); // true|false } }","title":"1.2.4\u3001\u6d4b\u8bd5"},{"location":"tantan/day02/#13","text":"\u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f\u7684\u529f\u80fd\u5b9e\u73b0\uff0c\u5206\u4e3a2\u4e2a\u63a5\u53e3\u5b8c\u6210\uff0c\u5206\u522b\u662f\uff1a\u5b8c\u5584\u4e2a\u4eba\u8d44\u6599\u4fe1\u606f\u3001\u5934\u50cf\u4e0a\u4f20\u3002 mock\u63a5\u53e3\uff1a \u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f https://mock.boxuegu.com/project/164/interface/api/28553 \u4e0a\u4f20\u5934\u50cf https://mock.boxuegu.com/project/164/interface/api/39725","title":"1.3\u3001\u5b9e\u73b0\u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f"},{"location":"tantan/day02/#131userinfomapper","text":"package com.tanhua.sso.mapper ; import com.baomidou.mybatisplus.core.mapper.BaseMapper ; import com.tanhua.sso.pojo.UserInfo ; public interface UserInfoMapper extends BaseMapper < UserInfo > { }","title":"1.3.1\u3001UserInfoMapper"},{"location":"tantan/day02/#132userinfoservice","text":"package com.tanhua.sso.service ; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper ; import com.tanhua.sso.enums.SexEnum ; import com.tanhua.sso.mapper.UserInfoMapper ; import com.tanhua.sso.pojo.User ; import com.tanhua.sso.pojo.UserInfo ; import com.tanhua.sso.vo.PicUploadResult ; import org.apache.commons.lang3.StringUtils ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import org.springframework.web.multipart.MultipartFile ; import java.io.IOException ; import java.util.Map ; @Service public class UserInfoService { @Autowired private UserService userService ; @Autowired private UserInfoMapper userInfoMapper ; @Autowired private FaceEngineService faceEngineService ; @Autowired private PicUploadService picUploadService ; public Boolean saveUserInfo ( Map < String , String > param , String token ) { //\u6821\u9a8ctoken User user = this . userService . queryUserByToken ( token ); if ( null == user ) { return false ; } UserInfo userInfo = new UserInfo (); userInfo . setUserId ( user . getId ()); userInfo . setSex ( StringUtils . equalsIgnoreCase ( param . get ( \"gender\" ), \"man\" ) ? SexEnum . MAN : SexEnum . WOMAN ); userInfo . setNickName ( param . get ( \"nickname\" )); userInfo . setBirthday ( param . get ( \"birthday\" )); userInfo . setCity ( param . get ( \"city\" )); return this . userInfoMapper . insert ( userInfo ) == 1 ; } public Boolean saveUserLogo ( MultipartFile file , String token ) { //\u6821\u9a8ctoken User user = this . userService . queryUserByToken ( token ); if ( null == user ) { return false ; } try { //\u6821\u9a8c\u56fe\u7247\u662f\u5426\u662f\u4eba\u50cf\uff0c\u5982\u679c\u4e0d\u662f\u4eba\u50cf\u5c31\u8fd4\u56defalse boolean b = this . faceEngineService . checkIsPortrait ( file . getBytes ()); if ( ! b ) { return false ; } } catch ( IOException e ) { e . printStackTrace (); } //\u56fe\u7247\u4e0a\u4f20\u5230\u963f\u91cc\u4e91OSS PicUploadResult result = this . picUploadService . upload ( file ); if ( StringUtils . isEmpty ( result . getName ())) { //\u4e0a\u4f20\u5931\u8d25 return false ; } //\u628a\u5934\u50cf\u4fdd\u5b58\u5230\u7528\u6237\u4fe1\u606f\u8868\u4e2d UserInfo userInfo = new UserInfo (); userInfo . setLogo ( result . getName ()); QueryWrapper < UserInfo > queryWrapper = new QueryWrapper <> (); queryWrapper . eq ( \"user_id\" , user . getId ()); return this . userInfoMapper . update ( userInfo , queryWrapper ) == 1 ; } }","title":"1.3.2\u3001UserInfoService"},{"location":"tantan/day02/#133userinfocontroller","text":"package com.tanhua.sso.controller ; import com.tanhua.sso.service.UserInfoService ; import com.tanhua.sso.service.UserService ; import com.tanhua.sso.vo.ErrorResult ; import org.apache.commons.lang3.StringUtils ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.* ; import org.springframework.web.multipart.MultipartFile ; import java.util.HashMap ; import java.util.Map ; @RestController @RequestMapping ( \"user\" ) public class UserInfoController { @Autowired private UserInfoService userInfoService ; /** * \u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f-\u57fa\u672c\u4fe1\u606f * * @param param * @return */ @PostMapping ( \"loginReginfo\" ) public ResponseEntity < Object > saveUserInfo ( @RequestBody Map < String , String > param , @RequestHeader ( \"Authorization\" ) String token ) { try { Boolean bool = this . userInfoService . saveUserInfo ( param , token ); if ( bool ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } ErrorResult errorResult = ErrorResult . builder (). errCode ( \"000001\" ). errMessage ( \"\u4fdd\u5b58\u7528\u6237\u4fe1\u606f\u5931\u8d25\uff01\" ). build (); return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). body ( errorResult ); } /** * \u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f-\u7528\u6237\u5934\u50cf * * @return */ @PostMapping ( \"loginReginfo/head\" ) public ResponseEntity < Object > saveUserLogo ( @RequestParam ( \"headPhoto\" ) MultipartFile file , @RequestHeader ( \"Authorization\" ) String token ) { try { Boolean bool = this . userInfoService . saveUserLogo ( file , token ); if ( bool ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } ErrorResult errorResult = ErrorResult . builder (). errCode ( \"000001\" ). errMessage ( \"\u4fdd\u5b58\u7528\u6237logo\u5931\u8d25\uff01\" ). build (); return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). body ( errorResult ); } }","title":"1.3.3\u3001UserInfoController"},{"location":"tantan/day02/#144","text":"\u56fe\u7247\u4e0a\u4f20\u8d85\u8fc71MB\u51fa\u9519\u7684\u89e3\u51b3\u65b9\u6848\uff1a #\u5728application.properties\u6587\u4ef6\u4e2d\uff0c\u586b\u5165\u4e0b\u9762\u7684\u914d\u7f6e #\u8bbe\u7f6e\u6700\u5927\u7684\u6587\u4ef6\u4e0a\u4f20\u5927\u5c0f spring.servlet.multipart.max-request-size = 30MB spring.servlet.multipart.max-file-size = 30MB","title":"1.4.4\u3001\u6d4b\u8bd5"},{"location":"tantan/day02/#2token","text":"\u5728\u6574\u4e2a\u7cfb\u7edf\u67b6\u6784\u4e2d\uff0c\u53ea\u6709SSO\u4fdd\u5b58\u4e86JWT\u4e2d\u7684\u79d8\u94a5\uff0c\u6240\u4ee5\u53ea\u80fd\u901a\u8fc7SSO\u7cfb\u7edf\u63d0\u4f9b\u7684\u63a5\u53e3\u670d\u52a1\u8fdb\u884c\u5bf9token\u7684\u6821\u9a8c\uff0c\u6240\u4ee5\u5728SSO\u7cfb\u7edf\u4e2d\uff0c\u9700\u8981\u5bf9\u5916\u5f00\u653e\u63a5\u53e3\uff0c\u901a\u8fc7token\u8fdb\u884c\u67e5\u8be2\u7528\u6237\u4fe1\u606f\uff0c\u5982\u679c\u8fd4\u56denull\u8bf4\u660e\u7528\u6237\u72b6\u6001\u5df2\u8fc7\u671f\u6216\u8005\u662f\u975e\u6cd5\u7684token\uff0c\u5426\u5219\u8fd4\u56deUser\u5bf9\u8c61\u6570\u636e\u3002","title":"2\u3001\u6821\u9a8ctoken"},{"location":"tantan/day02/#21usercontroller","text":"/** * \u6821\u9a8ctoken\uff0c\u6839\u636etoken\u67e5\u8be2\u7528\u6237\u6570\u636e * * @param token * @return */ @GetMapping ( \"{token}\" ) public User queryUserByToken ( @PathVariable ( \"token\" ) String token ) { return this . userService . queryUserByToken ( token ); }","title":"2.1\u3001UserController"},{"location":"tantan/day02/#22userservice","text":"public User queryUserByToken ( String token ) { try { // \u901a\u8fc7token\u89e3\u6790\u6570\u636e Map < String , Object > body = Jwts . parser () . setSigningKey ( secret ) . parseClaimsJws ( token ) . getBody (); User user = new User (); user . setId ( Long . valueOf ( body . get ( \"id\" ). toString ())); //\u9700\u8981\u8fd4\u56deuser\u5bf9\u8c61\u4e2d\u7684mobile\uff0c\u9700\u8981\u67e5\u8be2\u6570\u636e\u5e93\u83b7\u53d6\u5230mobile\u6570\u636e //\u5982\u679c\u6bcf\u6b21\u90fd\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u5fc5\u7136\u4f1a\u5bfc\u81f4\u6027\u80fd\u95ee\u9898\uff0c\u9700\u8981\u5bf9\u7528\u6237\u7684\u624b\u673a\u53f7\u8fdb\u884c\u7f13\u5b58\u64cd\u4f5c //\u6570\u636e\u7f13\u5b58\u65f6\uff0c\u9700\u8981\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0c\u8fc7\u671f\u65f6\u95f4\u8981\u4e0etoken\u7684\u65f6\u95f4\u4e00\u81f4 //\u5982\u679c\u7528\u6237\u4fee\u6539\u4e86\u624b\u673a\u53f7\uff0c\u9700\u8981\u540c\u6b65\u4fee\u6539redis\u4e2d\u7684\u6570\u636e String redisKey = \"TANHUA_USER_MOBILE_\" + user . getId (); if ( this . redisTemplate . hasKey ( redisKey )){ String mobile = this . redisTemplate . opsForValue (). get ( redisKey ); user . setMobile ( mobile ); } else { //\u67e5\u8be2\u6570\u636e\u5e93 User u = this . userMapper . selectById ( user . getId ()); user . setMobile ( u . getMobile ()); //\u5c06\u624b\u673a\u53f7\u5199\u5165\u5230redis\u4e2d //\u5728jwt\u4e2d\u7684\u8fc7\u671f\u65f6\u95f4\u7684\u5355\u4f4d\u4e3a\uff1a\u79d2 long timeout = Long . valueOf ( body . get ( \"exp\" ). toString ()) * 1000 - System . currentTimeMillis (); this . redisTemplate . opsForValue (). set ( redisKey , u . getMobile (), timeout , TimeUnit . MILLISECONDS ); } return user ; } catch ( ExpiredJwtException e ) { log . info ( \"token\u5df2\u7ecf\u8fc7\u671f\uff01 token = \" + token ); } catch ( Exception e ) { log . error ( \"token\u4e0d\u5408\u6cd5\uff01 token = \" + token , e ); } return null ; }","title":"2.2\u3001UserService"},{"location":"tantan/day02/#23","text":"\u6570\u636e\u5df2\u7ecf\u5b58\u50a8\u5230redis\u4e2d\uff1a","title":"2.3\u3001\u6d4b\u8bd5"},{"location":"tantan/day02/#3mongodb","text":"","title":"3\u3001MongoDB\u5feb\u901f\u5165\u95e8"},{"location":"tantan/day02/#31mongodb","text":"MongoDB\u662f\u4e00\u4e2a\u57fa\u4e8e\u5206\u5e03\u5f0f\u6587\u4ef6\u5b58\u50a8\u7684\u6570\u636e\u5e93\u3002\u7531C++\u8bed\u8a00\u7f16\u5199\u3002\u65e8\u5728\u4e3aWEB\u5e94\u7528\u63d0\u4f9b\u53ef\u6269\u5c55\u7684\u9ad8\u6027\u80fd\u6570\u636e\u5b58\u50a8\u89e3\u51b3\u65b9\u6848\u3002 MongoDB\u662f\u4e00\u4e2a\u4ecb\u4e8e\u5173\u7cfb\u6570\u636e\u5e93\u548c\u975e\u5173\u7cfb\u6570\u636e\u5e93\u4e4b\u95f4\u7684\u4ea7\u54c1\uff0c\u662f\u975e\u5173\u7cfb\u6570\u636e\u5e93\u5f53\u4e2d\u529f\u80fd\u6700\u4e30\u5bcc\uff0c\u6700\u50cf\u5173\u7cfb\u6570\u636e\u5e93\u7684\uff0c\u5b83\u652f\u6301\u7684\u6570\u636e\u7ed3\u6784\u975e\u5e38\u677e\u6563\uff0c\u662f\u7c7b\u4f3cjson\u7684bson\u683c\u5f0f\uff0c\u56e0\u6b64\u53ef\u4ee5\u5b58\u50a8\u6bd4\u8f83\u590d\u6742\u7684\u6570\u636e\u7c7b\u578b\u3002 MongoDB\u6700\u5927\u7684\u7279\u70b9\u662f\u5b83\u652f\u6301\u7684\u67e5\u8be2\u8bed\u8a00\u975e\u5e38\u5f3a\u5927\uff0c\u5176\u8bed\u6cd5\u6709\u70b9\u7c7b\u4f3c\u4e8e\u9762\u5411\u5bf9\u8c61\u7684\u67e5\u8be2\u8bed\u8a00\uff0c\u51e0\u4e4e\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u4f3c\u5173\u7cfb\u6570\u636e\u5e93\u5355\u8868\u67e5\u8be2\u7684\u7edd\u5927\u90e8\u5206\u529f\u80fd\uff0c\u800c\u4e14\u8fd8\u652f\u6301\u5bf9\u6570\u636e\u5efa\u7acb\u7d22\u5f15\u3002 \u5b98\u7f51\uff1ahttps://www.mongodb.com","title":"3.1\u3001MongoDB\u7b80\u4ecb"},{"location":"tantan/day02/#32dockermongodb","text":"#\u62c9\u53d6\u955c\u50cf docker pull mongo:4.0.3 #\u521b\u5efa\u5bb9\u5668 docker create --name mongodb-server -p 27018 :27017 -v mongodb-data:/data/db mongo:4.0.3 --auth #\u542f\u52a8\u5bb9\u5668 docker start mongodb-server #\u8fdb\u5165\u5bb9\u5668 docker exec -it mongodb-server /bin/bash #\u8fdb\u5165admin\u6570\u636e\u5e93 mongo use admin #\u6dfb\u52a0\u7ba1\u7406\u5458\uff0c\u5176\u62e5\u6709\u7ba1\u7406\u7528\u6237\u548c\u89d2\u8272\u7684\u6743\u9650 db.createUser ({ user: 'root' , pwd: 'root' , roles: [ { role: \"root\" , db: \"admin\" } ] }) #\u6d4b\u8bd5\uff0c\u53d1\u73b0\u662f\u6ca1\u6709\u6743\u9650\u64cd\u4f5c\u7684 > show dbs 2020 -10-20T09:09:15.543+0000 E QUERY [ js ] Error: listDatabases failed: { \"ok\" : 0 , \"errmsg\" : \"command listDatabases requires authentication\" , \"code\" : 13 , \"codeName\" : \"Unauthorized\" } : #\u8fdb\u884c\u8ba4\u8bc1 mongo -u \"root\" -p \"root\" --authenticationDatabase \"admin\" #\u901a\u8fc7admin\u6dfb\u52a0\u666e\u901a\u7528\u6237 use admin db.createUser ({ user: 'tanhua' , pwd: 'l3SCjl0HvmSkTtiSbN0Swv40spYnHhDV' , roles: [ { role: \"readWrite\" , db: \"tanhua\" } ] }) ; #\u901a\u8fc7tanhua\u7528\u6237\u767b\u5f55\u8fdb\u884c\u6d4b\u8bd5 mongo -u \"tanhua\" -p \"l3SCjl0HvmSkTtiSbN0Swv40spYnHhDV\" --authenticationDatabase \"admin\" #\u6d4b\u8bd5 root@5d848955ff7e:/# mongo -u \"tanhua\" -p \"tanhua123\" --authenticationDatabase \"admin\" MongoDB shell version v4.0.3 connecting to: mongodb://127.0.0.1:27017 Implicit session: session { \"id\" : UUID ( \"6c368269-30f0-4b29-a224-05a38b5847e2\" ) } MongoDB server version: 4 .0.3 > use tanhua switched to db tanhua > db.user.insert ({ id:1,username: 'zhangsan' ,age:20 }) WriteResult ({ \"nInserted\" : 1 }) > db.user.find () { \"_id\" : ObjectId ( \"5f8eb2726e0de0aa9517afd3\" ) , \"id\" : 1 , \"username\" : \"zhangsan\" , \"age\" : 20 }","title":"3.2\u3001\u901a\u8fc7docker\u5b89\u88c5MongoDB"},{"location":"tantan/day02/#33mongodb","text":"","title":"3.3\u3001MongoDB\u57fa\u672c\u64cd\u4f5c"},{"location":"tantan/day02/#331","text":"\u4e3a\u4e86\u66f4\u597d\u7684\u7406\u89e3\uff0c\u4e0b\u9762\u4e0eSQL\u4e2d\u7684\u6982\u5ff5\u8fdb\u884c\u5bf9\u6bd4\uff1a SQL\u672f\u8bed/\u6982\u5ff5 MongoDB\u672f\u8bed/\u6982\u5ff5 \u89e3\u91ca/\u8bf4\u660e database database \u6570\u636e\u5e93 table collection \u6570\u636e\u5e93\u8868/\u96c6\u5408 row document \u6570\u636e\u8bb0\u5f55\u884c/\u6587\u6863 column field \u6570\u636e\u5b57\u6bb5/\u57df index index \u7d22\u5f15 table joins \u8868\u8fde\u63a5,MongoDB\u4e0d\u652f\u6301 primary key primary key \u4e3b\u952e,MongoDB\u81ea\u52a8\u5c06_id\u5b57\u6bb5\u8bbe\u7f6e\u4e3a\u4e3b\u952e","title":"3.3.1\u3001\u57fa\u672c\u6982\u5ff5"},{"location":"tantan/day02/#332","text":"#\u67e5\u770b\u6240\u6709\u7684\u6570\u636e\u5e93 > show dbs admin 0 .000GB config 0 .000GB local 0 .000GB #\u901a\u8fc7use\u5173\u952e\u5b57\u5207\u6362\u6570\u636e\u5e93 > use admin switched to db admin #\u521b\u5efa\u6570\u636e\u5e93 #\u8bf4\u660e\uff1a\u5728MongoDB\u4e2d\uff0c\u6570\u636e\u5e93\u662f\u81ea\u52a8\u521b\u5efa\u7684\uff0c\u901a\u8fc7use\u5207\u6362\u5230\u65b0\u6570\u636e\u5e93\u4e2d\uff0c\u8fdb\u884c\u63d2\u5165\u6570\u636e\u5373\u53ef\u81ea\u52a8\u521b\u5efa\u6570\u636e\u5e93 > use testdb switched to db testdb > show dbs #\u5e76\u6ca1\u6709\u521b\u5efa\u6570\u636e\u5e93 admin 0 .000GB config 0 .000GB local 0 .000GB > db.user.insert ({ id:1,name: 'zhangsan' }) #\u63d2\u5165\u6570\u636e WriteResult ({ \"nInserted\" : 1 }) > show dbs admin 0 .000GB config 0 .000GB local 0 .000GB testdb 0 .000GB #\u6570\u636e\u5e93\u81ea\u52a8\u521b\u5efa #\u67e5\u770b\u8868 > show tables user > show collections user > #\u5220\u9664\u96c6\u5408\uff08\u8868\uff09 > db.user.drop () true #\u5982\u679c\u6210\u529f\u5220\u9664\u9009\u5b9a\u96c6\u5408\uff0c\u5219 drop() \u65b9\u6cd5\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false\u3002 #\u5220\u9664\u6570\u636e\u5e93 > use testdb #\u5148\u5207\u6362\u5230\u8981\u5220\u9664\u7684\u6570\u636e\u5e93\u4e2d switched to db testdb > db.dropDatabase () #\u5220\u9664\u6570\u636e\u5e93 { \"dropped\" : \"testdb\" , \"ok\" : 1 } > show dbs admin 0 .000GB config 0 .000GB local 0 .000GB","title":"3.3.2\u3001\u6570\u636e\u5e93\u4ee5\u53ca\u8868\u7684\u64cd\u4f5c"},{"location":"tantan/day02/#333","text":"\u5728MongoDB\u4e2d\uff0c\u5b58\u50a8\u7684\u6587\u6863\u7ed3\u6784\u662f\u4e00\u79cd\u7c7b\u4f3c\u4e8ejson\u7684\u7ed3\u6784\uff0c\u79f0\u4e4b\u4e3abson\uff08\u5168\u79f0\u4e3a\uff1aBinary JSON\uff09\u3002 #\u63d2\u5165\u6570\u636e #\u8bed\u6cd5\uff1adb.COLLECTION_NAME.insert(document) > db.user.insert ({ id:1,username: 'zhangsan' ,age:20 }) WriteResult ({ \"nInserted\" : 1 }) > db.user.save ({ id:2,username: 'lisi' ,age:25 }) WriteResult ({ \"nInserted\" : 1 }) > db.user.find () #\u67e5\u8be2\u6570\u636e { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"id\" : 1 , \"username\" : \"zhangsan\" , \"age\" : 20 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 }","title":"3.3.3\u3001\u65b0\u589e\u6570\u636e"},{"location":"tantan/day02/#334","text":"update() \u65b9\u6cd5\u7528\u4e8e\u66f4\u65b0\u5df2\u5b58\u5728\u7684\u6587\u6863\u3002\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a db.collection.update ( <query>, <update>, [ upsert: <boolean>, multi: <boolean>, writeConcern: <document> ] ) \u53c2\u6570\u8bf4\u660e\uff1a query : update\u7684\u67e5\u8be2\u6761\u4ef6\uff0c\u7c7b\u4f3csql update\u67e5\u8be2\u5185where\u540e\u9762\u7684\u3002 update : update\u7684\u5bf9\u8c61\u548c\u4e00\u4e9b\u66f4\u65b0\u7684\u64cd\u4f5c\u7b26\uff08\u5982 , inc...\uff09\u7b49\uff0c\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3asql update\u67e5\u8be2\u5185set\u540e\u9762\u7684 upsert : \u53ef\u9009\uff0c\u8fd9\u4e2a\u53c2\u6570\u7684\u610f\u601d\u662f\uff0c\u5982\u679c\u4e0d\u5b58\u5728update\u7684\u8bb0\u5f55\uff0c\u662f\u5426\u63d2\u5165objNew,true\u4e3a\u63d2\u5165\uff0c\u9ed8\u8ba4\u662ffalse\uff0c\u4e0d\u63d2\u5165\u3002 multi : \u53ef\u9009\uff0cmongodb \u9ed8\u8ba4\u662ffalse,\u53ea\u66f4\u65b0\u627e\u5230\u7684\u7b2c\u4e00\u6761\u8bb0\u5f55\uff0c\u5982\u679c\u8fd9\u4e2a\u53c2\u6570\u4e3atrue,\u5c31\u628a\u6309\u6761\u4ef6\u67e5\u51fa\u6765\u591a\u6761\u8bb0\u5f55\u5168\u90e8\u66f4\u65b0\u3002 writeConcern :\u53ef\u9009\uff0c\u629b\u51fa\u5f02\u5e38\u7684\u7ea7\u522b\u3002 > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"id\" : 1 , \"username\" : \"zhangsan\" , \"age\" : 20 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 } > db.user.update ({ id:1 } , { $set : { age:22 }}) #\u66f4\u65b0\u6570\u636e WriteResult ({ \"nMatched\" : 1 , \"nUpserted\" : 0 , \"nModified\" : 1 }) > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"id\" : 1 , \"username\" : \"zhangsan\" , \"age\" : 22 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 } #\u6ce8\u610f\uff1a\u5982\u679c\u8fd9\u6837\u5199\uff0c\u4f1a\u5220\u9664\u6389\u5176\u4ed6\u7684\u5b57\u6bb5 > db.user.update ({ id:1 } , { age:25 }) WriteResult ({ \"nMatched\" : 1 , \"nUpserted\" : 0 , \"nModified\" : 1 }) > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"age\" : 25 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 } #\u66f4\u65b0\u4e0d\u5b58\u5728\u7684\u5b57\u6bb5\uff0c\u4f1a\u65b0\u589e\u5b57\u6bb5 > db.user.update ({ id:2 } , { $set : { sex:1 }}) #\u66f4\u65b0\u6570\u636e > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"age\" : 25 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 , \"sex\" : 1 } #\u66f4\u65b0\u4e0d\u5b58\u5728\u7684\u6570\u636e\uff0c\u9ed8\u8ba4\u4e0d\u4f1a\u65b0\u589e\u6570\u636e > db.user.update ({ id:3 } , { $set : { sex:1 }}) WriteResult ({ \"nMatched\" : 0 , \"nUpserted\" : 0 , \"nModified\" : 0 }) > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"age\" : 25 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 , \"sex\" : 1 } #\u5982\u679c\u8bbe\u7f6e\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3atrue\uff0c\u5c31\u662f\u65b0\u589e\u6570\u636e > db.user.update ({ id:3 } , { $set : { sex:1 }} ,true ) WriteResult ({ \"nMatched\" : 0 , \"nUpserted\" : 1 , \"nModified\" : 0 , \"_id\" : ObjectId ( \"5c08cb281418d073246bc642\" ) }) > db.user.find () { \"_id\" : ObjectId ( \"5c08c0024b318926e0c1f6dc\" ) , \"age\" : 25 } { \"_id\" : ObjectId ( \"5c08c0134b318926e0c1f6dd\" ) , \"id\" : 2 , \"username\" : \"lisi\" , \"age\" : 25 , \"sex\" : 1 } { \"_id\" : ObjectId ( \"5c08cb281418d073246bc642\" ) , \"id\" : 3 , \"sex\" : 1 }","title":"3.3.4\u3001\u66f4\u65b0\u6570\u636e"},{"location":"tantan/day02/#335","text":"\u901a\u8fc7remove()\u65b9\u6cd5\u8fdb\u884c\u5220\u9664\u6570\u636e\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a db.collection.remove ( <query>, { justOne: <boolean>, writeConcern: <document> } ) \u53c2\u6570\u8bf4\u660e\uff1a query :\uff08\u53ef\u9009\uff09\u5220\u9664\u7684\u6587\u6863\u7684\u6761\u4ef6\u3002 justOne : \uff08\u53ef\u9009\uff09\u5982\u679c\u8bbe\u4e3a true \u6216 1\uff0c\u5219\u53ea\u5220\u9664\u4e00\u4e2a\u6587\u6863\uff0c\u5982\u679c\u4e0d\u8bbe\u7f6e\u8be5\u53c2\u6570\uff0c\u6216\u4f7f\u7528\u9ed8\u8ba4\u503c false\uff0c\u5219\u5220\u9664\u6240\u6709\u5339\u914d\u6761\u4ef6\u7684\u6587\u6863\u3002 writeConcern :\uff08\u53ef\u9009\uff09\u629b\u51fa\u5f02\u5e38\u7684\u7ea7\u522b\u3002 \u5b9e\u4f8b\uff1a > db.user.remove ({ age:25 }) WriteResult ({ \"nRemoved\" : 2 }) #\u5220\u9664\u4e862\u6761\u6570\u636e #\u63d2\u51654\u6761\u6d4b\u8bd5\u6570\u636e db.user.insert ({ id:1,username: 'zhangsan' ,age:20 }) db.user.insert ({ id:2,username: 'lisi' ,age:21 }) db.user.insert ({ id:3,username: 'wangwu' ,age:22 }) db.user.insert ({ id:4,username: 'zhaoliu' ,age:22 }) > db.user.remove ({ age:22 } ,true ) WriteResult ({ \"nRemoved\" : 1 }) #\u5220\u9664\u4e861\u6761\u6570\u636e #\u5220\u9664\u6240\u6709\u6570\u636e > db.user.remove ({}) #\u8bf4\u660e\uff1a\u4e3a\u4e86\u7b80\u5316\u64cd\u4f5c\uff0c\u5b98\u65b9\u63a8\u8350\u4f7f\u7528deleteOne()\u4e0edeleteMany()\u8fdb\u884c\u5220\u9664\u6570\u636e\u64cd\u4f5c\u3002 db.user.deleteOne ({ id:1 }) db.user.deleteMany ({}) #\u5220\u9664\u6240\u6709\u6570\u636e","title":"3.3.5\u3001\u5220\u9664\u6570\u636e"},{"location":"tantan/day02/#336","text":"MongoDB \u67e5\u8be2\u6570\u636e\u7684\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a db . user . find ( [ query ] , [ fields ] ) query \uff1a\u53ef\u9009\uff0c\u4f7f\u7528\u67e5\u8be2\u64cd\u4f5c\u7b26\u6307\u5b9a\u67e5\u8be2\u6761\u4ef6 fields \uff1a\u53ef\u9009\uff0c\u4f7f\u7528\u6295\u5f71\u64cd\u4f5c\u7b26\u6307\u5b9a\u8fd4\u56de\u7684\u952e\u3002\u67e5\u8be2\u65f6\u8fd4\u56de\u6587\u6863\u4e2d\u6240\u6709\u952e\u503c\uff0c \u53ea\u9700\u7701\u7565\u8be5\u53c2\u6570\u5373\u53ef\uff08\u9ed8\u8ba4\u7701\u7565\uff09\u3002 \u5982\u679c\u4f60\u9700\u8981\u4ee5\u6613\u8bfb\u7684\u65b9\u5f0f\u6765\u8bfb\u53d6\u6570\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528 pretty() \u65b9\u6cd5\uff0c\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a >db.col.find().pretty() pretty() \u65b9\u6cd5\u4ee5\u683c\u5f0f\u5316\u7684\u65b9\u5f0f\u6765\u663e\u793a\u6240\u6709\u6587\u6863\u3002 \u6761\u4ef6\u67e5\u8be2\uff1a \u64cd\u4f5c \u683c\u5f0f \u8303\u4f8b RDBMS\u4e2d\u7684\u7c7b\u4f3c\u8bed\u53e5 \u7b49\u4e8e {<key>:<value> } db.col.find({\"by\":\"\u9ed1\u9a6c\u7a0b\u5e8f\u5458\"}).pretty() where by = '\u9ed1\u9a6c\u7a0b\u5e8f\u5458' \u5c0f\u4e8e {<key>:{$lt:<value>}} db.col.find({\"likes\":{$lt:50}}).pretty() where likes < 50 \u5c0f\u4e8e\u6216\u7b49\u4e8e {<key>:{$lte:<value>}} db.col.find({\"likes\":{$lte:50}}).pretty() where likes <= 50 \u5927\u4e8e {<key>:{$gt:<value>}} db.col.find({\"likes\":{$gt:50}}).pretty() where likes > 50 \u5927\u4e8e\u6216\u7b49\u4e8e {<key>:{$gte:<value>}} db.col.find({\"likes\":{$gte:50}}).pretty() where likes >= 50 \u4e0d\u7b49\u4e8e {<key>:{$ne:<value>}} db.col.find({\"likes\":{$ne:50}}).pretty() where likes != 50 \u5b9e\u4f8b\uff1a #\u63d2\u5165\u6d4b\u8bd5\u6570\u636e db.user.insert ({ id:1,username: 'zhangsan' ,age:20 }) db.user.insert ({ id:2,username: 'lisi' ,age:21 }) db.user.insert ({ id:3,username: 'wangwu' ,age:22 }) db.user.insert ({ id:4,username: 'zhaoliu' ,age:22 }) db.user.find () #\u67e5\u8be2\u5168\u90e8\u6570\u636e db.user.find ({} , { id:1,username:1 }) #\u53ea\u67e5\u8be2id\u4e0eusername\u5b57\u6bb5 db.user.find () .count () #\u67e5\u8be2\u6570\u636e\u6761\u6570 db.user.find ({ id:1 }) #\u67e5\u8be2id\u4e3a1\u7684\u6570\u636e db.user.find ({ age: { $lte :21 }}) #\u67e5\u8be2\u5c0f\u4e8e\u7b49\u4e8e21\u7684\u6570\u636e db.user.find ({ age: { $lte :21 } , id: { $gte :2 }}) #and\u67e5\u8be2\uff0cage\u5c0f\u4e8e\u7b49\u4e8e21\u5e76\u4e14id\u5927\u4e8e\u7b49\u4e8e2 db.user.find ({ $or : [{ id:1 } , { id:2 }]}) #\u67e5\u8be2id=1 or id=2 #\u5206\u9875\u67e5\u8be2\uff1aSkip()\u8df3\u8fc7\u51e0\u6761\uff0climit()\u67e5\u8be2\u6761\u6570 db.user.find () .limit ( 2 ) .skip ( 1 ) #\u8df3\u8fc71\u6761\u6570\u636e\uff0c\u67e5\u8be22\u6761\u6570\u636e db.user.find () .sort ({ id:-1 }) #\u6309\u7167age\u5012\u5e8f\u6392\u5e8f\uff0c-1\u4e3a\u5012\u5e8f\uff0c1\u4e3a\u6b63\u5e8f","title":"3.3.6\u3001\u67e5\u8be2\u6570\u636e"},{"location":"tantan/day02/#34","text":"\u7d22\u5f15\u901a\u5e38\u80fd\u591f\u6781\u5927\u7684\u63d0\u9ad8\u67e5\u8be2\u7684\u6548\u7387\uff0c\u5982\u679c\u6ca1\u6709\u7d22\u5f15\uff0cMongoDB\u5728\u8bfb\u53d6\u6570\u636e\u65f6\u5fc5\u987b\u626b\u63cf\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u6587\u4ef6\u5e76\u9009\u53d6\u90a3\u4e9b\u7b26\u5408\u67e5\u8be2\u6761\u4ef6\u7684\u8bb0\u5f55\u3002 \u8fd9\u79cd\u626b\u63cf\u5168\u96c6\u5408\u7684\u67e5\u8be2\u6548\u7387\u662f\u975e\u5e38\u4f4e\u7684\uff0c\u7279\u522b\u5728\u5904\u7406\u5927\u91cf\u7684\u6570\u636e\u65f6\uff0c\u67e5\u8be2\u53ef\u4ee5\u8981\u82b1\u8d39\u51e0\u5341\u79d2\u751a\u81f3\u51e0\u5206\u949f\uff0c\u8fd9\u5bf9\u7f51\u7ad9\u7684\u6027\u80fd\u662f\u975e\u5e38\u81f4\u547d\u7684\u3002 \u7d22\u5f15\u662f\u7279\u6b8a\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7d22\u5f15\u5b58\u50a8\u5728\u4e00\u4e2a\u6613\u4e8e\u904d\u5386\u8bfb\u53d6\u7684\u6570\u636e\u96c6\u5408\u4e2d\uff0c\u7d22\u5f15\u662f\u5bf9\u6570\u636e\u5e93\u8868\u4e2d\u4e00\u5217\u6216\u591a\u5217\u7684\u503c\u8fdb\u884c\u6392\u5e8f\u7684\u4e00\u79cd\u7ed3\u6784 #\u67e5\u770b\u7d22\u5f15 > db.user.getIndexes () [ { \"v\" : 2 , \"key\" : { \"_id\" : 1 } , \"name\" : \"_id_\" , \"ns\" : \"testdb.user\" } ] #\u8bf4\u660e\uff1a1\u8868\u793a\u5347\u5e8f\u521b\u5efa\u7d22\u5f15\uff0c-1\u8868\u793a\u964d\u5e8f\u521b\u5efa\u7d22\u5f15\u3002 #\u521b\u5efa\u7d22\u5f15 > db.user.createIndex ({ 'age' :1 }) { \"createdCollectionAutomatically\" : false, \"numIndexesBefore\" : 1 , \"numIndexesAfter\" : 2 , \"ok\" : 1 } #\u5220\u9664\u7d22\u5f15 db.user.dropIndex ( \"age_1\" ) #\u6216\u8005\uff0c\u5220\u9664\u9664\u4e86_id\u4e4b\u5916\u7684\u7d22\u5f15 db.user.dropIndexes () #\u521b\u5efa\u8054\u5408\u7d22\u5f15 db.user.createIndex ({ 'age' :1, 'id' :-1 }) #\u67e5\u770b\u7d22\u5f15\u5927\u5c0f\uff0c\u5355\u4f4d\uff1a\u5b57\u8282 db.user.totalIndexSize ()","title":"3.4\u3001\u7d22\u5f15"},{"location":"tantan/day02/#35","text":"MongoDB \u67e5\u8be2\u5206\u6790\u53ef\u4ee5\u786e\u4fdd\u6211\u4eec\u5efa\u8bae\u7684\u7d22\u5f15\u662f\u5426\u6709\u6548\uff0c\u662f\u67e5\u8be2\u8bed\u53e5\u6027\u80fd\u5206\u6790\u7684\u91cd\u8981\u5de5\u5177\u3002 #\u63d2\u51651000\u6761\u6570\u636e for ( var i = 1 ; i< 1000 ; i++ ) db.user.insert ({ id:100+i,username: 'name_' +i,age:10+i }) #\u67e5\u770b\u6267\u884c\u8ba1\u5212 > db.user.find ({ age: { $gt :100 } ,id: { $lt :200 }}) .explain () { \"queryPlanner\" : { \"plannerVersion\" : 1 , \"namespace\" : \"testdb.user\" , \"indexFilterSet\" : false, \"parsedQuery\" : { \" $and \" : [ { \"id\" : { \" $lt \" : 200 } } , { \"age\" : { \" $gt \" : 100 } } ] } , \"winningPlan\" : { #\u6700\u4f73\u6267\u884c\u8ba1\u5212 \"stage\" : \"FETCH\" , #\u67e5\u8be2\u65b9\u5f0f\uff0c\u5e38\u89c1\u7684\u6709COLLSCAN/\u5168\u8868\u626b\u63cf\u3001IXSCAN/\u7d22\u5f15\u626b\u63cf\u3001FETCH/\u6839\u636e\u7d22\u5f15\u53bb\u68c0\u7d22\u6587\u6863\u3001SHARD_MERGE/\u5408\u5e76\u5206\u7247\u7ed3\u679c\u3001IDHACK/\u9488\u5bf9_id\u8fdb\u884c\u67e5\u8be2 \"inputStage\" : { \"stage\" : \"IXSCAN\" , \"keyPattern\" : { \"age\" : 1 , \"id\" : -1 } , \"indexName\" : \"age_1_id_-1\" , \"isMultiKey\" : false, \"multiKeyPaths\" : { \"age\" : [ ] , \"id\" : [ ] } , \"isUnique\" : false, \"isSparse\" : false, \"isPartial\" : false, \"indexVersion\" : 2 , \"direction\" : \"forward\" , \"indexBounds\" : { \"age\" : [ \"(100.0, inf.0]\" ] , \"id\" : [ \"(200.0, -inf.0]\" ] } } } , \"rejectedPlans\" : [ ] } , \"serverInfo\" : { \"host\" : \"c493d5ff750a\" , \"port\" : 27017 , \"version\" : \"4.0.3\" , \"gitVersion\" : \"7ea530946fa7880364d88c8d8b6026bbc9ffa48c\" } , \"ok\" : 1 } #\u6d4b\u8bd5\u6ca1\u6709\u4f7f\u7528\u7d22\u5f15 > db.user.find ({ username: 'zhangsan' }) .explain () { \"queryPlanner\" : { \"plannerVersion\" : 1 , \"namespace\" : \"testdb.user\" , \"indexFilterSet\" : false, \"parsedQuery\" : { \"username\" : { \" $eq \" : \"zhangsan\" } } , \"winningPlan\" : { \"stage\" : \"COLLSCAN\" , #\u5168\u8868\u626b\u63cf \"filter\" : { \"username\" : { \" $eq \" : \"zhangsan\" } } , \"direction\" : \"forward\" } , \"rejectedPlans\" : [ ] } , \"serverInfo\" : { \"host\" : \"c493d5ff750a\" , \"port\" : 27017 , \"version\" : \"4.0.3\" , \"gitVersion\" : \"7ea530946fa7880364d88c8d8b6026bbc9ffa48c\" } , \"ok\" : 1 }","title":"3.5\u3001\u6267\u884c\u8ba1\u5212"},{"location":"tantan/day02/#36ui","text":"Robo 3T\u662fMongoDB\u7684\u5ba2\u6237\u7aef\u5de5\u5177\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u64cd\u4f5cMongoDB\u3002 \u67e5\u770b\u6570\u636e\uff1a \u6216\u4f7f\u7528Navicat Premium 15\uff1a","title":"3.6\u3001UI\u5ba2\u6237\u7aef\u5de5\u5177"},{"location":"tantan/day02/#4springbootmongodb","text":"spring-data\u5bf9MongoDB\u505a\u4e86\u652f\u6301\uff0c\u4f7f\u7528spring-data-mongodb\u53ef\u4ee5\u7b80\u5316MongoDB\u7684\u64cd\u4f5c\u3002 \u5730\u5740\uff1ahttps://spring.io/projects/spring-data-mongodb","title":"4\u3001SpringBoot\u6574\u5408MongoDB"},{"location":"tantan/day02/#41","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-parent </artifactId> <version> 2.1.0.RELEASE </version> </parent> <groupId> cn.itcast.mongodb </groupId> <artifactId> itcast-mongodb </artifactId> <version> 1.0-SNAPSHOT </version> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-mongodb </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-test </artifactId> <scope> test </scope> </dependency> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> <optional> true </optional> <version> 1.18.4 </version> </dependency> </dependencies> <build> <plugins> <!-- java\u7f16\u8bd1\u63d2\u4ef6 --> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-compiler-plugin </artifactId> <version> 3.2 </version> <configuration> <source> 1.8 </source> <target> 1.8 </target> <encoding> UTF-8 </encoding> </configuration> </plugin> </plugins> </build> </project>","title":"4.1\u3001\u5bfc\u5165\u4f9d\u8d56"},{"location":"tantan/day02/#42applicationproperties","text":"# Spring boot application spring.application.name = itcast-mongodb #\u65e0\u8ba4\u8bc1\u4fe1\u606f\u7684\u914d\u7f6e #spring.data.mongodb.uri=mongodb://192.168.31.81:27017/tanhua #springboot \u914d\u7f6e spring.data.mongodb.username = tanhua spring.data.mongodb.password = l3SCjl0HvmSkTtiSbN0Swv40spYnHhDV spring.data.mongodb.authentication-database = admin spring.data.mongodb.database = tanhua spring.data.mongodb.port = 27018 spring.data.mongodb.host = 192.168.31.81","title":"4.2\u3001\u7f16\u5199application.properties\u914d\u7f6e\u6587\u4ef6"},{"location":"tantan/day02/#43","text":"package cn.itcast.mongodb.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; @Data @AllArgsConstructor @NoArgsConstructor public class Person { private ObjectId id ; private String name ; private int age ; private Address address ; } package cn.itcast.mongodb.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @AllArgsConstructor @NoArgsConstructor public class Address { private String street ; private String city ; private String zip ; }","title":"4.3\u3001\u7f16\u5199\u5b9e\u4f53"},{"location":"tantan/day02/#44dao","text":"package cn.itcast.mongodb.dao ; import cn.itcast.mongodb.pojo.Person ; import com.mongodb.client.result.DeleteResult ; import com.mongodb.client.result.UpdateResult ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.mongodb.core.MongoTemplate ; import org.springframework.data.mongodb.core.query.Criteria ; import org.springframework.data.mongodb.core.query.Query ; import org.springframework.data.mongodb.core.query.Update ; import org.springframework.stereotype.Component ; import java.util.List ; @Component public class PersonDao { @Autowired private MongoTemplate mongoTemplate ; public void savePerson ( Person person ) { this . mongoTemplate . save ( person ); } public List < Person > queryPersonListByName ( String name ) { Query query = Query . query ( Criteria . where ( \"name\" ). is ( name )); return this . mongoTemplate . find ( query , Person . class ); } public List < Person > queryPersonPageList ( Integer page , Integer rows ) { Query query = new Query (). limit ( rows ). skip (( page - 1 ) * rows ); return this . mongoTemplate . find ( query , Person . class ); } public UpdateResult update ( Person person ) { Query query = Query . query ( Criteria . where ( \"id\" ). is ( person . getId ())); Update update = Update . update ( \"age\" , person . getAge ()); return this . mongoTemplate . updateFirst ( query , update , Person . class ); } public DeleteResult deleteById ( String id ) { Query query = Query . query ( Criteria . where ( \"id\" ). is ( id )); return this . mongoTemplate . remove ( query , Person . class ); } }","title":"4.4\u3001\u7f16\u5199dao"},{"location":"tantan/day02/#45","text":"package cn.itcast.mongodb ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @SpringBootApplication public class MongoApplication { public static void main ( String [] args ) { SpringApplication . run ( MongoApplication . class , args ); } }","title":"4.5\u3001\u7f16\u5199\u542f\u52a8\u7c7b"},{"location":"tantan/day02/#46","text":"package cn.itcast.mongodb ; import cn.itcast.mongodb.dao.PersonDao ; import cn.itcast.mongodb.pojo.Address ; import cn.itcast.mongodb.pojo.Person ; import org.bson.types.ObjectId ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; import java.util.List ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestPersonDao { @Autowired private PersonDao personDao ; @Test public void testSave () { Person person = new Person ( ObjectId . get (), \"\u5f20\u4e09\" , 20 , new Address ( \"\u4eba\u6c11\u8def\" , \"\u4e0a\u6d77\u5e02\" , \"666666\" )); this . personDao . savePerson ( person ); } @Test public void testQuery () { List < Person > personList = this . personDao . queryPersonListByName ( \"\u5f20\u4e09\" ); for ( Person person : personList ) { System . out . println ( person ); } } @Test public void testQuery2 () { List < Person > personList = this . personDao . queryPersonPageList ( 2 , 2 ); for ( Person person : personList ) { System . out . println ( person ); } } @Test public void testUpdate () { Person person = new Person (); person . setId ( new ObjectId ( \"5c0956ce235e192520086736\" )); person . setAge ( 30 ); this . personDao . update ( person ); } @Test public void testDelete () { this . personDao . deleteById ( \"5c09ca05235e192d8887a389\" ); } }","title":"4.6\u3001\u7f16\u5199\u5355\u5143\u6d4b\u8bd5"},{"location":"tantan/day02/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/","text":"\u638c\u63e1\u963f\u91cc\u4e91OSS\u7684\u5e94\u7528 \u638c\u63e1\u4eba\u8138\u8bc6\u522b\u6280\u672f\u7684\u4f7f\u7528 \u72ec\u7acb\u5b8c\u6210\u767b\u5f55\u7684\u529f\u80fd \u72ec\u7acb\u5b8c\u6210\u5b8c\u5584\u4e2a\u4eba\u4fe1\u606f\u529f\u80fd \u5b8c\u6210MongoDB\u7684\u90e8\u7f72 \u638c\u63e1MongoDB\u7684CRUD \u638c\u63e1SpringBoot\u6574\u5408MongoDB","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"tantan/day03/","text":"\u8bfe\u7a0b\u8bf4\u660e \u00b6 \u9996\u9875\u529f\u80fd\u8bf4\u660e \u7cfb\u7edf\u67b6\u6784\u8bf4\u660e \u5b9e\u73b0\u4eca\u65e5\u4f73\u4eba\u529f\u80fd \u5b9e\u73b0\u63a8\u8350\u7528\u6237\u7684\u5217\u8868 \u63a5\u53e3\u589e\u52a0\u7f13\u5b58\u529f\u80fd \u6574\u5408\u524d\u7aef\u8054\u8c03\u6d4b\u8bd5 1\u3001\u9996\u9875 \u00b6 \u5728\u7528\u6237\u767b\u5f55\u6210\u529f\u540e\uff0c\u5c31\u4f1a\u8fdb\u5165\u9996\u9875\uff0c\u9996\u9875\u4e2d\u6709\u4eca\u65e5\u4f73\u4eba\u3001\u63a8\u8350\u597d\u53cb\u3001\u63a2\u82b1\u3001\u641c\u9644\u8fd1\u7b49\u529f\u80fd\u3002 2\u3001\u7cfb\u7edf\u67b6\u6784 \u00b6 \u5728\u5f00\u53d1\u5b8cSSO\u7cfb\u7edf\u4e2d\u7684\u767b\u5f55\u529f\u80fd\u540e\uff0c\u63a5\u4e0b\u6765\u5c31\u9700\u8981\u5b9e\u73b0\u5176\u4ed6\u7684\u529f\u80fd\uff0c\u5728\u6574\u4f53\u67b6\u6784\u4e2d\uff0c\u5b8c\u6210\u4e0eAPP\u5bf9\u63a5\u7684\u670d\u52a1\u5de5\u7a0b\u53ebmy-tanhua-server\uff0c\u771f\u6b63\u7684\u6838\u5fc3\u4e1a\u52a1\u903b\u8f91\u4f7f\u7528dubbo\u5b8c\u6210\uff0c\u5176\u5de5\u7a0b\u540d\u53eb\uff1amy-tanhua-dubbo\uff0c\u5b83\u4eec\u7684\u67b6\u6784\u793a\u610f\u56fe\u5982\u4e0b\uff1a \u8bf4\u660e\uff1a \u5ba2\u6237\u7aefAPP\u53d1\u8d77\u8bf7\u6c42\u5230Nginx\uff0c\u5728Nginx\u4e2d\u5bf9\u8bf7\u6c42\u505a\u51fa\u5224\u65ad\uff0c\u5c06\u8bf7\u6c42\u8f6c\u53d1\u81f3sso\u7cfb\u7edf\u6216server\u7cfb\u7edf\u3002 sso\u7cfb\u7edf\u4e2d\uff0c\u5c06\u5bf9\u63a5\u7b2c\u4e09\u65b9\u5e73\u53f0\u4ee5\u53ca\u5b8c\u6210\u6570\u636e\u7684\u7f13\u5b58\u3001\u6d88\u606f\u53d1\u9001\u3001\u7528\u6237\u7684\u6ce8\u518c\u767b\u5f55\u529f\u80fd\u3002 server\u7cfb\u7edf\u4e3aAPP\u63d0\u4f9b\u4e86\u63a5\u53e3\u670d\u52a1\u7684\u652f\u6491 \u7528\u6237\u8bf7\u6c42\u4e2d\u643a\u5e26\u7684token\u9700\u8981\u5230sso\u7cfb\u7edf\u4e2d\u8fdb\u884c\u6821\u9a8c \u901a\u8fc7rpc\u8c03\u7528dubbo\u4e2d\u63d0\u4f9b\u7684\u670d\u52a1\uff0c\u5728dubbo\u670d\u52a1\u4e2d\u4e0eMongoDB\u5bf9\u63a5\uff0c\u5b8c\u6210\u6570\u636e\u7684CRUD\u64cd\u4f5c \u5c06\u4e00\u4e9b\u6570\u636e\u7f13\u5b58\u5230Redis\uff0c\u4ece\u800c\u63d0\u5347\u6570\u636e\u67e5\u8be2\u6027\u80fd \u7528\u6237\u6570\u636e\u7684\u67e5\u8be2\u5c06\u57fa\u4e8eMySQL\u6570\u636e\u5e93\u8fdb\u884c\u67e5\u8be2 2.1\u3001nginx\u670d\u52a1 \u00b6 2.1.1\u3001\u90e8\u7f72\u5b89\u88c5 \u00b6 \u5b89\u88c5\u5305\u5728\u8d44\u6599\u4e2d\uff1anginx-1.17.3.zip \u5b89\u88c5\u5728\u4efb\u610f\u76ee\u5f55\uff0c\u901a\u8fc7\u547d\u4ee4\uff1astart nginx.exe \u542f\u52a8\uff1a \u91cd\u542f\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\u547d\u4ee4\uff1anginx.exe -s reload 2.1.2\u3001\u914d\u7f6e \u00b6 \u4fee\u6539conf\u76ee\u5f55\u4e0b\u7684nginx.conf\u6587\u4ef6\uff1a #user nobody; worker_processes 1 ; #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; #pid logs/nginx.pid; events { worker_connections 1024 ; } http { include mime.types ; default_type application/octet-stream ; #log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' # '$status $body_bytes_sent \"$http_referer\" ' # '\"$http_user_agent\" \"$http_x_forwarded_for\"'; #access_log logs/access.log main; sendfile on ; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65 ; #gzip on; server { listen 80 ; server_name localhost ; #charset koi8-r; #access_log logs/host.access.log main; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html ; location = /50x.html { root html ; } location /user/ { #\u8bf7\u6c42\u8def\u5f84\u4e2d\u51e1\u662f\u4ee5/user/\u5f00\u5934\u7684\u8bf7\u6c42\uff0c\u8f6c\u53d1\u5230sso\u7cfb\u7edf client_max_body_size 300m ; #\u8bbe\u7f6e\u6700\u5927\u7684\u8bf7\u6c42\u4f53\u5927\u5c0f\uff0c\u89e3\u51b3\u5927\u6587\u4ef6\u4e0a\u4f20\u4e0d\u4e86\u7684\u95ee\u9898 proxy_connect_timeout 300s ; #\u4ee3\u7406\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4 proxy_send_timeout 300s ; #\u4ee3\u7406\u53d1\u9001\u6570\u636e\u7684\u8d85\u65f6\u65f6\u95f4 proxy_read_timeout 300s ; #\u4ee3\u7406\u8bfb\u53d6\u6570\u636e\u7684\u8d85\u65f6\u65f6\u95f4 proxy_pass http://127.0.0.1:18080 ; #\u8f6c\u53d1\u8bf7\u6c42 } location / { #\u4e0a\u9762\u672a\u5339\u914d\u5230\u7684\u5728\u8fd9\u91cc\u5904\u7406 client_max_body_size 300m ; proxy_connect_timeout 300s ; proxy_send_timeout 300s ; proxy_read_timeout 300s ; proxy_pass http://127.0.0.1:18081 ; #\u8f6c\u53d1\u8bf7\u6c42\u5230server\u7cfb\u7edf } } } 2.1.3\u3001\u6d4b\u8bd5 \u00b6 2.2\u3001\u642d\u5efaserver\u5de5\u7a0b \u00b6 2.2.1\u3001\u5bfc\u5165\u4f9d\u8d56 \u00b6 pom.xml\u6587\u4ef6\uff1a <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> my-tanhua </artifactId> <groupId> cn.itcast.tanhua </groupId> <version> 1.0-SNAPSHOT </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> my-tanhua-server </artifactId> <dependencies> <dependency> <groupId> cn.itcast.tanhua </groupId> <artifactId> my-tanhua-dubbo-interface </artifactId> <version> 1.0-SNAPSHOT </version> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-test </artifactId> <scope> test </scope> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-redis </artifactId> </dependency> <!--dubbo\u7684springboot\u652f\u6301--> <dependency> <groupId> com.alibaba.boot </groupId> <artifactId> dubbo-spring-boot-starter </artifactId> </dependency> <!--dubbo\u6846\u67b6--> <dependency> <groupId> com.alibaba </groupId> <artifactId> dubbo </artifactId> </dependency> <!--zk\u4f9d\u8d56--> <dependency> <groupId> org.apache.zookeeper </groupId> <artifactId> zookeeper </artifactId> </dependency> <dependency> <groupId> com.github.sgroschupf </groupId> <artifactId> zkclient </artifactId> </dependency> <dependency> <groupId> org.apache.commons </groupId> <artifactId> commons-lang3 </artifactId> </dependency> <dependency> <groupId> org.apache.commons </groupId> <artifactId> commons-collections4 </artifactId> <version> 4.4 </version> </dependency> <dependency> <groupId> com.baomidou </groupId> <artifactId> mybatis-plus </artifactId> </dependency> <dependency> <groupId> com.baomidou </groupId> <artifactId> mybatis-plus-boot-starter </artifactId> </dependency> <dependency> <groupId> mysql </groupId> <artifactId> mysql-connector-java </artifactId> </dependency> <dependency> <groupId> commons-io </groupId> <artifactId> commons-io </artifactId> <version> 2.6 </version> </dependency> <dependency> <groupId> commons-codec </groupId> <artifactId> commons-codec </artifactId> </dependency> </dependencies> </project> 2.2.2\u3001application.properties \u00b6 spring.application.name = itcast-tanhua-server server.port = 18081 #\u6570\u636e\u5e93\u8fde\u63a5\u4fe1\u606f spring.datasource.driver-class-name = com.mysql.jdbc.Driver spring.datasource.url = jdbc:mysql://192.168.31.81:3306/mytanhua?useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true&useSSL=false spring.datasource.username = root spring.datasource.password = root # \u679a\u4e3e\u5305\u626b\u63cf mybatis-plus.type-enums-package = com.tanhua.server.enums # \u8868\u540d\u524d\u7f00 mybatis-plus.global-config.db-config.table-prefix = tb_ # id\u7b56\u7565\u4e3a\u81ea\u589e\u957f mybatis-plus.global-config.db-config.id-type = auto #dubbo\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e dubbo.application.name = itcast-tanhua-server dubbo.registry.address = zookeeper://192.168.31.81:2181 dubbo.registry.client = zkclient dubbo.registry.timeout = 60000 dubbo.consumer.timeout = 60000 #sso\u7cfb\u7edf\u670d\u52a1\u5730\u5740 tanhua.sso.url = http://127.0.0.1 #\u9ed8\u8ba4\u4eca\u65e5\u4f73\u4eba\u63a8\u8350\u7528\u6237 tanhua.sso.default.user = 2 2.2.3\u3001ServerApplication \u00b6 package com.tanhua.server ; import org.mybatis.spring.annotation.MapperScan ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @MapperScan ( \"com.tanhua.server.mapper\" ) //\u8bbe\u7f6emapper\u63a5\u53e3\u7684\u626b\u63cf\u5305 @SpringBootApplication public class ServerApplication { public static void main ( String [] args ) { SpringApplication . run ( ServerApplication . class , args ); } } 2.3\u3001\u642d\u5efadubbo\u5de5\u7a0b \u00b6 my-tanhua-dubbo\u662fdubbo\u5de5\u7a0b\u7684\u7236\u5de5\u7a0b\uff1a ~~~xml my-tanhua cn.itcast.tanhua 1.0-SNAPSHOT 4.0.0 <artifactId> my-tanhua-dubbo </artifactId> <packaging> pom </packaging> <modules> <module> my-tanhua-dubbo-interface </module> <module> my-tanhua-dubbo-service </module> </modules> ~~~ 2.3.1\u3001\u521b\u5efamy-tanhua-dubbo-interface\u5de5\u7a0b \u00b6 \u8be5\u5de5\u7a0b\u4e2d\u5b9a\u4e49\u4e86dubbo\u670d\u52a1\u4e2d\u7684interface\u4e0e\u5b9e\u4f53\u5bf9\u8c61\u3002 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> my-tanhua-dubbo </artifactId> <groupId> cn.itcast.tanhua </groupId> <version> 1.0-SNAPSHOT </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> my-tanhua-dubbo-interface </artifactId> <dependencies> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-mongodb </artifactId> </dependency> </dependencies> </project> 2.3.2\u3001\u521b\u5efamy-tanhua-dubbo-service\u5de5\u7a0b \u00b6 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> my-tanhua-dubbo </artifactId> <groupId> cn.itcast.tanhua </groupId> <version> 1.0-SNAPSHOT </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> my-tanhua-dubbo-service </artifactId> <dependencies> <!--\u5f15\u5165interface\u4f9d\u8d56--> <dependency> <groupId> cn.itcast.tanhua </groupId> <artifactId> my-tanhua-dubbo-interface </artifactId> <version> 1.0-SNAPSHOT </version> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-test </artifactId> <scope> test </scope> </dependency> <!--dubbo\u7684springboot\u652f\u6301--> <dependency> <groupId> com.alibaba.boot </groupId> <artifactId> dubbo-spring-boot-starter </artifactId> </dependency> <!--dubbo\u6846\u67b6--> <dependency> <groupId> com.alibaba </groupId> <artifactId> dubbo </artifactId> </dependency> <!--zk\u4f9d\u8d56--> <dependency> <groupId> org.apache.zookeeper </groupId> <artifactId> zookeeper </artifactId> </dependency> <dependency> <groupId> com.github.sgroschupf </groupId> <artifactId> zkclient </artifactId> </dependency> <!--MongoDB\u76f8\u5173\u4f9d\u8d56--> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-mongodb </artifactId> </dependency> <dependency> <groupId> org.mongodb </groupId> <artifactId> mongodb-driver-sync </artifactId> </dependency> <!--\u5176\u4ed6\u5de5\u5177\u5305\u4f9d\u8d56--> <dependency> <groupId> org.apache.commons </groupId> <artifactId> commons-lang3 </artifactId> </dependency> <dependency> <groupId> joda-time </groupId> <artifactId> joda-time </artifactId> </dependency> <dependency> <groupId> io.netty </groupId> <artifactId> netty-all </artifactId> </dependency> </dependencies> </project> application.properties\uff1a # Spring boot application spring.application.name = itcast-tanhua-dubbo-service # dubbo \u626b\u63cf\u5305\u914d\u7f6e dubbo.scan.basePackages = com.tanhua.dubbo.server dubbo.application.name = dubbo-provider-tanhua #dubbo \u5bf9\u5916\u66b4\u9732\u7684\u7aef\u53e3\u4fe1\u606f dubbo.protocol.name = dubbo dubbo.protocol.port = 20880 #dubbo\u6ce8\u518c\u4e2d\u5fc3\u7684\u914d\u7f6e dubbo.registry.address = zookeeper://192.168.31.81:2181 dubbo.registry.client = zkclient dubbo.registry.timeout = 60000 #springboot MongoDB\u914d\u7f6e spring.data.mongodb.username = tanhua spring.data.mongodb.password = l3SCjl0HvmSkTtiSbN0Swv40spYnHhDV spring.data.mongodb.authentication-database = admin spring.data.mongodb.database = tanhua spring.data.mongodb.port = 27017 spring.data.mongodb.host = 192.168.31.81 \u7f16\u5199\u542f\u52a8\u7c7b\uff1a package com.tanhua.dubbo.server ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @SpringBootApplication public class DubboApplication { public static void main ( String [] args ) { SpringApplication . run ( DubboApplication . class , args ); } } 2.4\u3001\u5de5\u7a0b\u7ed3\u6784 \u00b6 \u6700\u7ec8\u642d\u5efa\u5b8c\u6210\u7684\u6548\u679c\u5982\u4e0b\uff1a 3\u3001\u4eca\u65e5\u4f73\u4eba \u00b6 \u4eca\u65e5\u4f73\u4eba\uff0c\u4f1a\u63a8\u8350\u7f18\u5206\u503c\u6700\u5927\u7684\u7528\u6237\uff0c\u8fdb\u884c\u5c55\u73b0\u51fa\u6765\u3002\u7f18\u5206\u503c\u7684\u8ba1\u7b97\u662f\u7531\u7528\u6237\u7684\u884c\u4e3a\u8fdb\u884c\u6253\u5206\uff0c\u5982\uff1a\u70b9\u51fb\u3001\u70b9\u8d5e\u3001\u8bc4\u8bba\u3001\u5b66\u5386\u3001\u5a5a\u59fb\u72b6\u6001\u7b49\u4fe1\u606f\u7ec4\u5408\u800c\u6210\u7684\u3002 \u5b9e\u73b0\uff1a\u6211\u4eec\u5148\u4e0d\u8003\u8651\u63a8\u8350\u7684\u903b\u8f91\uff0c\u5047\u8bbe\u73b0\u5728\u5df2\u7ecf\u6709\u63a8\u8350\u7684\u7ed3\u679c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4ece\u7ed3\u679c\u4e2d\u67e5\u8be2\u5230\u7f18\u5206\u503c\u6700\u9ad8\u7684\u7528\u6237\u5c31\u53ef\u4ee5\u4e86\u3002\u81f3\u4e8e\u63a8\u8350\u7684\u903b\u8f91\u4ee5\u53ca\u5b9e\u73b0\uff0c\u6211\u4eec\u5c06\u540e\u9762\u7684\u8bfe\u7a0b\u4e2d\u8bb2\u89e3\u3002 \u6d41\u7a0b\uff1a 3.1\u3001\u8868\u7ed3\u6784 \u00b6 #\u8868\u7ed3\u6784\uff0c\u8868\u540d\uff1arecommend_user { \"userId\" :1001, #\u63a8\u8350\u7684\u7528\u6237id \"toUserId\" :1002, #\u7528\u6237id \"score\" :90, #\u63a8\u8350\u5f97\u5206 \"date\" : \"2019/1/1\" #\u65e5\u671f } \u5df2\u7ecf\u63d0\u4f9b\u7684\u6d4b\u8bd5\u6570\u636e\uff084855\u6761\u6570\u636e\uff09\uff1a 3.2\u3001\u7f16\u5199dubbo\u670d\u52a1 \u00b6 3.2.1\u3001\u7f16\u5199\u63a5\u53e3 \u00b6 \u5728my-tanhua-dubbo-interface\u5de5\u7a0b\u4e2d\u5b9a\u4e49\u63a5\u53e3\uff1a package com.tanhua.dubbo.server.api ; import com.tanhua.dubbo.server.vo.PageInfo ; import com.tanhua.dubbo.server.pojo.RecommendUser ; public interface RecommendUserApi { /** * \u67e5\u8be2\u4e00\u4f4d\u5f97\u5206\u6700\u9ad8\u7684\u63a8\u8350\u7528\u6237 * * @param userId * @return */ RecommendUser queryWithMaxScore ( Long userId ); /** * \u6309\u7167\u5f97\u5206\u5012\u5e8f * * @param userId * @param pageNum * @param pageSize * @return */ PageInfo < RecommendUser > queryPageInfo ( Long userId , Integer pageNum , Integer pageSize ); } package com.tanhua.dubbo.server.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.annotation.Id ; import org.springframework.data.mongodb.core.index.Indexed ; import org.springframework.data.mongodb.core.mapping.Document ; @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"recommend_user\" ) public class RecommendUser implements java . io . Serializable { private static final long serialVersionUID = - 4296017160071130962L ; @Id private ObjectId id ; //\u4e3b\u952eid @Indexed private Long userId ; //\u63a8\u8350\u7684\u7528\u6237id private Long toUserId ; //\u7528\u6237id @Indexed private Double score ; //\u63a8\u8350\u5f97\u5206 private String date ; //\u65e5\u671f } package com.tanhua.dubbo.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import java.util.Collections ; import java.util.List ; @Data @AllArgsConstructor public class PageInfo < T > implements java . io . Serializable { private static final long serialVersionUID = - 2105385689859184204L ; /** * \u603b\u6761\u6570 */ private Integer total = 0 ; /** * \u5f53\u524d\u9875 */ private Integer pageNum = 0 ; /** * \u4e00\u9875\u663e\u793a\u7684\u5927\u5c0f */ private Integer pageSize = 0 ; /** * \u6570\u636e\u5217\u8868 */ private List < T > records = Collections . emptyList (); } 3.2.2\u3001\u7f16\u5199\u5b9e\u73b0 \u00b6 package com.tanhua.dubbo.server.api ; import com.alibaba.dubbo.config.annotation.Service ; import com.tanhua.dubbo.server.pojo.RecommendUser ; import com.tanhua.dubbo.server.vo.PageInfo ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.domain.PageRequest ; import org.springframework.data.domain.Sort ; import org.springframework.data.mongodb.core.MongoTemplate ; import org.springframework.data.mongodb.core.query.Criteria ; import org.springframework.data.mongodb.core.query.Query ; import java.util.List ; @Service ( version = \"1.0.0\" ) //\u7533\u660e\u8fd9\u662f\u4e00\u4e2adubbo\u670d\u52a1 public class RecommendUserApiImpl implements RecommendUserApi { @Autowired private MongoTemplate mongoTemplate ; @Override public RecommendUser queryWithMaxScore ( Long userId ) { //\u67e5\u8be2\u5f97\u5206\u6700\u9ad8\u7684\u7528\u6237\uff0c\u6309\u7167\u5f97\u5206\u5012\u5e8f\u6392\u5e8f Query query = Query . query ( Criteria . where ( \"toUserId\" ). is ( userId )) . with ( Sort . by ( Sort . Order . desc ( \"score\" ))). limit ( 1 ); return this . mongoTemplate . findOne ( query , RecommendUser . class ); } @Override public PageInfo < RecommendUser > queryPageInfo ( Long userId , Integer pageNum , Integer pageSize ) { //\u5206\u9875\u5e76\u4e14\u6392\u5e8f\u53c2\u6570 PageRequest pageRequest = PageRequest . of ( pageNum - 1 , pageSize , Sort . by ( Sort . Order . desc ( \"score\" ))); //\u67e5\u8be2\u53c2\u6570 Query query = Query . query ( Criteria . where ( \"toUserId\" ). is ( userId )). with ( pageRequest ); List < RecommendUser > recommendUserList = this . mongoTemplate . find ( query , RecommendUser . class ); //\u6682\u65f6\u4e0d\u63d0\u4f9b\u6570\u636e\u603b\u6570 return new PageInfo <> ( 0 , pageNum , pageSize , recommendUserList ); } } 3.2.3\u3001\u6d4b\u8bd5 \u00b6 package com.tanhua.dubbo.server.api ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestRecommendUserApi { @Autowired private RecommendUserApi recommendUserApi ; @Test public void testQueryWithMaxScore (){ System . out . println ( this . recommendUserApi . queryWithMaxScore ( 1L )); System . out . println ( this . recommendUserApi . queryWithMaxScore ( 8L )); System . out . println ( this . recommendUserApi . queryWithMaxScore ( 26L )); } @Test public void testQueryPageInfo (){ System . out . println ( this . recommendUserApi . queryPageInfo ( 1L , 1 , 5 )); System . out . println ( this . recommendUserApi . queryPageInfo ( 1L , 2 , 5 )); System . out . println ( this . recommendUserApi . queryPageInfo ( 1L , 3 , 5 )); } } 3.3\u3001\u5b9e\u73b0\u4eca\u65e5\u4f73\u4eba\u670d\u52a1 \u00b6 3.3.1\u3001mock\u670d\u52a1 \u00b6 \u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/617 3.3.2\u3001\u57fa\u7840\u4ee3\u7801 \u00b6 3.3.2.1\u3001SexEnum \u00b6 package com.tanhua.server.enums ; import com.baomidou.mybatisplus.core.enums.IEnum ; public enum SexEnum implements IEnum < Integer > { MAN ( 1 , \"\u7537\" ), WOMAN ( 2 , \"\u5973\" ), UNKNOWN ( 3 , \"\u672a\u77e5\" ); private int value ; private String desc ; SexEnum ( int value , String desc ) { this . value = value ; this . desc = desc ; } @Override public Integer getValue () { return this . value ; } @Override public String toString () { return this . desc ; } } 3.3.2.2\u3001BasePojo \u00b6 package com.tanhua.server.pojo ; import com.baomidou.mybatisplus.annotation.FieldFill ; import com.baomidou.mybatisplus.annotation.TableField ; import java.util.Date ; public abstract class BasePojo { @TableField ( fill = FieldFill . INSERT ) private Date created ; @TableField ( fill = FieldFill . INSERT_UPDATE ) private Date updated ; } 3.3.2.3\u3001User \u00b6 package com.tanhua.server.pojo ; import com.fasterxml.jackson.annotation.JsonIgnore ; import com.fasterxml.jackson.annotation.JsonIgnoreProperties ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor @JsonIgnoreProperties ( ignoreUnknown = true ) public class User extends BasePojo { private Long id ; private String mobile ; //\u624b\u673a\u53f7 @JsonIgnore private String password ; //\u5bc6\u7801\uff0cjson\u5e8f\u5217\u5316\u65f6\u5ffd\u7565 } 3.3.2.4\u3001UserInfo \u00b6 package com.tanhua.server.pojo ; import com.tanhua.server.enums.SexEnum ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class UserInfo extends BasePojo { private Long id ; private Long userId ; //\u7528\u6237id private String nickName ; //\u6635\u79f0 private String logo ; //\u7528\u6237\u5934\u50cf private String tags ; //\u7528\u6237\u6807\u7b7e\uff1a\u591a\u4e2a\u7528\u9017\u53f7\u5206\u9694 private SexEnum sex ; //\u6027\u522b private Integer age ; //\u5e74\u9f84 private String edu ; //\u5b66\u5386 private String city ; //\u57ce\u5e02 private String birthday ; //\u751f\u65e5 private String coverPic ; // \u5c01\u9762\u56fe\u7247 private String industry ; //\u884c\u4e1a private String income ; //\u6536\u5165 private String marriage ; //\u5a5a\u59fb\u72b6\u6001 } 3.3.3\u3001\u5b9e\u73b0\u529f\u80fd \u00b6 \u5b9e\u73b0\u63cf\u8ff0\uff1a \u9700\u8981\u6839\u636e\u524d\u7aef\u5b9a\u4e49\u7684\u7ed3\u6784\u5b9a\u4e49java\u5bf9\u8c61 \u6839\u636esso\u7cfb\u7edf\u63d0\u4f9b\u7684\u63a5\u53e3\u67e5\u8be2\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u4fe1\u606f \u6839\u636edubbo\u7cfb\u7edf\u63d0\u4f9b\u7684\u670d\u52a1\u8fdb\u884c\u67e5\u8be2\u4eca\u65e5\u4f73\u4eba\u6570\u636e 3.3.3.1\u3001TodayBest \u00b6 package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; /** * \u4eca\u65e5\u4f73\u4eba */ @Data @NoArgsConstructor @AllArgsConstructor public class TodayBest { private Long id ; private String avatar ; private String nickname ; private String gender ; //\u6027\u522b man woman private Integer age ; private String [] tags ; private Long fateValue ; //\u7f18\u5206\u503c } 3.3.3.2\u3001TodayBestController \u00b6 package com.tanhua.server.controller ; import com.tanhua.server.service.TodayBestService ; import com.tanhua.server.vo.TodayBest ; import lombok.extern.slf4j.Slf4j ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.bind.annotation.RequestHeader ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RestController ; @RestController @RequestMapping ( \"tanhua\" ) @Slf4j public class TodayBestController { @Autowired private TodayBestService todayBestService ; /** * \u67e5\u8be2\u4eca\u65e5\u4f73\u4eba * * @param token * @return */ @GetMapping ( \"todayBest\" ) public ResponseEntity < TodayBest > queryTodayBest ( @RequestHeader ( \"Authorization\" ) String token ) { try { TodayBest todayBest = this . todayBestService . queryTodayBest ( token ); if ( null != todayBest ) { return ResponseEntity . ok ( todayBest ); } } catch ( Exception e ) { log . error ( \"\u67e5\u8be2\u4eca\u65e5\u4f73\u4eba\u51fa\u9519~ token = \" + token , e ); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). body ( null ); } } 3.3.3.3\u3001TodayBestService \u00b6 package com.tanhua.server.service ; import com.tanhua.server.pojo.User ; import com.tanhua.server.pojo.UserInfo ; import com.tanhua.server.vo.TodayBest ; import org.apache.commons.lang3.StringUtils ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.beans.factory.annotation.Value ; import org.springframework.stereotype.Service ; @Service public class TodayBestService { @Autowired private UserService userService ; @Autowired private RecommendUserService recommendUserService ; @Autowired private UserInfoService userInfoService ; @Value ( \"${tanhua.sso.default.user}\" ) private Long defaultUser ; public TodayBest queryTodayBest ( String token ) { //\u6821\u9a8ctoken\u662f\u5426\u6709\u6548\uff0c\u901a\u8fc7SSO\u7684\u63a5\u53e3\u8fdb\u884c\u6821\u9a8c User user = this . userService . queryUserByToken ( token ); if ( null == user ) { //token\u975e\u6cd5\u6216\u5df2\u7ecf\u8fc7\u671f return null ; } //\u67e5\u8be2\u63a8\u8350\u7528\u6237\uff08\u4eca\u65e5\u4f73\u4eba\uff09 TodayBest todayBest = this . recommendUserService . queryTodayBest ( user . getId ()); if ( null == todayBest ){ //\u7ed9\u51fa\u9ed8\u8ba4\u7684\u63a8\u8350\u7528\u6237 todayBest = new TodayBest (); todayBest . setId ( defaultUser ); todayBest . setFateValue ( 80L ); //\u56fa\u5b9a\u503c } //\u8865\u5168\u4e2a\u4eba\u4fe1\u606f UserInfo userInfo = this . userInfoService . queryUserInfoByUserId ( todayBest . getId ()); if ( null == userInfo ){ return null ; } todayBest . setAvatar ( userInfo . getLogo ()); todayBest . setNickname ( userInfo . getNickName ()); todayBest . setTags ( StringUtils . split ( userInfo . getTags (), ',' )); todayBest . setGender ( userInfo . getSex (). getValue () == 1 ? \"man\" : \"woman\" ); todayBest . setAge ( userInfo . getAge ()); return todayBest ; } } 3.3.3.4\u3001UserService \u00b6 package com.tanhua.server.service ; import com.fasterxml.jackson.databind.ObjectMapper ; import com.tanhua.server.pojo.User ; import lombok.extern.slf4j.Slf4j ; import org.apache.commons.lang3.StringUtils ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.beans.factory.annotation.Value ; import org.springframework.stereotype.Service ; import org.springframework.web.client.RestTemplate ; @Service @Slf4j public class UserService { @Autowired private RestTemplate restTemplate ; @Value ( \"${tanhua.sso.url}\" ) private String ssoUrl ; private static final ObjectMapper MAPPER = new ObjectMapper (); /** * \u901a\u8fc7sso\u7684rest\u63a5\u53e3\u67e5\u8be2 * * @param token * @return */ public User queryUserByToken ( String token ) { String url = ssoUrl + \"/user/\" + token ; try { String data = this . restTemplate . getForObject ( url , String . class ); if ( StringUtils . isEmpty ( data )) { return null ; } return MAPPER . readValue ( data , User . class ); } catch ( Exception e ) { log . error ( \"\u6821\u9a8ctoken\u51fa\u9519\uff0ctoken = \" + token , e ); } return null ; } } package com.tanhua.server.config ; import org.springframework.context.annotation.Bean ; import org.springframework.context.annotation.Configuration ; import org.springframework.http.client.ClientHttpRequestFactory ; import org.springframework.http.client.SimpleClientHttpRequestFactory ; import org.springframework.http.converter.StringHttpMessageConverter ; import org.springframework.web.client.RestTemplate ; import java.nio.charset.Charset ; @Configuration public class RestTemplateConfig { @Bean public RestTemplate restTemplate ( ClientHttpRequestFactory factory ) { RestTemplate restTemplate = new RestTemplate ( factory ); // \u652f\u6301\u4e2d\u6587\u7f16\u7801 restTemplate . getMessageConverters (). set ( 1 , new StringHttpMessageConverter ( Charset . forName ( \"UTF-8\" ))); return restTemplate ; } @Bean public ClientHttpRequestFactory simpleClientHttpRequestFactory () { SimpleClientHttpRequestFactory factory = new SimpleClientHttpRequestFactory (); factory . setReadTimeout ( 5000 ); //\u5355\u4f4d\u4e3ams factory . setConnectTimeout ( 5000 ); //\u5355\u4f4d\u4e3ams return factory ; } } 3.3.3.5\u3001RecommendUserService \u00b6 package com.tanhua.server.service ; import com.alibaba.dubbo.config.annotation.Reference ; import com.tanhua.dubbo.server.api.RecommendUserApi ; import com.tanhua.dubbo.server.pojo.RecommendUser ; import com.tanhua.server.vo.TodayBest ; import org.springframework.stereotype.Service ; /** * \u8d1f\u8d23\u4e0edubbo\u670d\u52a1\u8fdb\u884c\u4ea4\u4e92 */ @Service public class RecommendUserService { @Reference ( version = \"1.0.0\" ) private RecommendUserApi recommendUserApi ; public TodayBest queryTodayBest ( Long userId ) { RecommendUser recommendUser = this . recommendUserApi . queryWithMaxScore ( userId ); if ( null == recommendUser ){ return null ; } TodayBest todayBest = new TodayBest (); todayBest . setId ( recommendUser . getUserId ()); //\u7f18\u5206\u503c double score = Math . floor ( recommendUser . getScore ()); //\u53d6\u6574,98.2 -> 98 todayBest . setFateValue ( Double . valueOf ( score ). longValue ()); return todayBest ; } } 3.3.3.6\u3001UserInfoService \u00b6 package com.tanhua.server.service ; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper ; import com.tanhua.server.mapper.UserInfoMapper ; import com.tanhua.server.pojo.UserInfo ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; @Service public class UserInfoService { @Autowired private UserInfoMapper userInfoMapper ; public UserInfo queryUserInfoByUserId ( Long userId ) { QueryWrapper < UserInfo > queryWrapper = new QueryWrapper <> (); queryWrapper . eq ( \"user_id\" , userId ); return this . userInfoMapper . selectOne ( queryWrapper ); } } 3.3.3.7\u3001UserInfoMapper \u00b6 package com.tanhua.server.mapper ; import com.baomidou.mybatisplus.core.mapper.BaseMapper ; import com.tanhua.common.pojo.UserInfo ; public interface UserInfoMapper extends BaseMapper < UserInfo > { } 3.3.4\u3001\u6d4b\u8bd5 \u00b6 \u5355\u5143\u6d4b\u8bd5\uff0c\u6d4b\u8bd5dubbo\u670d\u52a1\uff1a package com.tanhua.server ; import com.tanhua.server.service.RecommendUserService ; import com.tanhua.server.vo.TodayBest ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner ; @SpringBootTest @RunWith ( SpringJUnit4ClassRunner . class ) public class TestRecommendUserApi { @Autowired private RecommendUserService recommendUserService ; @Test public void testQueryTodayBest (){ TodayBest todayBest = this . recommendUserService . queryTodayBest ( 1L ); System . out . println ( todayBest ); } } \u6574\u5408\u529f\u80fd\u6d4b\u8bd5\uff0c\u9700\u8981\u5c06sso\u3001dubbo\u670d\u52a1\u542f\u52a8\u5b8c\u6210\u540e\u8fdb\u884c\u6d4b\u8bd5\u3002 3.3.5\u3001\u89e3\u51b3MongoDB\u542f\u52a8bug \u00b6 \u5728\u9879\u76ee\u4e2d\uff0c\u6dfb\u52a0\u4e86mongo\u7684\u4f9d\u8d56\u7684\u8bdd\uff0cspringboot\u5c31\u4f1a\u81ea\u52a8\u53bb\u8fde\u63a5\u672c\u5730\u7684mongo\uff0c\u7531\u4e8e\u4ed6\u8fde\u63a5\u4e0d\u4e0a\u4f1a\u5bfc\u81f4\u51fa\u9519\u3002 \u89e3\u51b3\uff1a springboot\u4e2d\u6dfb\u52a0\u6392\u9664\u81ea\u52a8\u914d\u7f6e\u7684\u6ce8\u89e3 package com.tanhua.server ; import org.mybatis.spring.annotation.MapperScan ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration ; import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration ; @MapperScan ( \"com.tanhua.server.mapper\" ) //\u8bbe\u7f6emapper\u63a5\u53e3\u7684\u626b\u63cf\u5305 @SpringBootApplication ( exclude = { MongoAutoConfiguration . class , MongoDataAutoConfiguration . class }) //\u6392\u9664mongo\u7684\u81ea\u52a8\u914d\u7f6e public class ServerApplication { public static void main ( String [] args ) { SpringApplication . run ( ServerApplication . class , args ); } } 4\u3001\u63a8\u8350\u5217\u8868 \u00b6 4.1\u3001mock\u63a5\u53e3 \u00b6 \u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/623 4.2\u3001\u67e5\u8be2\u53c2\u6570\u5bf9\u8c61 \u00b6 package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class RecommendUserQueryParam { private Integer page = 1 ; //\u5f53\u524d\u9875\u6570 private Integer pagesize = 10 ; //\u9875\u5c3a\u5bf8 private String gender ; //\u6027\u522b man woman private String lastLogin ; //\u8fd1\u671f\u767b\u9646\u65f6\u95f4 private Integer age ; //\u5e74\u9f84 private String city ; //\u5c45\u4f4f\u5730 private String education ; //\u5b66\u5386 } 4.3\u3001\u7ed3\u679c\u5bf9\u8c61 \u00b6 package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import java.util.Collections ; import java.util.List ; @Data @AllArgsConstructor @NoArgsConstructor public class PageResult { private Integer counts = 0 ; //\u603b\u8bb0\u5f55\u6570 private Integer pagesize = 0 ; //\u9875\u5927\u5c0f private Integer pages = 0 ; //\u603b\u9875\u6570 private Integer page = 0 ; //\u5f53\u524d\u9875\u7801 private List <?> items = Collections . emptyList (); //\u5217\u8868 } 4.4\u3001Controller \u00b6 /** * \u67e5\u8be2\u63a8\u8350\u7528\u6237\u5217\u8868 * * @param token * @param queryParam * @return */ @GetMapping ( \"recommendation\" ) public ResponseEntity < PageResult > queryRecommendation ( @RequestHeader ( \"Authorization\" ) String token , RecommendUserQueryParam queryParam ){ try { PageResult pageResult = this . todayBestService . queryRecommendation ( token , queryParam ); if ( null != pageResult ) { return ResponseEntity . ok ( pageResult ); } } catch ( Exception e ) { log . error ( \"\u67e5\u8be2\u63a8\u8350\u7528\u6237\u5217\u8868\u51fa\u9519~ token = \" + token , e ); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). body ( null ); } 4.5\u3001Service \u00b6 /** * \u67e5\u8be2\u63a8\u8350\u7528\u6237\u5217\u8868 * * @param queryParam * @param token * @return */ public PageResult queryRecommendation ( String token , RecommendUserQueryParam queryParam ) { //\u6821\u9a8ctoken\u662f\u5426\u6709\u6548\uff0c\u901a\u8fc7SSO\u7684\u63a5\u53e3\u8fdb\u884c\u6821\u9a8c User user = this . userService . queryUserByToken ( token ); if ( null == user ) { //token\u975e\u6cd5\u6216\u5df2\u7ecf\u8fc7\u671f return null ; } PageResult pageResult = new PageResult (); pageResult . setPage ( queryParam . getPage ()); pageResult . setPagesize ( queryParam . getPagesize ()); PageInfo < RecommendUser > pageInfo = this . recommendUserService . queryRecommendUserList ( user . getId (), queryParam . getPage (), queryParam . getPagesize ()); List < RecommendUser > records = pageInfo . getRecords (); if ( CollectionUtils . isEmpty ( records )) { //\u6ca1\u6709\u67e5\u8be2\u5230\u63a8\u8350\u7684\u7528\u6237\u5217\u8868 return pageResult ; } //\u586b\u5145\u4e2a\u4eba\u4fe1\u606f //\u6536\u96c6\u63a8\u8350\u7528\u6237\u7684id Set < Long > userIds = new HashSet <> (); for ( RecommendUser record : records ) { userIds . add ( record . getUserId ()); } QueryWrapper < UserInfo > queryWrapper = new QueryWrapper <> (); //\u7528\u6237id\u53c2\u6570 queryWrapper . in ( \"user_id\" , userIds ); if ( StringUtils . isNotEmpty ( queryParam . getGender ())) { //\u9700\u8981\u6027\u522b\u53c2\u6570\u67e5\u8be2 queryWrapper . eq ( \"sex\" , StringUtils . equals ( queryParam . getGender (), \"man\" ) ? 1 : 2 ); } if ( StringUtils . isNotEmpty ( queryParam . getCity ())) { //\u9700\u8981\u57ce\u5e02\u53c2\u6570\u67e5\u8be2 queryWrapper . like ( \"city\" , queryParam . getCity ()); } if ( queryParam . getAge () != null ) { //\u8bbe\u7f6e\u5e74\u9f84\u53c2\u6570\uff0c\u6761\u4ef6\uff1a\u5c0f\u4e8e\u7b49\u4e8e queryWrapper . le ( \"age\" , queryParam . getAge ()); } List < UserInfo > userInfoList = this . userInfoService . queryUserInfoList ( queryWrapper ); if ( CollectionUtils . isEmpty ( userInfoList )){ //\u6ca1\u6709\u67e5\u8be2\u5230\u7528\u6237\u7684\u57fa\u672c\u4fe1\u606f return pageResult ; } List < TodayBest > todayBests = new ArrayList <> (); for ( UserInfo userInfo : userInfoList ) { TodayBest todayBest = new TodayBest (); todayBest . setId ( userInfo . getUserId ()); todayBest . setAvatar ( userInfo . getLogo ()); todayBest . setNickname ( userInfo . getNickName ()); todayBest . setTags ( StringUtils . split ( userInfo . getTags (), ',' )); todayBest . setGender ( userInfo . getSex (). getValue () == 1 ? \"man\" : \"woman\" ); todayBest . setAge ( userInfo . getAge ()); //\u7f18\u5206\u503c for ( RecommendUser record : records ) { if ( record . getUserId (). longValue () == userInfo . getUserId (). longValue ()){ double score = Math . floor ( record . getScore ()); //\u53d6\u6574,98.2 -> 98 todayBest . setFateValue ( Double . valueOf ( score ). longValue ()); break ; } } todayBests . add ( todayBest ); } //\u6309\u7167\u7f18\u5206\u503c\u8fdb\u884c\u5012\u5e8f\u6392\u5e8f Collections . sort ( todayBests , ( o1 , o2 ) -> new Long ( o2 . getFateValue () - o1 . getFateValue ()). intValue ()); pageResult . setItems ( todayBests ); return pageResult ; } //RecommendUserService public PageInfo < RecommendUser > queryRecommendUserList ( Long id , Integer page , Integer pagesize ) { return this . recommendUserApi . queryPageInfo ( id , page , pagesize ); } //UserInfoService /** * \u67e5\u8be2\u7528\u6237\u4fe1\u606f\u5217\u8868 * * @param queryWrapper * @return */ public List < UserInfo > queryUserInfoList ( QueryWrapper queryWrapper ) { return this . userInfoMapper . selectList ( queryWrapper ); } 4.6\u3001\u6d4b\u8bd5 \u00b6 5\u3001\u7f13\u5b58 \u00b6 \u5728\u63a5\u53e3\u670d\u52a1\u4e2d\uff0c\u6709\u5fc5\u8981\u5bf9\u4e8e\u63a5\u53e3\u8fdb\u884c\u7f13\u5b58\u5904\u7406\uff0c\u5c24\u5176\u662fGET\u8bf7\u6c42\uff0c\u5982\u679c\u6bcf\u4e2a\u63a5\u53e3\u5355\u72ec\u6dfb\u52a0\u7684\u8bdd\u4f1a\u5b58\u5728\u5f88\u591a\u7684\u91cd\u590d\u7684\u903b\u8f91\uff0c\u6240\u4ee5\u53ef\u4ee5\u7f16\u5199\u4e00\u5957\u901a\u7528\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u5b9e\u73b0\u601d\u8def\uff1a \u901a\u8fc7\u62e6\u622a\u5668\u5b9e\u73b0\u5bf9\u8bf7\u6c42\u7684\u62e6\u622a\uff0c\u5728\u62e6\u622a\u5668\u4e2d\u5b9e\u73b0\u7f13\u5b58\u7684\u547d\u4e2d\u3002 \u901a\u8fc7ResponseBodyAdvice\u8fdb\u884c\u5bf9\u54cd\u5e94\u7684\u62e6\u622a\uff0c\u53ef\u4ee5\u5c06\u6570\u636e\u7f13\u5b58\u5230Redis\u4e2d\u3002 \u8003\u8651\u5230\uff0c\u4e0d\u80fd\u5bf9\u4e8e\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u4e00\u5200\u5207\uff0c\u6240\u4ee5\u9700\u8981\u521b\u5efa@Cache\u6ce8\u89e3\u8fdb\u884c\u6807\u8bb0\uff0c\u53ea\u6709\u6807\u8bb0\u7684Controller\u624d\u8fdb\u884c\u7f13\u5b58\u5904\u7406\u3002 \u7f13\u5b58\u7684\u5904\u7406\u4e2d\uff0c\u4ec5\u9488\u5bf9GET\u8bf7\u6c42\u5904\u7406\uff0c\u5176\u4ed6\u7684\u8bf7\u6c42\u5747\u4e0d\u505a\u5904\u7406\u3002 5.1\u3001\u81ea\u5b9a\u4e49\u6ce8\u89e3 \u00b6 package com.tanhua.server.utils ; import java.lang.annotation.* ; /** * \u88ab\u6807\u8bb0\u4e3aCache\u7684Controller\u8fdb\u884c\u7f13\u5b58\uff0c\u5176\u4ed6\u60c5\u51b5\u4e0d\u8fdb\u884c\u7f13\u5b58 */ @Target ( ElementType . METHOD ) @Retention ( RetentionPolicy . RUNTIME ) @Documented //\u6807\u8bb0\u6ce8\u89e3 public @interface Cache { /** * \u7f13\u5b58\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4e3a60\u79d2 * @return */ String time () default \"60\" ; } 5.2\u3001\u91c7\u7528\u62e6\u622a\u5668\u8fdb\u884c\u7f13\u5b58\u547d\u4e2d \u00b6 \u7f16\u5199\u62e6\u622a\u5668\uff1aRedisCacheInterceptor\u3002 package com.tanhua.server.interceptor ; import com.fasterxml.jackson.databind.ObjectMapper ; import com.tanhua.server.utils.Cache ; import org.apache.commons.codec.digest.DigestUtils ; import org.apache.commons.lang3.StringUtils ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.beans.factory.annotation.Value ; import org.springframework.data.redis.core.RedisTemplate ; import org.springframework.stereotype.Component ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.method.HandlerMethod ; import org.springframework.web.servlet.HandlerInterceptor ; import javax.servlet.http.HttpServletRequest ; import javax.servlet.http.HttpServletResponse ; @Component public class RedisCacheInterceptor implements HandlerInterceptor { @Value ( \"${tanhua.cache.enable}\" ) private Boolean enable ; @Autowired private RedisTemplate < String , String > redisTemplate ; private static final ObjectMapper MAPPER = new ObjectMapper (); @Override public boolean preHandle ( HttpServletRequest request , HttpServletResponse response , Object handler ) throws Exception { //\u7f13\u5b58\u7684\u5168\u5c40\u5f00\u5173\u7684\u6821\u9a8c if ( ! enable ) { return true ; } //\u6821\u9a8chandler\u662f\u5426\u662fHandlerMethod if ( ! ( handler instanceof HandlerMethod )) { return true ; } //\u5224\u65ad\u662f\u5426\u4e3aget\u8bf7\u6c42 if ( ! (( HandlerMethod ) handler ). hasMethodAnnotation ( GetMapping . class )) { return true ; } //\u5224\u65ad\u662f\u5426\u6dfb\u52a0\u4e86@Cache\u6ce8\u89e3 if ( ! (( HandlerMethod ) handler ). hasMethodAnnotation ( Cache . class )) { return true ; } //\u7f13\u5b58\u547d\u4e2d String redisKey = createRedisKey ( request ); String cacheData = this . redisTemplate . opsForValue (). get ( redisKey ); if ( StringUtils . isEmpty ( cacheData )){ //\u7f13\u5b58\u672a\u547d\u4e2d return true ; } // \u5c06data\u6570\u636e\u8fdb\u884c\u54cd\u5e94 response . setCharacterEncoding ( \"UTF-8\" ); response . setContentType ( \"application/json; charset=utf-8\" ); response . getWriter (). write ( cacheData ); return false ; } /** * \u751f\u6210redis\u4e2d\u7684key\uff0c\u89c4\u5219\uff1aSERVER_CACHE_DATA_MD5(url + param + token) * * @param request * @return */ public static String createRedisKey ( HttpServletRequest request ) throws Exception { String url = request . getRequestURI (); String param = MAPPER . writeValueAsString ( request . getParameterMap ()); String token = request . getHeader ( \"Authorization\" ); String data = url + \"_\" + param + \"_\" + token ; return \"SERVER_CACHE_DATA_\" + DigestUtils . md5Hex ( data ); } } application.properties\uff1a #\u662f\u5426\u5f00\u542f\u6570\u636e\u7f13\u5b58 tanhua.cache.enable = false # Redis\u76f8\u5173\u914d\u7f6e spring.redis.jedis.pool.max-wait = 5000ms spring.redis.jedis.pool.max-Idle = 100 spring.redis.jedis.pool.min-Idle = 10 spring.redis.timeout = 10s spring.redis.cluster.nodes = 192.168.31.81:6379,192.168.31.81:6380,192.168.31.81:6381 spring.redis.cluster.max-redirects = 5 \u6ce8\u518c\u62e6\u622a\u5668\u5230Spring\u5bb9\u5668\uff1a package com.tanhua.server.config ; import com.tanhua.server.interceptor.RedisCacheInterceptor ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.context.annotation.Configuration ; import org.springframework.web.servlet.config.annotation.InterceptorRegistry ; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer ; @Configuration public class WebConfig implements WebMvcConfigurer { @Autowired private RedisCacheInterceptor redisCacheInterceptor ; @Override public void addInterceptors ( InterceptorRegistry registry ) { registry . addInterceptor ( this . redisCacheInterceptor ). addPathPatterns ( \"/**\" ); } } 4.3\u3001\u54cd\u5e94\u7ed3\u679c\u5199\u5165\u5230\u7f13\u5b58 \u00b6 \u4f7f\u7528ResponseBodyAdvice\u8fdb\u884c\u5bf9\u54cd\u5e94\u7ed3\u679c\u5904\u7406\uff0c\u5c06\u7ed3\u679c\u5199\u5165\u5230Redis\u4e2d\uff1a \u5177\u4f53\u5b9e\u73b0\uff1a package com.tanhua.server.interceptor ; import com.fasterxml.jackson.databind.ObjectMapper ; import com.tanhua.server.utils.Cache ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.beans.factory.annotation.Value ; import org.springframework.core.MethodParameter ; import org.springframework.data.redis.core.RedisTemplate ; import org.springframework.http.MediaType ; import org.springframework.http.server.ServerHttpRequest ; import org.springframework.http.server.ServerHttpResponse ; import org.springframework.http.server.ServletServerHttpRequest ; import org.springframework.web.bind.annotation.ControllerAdvice ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice ; import java.util.concurrent.TimeUnit ; @ControllerAdvice public class MyResponseBodyAdvice implements ResponseBodyAdvice { @Value ( \"${tanhua.cache.enable}\" ) private Boolean enable ; @Autowired private RedisTemplate < String , String > redisTemplate ; private static final ObjectMapper MAPPER = new ObjectMapper (); @Override public boolean supports ( MethodParameter returnType , Class converterType ) { // \u5f00\u5173\u5904\u4e8e\u5f00\u542f\u72b6\u6001 \u662fget\u8bf7\u6c42 \u5305\u542b\u4e86@Cache\u6ce8\u89e3 return enable && returnType . hasMethodAnnotation ( GetMapping . class ) && returnType . hasMethodAnnotation ( Cache . class ); } @Override public Object beforeBodyWrite ( Object body , MethodParameter returnType , MediaType selectedContentType , Class selectedConverterType , ServerHttpRequest request , ServerHttpResponse response ) { if ( null == body ) { return null ; } try { String redisValue = null ; if ( body instanceof String ) { redisValue = ( String ) body ; } else { redisValue = MAPPER . writeValueAsString ( body ); } String redisKey = RedisCacheInterceptor . createRedisKey ((( ServletServerHttpRequest ) request ). getServletRequest ()); Cache cache = returnType . getMethodAnnotation ( Cache . class ); //\u7f13\u5b58\u7684\u65f6\u95f4\u5355\u4f4d\u662f\u79d2 this . redisTemplate . opsForValue (). set ( redisKey , redisValue , Long . valueOf ( cache . time ()), TimeUnit . SECONDS ); } catch ( Exception e ) { e . printStackTrace (); } return body ; } } 4.4\u3001\u6d4b\u8bd5 \u00b6 \u53ef\u4ee5\u770b\u5230\u6570\u636e\u5df2\u7ecf\u7f13\u5b58\u5230Redis\u4e2d\uff0c\u5e76\u4e14\u5176\u7f13\u5b58\u65f6\u95f4\u4e5f\u662f30\u79d2\uff0c\u4e0e\u9884\u671f\u4e00\u81f4\u3002 6\u3001\u6574\u5408\u6d4b\u8bd5 \u00b6 \u6d4b\u8bd5\u65f6\u9700\u8981\u6ce8\u610f\uff0c\u7531\u4e8e\u7528\u6237\u6570\u636e\u8f83\u5c11\uff0c\u6240\u4ee5\u6d4b\u8bd5\u65f6\u9700\u8981\u628a\u6761\u4ef6\u6ce8\u91ca\u6389\uff0c\u5426\u5219\u67e5\u8be2\u4e0d\u5230\u6570\u636e\uff1a \u6548\u679c\uff1a","title":"day03"},{"location":"tantan/day03/#_1","text":"\u9996\u9875\u529f\u80fd\u8bf4\u660e \u7cfb\u7edf\u67b6\u6784\u8bf4\u660e \u5b9e\u73b0\u4eca\u65e5\u4f73\u4eba\u529f\u80fd \u5b9e\u73b0\u63a8\u8350\u7528\u6237\u7684\u5217\u8868 \u63a5\u53e3\u589e\u52a0\u7f13\u5b58\u529f\u80fd \u6574\u5408\u524d\u7aef\u8054\u8c03\u6d4b\u8bd5","title":"\u8bfe\u7a0b\u8bf4\u660e"},{"location":"tantan/day03/#1","text":"\u5728\u7528\u6237\u767b\u5f55\u6210\u529f\u540e\uff0c\u5c31\u4f1a\u8fdb\u5165\u9996\u9875\uff0c\u9996\u9875\u4e2d\u6709\u4eca\u65e5\u4f73\u4eba\u3001\u63a8\u8350\u597d\u53cb\u3001\u63a2\u82b1\u3001\u641c\u9644\u8fd1\u7b49\u529f\u80fd\u3002","title":"1\u3001\u9996\u9875"},{"location":"tantan/day03/#2","text":"\u5728\u5f00\u53d1\u5b8cSSO\u7cfb\u7edf\u4e2d\u7684\u767b\u5f55\u529f\u80fd\u540e\uff0c\u63a5\u4e0b\u6765\u5c31\u9700\u8981\u5b9e\u73b0\u5176\u4ed6\u7684\u529f\u80fd\uff0c\u5728\u6574\u4f53\u67b6\u6784\u4e2d\uff0c\u5b8c\u6210\u4e0eAPP\u5bf9\u63a5\u7684\u670d\u52a1\u5de5\u7a0b\u53ebmy-tanhua-server\uff0c\u771f\u6b63\u7684\u6838\u5fc3\u4e1a\u52a1\u903b\u8f91\u4f7f\u7528dubbo\u5b8c\u6210\uff0c\u5176\u5de5\u7a0b\u540d\u53eb\uff1amy-tanhua-dubbo\uff0c\u5b83\u4eec\u7684\u67b6\u6784\u793a\u610f\u56fe\u5982\u4e0b\uff1a \u8bf4\u660e\uff1a \u5ba2\u6237\u7aefAPP\u53d1\u8d77\u8bf7\u6c42\u5230Nginx\uff0c\u5728Nginx\u4e2d\u5bf9\u8bf7\u6c42\u505a\u51fa\u5224\u65ad\uff0c\u5c06\u8bf7\u6c42\u8f6c\u53d1\u81f3sso\u7cfb\u7edf\u6216server\u7cfb\u7edf\u3002 sso\u7cfb\u7edf\u4e2d\uff0c\u5c06\u5bf9\u63a5\u7b2c\u4e09\u65b9\u5e73\u53f0\u4ee5\u53ca\u5b8c\u6210\u6570\u636e\u7684\u7f13\u5b58\u3001\u6d88\u606f\u53d1\u9001\u3001\u7528\u6237\u7684\u6ce8\u518c\u767b\u5f55\u529f\u80fd\u3002 server\u7cfb\u7edf\u4e3aAPP\u63d0\u4f9b\u4e86\u63a5\u53e3\u670d\u52a1\u7684\u652f\u6491 \u7528\u6237\u8bf7\u6c42\u4e2d\u643a\u5e26\u7684token\u9700\u8981\u5230sso\u7cfb\u7edf\u4e2d\u8fdb\u884c\u6821\u9a8c \u901a\u8fc7rpc\u8c03\u7528dubbo\u4e2d\u63d0\u4f9b\u7684\u670d\u52a1\uff0c\u5728dubbo\u670d\u52a1\u4e2d\u4e0eMongoDB\u5bf9\u63a5\uff0c\u5b8c\u6210\u6570\u636e\u7684CRUD\u64cd\u4f5c \u5c06\u4e00\u4e9b\u6570\u636e\u7f13\u5b58\u5230Redis\uff0c\u4ece\u800c\u63d0\u5347\u6570\u636e\u67e5\u8be2\u6027\u80fd \u7528\u6237\u6570\u636e\u7684\u67e5\u8be2\u5c06\u57fa\u4e8eMySQL\u6570\u636e\u5e93\u8fdb\u884c\u67e5\u8be2","title":"2\u3001\u7cfb\u7edf\u67b6\u6784"},{"location":"tantan/day03/#21nginx","text":"","title":"2.1\u3001nginx\u670d\u52a1"},{"location":"tantan/day03/#211","text":"\u5b89\u88c5\u5305\u5728\u8d44\u6599\u4e2d\uff1anginx-1.17.3.zip \u5b89\u88c5\u5728\u4efb\u610f\u76ee\u5f55\uff0c\u901a\u8fc7\u547d\u4ee4\uff1astart nginx.exe \u542f\u52a8\uff1a \u91cd\u542f\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\u547d\u4ee4\uff1anginx.exe -s reload","title":"2.1.1\u3001\u90e8\u7f72\u5b89\u88c5"},{"location":"tantan/day03/#212","text":"\u4fee\u6539conf\u76ee\u5f55\u4e0b\u7684nginx.conf\u6587\u4ef6\uff1a #user nobody; worker_processes 1 ; #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; #pid logs/nginx.pid; events { worker_connections 1024 ; } http { include mime.types ; default_type application/octet-stream ; #log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' # '$status $body_bytes_sent \"$http_referer\" ' # '\"$http_user_agent\" \"$http_x_forwarded_for\"'; #access_log logs/access.log main; sendfile on ; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65 ; #gzip on; server { listen 80 ; server_name localhost ; #charset koi8-r; #access_log logs/host.access.log main; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html ; location = /50x.html { root html ; } location /user/ { #\u8bf7\u6c42\u8def\u5f84\u4e2d\u51e1\u662f\u4ee5/user/\u5f00\u5934\u7684\u8bf7\u6c42\uff0c\u8f6c\u53d1\u5230sso\u7cfb\u7edf client_max_body_size 300m ; #\u8bbe\u7f6e\u6700\u5927\u7684\u8bf7\u6c42\u4f53\u5927\u5c0f\uff0c\u89e3\u51b3\u5927\u6587\u4ef6\u4e0a\u4f20\u4e0d\u4e86\u7684\u95ee\u9898 proxy_connect_timeout 300s ; #\u4ee3\u7406\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4 proxy_send_timeout 300s ; #\u4ee3\u7406\u53d1\u9001\u6570\u636e\u7684\u8d85\u65f6\u65f6\u95f4 proxy_read_timeout 300s ; #\u4ee3\u7406\u8bfb\u53d6\u6570\u636e\u7684\u8d85\u65f6\u65f6\u95f4 proxy_pass http://127.0.0.1:18080 ; #\u8f6c\u53d1\u8bf7\u6c42 } location / { #\u4e0a\u9762\u672a\u5339\u914d\u5230\u7684\u5728\u8fd9\u91cc\u5904\u7406 client_max_body_size 300m ; proxy_connect_timeout 300s ; proxy_send_timeout 300s ; proxy_read_timeout 300s ; proxy_pass http://127.0.0.1:18081 ; #\u8f6c\u53d1\u8bf7\u6c42\u5230server\u7cfb\u7edf } } }","title":"2.1.2\u3001\u914d\u7f6e"},{"location":"tantan/day03/#213","text":"","title":"2.1.3\u3001\u6d4b\u8bd5"},{"location":"tantan/day03/#22server","text":"","title":"2.2\u3001\u642d\u5efaserver\u5de5\u7a0b"},{"location":"tantan/day03/#221","text":"pom.xml\u6587\u4ef6\uff1a <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> my-tanhua </artifactId> <groupId> cn.itcast.tanhua </groupId> <version> 1.0-SNAPSHOT </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> my-tanhua-server </artifactId> <dependencies> <dependency> <groupId> cn.itcast.tanhua </groupId> <artifactId> my-tanhua-dubbo-interface </artifactId> <version> 1.0-SNAPSHOT </version> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-test </artifactId> <scope> test </scope> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-redis </artifactId> </dependency> <!--dubbo\u7684springboot\u652f\u6301--> <dependency> <groupId> com.alibaba.boot </groupId> <artifactId> dubbo-spring-boot-starter </artifactId> </dependency> <!--dubbo\u6846\u67b6--> <dependency> <groupId> com.alibaba </groupId> <artifactId> dubbo </artifactId> </dependency> <!--zk\u4f9d\u8d56--> <dependency> <groupId> org.apache.zookeeper </groupId> <artifactId> zookeeper </artifactId> </dependency> <dependency> <groupId> com.github.sgroschupf </groupId> <artifactId> zkclient </artifactId> </dependency> <dependency> <groupId> org.apache.commons </groupId> <artifactId> commons-lang3 </artifactId> </dependency> <dependency> <groupId> org.apache.commons </groupId> <artifactId> commons-collections4 </artifactId> <version> 4.4 </version> </dependency> <dependency> <groupId> com.baomidou </groupId> <artifactId> mybatis-plus </artifactId> </dependency> <dependency> <groupId> com.baomidou </groupId> <artifactId> mybatis-plus-boot-starter </artifactId> </dependency> <dependency> <groupId> mysql </groupId> <artifactId> mysql-connector-java </artifactId> </dependency> <dependency> <groupId> commons-io </groupId> <artifactId> commons-io </artifactId> <version> 2.6 </version> </dependency> <dependency> <groupId> commons-codec </groupId> <artifactId> commons-codec </artifactId> </dependency> </dependencies> </project>","title":"2.2.1\u3001\u5bfc\u5165\u4f9d\u8d56"},{"location":"tantan/day03/#222applicationproperties","text":"spring.application.name = itcast-tanhua-server server.port = 18081 #\u6570\u636e\u5e93\u8fde\u63a5\u4fe1\u606f spring.datasource.driver-class-name = com.mysql.jdbc.Driver spring.datasource.url = jdbc:mysql://192.168.31.81:3306/mytanhua?useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true&useSSL=false spring.datasource.username = root spring.datasource.password = root # \u679a\u4e3e\u5305\u626b\u63cf mybatis-plus.type-enums-package = com.tanhua.server.enums # \u8868\u540d\u524d\u7f00 mybatis-plus.global-config.db-config.table-prefix = tb_ # id\u7b56\u7565\u4e3a\u81ea\u589e\u957f mybatis-plus.global-config.db-config.id-type = auto #dubbo\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e dubbo.application.name = itcast-tanhua-server dubbo.registry.address = zookeeper://192.168.31.81:2181 dubbo.registry.client = zkclient dubbo.registry.timeout = 60000 dubbo.consumer.timeout = 60000 #sso\u7cfb\u7edf\u670d\u52a1\u5730\u5740 tanhua.sso.url = http://127.0.0.1 #\u9ed8\u8ba4\u4eca\u65e5\u4f73\u4eba\u63a8\u8350\u7528\u6237 tanhua.sso.default.user = 2","title":"2.2.2\u3001application.properties"},{"location":"tantan/day03/#223serverapplication","text":"package com.tanhua.server ; import org.mybatis.spring.annotation.MapperScan ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @MapperScan ( \"com.tanhua.server.mapper\" ) //\u8bbe\u7f6emapper\u63a5\u53e3\u7684\u626b\u63cf\u5305 @SpringBootApplication public class ServerApplication { public static void main ( String [] args ) { SpringApplication . run ( ServerApplication . class , args ); } }","title":"2.2.3\u3001ServerApplication"},{"location":"tantan/day03/#23dubbo","text":"my-tanhua-dubbo\u662fdubbo\u5de5\u7a0b\u7684\u7236\u5de5\u7a0b\uff1a ~~~xml my-tanhua cn.itcast.tanhua 1.0-SNAPSHOT 4.0.0 <artifactId> my-tanhua-dubbo </artifactId> <packaging> pom </packaging> <modules> <module> my-tanhua-dubbo-interface </module> <module> my-tanhua-dubbo-service </module> </modules> ~~~","title":"2.3\u3001\u642d\u5efadubbo\u5de5\u7a0b"},{"location":"tantan/day03/#231my-tanhua-dubbo-interface","text":"\u8be5\u5de5\u7a0b\u4e2d\u5b9a\u4e49\u4e86dubbo\u670d\u52a1\u4e2d\u7684interface\u4e0e\u5b9e\u4f53\u5bf9\u8c61\u3002 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> my-tanhua-dubbo </artifactId> <groupId> cn.itcast.tanhua </groupId> <version> 1.0-SNAPSHOT </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> my-tanhua-dubbo-interface </artifactId> <dependencies> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-mongodb </artifactId> </dependency> </dependencies> </project>","title":"2.3.1\u3001\u521b\u5efamy-tanhua-dubbo-interface\u5de5\u7a0b"},{"location":"tantan/day03/#232my-tanhua-dubbo-service","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> my-tanhua-dubbo </artifactId> <groupId> cn.itcast.tanhua </groupId> <version> 1.0-SNAPSHOT </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> my-tanhua-dubbo-service </artifactId> <dependencies> <!--\u5f15\u5165interface\u4f9d\u8d56--> <dependency> <groupId> cn.itcast.tanhua </groupId> <artifactId> my-tanhua-dubbo-interface </artifactId> <version> 1.0-SNAPSHOT </version> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-test </artifactId> <scope> test </scope> </dependency> <!--dubbo\u7684springboot\u652f\u6301--> <dependency> <groupId> com.alibaba.boot </groupId> <artifactId> dubbo-spring-boot-starter </artifactId> </dependency> <!--dubbo\u6846\u67b6--> <dependency> <groupId> com.alibaba </groupId> <artifactId> dubbo </artifactId> </dependency> <!--zk\u4f9d\u8d56--> <dependency> <groupId> org.apache.zookeeper </groupId> <artifactId> zookeeper </artifactId> </dependency> <dependency> <groupId> com.github.sgroschupf </groupId> <artifactId> zkclient </artifactId> </dependency> <!--MongoDB\u76f8\u5173\u4f9d\u8d56--> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-mongodb </artifactId> </dependency> <dependency> <groupId> org.mongodb </groupId> <artifactId> mongodb-driver-sync </artifactId> </dependency> <!--\u5176\u4ed6\u5de5\u5177\u5305\u4f9d\u8d56--> <dependency> <groupId> org.apache.commons </groupId> <artifactId> commons-lang3 </artifactId> </dependency> <dependency> <groupId> joda-time </groupId> <artifactId> joda-time </artifactId> </dependency> <dependency> <groupId> io.netty </groupId> <artifactId> netty-all </artifactId> </dependency> </dependencies> </project> application.properties\uff1a # Spring boot application spring.application.name = itcast-tanhua-dubbo-service # dubbo \u626b\u63cf\u5305\u914d\u7f6e dubbo.scan.basePackages = com.tanhua.dubbo.server dubbo.application.name = dubbo-provider-tanhua #dubbo \u5bf9\u5916\u66b4\u9732\u7684\u7aef\u53e3\u4fe1\u606f dubbo.protocol.name = dubbo dubbo.protocol.port = 20880 #dubbo\u6ce8\u518c\u4e2d\u5fc3\u7684\u914d\u7f6e dubbo.registry.address = zookeeper://192.168.31.81:2181 dubbo.registry.client = zkclient dubbo.registry.timeout = 60000 #springboot MongoDB\u914d\u7f6e spring.data.mongodb.username = tanhua spring.data.mongodb.password = l3SCjl0HvmSkTtiSbN0Swv40spYnHhDV spring.data.mongodb.authentication-database = admin spring.data.mongodb.database = tanhua spring.data.mongodb.port = 27017 spring.data.mongodb.host = 192.168.31.81 \u7f16\u5199\u542f\u52a8\u7c7b\uff1a package com.tanhua.dubbo.server ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @SpringBootApplication public class DubboApplication { public static void main ( String [] args ) { SpringApplication . run ( DubboApplication . class , args ); } }","title":"2.3.2\u3001\u521b\u5efamy-tanhua-dubbo-service\u5de5\u7a0b"},{"location":"tantan/day03/#24","text":"\u6700\u7ec8\u642d\u5efa\u5b8c\u6210\u7684\u6548\u679c\u5982\u4e0b\uff1a","title":"2.4\u3001\u5de5\u7a0b\u7ed3\u6784"},{"location":"tantan/day03/#3","text":"\u4eca\u65e5\u4f73\u4eba\uff0c\u4f1a\u63a8\u8350\u7f18\u5206\u503c\u6700\u5927\u7684\u7528\u6237\uff0c\u8fdb\u884c\u5c55\u73b0\u51fa\u6765\u3002\u7f18\u5206\u503c\u7684\u8ba1\u7b97\u662f\u7531\u7528\u6237\u7684\u884c\u4e3a\u8fdb\u884c\u6253\u5206\uff0c\u5982\uff1a\u70b9\u51fb\u3001\u70b9\u8d5e\u3001\u8bc4\u8bba\u3001\u5b66\u5386\u3001\u5a5a\u59fb\u72b6\u6001\u7b49\u4fe1\u606f\u7ec4\u5408\u800c\u6210\u7684\u3002 \u5b9e\u73b0\uff1a\u6211\u4eec\u5148\u4e0d\u8003\u8651\u63a8\u8350\u7684\u903b\u8f91\uff0c\u5047\u8bbe\u73b0\u5728\u5df2\u7ecf\u6709\u63a8\u8350\u7684\u7ed3\u679c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4ece\u7ed3\u679c\u4e2d\u67e5\u8be2\u5230\u7f18\u5206\u503c\u6700\u9ad8\u7684\u7528\u6237\u5c31\u53ef\u4ee5\u4e86\u3002\u81f3\u4e8e\u63a8\u8350\u7684\u903b\u8f91\u4ee5\u53ca\u5b9e\u73b0\uff0c\u6211\u4eec\u5c06\u540e\u9762\u7684\u8bfe\u7a0b\u4e2d\u8bb2\u89e3\u3002 \u6d41\u7a0b\uff1a","title":"3\u3001\u4eca\u65e5\u4f73\u4eba"},{"location":"tantan/day03/#31","text":"#\u8868\u7ed3\u6784\uff0c\u8868\u540d\uff1arecommend_user { \"userId\" :1001, #\u63a8\u8350\u7684\u7528\u6237id \"toUserId\" :1002, #\u7528\u6237id \"score\" :90, #\u63a8\u8350\u5f97\u5206 \"date\" : \"2019/1/1\" #\u65e5\u671f } \u5df2\u7ecf\u63d0\u4f9b\u7684\u6d4b\u8bd5\u6570\u636e\uff084855\u6761\u6570\u636e\uff09\uff1a","title":"3.1\u3001\u8868\u7ed3\u6784"},{"location":"tantan/day03/#32dubbo","text":"","title":"3.2\u3001\u7f16\u5199dubbo\u670d\u52a1"},{"location":"tantan/day03/#321","text":"\u5728my-tanhua-dubbo-interface\u5de5\u7a0b\u4e2d\u5b9a\u4e49\u63a5\u53e3\uff1a package com.tanhua.dubbo.server.api ; import com.tanhua.dubbo.server.vo.PageInfo ; import com.tanhua.dubbo.server.pojo.RecommendUser ; public interface RecommendUserApi { /** * \u67e5\u8be2\u4e00\u4f4d\u5f97\u5206\u6700\u9ad8\u7684\u63a8\u8350\u7528\u6237 * * @param userId * @return */ RecommendUser queryWithMaxScore ( Long userId ); /** * \u6309\u7167\u5f97\u5206\u5012\u5e8f * * @param userId * @param pageNum * @param pageSize * @return */ PageInfo < RecommendUser > queryPageInfo ( Long userId , Integer pageNum , Integer pageSize ); } package com.tanhua.dubbo.server.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.annotation.Id ; import org.springframework.data.mongodb.core.index.Indexed ; import org.springframework.data.mongodb.core.mapping.Document ; @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"recommend_user\" ) public class RecommendUser implements java . io . Serializable { private static final long serialVersionUID = - 4296017160071130962L ; @Id private ObjectId id ; //\u4e3b\u952eid @Indexed private Long userId ; //\u63a8\u8350\u7684\u7528\u6237id private Long toUserId ; //\u7528\u6237id @Indexed private Double score ; //\u63a8\u8350\u5f97\u5206 private String date ; //\u65e5\u671f } package com.tanhua.dubbo.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import java.util.Collections ; import java.util.List ; @Data @AllArgsConstructor public class PageInfo < T > implements java . io . Serializable { private static final long serialVersionUID = - 2105385689859184204L ; /** * \u603b\u6761\u6570 */ private Integer total = 0 ; /** * \u5f53\u524d\u9875 */ private Integer pageNum = 0 ; /** * \u4e00\u9875\u663e\u793a\u7684\u5927\u5c0f */ private Integer pageSize = 0 ; /** * \u6570\u636e\u5217\u8868 */ private List < T > records = Collections . emptyList (); }","title":"3.2.1\u3001\u7f16\u5199\u63a5\u53e3"},{"location":"tantan/day03/#322","text":"package com.tanhua.dubbo.server.api ; import com.alibaba.dubbo.config.annotation.Service ; import com.tanhua.dubbo.server.pojo.RecommendUser ; import com.tanhua.dubbo.server.vo.PageInfo ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.domain.PageRequest ; import org.springframework.data.domain.Sort ; import org.springframework.data.mongodb.core.MongoTemplate ; import org.springframework.data.mongodb.core.query.Criteria ; import org.springframework.data.mongodb.core.query.Query ; import java.util.List ; @Service ( version = \"1.0.0\" ) //\u7533\u660e\u8fd9\u662f\u4e00\u4e2adubbo\u670d\u52a1 public class RecommendUserApiImpl implements RecommendUserApi { @Autowired private MongoTemplate mongoTemplate ; @Override public RecommendUser queryWithMaxScore ( Long userId ) { //\u67e5\u8be2\u5f97\u5206\u6700\u9ad8\u7684\u7528\u6237\uff0c\u6309\u7167\u5f97\u5206\u5012\u5e8f\u6392\u5e8f Query query = Query . query ( Criteria . where ( \"toUserId\" ). is ( userId )) . with ( Sort . by ( Sort . Order . desc ( \"score\" ))). limit ( 1 ); return this . mongoTemplate . findOne ( query , RecommendUser . class ); } @Override public PageInfo < RecommendUser > queryPageInfo ( Long userId , Integer pageNum , Integer pageSize ) { //\u5206\u9875\u5e76\u4e14\u6392\u5e8f\u53c2\u6570 PageRequest pageRequest = PageRequest . of ( pageNum - 1 , pageSize , Sort . by ( Sort . Order . desc ( \"score\" ))); //\u67e5\u8be2\u53c2\u6570 Query query = Query . query ( Criteria . where ( \"toUserId\" ). is ( userId )). with ( pageRequest ); List < RecommendUser > recommendUserList = this . mongoTemplate . find ( query , RecommendUser . class ); //\u6682\u65f6\u4e0d\u63d0\u4f9b\u6570\u636e\u603b\u6570 return new PageInfo <> ( 0 , pageNum , pageSize , recommendUserList ); } }","title":"3.2.2\u3001\u7f16\u5199\u5b9e\u73b0"},{"location":"tantan/day03/#323","text":"package com.tanhua.dubbo.server.api ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestRecommendUserApi { @Autowired private RecommendUserApi recommendUserApi ; @Test public void testQueryWithMaxScore (){ System . out . println ( this . recommendUserApi . queryWithMaxScore ( 1L )); System . out . println ( this . recommendUserApi . queryWithMaxScore ( 8L )); System . out . println ( this . recommendUserApi . queryWithMaxScore ( 26L )); } @Test public void testQueryPageInfo (){ System . out . println ( this . recommendUserApi . queryPageInfo ( 1L , 1 , 5 )); System . out . println ( this . recommendUserApi . queryPageInfo ( 1L , 2 , 5 )); System . out . println ( this . recommendUserApi . queryPageInfo ( 1L , 3 , 5 )); } }","title":"3.2.3\u3001\u6d4b\u8bd5"},{"location":"tantan/day03/#33","text":"","title":"3.3\u3001\u5b9e\u73b0\u4eca\u65e5\u4f73\u4eba\u670d\u52a1"},{"location":"tantan/day03/#331mock","text":"\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/617","title":"3.3.1\u3001mock\u670d\u52a1"},{"location":"tantan/day03/#332","text":"","title":"3.3.2\u3001\u57fa\u7840\u4ee3\u7801"},{"location":"tantan/day03/#3321sexenum","text":"package com.tanhua.server.enums ; import com.baomidou.mybatisplus.core.enums.IEnum ; public enum SexEnum implements IEnum < Integer > { MAN ( 1 , \"\u7537\" ), WOMAN ( 2 , \"\u5973\" ), UNKNOWN ( 3 , \"\u672a\u77e5\" ); private int value ; private String desc ; SexEnum ( int value , String desc ) { this . value = value ; this . desc = desc ; } @Override public Integer getValue () { return this . value ; } @Override public String toString () { return this . desc ; } }","title":"3.3.2.1\u3001SexEnum"},{"location":"tantan/day03/#3322basepojo","text":"package com.tanhua.server.pojo ; import com.baomidou.mybatisplus.annotation.FieldFill ; import com.baomidou.mybatisplus.annotation.TableField ; import java.util.Date ; public abstract class BasePojo { @TableField ( fill = FieldFill . INSERT ) private Date created ; @TableField ( fill = FieldFill . INSERT_UPDATE ) private Date updated ; }","title":"3.3.2.2\u3001BasePojo"},{"location":"tantan/day03/#3323user","text":"package com.tanhua.server.pojo ; import com.fasterxml.jackson.annotation.JsonIgnore ; import com.fasterxml.jackson.annotation.JsonIgnoreProperties ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor @JsonIgnoreProperties ( ignoreUnknown = true ) public class User extends BasePojo { private Long id ; private String mobile ; //\u624b\u673a\u53f7 @JsonIgnore private String password ; //\u5bc6\u7801\uff0cjson\u5e8f\u5217\u5316\u65f6\u5ffd\u7565 }","title":"3.3.2.3\u3001User"},{"location":"tantan/day03/#3324userinfo","text":"package com.tanhua.server.pojo ; import com.tanhua.server.enums.SexEnum ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class UserInfo extends BasePojo { private Long id ; private Long userId ; //\u7528\u6237id private String nickName ; //\u6635\u79f0 private String logo ; //\u7528\u6237\u5934\u50cf private String tags ; //\u7528\u6237\u6807\u7b7e\uff1a\u591a\u4e2a\u7528\u9017\u53f7\u5206\u9694 private SexEnum sex ; //\u6027\u522b private Integer age ; //\u5e74\u9f84 private String edu ; //\u5b66\u5386 private String city ; //\u57ce\u5e02 private String birthday ; //\u751f\u65e5 private String coverPic ; // \u5c01\u9762\u56fe\u7247 private String industry ; //\u884c\u4e1a private String income ; //\u6536\u5165 private String marriage ; //\u5a5a\u59fb\u72b6\u6001 }","title":"3.3.2.4\u3001UserInfo"},{"location":"tantan/day03/#333","text":"\u5b9e\u73b0\u63cf\u8ff0\uff1a \u9700\u8981\u6839\u636e\u524d\u7aef\u5b9a\u4e49\u7684\u7ed3\u6784\u5b9a\u4e49java\u5bf9\u8c61 \u6839\u636esso\u7cfb\u7edf\u63d0\u4f9b\u7684\u63a5\u53e3\u67e5\u8be2\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u4fe1\u606f \u6839\u636edubbo\u7cfb\u7edf\u63d0\u4f9b\u7684\u670d\u52a1\u8fdb\u884c\u67e5\u8be2\u4eca\u65e5\u4f73\u4eba\u6570\u636e","title":"3.3.3\u3001\u5b9e\u73b0\u529f\u80fd"},{"location":"tantan/day03/#3331todaybest","text":"package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; /** * \u4eca\u65e5\u4f73\u4eba */ @Data @NoArgsConstructor @AllArgsConstructor public class TodayBest { private Long id ; private String avatar ; private String nickname ; private String gender ; //\u6027\u522b man woman private Integer age ; private String [] tags ; private Long fateValue ; //\u7f18\u5206\u503c }","title":"3.3.3.1\u3001TodayBest"},{"location":"tantan/day03/#3332todaybestcontroller","text":"package com.tanhua.server.controller ; import com.tanhua.server.service.TodayBestService ; import com.tanhua.server.vo.TodayBest ; import lombok.extern.slf4j.Slf4j ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.bind.annotation.RequestHeader ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RestController ; @RestController @RequestMapping ( \"tanhua\" ) @Slf4j public class TodayBestController { @Autowired private TodayBestService todayBestService ; /** * \u67e5\u8be2\u4eca\u65e5\u4f73\u4eba * * @param token * @return */ @GetMapping ( \"todayBest\" ) public ResponseEntity < TodayBest > queryTodayBest ( @RequestHeader ( \"Authorization\" ) String token ) { try { TodayBest todayBest = this . todayBestService . queryTodayBest ( token ); if ( null != todayBest ) { return ResponseEntity . ok ( todayBest ); } } catch ( Exception e ) { log . error ( \"\u67e5\u8be2\u4eca\u65e5\u4f73\u4eba\u51fa\u9519~ token = \" + token , e ); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). body ( null ); } }","title":"3.3.3.2\u3001TodayBestController"},{"location":"tantan/day03/#3333todaybestservice","text":"package com.tanhua.server.service ; import com.tanhua.server.pojo.User ; import com.tanhua.server.pojo.UserInfo ; import com.tanhua.server.vo.TodayBest ; import org.apache.commons.lang3.StringUtils ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.beans.factory.annotation.Value ; import org.springframework.stereotype.Service ; @Service public class TodayBestService { @Autowired private UserService userService ; @Autowired private RecommendUserService recommendUserService ; @Autowired private UserInfoService userInfoService ; @Value ( \"${tanhua.sso.default.user}\" ) private Long defaultUser ; public TodayBest queryTodayBest ( String token ) { //\u6821\u9a8ctoken\u662f\u5426\u6709\u6548\uff0c\u901a\u8fc7SSO\u7684\u63a5\u53e3\u8fdb\u884c\u6821\u9a8c User user = this . userService . queryUserByToken ( token ); if ( null == user ) { //token\u975e\u6cd5\u6216\u5df2\u7ecf\u8fc7\u671f return null ; } //\u67e5\u8be2\u63a8\u8350\u7528\u6237\uff08\u4eca\u65e5\u4f73\u4eba\uff09 TodayBest todayBest = this . recommendUserService . queryTodayBest ( user . getId ()); if ( null == todayBest ){ //\u7ed9\u51fa\u9ed8\u8ba4\u7684\u63a8\u8350\u7528\u6237 todayBest = new TodayBest (); todayBest . setId ( defaultUser ); todayBest . setFateValue ( 80L ); //\u56fa\u5b9a\u503c } //\u8865\u5168\u4e2a\u4eba\u4fe1\u606f UserInfo userInfo = this . userInfoService . queryUserInfoByUserId ( todayBest . getId ()); if ( null == userInfo ){ return null ; } todayBest . setAvatar ( userInfo . getLogo ()); todayBest . setNickname ( userInfo . getNickName ()); todayBest . setTags ( StringUtils . split ( userInfo . getTags (), ',' )); todayBest . setGender ( userInfo . getSex (). getValue () == 1 ? \"man\" : \"woman\" ); todayBest . setAge ( userInfo . getAge ()); return todayBest ; } }","title":"3.3.3.3\u3001TodayBestService"},{"location":"tantan/day03/#3334userservice","text":"package com.tanhua.server.service ; import com.fasterxml.jackson.databind.ObjectMapper ; import com.tanhua.server.pojo.User ; import lombok.extern.slf4j.Slf4j ; import org.apache.commons.lang3.StringUtils ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.beans.factory.annotation.Value ; import org.springframework.stereotype.Service ; import org.springframework.web.client.RestTemplate ; @Service @Slf4j public class UserService { @Autowired private RestTemplate restTemplate ; @Value ( \"${tanhua.sso.url}\" ) private String ssoUrl ; private static final ObjectMapper MAPPER = new ObjectMapper (); /** * \u901a\u8fc7sso\u7684rest\u63a5\u53e3\u67e5\u8be2 * * @param token * @return */ public User queryUserByToken ( String token ) { String url = ssoUrl + \"/user/\" + token ; try { String data = this . restTemplate . getForObject ( url , String . class ); if ( StringUtils . isEmpty ( data )) { return null ; } return MAPPER . readValue ( data , User . class ); } catch ( Exception e ) { log . error ( \"\u6821\u9a8ctoken\u51fa\u9519\uff0ctoken = \" + token , e ); } return null ; } } package com.tanhua.server.config ; import org.springframework.context.annotation.Bean ; import org.springframework.context.annotation.Configuration ; import org.springframework.http.client.ClientHttpRequestFactory ; import org.springframework.http.client.SimpleClientHttpRequestFactory ; import org.springframework.http.converter.StringHttpMessageConverter ; import org.springframework.web.client.RestTemplate ; import java.nio.charset.Charset ; @Configuration public class RestTemplateConfig { @Bean public RestTemplate restTemplate ( ClientHttpRequestFactory factory ) { RestTemplate restTemplate = new RestTemplate ( factory ); // \u652f\u6301\u4e2d\u6587\u7f16\u7801 restTemplate . getMessageConverters (). set ( 1 , new StringHttpMessageConverter ( Charset . forName ( \"UTF-8\" ))); return restTemplate ; } @Bean public ClientHttpRequestFactory simpleClientHttpRequestFactory () { SimpleClientHttpRequestFactory factory = new SimpleClientHttpRequestFactory (); factory . setReadTimeout ( 5000 ); //\u5355\u4f4d\u4e3ams factory . setConnectTimeout ( 5000 ); //\u5355\u4f4d\u4e3ams return factory ; } }","title":"3.3.3.4\u3001UserService"},{"location":"tantan/day03/#3335recommenduserservice","text":"package com.tanhua.server.service ; import com.alibaba.dubbo.config.annotation.Reference ; import com.tanhua.dubbo.server.api.RecommendUserApi ; import com.tanhua.dubbo.server.pojo.RecommendUser ; import com.tanhua.server.vo.TodayBest ; import org.springframework.stereotype.Service ; /** * \u8d1f\u8d23\u4e0edubbo\u670d\u52a1\u8fdb\u884c\u4ea4\u4e92 */ @Service public class RecommendUserService { @Reference ( version = \"1.0.0\" ) private RecommendUserApi recommendUserApi ; public TodayBest queryTodayBest ( Long userId ) { RecommendUser recommendUser = this . recommendUserApi . queryWithMaxScore ( userId ); if ( null == recommendUser ){ return null ; } TodayBest todayBest = new TodayBest (); todayBest . setId ( recommendUser . getUserId ()); //\u7f18\u5206\u503c double score = Math . floor ( recommendUser . getScore ()); //\u53d6\u6574,98.2 -> 98 todayBest . setFateValue ( Double . valueOf ( score ). longValue ()); return todayBest ; } }","title":"3.3.3.5\u3001RecommendUserService"},{"location":"tantan/day03/#3336userinfoservice","text":"package com.tanhua.server.service ; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper ; import com.tanhua.server.mapper.UserInfoMapper ; import com.tanhua.server.pojo.UserInfo ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; @Service public class UserInfoService { @Autowired private UserInfoMapper userInfoMapper ; public UserInfo queryUserInfoByUserId ( Long userId ) { QueryWrapper < UserInfo > queryWrapper = new QueryWrapper <> (); queryWrapper . eq ( \"user_id\" , userId ); return this . userInfoMapper . selectOne ( queryWrapper ); } }","title":"3.3.3.6\u3001UserInfoService"},{"location":"tantan/day03/#3337userinfomapper","text":"package com.tanhua.server.mapper ; import com.baomidou.mybatisplus.core.mapper.BaseMapper ; import com.tanhua.common.pojo.UserInfo ; public interface UserInfoMapper extends BaseMapper < UserInfo > { }","title":"3.3.3.7\u3001UserInfoMapper"},{"location":"tantan/day03/#334","text":"\u5355\u5143\u6d4b\u8bd5\uff0c\u6d4b\u8bd5dubbo\u670d\u52a1\uff1a package com.tanhua.server ; import com.tanhua.server.service.RecommendUserService ; import com.tanhua.server.vo.TodayBest ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner ; @SpringBootTest @RunWith ( SpringJUnit4ClassRunner . class ) public class TestRecommendUserApi { @Autowired private RecommendUserService recommendUserService ; @Test public void testQueryTodayBest (){ TodayBest todayBest = this . recommendUserService . queryTodayBest ( 1L ); System . out . println ( todayBest ); } } \u6574\u5408\u529f\u80fd\u6d4b\u8bd5\uff0c\u9700\u8981\u5c06sso\u3001dubbo\u670d\u52a1\u542f\u52a8\u5b8c\u6210\u540e\u8fdb\u884c\u6d4b\u8bd5\u3002","title":"3.3.4\u3001\u6d4b\u8bd5"},{"location":"tantan/day03/#335mongodbbug","text":"\u5728\u9879\u76ee\u4e2d\uff0c\u6dfb\u52a0\u4e86mongo\u7684\u4f9d\u8d56\u7684\u8bdd\uff0cspringboot\u5c31\u4f1a\u81ea\u52a8\u53bb\u8fde\u63a5\u672c\u5730\u7684mongo\uff0c\u7531\u4e8e\u4ed6\u8fde\u63a5\u4e0d\u4e0a\u4f1a\u5bfc\u81f4\u51fa\u9519\u3002 \u89e3\u51b3\uff1a springboot\u4e2d\u6dfb\u52a0\u6392\u9664\u81ea\u52a8\u914d\u7f6e\u7684\u6ce8\u89e3 package com.tanhua.server ; import org.mybatis.spring.annotation.MapperScan ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration ; import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration ; @MapperScan ( \"com.tanhua.server.mapper\" ) //\u8bbe\u7f6emapper\u63a5\u53e3\u7684\u626b\u63cf\u5305 @SpringBootApplication ( exclude = { MongoAutoConfiguration . class , MongoDataAutoConfiguration . class }) //\u6392\u9664mongo\u7684\u81ea\u52a8\u914d\u7f6e public class ServerApplication { public static void main ( String [] args ) { SpringApplication . run ( ServerApplication . class , args ); } }","title":"3.3.5\u3001\u89e3\u51b3MongoDB\u542f\u52a8bug"},{"location":"tantan/day03/#4","text":"","title":"4\u3001\u63a8\u8350\u5217\u8868"},{"location":"tantan/day03/#41mock","text":"\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/623","title":"4.1\u3001mock\u63a5\u53e3"},{"location":"tantan/day03/#42","text":"package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class RecommendUserQueryParam { private Integer page = 1 ; //\u5f53\u524d\u9875\u6570 private Integer pagesize = 10 ; //\u9875\u5c3a\u5bf8 private String gender ; //\u6027\u522b man woman private String lastLogin ; //\u8fd1\u671f\u767b\u9646\u65f6\u95f4 private Integer age ; //\u5e74\u9f84 private String city ; //\u5c45\u4f4f\u5730 private String education ; //\u5b66\u5386 }","title":"4.2\u3001\u67e5\u8be2\u53c2\u6570\u5bf9\u8c61"},{"location":"tantan/day03/#43","text":"package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import java.util.Collections ; import java.util.List ; @Data @AllArgsConstructor @NoArgsConstructor public class PageResult { private Integer counts = 0 ; //\u603b\u8bb0\u5f55\u6570 private Integer pagesize = 0 ; //\u9875\u5927\u5c0f private Integer pages = 0 ; //\u603b\u9875\u6570 private Integer page = 0 ; //\u5f53\u524d\u9875\u7801 private List <?> items = Collections . emptyList (); //\u5217\u8868 }","title":"4.3\u3001\u7ed3\u679c\u5bf9\u8c61"},{"location":"tantan/day03/#44controller","text":"/** * \u67e5\u8be2\u63a8\u8350\u7528\u6237\u5217\u8868 * * @param token * @param queryParam * @return */ @GetMapping ( \"recommendation\" ) public ResponseEntity < PageResult > queryRecommendation ( @RequestHeader ( \"Authorization\" ) String token , RecommendUserQueryParam queryParam ){ try { PageResult pageResult = this . todayBestService . queryRecommendation ( token , queryParam ); if ( null != pageResult ) { return ResponseEntity . ok ( pageResult ); } } catch ( Exception e ) { log . error ( \"\u67e5\u8be2\u63a8\u8350\u7528\u6237\u5217\u8868\u51fa\u9519~ token = \" + token , e ); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). body ( null ); }","title":"4.4\u3001Controller"},{"location":"tantan/day03/#45service","text":"/** * \u67e5\u8be2\u63a8\u8350\u7528\u6237\u5217\u8868 * * @param queryParam * @param token * @return */ public PageResult queryRecommendation ( String token , RecommendUserQueryParam queryParam ) { //\u6821\u9a8ctoken\u662f\u5426\u6709\u6548\uff0c\u901a\u8fc7SSO\u7684\u63a5\u53e3\u8fdb\u884c\u6821\u9a8c User user = this . userService . queryUserByToken ( token ); if ( null == user ) { //token\u975e\u6cd5\u6216\u5df2\u7ecf\u8fc7\u671f return null ; } PageResult pageResult = new PageResult (); pageResult . setPage ( queryParam . getPage ()); pageResult . setPagesize ( queryParam . getPagesize ()); PageInfo < RecommendUser > pageInfo = this . recommendUserService . queryRecommendUserList ( user . getId (), queryParam . getPage (), queryParam . getPagesize ()); List < RecommendUser > records = pageInfo . getRecords (); if ( CollectionUtils . isEmpty ( records )) { //\u6ca1\u6709\u67e5\u8be2\u5230\u63a8\u8350\u7684\u7528\u6237\u5217\u8868 return pageResult ; } //\u586b\u5145\u4e2a\u4eba\u4fe1\u606f //\u6536\u96c6\u63a8\u8350\u7528\u6237\u7684id Set < Long > userIds = new HashSet <> (); for ( RecommendUser record : records ) { userIds . add ( record . getUserId ()); } QueryWrapper < UserInfo > queryWrapper = new QueryWrapper <> (); //\u7528\u6237id\u53c2\u6570 queryWrapper . in ( \"user_id\" , userIds ); if ( StringUtils . isNotEmpty ( queryParam . getGender ())) { //\u9700\u8981\u6027\u522b\u53c2\u6570\u67e5\u8be2 queryWrapper . eq ( \"sex\" , StringUtils . equals ( queryParam . getGender (), \"man\" ) ? 1 : 2 ); } if ( StringUtils . isNotEmpty ( queryParam . getCity ())) { //\u9700\u8981\u57ce\u5e02\u53c2\u6570\u67e5\u8be2 queryWrapper . like ( \"city\" , queryParam . getCity ()); } if ( queryParam . getAge () != null ) { //\u8bbe\u7f6e\u5e74\u9f84\u53c2\u6570\uff0c\u6761\u4ef6\uff1a\u5c0f\u4e8e\u7b49\u4e8e queryWrapper . le ( \"age\" , queryParam . getAge ()); } List < UserInfo > userInfoList = this . userInfoService . queryUserInfoList ( queryWrapper ); if ( CollectionUtils . isEmpty ( userInfoList )){ //\u6ca1\u6709\u67e5\u8be2\u5230\u7528\u6237\u7684\u57fa\u672c\u4fe1\u606f return pageResult ; } List < TodayBest > todayBests = new ArrayList <> (); for ( UserInfo userInfo : userInfoList ) { TodayBest todayBest = new TodayBest (); todayBest . setId ( userInfo . getUserId ()); todayBest . setAvatar ( userInfo . getLogo ()); todayBest . setNickname ( userInfo . getNickName ()); todayBest . setTags ( StringUtils . split ( userInfo . getTags (), ',' )); todayBest . setGender ( userInfo . getSex (). getValue () == 1 ? \"man\" : \"woman\" ); todayBest . setAge ( userInfo . getAge ()); //\u7f18\u5206\u503c for ( RecommendUser record : records ) { if ( record . getUserId (). longValue () == userInfo . getUserId (). longValue ()){ double score = Math . floor ( record . getScore ()); //\u53d6\u6574,98.2 -> 98 todayBest . setFateValue ( Double . valueOf ( score ). longValue ()); break ; } } todayBests . add ( todayBest ); } //\u6309\u7167\u7f18\u5206\u503c\u8fdb\u884c\u5012\u5e8f\u6392\u5e8f Collections . sort ( todayBests , ( o1 , o2 ) -> new Long ( o2 . getFateValue () - o1 . getFateValue ()). intValue ()); pageResult . setItems ( todayBests ); return pageResult ; } //RecommendUserService public PageInfo < RecommendUser > queryRecommendUserList ( Long id , Integer page , Integer pagesize ) { return this . recommendUserApi . queryPageInfo ( id , page , pagesize ); } //UserInfoService /** * \u67e5\u8be2\u7528\u6237\u4fe1\u606f\u5217\u8868 * * @param queryWrapper * @return */ public List < UserInfo > queryUserInfoList ( QueryWrapper queryWrapper ) { return this . userInfoMapper . selectList ( queryWrapper ); }","title":"4.5\u3001Service"},{"location":"tantan/day03/#46","text":"","title":"4.6\u3001\u6d4b\u8bd5"},{"location":"tantan/day03/#5","text":"\u5728\u63a5\u53e3\u670d\u52a1\u4e2d\uff0c\u6709\u5fc5\u8981\u5bf9\u4e8e\u63a5\u53e3\u8fdb\u884c\u7f13\u5b58\u5904\u7406\uff0c\u5c24\u5176\u662fGET\u8bf7\u6c42\uff0c\u5982\u679c\u6bcf\u4e2a\u63a5\u53e3\u5355\u72ec\u6dfb\u52a0\u7684\u8bdd\u4f1a\u5b58\u5728\u5f88\u591a\u7684\u91cd\u590d\u7684\u903b\u8f91\uff0c\u6240\u4ee5\u53ef\u4ee5\u7f16\u5199\u4e00\u5957\u901a\u7528\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u5b9e\u73b0\u601d\u8def\uff1a \u901a\u8fc7\u62e6\u622a\u5668\u5b9e\u73b0\u5bf9\u8bf7\u6c42\u7684\u62e6\u622a\uff0c\u5728\u62e6\u622a\u5668\u4e2d\u5b9e\u73b0\u7f13\u5b58\u7684\u547d\u4e2d\u3002 \u901a\u8fc7ResponseBodyAdvice\u8fdb\u884c\u5bf9\u54cd\u5e94\u7684\u62e6\u622a\uff0c\u53ef\u4ee5\u5c06\u6570\u636e\u7f13\u5b58\u5230Redis\u4e2d\u3002 \u8003\u8651\u5230\uff0c\u4e0d\u80fd\u5bf9\u4e8e\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u4e00\u5200\u5207\uff0c\u6240\u4ee5\u9700\u8981\u521b\u5efa@Cache\u6ce8\u89e3\u8fdb\u884c\u6807\u8bb0\uff0c\u53ea\u6709\u6807\u8bb0\u7684Controller\u624d\u8fdb\u884c\u7f13\u5b58\u5904\u7406\u3002 \u7f13\u5b58\u7684\u5904\u7406\u4e2d\uff0c\u4ec5\u9488\u5bf9GET\u8bf7\u6c42\u5904\u7406\uff0c\u5176\u4ed6\u7684\u8bf7\u6c42\u5747\u4e0d\u505a\u5904\u7406\u3002","title":"5\u3001\u7f13\u5b58"},{"location":"tantan/day03/#51","text":"package com.tanhua.server.utils ; import java.lang.annotation.* ; /** * \u88ab\u6807\u8bb0\u4e3aCache\u7684Controller\u8fdb\u884c\u7f13\u5b58\uff0c\u5176\u4ed6\u60c5\u51b5\u4e0d\u8fdb\u884c\u7f13\u5b58 */ @Target ( ElementType . METHOD ) @Retention ( RetentionPolicy . RUNTIME ) @Documented //\u6807\u8bb0\u6ce8\u89e3 public @interface Cache { /** * \u7f13\u5b58\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4e3a60\u79d2 * @return */ String time () default \"60\" ; }","title":"5.1\u3001\u81ea\u5b9a\u4e49\u6ce8\u89e3"},{"location":"tantan/day03/#52","text":"\u7f16\u5199\u62e6\u622a\u5668\uff1aRedisCacheInterceptor\u3002 package com.tanhua.server.interceptor ; import com.fasterxml.jackson.databind.ObjectMapper ; import com.tanhua.server.utils.Cache ; import org.apache.commons.codec.digest.DigestUtils ; import org.apache.commons.lang3.StringUtils ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.beans.factory.annotation.Value ; import org.springframework.data.redis.core.RedisTemplate ; import org.springframework.stereotype.Component ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.method.HandlerMethod ; import org.springframework.web.servlet.HandlerInterceptor ; import javax.servlet.http.HttpServletRequest ; import javax.servlet.http.HttpServletResponse ; @Component public class RedisCacheInterceptor implements HandlerInterceptor { @Value ( \"${tanhua.cache.enable}\" ) private Boolean enable ; @Autowired private RedisTemplate < String , String > redisTemplate ; private static final ObjectMapper MAPPER = new ObjectMapper (); @Override public boolean preHandle ( HttpServletRequest request , HttpServletResponse response , Object handler ) throws Exception { //\u7f13\u5b58\u7684\u5168\u5c40\u5f00\u5173\u7684\u6821\u9a8c if ( ! enable ) { return true ; } //\u6821\u9a8chandler\u662f\u5426\u662fHandlerMethod if ( ! ( handler instanceof HandlerMethod )) { return true ; } //\u5224\u65ad\u662f\u5426\u4e3aget\u8bf7\u6c42 if ( ! (( HandlerMethod ) handler ). hasMethodAnnotation ( GetMapping . class )) { return true ; } //\u5224\u65ad\u662f\u5426\u6dfb\u52a0\u4e86@Cache\u6ce8\u89e3 if ( ! (( HandlerMethod ) handler ). hasMethodAnnotation ( Cache . class )) { return true ; } //\u7f13\u5b58\u547d\u4e2d String redisKey = createRedisKey ( request ); String cacheData = this . redisTemplate . opsForValue (). get ( redisKey ); if ( StringUtils . isEmpty ( cacheData )){ //\u7f13\u5b58\u672a\u547d\u4e2d return true ; } // \u5c06data\u6570\u636e\u8fdb\u884c\u54cd\u5e94 response . setCharacterEncoding ( \"UTF-8\" ); response . setContentType ( \"application/json; charset=utf-8\" ); response . getWriter (). write ( cacheData ); return false ; } /** * \u751f\u6210redis\u4e2d\u7684key\uff0c\u89c4\u5219\uff1aSERVER_CACHE_DATA_MD5(url + param + token) * * @param request * @return */ public static String createRedisKey ( HttpServletRequest request ) throws Exception { String url = request . getRequestURI (); String param = MAPPER . writeValueAsString ( request . getParameterMap ()); String token = request . getHeader ( \"Authorization\" ); String data = url + \"_\" + param + \"_\" + token ; return \"SERVER_CACHE_DATA_\" + DigestUtils . md5Hex ( data ); } } application.properties\uff1a #\u662f\u5426\u5f00\u542f\u6570\u636e\u7f13\u5b58 tanhua.cache.enable = false # Redis\u76f8\u5173\u914d\u7f6e spring.redis.jedis.pool.max-wait = 5000ms spring.redis.jedis.pool.max-Idle = 100 spring.redis.jedis.pool.min-Idle = 10 spring.redis.timeout = 10s spring.redis.cluster.nodes = 192.168.31.81:6379,192.168.31.81:6380,192.168.31.81:6381 spring.redis.cluster.max-redirects = 5 \u6ce8\u518c\u62e6\u622a\u5668\u5230Spring\u5bb9\u5668\uff1a package com.tanhua.server.config ; import com.tanhua.server.interceptor.RedisCacheInterceptor ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.context.annotation.Configuration ; import org.springframework.web.servlet.config.annotation.InterceptorRegistry ; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer ; @Configuration public class WebConfig implements WebMvcConfigurer { @Autowired private RedisCacheInterceptor redisCacheInterceptor ; @Override public void addInterceptors ( InterceptorRegistry registry ) { registry . addInterceptor ( this . redisCacheInterceptor ). addPathPatterns ( \"/**\" ); } }","title":"5.2\u3001\u91c7\u7528\u62e6\u622a\u5668\u8fdb\u884c\u7f13\u5b58\u547d\u4e2d"},{"location":"tantan/day03/#43_1","text":"\u4f7f\u7528ResponseBodyAdvice\u8fdb\u884c\u5bf9\u54cd\u5e94\u7ed3\u679c\u5904\u7406\uff0c\u5c06\u7ed3\u679c\u5199\u5165\u5230Redis\u4e2d\uff1a \u5177\u4f53\u5b9e\u73b0\uff1a package com.tanhua.server.interceptor ; import com.fasterxml.jackson.databind.ObjectMapper ; import com.tanhua.server.utils.Cache ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.beans.factory.annotation.Value ; import org.springframework.core.MethodParameter ; import org.springframework.data.redis.core.RedisTemplate ; import org.springframework.http.MediaType ; import org.springframework.http.server.ServerHttpRequest ; import org.springframework.http.server.ServerHttpResponse ; import org.springframework.http.server.ServletServerHttpRequest ; import org.springframework.web.bind.annotation.ControllerAdvice ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice ; import java.util.concurrent.TimeUnit ; @ControllerAdvice public class MyResponseBodyAdvice implements ResponseBodyAdvice { @Value ( \"${tanhua.cache.enable}\" ) private Boolean enable ; @Autowired private RedisTemplate < String , String > redisTemplate ; private static final ObjectMapper MAPPER = new ObjectMapper (); @Override public boolean supports ( MethodParameter returnType , Class converterType ) { // \u5f00\u5173\u5904\u4e8e\u5f00\u542f\u72b6\u6001 \u662fget\u8bf7\u6c42 \u5305\u542b\u4e86@Cache\u6ce8\u89e3 return enable && returnType . hasMethodAnnotation ( GetMapping . class ) && returnType . hasMethodAnnotation ( Cache . class ); } @Override public Object beforeBodyWrite ( Object body , MethodParameter returnType , MediaType selectedContentType , Class selectedConverterType , ServerHttpRequest request , ServerHttpResponse response ) { if ( null == body ) { return null ; } try { String redisValue = null ; if ( body instanceof String ) { redisValue = ( String ) body ; } else { redisValue = MAPPER . writeValueAsString ( body ); } String redisKey = RedisCacheInterceptor . createRedisKey ((( ServletServerHttpRequest ) request ). getServletRequest ()); Cache cache = returnType . getMethodAnnotation ( Cache . class ); //\u7f13\u5b58\u7684\u65f6\u95f4\u5355\u4f4d\u662f\u79d2 this . redisTemplate . opsForValue (). set ( redisKey , redisValue , Long . valueOf ( cache . time ()), TimeUnit . SECONDS ); } catch ( Exception e ) { e . printStackTrace (); } return body ; } }","title":"4.3\u3001\u54cd\u5e94\u7ed3\u679c\u5199\u5165\u5230\u7f13\u5b58"},{"location":"tantan/day03/#44","text":"\u53ef\u4ee5\u770b\u5230\u6570\u636e\u5df2\u7ecf\u7f13\u5b58\u5230Redis\u4e2d\uff0c\u5e76\u4e14\u5176\u7f13\u5b58\u65f6\u95f4\u4e5f\u662f30\u79d2\uff0c\u4e0e\u9884\u671f\u4e00\u81f4\u3002","title":"4.4\u3001\u6d4b\u8bd5"},{"location":"tantan/day03/#6","text":"\u6d4b\u8bd5\u65f6\u9700\u8981\u6ce8\u610f\uff0c\u7531\u4e8e\u7528\u6237\u6570\u636e\u8f83\u5c11\uff0c\u6240\u4ee5\u6d4b\u8bd5\u65f6\u9700\u8981\u628a\u6761\u4ef6\u6ce8\u91ca\u6389\uff0c\u5426\u5219\u67e5\u8be2\u4e0d\u5230\u6570\u636e\uff1a \u6548\u679c\uff1a","title":"6\u3001\u6574\u5408\u6d4b\u8bd5"},{"location":"tantan/day03/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/","text":"\u4e86\u89e3\u9996\u9875\u529f\u80fd \u7406\u89e3\u7cfb\u7edf\u67b6\u6784\u4ee5\u53ca\u642d\u5efa\u5de5\u7a0b \u72ec\u7acb\u5b8c\u6210dubbo\u670d\u52a1\u7684\u5f00\u53d1 \u72ec\u7acb\u5b8c\u6210\u4eca\u65e5\u4f73\u4eba\u7684\u529f\u80fd \u72ec\u7acb\u5b8c\u6210\u63a8\u8350\u7528\u6237\u5217\u8868\u7684\u529f\u80fd \u638c\u63e1\u7f13\u5b58\u7684\u6dfb\u52a0\u903b\u8f91 \u638c\u63e1\u6574\u5408\u6d4b\u8bd5","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"tantan/day04/","text":"\u8bfe\u7a0b\u8bf4\u660e \u00b6 \u62bd\u53d6common\u5de5\u7a0b \u5708\u5b50\u529f\u80fd\u8bf4\u660e \u5708\u5b50\u6280\u672f\u5b9e\u73b0 \u5708\u5b50\u6280\u672f\u65b9\u6848 \u5708\u5b50\u5b9e\u73b0\u53d1\u5e03\u52a8\u6001 \u5708\u5b50\u5b9e\u73b0\u597d\u53cb\u52a8\u6001 \u5708\u5b50\u5b9e\u73b0\u63a8\u8350\u52a8\u6001 1\u3001\u62bd\u53d6common\u5de5\u7a0b \u00b6 \u5728\u9879\u76ee\u4e2d\u4e00\u822c\u9700\u8981\u5c06\u516c\u7528\u7684\u5bf9\u8c61\u8fdb\u884c\u62bd\u53d6\u653e\u5230common\u5de5\u7a0b\u4e2d\uff0c\u5176\u4ed6\u7684\u5de5\u7a0b\u4f9d\u8d56\u6b64\u5de5\u7a0b\u5373\u53ef\u3002\u4e0b\u9762\u6211\u4eec\u5c06sso\u4ee5\u53caserver\u5de5\u7a0b\u4e2d\u7684\u516c\u7528\u7684\u5bf9\u8c61\u8fdb\u884c\u62bd\u53d6\u3002 1.1\u3001\u521b\u5efamy-tanhua-common\u5de5\u7a0b \u00b6 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> my-tanhua </artifactId> <groupId> cn.itcast.tanhua </groupId> <version> 1.0-SNAPSHOT </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> my-tanhua-common </artifactId> <dependencies> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> </dependency> <dependency> <groupId> com.baomidou </groupId> <artifactId> mybatis-plus-boot-starter </artifactId> </dependency> <dependency> <groupId> com.fasterxml.jackson.core </groupId> <artifactId> jackson-databind </artifactId> </dependency> </dependencies> </project> 1.2\u3001\u901a\u7528\u679a\u4e3e \u00b6 \u5c06SexEnum\u679a\u4e3e\u79fb\u52a8\u81f3common\u5de5\u7a0b\uff0c\u5e76\u4e14\u540e\u7eed\u521b\u5efa\u7684\u679a\u4e3e\u4e5f\u8981\u653e\u5230\u6b21\u5de5\u7a0b\u4e2d\uff0c\u4ee5\u8fbe\u5230\u516c\u7528\u7684\u76ee\u7684\u3002 package com.tanhua.common.enums ; import com.baomidou.mybatisplus.core.enums.IEnum ; public enum SexEnum implements IEnum < Integer > { MAN ( 1 , \"\u7537\" ), WOMAN ( 2 , \"\u5973\" ), UNKNOWN ( 3 , \"\u672a\u77e5\" ); private int value ; private String desc ; SexEnum ( int value , String desc ) { this . value = value ; this . desc = desc ; } @Override public Integer getValue () { return this . value ; } @Override public String toString () { return this . desc ; } } \u9700\u8981\u4fee\u6539server\u4e0esso\u5de5\u7a0b\u4e2d\u7684application.properties\u914d\u7f6e\uff1a # \u679a\u4e3e\u5305\u626b\u63cf mybatis-plus.type-enums-package = com.tanhua.common.enums \u5c06server\u4e0esso\u5de5\u7a0b\u4e2d\u7684SexEnum\u5bf9\u8c61\u5220\u9664\u4ee5\u53ca\u5c06\u76f8\u5173\u7684\u7c7b\u5f15\u7528\u8fdb\u884c\u4fee\u6539\u3002 1.3\u3001\u62bd\u53d6mapper \u00b6 \u9700\u8981\u5c06UserInfoMapper\u4ee5\u53caUserMapper\u653e\u7f6e\u5230common\u5de5\u7a0b\u7684com.tanhua.common.mapper\u5305\u4e0b\u3002 package com.tanhua.common.mapper ; import com.baomidou.mybatisplus.core.mapper.BaseMapper ; import com.tanhua.common.pojo.User ; public interface UserMapper extends BaseMapper < User > { } package com.tanhua.common.mapper ; import com.baomidou.mybatisplus.core.mapper.BaseMapper ; import com.tanhua.common.pojo.UserInfo ; public interface UserInfoMapper extends BaseMapper < UserInfo > { } \u8bf4\u660e\uff1a\u62bd\u53d6\u5b8c\u6210\u540e\uff0c\u9700\u8981\u5c06\u539f\u5de5\u7a0b\u7684\u4ee3\u7801\u5220\u9664\u4ee5\u53ca\u4fee\u6539\u5176\u4ed6\u4ee3\u7801\u4e2d\u5f15\u5165\u7684\u4f9d\u8d56\u3002 1.4\u3001\u62bd\u53d6pojo \u00b6 \u5c06BasePojo\u3001User\u3001UserInfo\u79fb\u52a8\u81f3common\u5de5\u7a0b\uff1a 1.5\u3001\u62bd\u53d6utils \u00b6 \u5c06server\u5de5\u7a0b\u7684utils\u8fdb\u884c\u62bd\u53d6\u516c\u7528\uff0c\u540e\u7eed\u7684\u5de5\u5177\u7c7b\u4e5f\u653e\u7f6e\u5230common\u5de5\u7a0b\u4e2d\u3002 \u62bd\u53d6\u5b8c\u6210\u540e\u8fdb\u884c\u6d4b\u8bd5\uff0c\u786e\u4fdd\u53ef\u4ee5\u6b63\u5e38\u542f\u52a8\u4ee5\u53ca\u529f\u80fd\u90fd\u6b63\u5e38\u3002 2\u3001\u5708\u5b50\u529f\u80fd \u00b6 2.1\u3001\u529f\u80fd\u8bf4\u660e \u00b6 \u63a2\u82b1\u4ea4\u53cb\u9879\u76ee\u4e2d\u7684\u5708\u5b50\u529f\u80fd\uff0c\u7c7b\u4f3c\u5fae\u4fe1\u7684\u670b\u53cb\u5708\uff0c\u57fa\u672c\u7684\u529f\u80fd\u4e3a\uff1a\u53d1\u5e03\u52a8\u6001\u3001\u6d4f\u89c8\u597d\u53cb\u52a8\u6001\u3001\u6d4f\u89c8\u63a8\u8350\u52a8\u6001\u3001\u70b9\u8d5e\u3001\u8bc4\u8bba\u3001\u559c\u6b22\u7b49\u529f\u80fd\u3002 \u53d1\u5e03\uff1a 2.2\u3001\u5b9e\u73b0\u65b9\u6848\u5206\u6790 \u00b6 \u5bf9\u4e8e\u5708\u5b50\u529f\u80fd\u7684\u5b9e\u73b0\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u5b83\u7684\u529f\u80fd\u7279\u70b9\u505a\u5206\u6790\uff1a \u6570\u636e\u91cf\u4f1a\u968f\u7740\u7528\u6237\u6570\u589e\u5927\u800c\u589e\u5927 \u8bfb\u591a\u5199\u5c11\uff0c\u4e00\u822c\u800c\u8a00\uff0c\u6d4f\u89c8\u670b\u53cb\u5708\u52a8\u6001\u4f1a\u591a\u4e00\u4e9b\uff0c\u53d1\u52a8\u6001\u76f8\u5bf9\u5c31\u4f1a\u5c11\u4e00\u4e9b \u975e\u597d\u53cb\u770b\u4e0d\u5230\u5176\u52a8\u6001\u5185\u5bb9 \u2026\u2026 \u9488\u5bf9\u4ee5\u4e0a\u7279\u70b9\uff0c\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\uff1a \u5bf9\u4e8e\u6570\u636e\u91cf\u5927\u800c\u8a00\uff0c\u663e\u7136\u4e0d\u80fd\u591f\u4f7f\u7528\u5173\u7cfb\u578b\u6570\u636e\u5e93\u8fdb\u884c\u5b58\u50a8\uff0c\u6211\u4eec\u9700\u8981\u901a\u8fc7MongoDB\u8fdb\u884c\u5b58\u50a8 \u5bf9\u4e8e\u8bfb\u591a\u5199\u5c11\u7684\u5e94\u7528\uff0c\u5c3d\u53ef\u80fd\u7684\u51cf\u5c11\u8bfb\u53d6\u6570\u636e\u7684\u6210\u672c \u6bd4\u5982\u8bf4\uff0c\u4e00\u6761SQL\u8bed\u53e5\uff0c\u5355\u5f20\u8868\u67e5\u8be2\u4e00\u5b9a\u6bd4\u591a\u5f20\u8868\u67e5\u8be2\u8981\u5feb \u6761\u4ef6\u8d8a\u591a\u7684\u67e5\u8be2\u901f\u5ea6\u5c06\u8d8a\u6162\uff0c\u5c3d\u53ef\u80fd\u7684\u51cf\u5c11\u6761\u4ef6\u4ee5\u63d0\u5347\u67e5\u8be2\u901f\u5ea6 \u6240\u4ee5\u5bf9\u4e8e\u5b58\u50a8\u800c\u8a00\uff0c\u4e3b\u8981\u662f\u6838\u5fc3\u76844\u5f20\u8868\uff1a \u53d1\u5e03\u8868\uff1a\u8bb0\u5f55\u4e86\u6240\u6709\u7528\u6237\u7684\u53d1\u5e03\u7684\u4e1c\u897f\u4fe1\u606f\uff0c\u5982\u56fe\u7247\u3001\u89c6\u9891\u7b49\u3002 \u76f8\u518c\uff1a\u76f8\u518c\u662f\u6bcf\u4e2a\u7528\u6237\u72ec\u7acb\u7684\uff0c\u8bb0\u5f55\u4e86\u8be5\u7528\u6237\u6240\u53d1\u5e03\u7684\u6240\u6709\u5185\u5bb9\u3002 \u8bc4\u8bba\uff1a\u9488\u5bf9\u67d0\u4e2a\u5177\u4f53\u53d1\u5e03\u7684\u670b\u53cb\u8bc4\u8bba\u548c\u70b9\u8d5e\u64cd\u4f5c\u3002 \u65f6\u95f4\u7ebf\uff1a\u6240\u8c13\u201c\u5237\u670b\u53cb\u5708\u201d\uff0c\u5c31\u662f\u5237\u65f6\u95f4\u7ebf\uff0c\u5c31\u662f\u4e00\u4e2a\u7528\u6237\u6240\u6709\u7684\u670b\u53cb\u7684\u53d1\u5e03\u5185\u5bb9\u3002 \u6d41\u7a0b\uff1a \u6d41\u7a0b\u8bf4\u660e\uff1a \u7528\u6237\u53d1\u5e03\u52a8\u6001\uff0c\u52a8\u6001\u4e2d\u4e00\u822c\u5305\u542b\u4e86\u56fe\u7247\u548c\u6587\u5b57\uff0c\u56fe\u7247\u4e0a\u4f20\u5230\u963f\u91cc\u4e91\uff0c\u4e0a\u4f20\u6210\u529f\u540e\u62ff\u5230\u56fe\u7247\u5730\u5740\uff0c\u5c06\u6587\u5b57\u548c\u56fe\u7247\u5730\u5740\u8fdb\u884c\u6301\u4e45\u5316\u5b58\u50a8 \u9996\u5148\uff0c\u9700\u8981\u5c06\u52a8\u6001\u6570\u636e\u5199\u5165\u5230\u53d1\u5e03\u8868\u4e2d\uff0c\u5176\u6b21\uff0c\u518d\u5199\u5165\u5230\u81ea\u5df1\u7684\u76f8\u518c\u8868\u4e2d\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u76f8\u518c\u8868\u4e2d\u53ea\u5305\u542b\u4e86\u53d1\u5e03id\uff0c\u4e0d\u4f1a\u5197\u4f59\u5b58\u50a8\u53d1\u5e03\u6570\u636e \u6700\u540e\uff0c\u9700\u8981\u5c06\u53d1\u5e03\u6570\u636e\u5f02\u6b65\u7684\u5199\u5165\u5230\u597d\u53cb\u7684\u65f6\u95f4\u7ebf\u8868\u4e2d\uff0c\u4e4b\u6240\u4ee5\u8003\u8651\u5f02\u6b65\u64cd\u4f5c\uff0c\u662f\u56e0\u4e3a\u5e0c\u671b\u53d1\u5e03\u80fd\u591f\u5c3d\u5feb\u7ed9\u7528\u6237\u53cd\u9988\uff0c\u53d1\u5e03\u6210\u529f \u597d\u53cb\u5237\u670b\u53cb\u5708\u65f6\uff0c\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u67e5\u8be2\u81ea\u5df1\u7684\u65f6\u95f4\u7ebf\u8868\u5373\u53ef\uff0c\u8fd9\u6837\u6700\u5927\u9650\u5ea6\u7684\u63d0\u5347\u4e86\u67e5\u8be2\u901f\u5ea6\uff0c\u518d\u914d\u5408redis\u7684\u7f13\u5b58\uff0c\u90a3\u901f\u5ea6\u5c06\u662f\u98de\u5feb\u7684 \u7528\u6237\u5728\u5bf9\u52a8\u6001\u5185\u5bb9\u8fdb\u884c\u70b9\u8d5e\u3001\u559c\u6b22\u3001\u8bc4\u8bba\u64cd\u4f5c\u65f6\uff0c\u53ea\u9700\u8981\u5199\u5165\u5230\u8bc4\u8bba\u8868\u5373\u53ef\uff0c\u8be5\u8868\u4e2d\u4e5f\u662f\u53ea\u4f1a\u8bb0\u5f55\u53d1\u5e03id\uff0c\u5e76\u4e0d\u4f1a\u5197\u4f59\u5b58\u50a8\u53d1\u5e03\u6570\u636e 2.3\u3001\u8868\u7ed3\u6784\u8bbe\u8ba1 \u00b6 \u53d1\u5e03\u8868\uff1a #\u8868\u540d\uff1aqua n zi_publish { \"_id\" : \"5fae53d17e52992e78a3db61\" , #\u4e3b\u952eid \"pid\" : 1001 , #\u53d1\u5e03id\uff08Lo n g\u7c7b\u578b\uff09 \"userId\" : 1 , #\u7528\u6237id \"text\" : \"\u4eca\u5929\u5fc3\u60c5\u5f88\u597d\" , #\u6587\u672c\u5185\u5bb9 \"medias\" : \"http://xxxx/x/y/z.jpg\" , #\u5a92\u4f53\u6570\u636e\uff0c\u56fe\u7247\u6216\u5c0f\u89c6\u9891 url \"seeType\" : 1 , #\u8c01\u53ef\u4ee5\u770b\uff0c 1- \u516c\u5f00\uff0c 2- \u79c1\u5bc6\uff0c 3- \u90e8\u5206\u53ef\u89c1\uff0c 4- \u4e0d\u7ed9\u8c01\u770b \"seeList\" :[ 1 , 2 , 3 ], #\u90e8\u5206\u53ef\u89c1\u7684\u5217\u8868 \"notSeeList\" :[ 4 , 5 , 6 ], #\u4e0d\u7ed9\u8c01\u770b\u7684\u5217\u8868 \"longitude\" : 108.840974298098 , #\u7ecf\u5ea6 \"latitude\" : 34.2789316522934 , #\u7eac\u5ea6 \"locationName\" : \"\u4e0a\u6d77\u5e02\u6d66\u4e1c\u533a\" , #\u4f4d\u7f6e\u540d\u79f0 \"created\" , 1568012791171 #\u53d1\u5e03\u65f6\u95f4 } \u76f8\u518c\u8868\uff1a #\u8868\u540d\uff1aqua n zi_album_ { userId } { \"_id\" : \"5fae539d7e52992e78a3b684\" , #\u4e3b\u952eid \"publishId\" : \"5fae53d17e52992e78a3db61\" , #\u53d1\u5e03id \"created\" : 1568012791171 #\u53d1\u5e03\u65f6\u95f4 } \u65f6\u95f4\u7ebf\u8868\uff1a #\u8868\u540d\uff1aqua n zi_ t ime_li ne _ { userId } { \"_id\" : \"5fae539b7e52992e78a3b4ae\" , #\u4e3b\u952eid , \"userId\" : 2 , #\u597d\u53cbid \"publishId\" : \"5fae53d17e52992e78a3db61\" , #\u53d1\u5e03id \"date\" : 1568012791171 #\u53d1\u5e03\u65f6\u95f4 } \u8bc4\u8bba\u8868\uff1a #\u8868\u540d\uff1aqua n zi_comme nt { \"_id\" : \"5fae539d7e52992e78a3b648\" , #\u4e3b\u952eid \"publishId\" : \"5fae53d17e52992e78a3db61\" , #\u53d1\u5e03id \"commentType\" : 1 , #\u8bc4\u8bba\u7c7b\u578b\uff0c 1- \u70b9\u8d5e\uff0c 2- \u8bc4\u8bba\uff0c 3- \u559c\u6b22 \"content\" : \"\u7ed9\u529b\uff01\" , #\u8bc4\u8bba\u5185\u5bb9 \"userId\" : 2 , #\u8bc4\u8bba\u4eba \"publishUserId\" : 9 , #\u53d1\u5e03\u52a8\u6001\u7684\u4eba\u7684id \"isParent\" : false , #\u662f\u5426\u4e3a\u7236\u8282\u70b9\uff0c\u9ed8\u8ba4\u662f\u5426 \"parentId\" : 1001 , #\u7236\u8282\u70b9id \"created\" : 1568012791171 } 3\u3001\u597d\u53cb\u5173\u7cfb\u6570\u636e \u00b6 \u7531\u4e8e\u5708\u5b50\u4e2d\u4f1a\u6d89\u53ca\u7684\u597d\u53cb\u5173\u7cfb\u6570\u636e\uff0c\u867d\u7136\u73b0\u5728\u4e3b\u7ebf\u662f\u5f00\u53d1\u5708\u5b50\u529f\u80fd\uff0c\u4f46\u662f\u4e5f\u9700\u8981\u5bf9\u4e8e\u597d\u53cb\u5173\u7cfb\u6709\u6240\u4e86\u89e3\uff0c\u5728\u6211\u4eec\u63d0\u4f9b\u7684Mongodb\u6570\u636e\u5e93\u4e2d\u6709\u4e00\u4e9bmock\u6570\u636e\u3002 \u597d\u53cb\u5173\u7cfb\u7ed3\u6784\uff1a package com.tanhua.dubbo.server.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.mongodb.core.mapping.Document ; @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"tanhua_users\" ) public class Users implements java . io . Serializable { private static final long serialVersionUID = 6003135946820874230L ; private ObjectId id ; private Long userId ; //\u7528\u6237id private Long friendId ; //\u597d\u53cbid private Long date ; //\u65f6\u95f4 } \u5728mock\u6570\u636e\u4e2d\uff0c\u4e3a\u6bcf\u4e2a\u7528\u6237\u6784\u9020\u4e8610\u4e2a\u597d\u53cb\u6570\u636e\uff1a 4\u3001\u67e5\u8be2\u597d\u53cb\u52a8\u6001 \u00b6 \u67e5\u8be2\u597d\u53cb\u52a8\u6001\u4e0e\u67e5\u8be2\u63a8\u8350\u52a8\u6001\u663e\u793a\u7684\u7ed3\u6784\u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u5176\u67e5\u8be2\u6570\u636e\u6e90\u4e0d\u540c\uff1a 4.1\u3001\u57fa\u7840\u4ee3\u7801 \u00b6 \u5728my-tanhua-dubbo-interface\u4e2d\u7f16\u5199\uff1a package com.tanhua.dubbo.server.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.annotation.Id ; import org.springframework.data.mongodb.core.mapping.Document ; import java.util.Date ; import java.util.List ; /** * \u53d1\u5e03\u8868\uff0c\u52a8\u6001\u5185\u5bb9 */ @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"quanzi_publish\" ) public class Publish implements java . io . Serializable { private static final long serialVersionUID = 8732308321082804771L ; @Id private ObjectId id ; //\u4e3b\u952eid private Long pid ; //\u53d1\u5e03id private Long userId ; //\u53d1\u5e03\u7528\u6237id private String text ; //\u6587\u5b57 private List < String > medias ; //\u5a92\u4f53\u6570\u636e\uff0c\u56fe\u7247\u6216\u5c0f\u89c6\u9891 url private Integer seeType ; // \u8c01\u53ef\u4ee5\u770b\uff0c1-\u516c\u5f00\uff0c2-\u79c1\u5bc6\uff0c3-\u90e8\u5206\u53ef\u89c1\uff0c4-\u4e0d\u7ed9\u8c01\u770b private List < Long > seeList ; //\u90e8\u5206\u53ef\u89c1\u7684\u5217\u8868 private List < Long > notSeeList ; //\u4e0d\u7ed9\u8c01\u770b\u7684\u5217\u8868 private String longitude ; //\u7ecf\u5ea6 private String latitude ; //\u7eac\u5ea6 private String locationName ; //\u4f4d\u7f6e\u540d\u79f0 private Long created ; //\u53d1\u5e03\u65f6\u95f4 } package com.tanhua.dubbo.server.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.annotation.Id ; import org.springframework.data.mongodb.core.mapping.Document ; import java.util.Date ; /** * \u76f8\u518c\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u81ea\u5df1\u53d1\u5e03\u7684\u6570\u636e\uff0c\u6bcf\u4e00\u4e2a\u7528\u6237\u4e00\u5f20\u8868\u8fdb\u884c\u5b58\u50a8 */ @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"quanzi_album_{userId}\" ) public class Album implements java . io . Serializable { private static final long serialVersionUID = 432183095092216817L ; @Id private ObjectId id ; //\u4e3b\u952eid private ObjectId publishId ; //\u53d1\u5e03id private Long created ; //\u53d1\u5e03\u65f6\u95f4 } package com.tanhua.dubbo.server.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.annotation.Id ; import org.springframework.data.mongodb.core.mapping.Document ; import java.util.Date ; /** * \u65f6\u95f4\u7ebf\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u53d1\u5e03\u7684\u6570\u636e\uff0c\u6bcf\u4e00\u4e2a\u7528\u6237\u4e00\u5f20\u8868\u8fdb\u884c\u5b58\u50a8 */ @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"quanzi_time_line_{userId}\" ) public class TimeLine implements java . io . Serializable { private static final long serialVersionUID = 9096178416317502524L ; @Id private ObjectId id ; private Long userId ; // \u597d\u53cbid private ObjectId publishId ; //\u53d1\u5e03id private Long date ; //\u53d1\u5e03\u7684\u65f6\u95f4 } package com.tanhua.dubbo.server.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.annotation.Id ; import org.springframework.data.mongodb.core.mapping.Document ; import java.util.Date ; /** * \u8bc4\u8bba\u8868 */ @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"quanzi_comment\" ) public class Comment implements java . io . Serializable { private static final long serialVersionUID = - 291788258125767614L ; @Id private ObjectId id ; private ObjectId publishId ; //\u53d1\u5e03id private Integer commentType ; //\u8bc4\u8bba\u7c7b\u578b\uff0c1-\u70b9\u8d5e\uff0c2-\u8bc4\u8bba\uff0c3-\u559c\u6b22 private String content ; //\u8bc4\u8bba\u5185\u5bb9 private Long userId ; //\u8bc4\u8bba\u4eba private Long publishUserId ; //\u53d1\u5e03\u52a8\u6001\u7684\u7528\u6237id private Boolean isParent = false ; //\u662f\u5426\u4e3a\u7236\u8282\u70b9\uff0c\u9ed8\u8ba4\u662f\u5426 private ObjectId parentId ; // \u7236\u8282\u70b9id private Long created ; //\u53d1\u8868\u65f6\u95f4 } 4.2\u3001dubbo\u670d\u52a1 \u00b6 \u5708\u5b50\u7684\u5177\u4f53\u4e1a\u52a1\u903b\u8f91\u7684\u5b9e\u73b0\u9700\u8981\u5728dubbo\u4e2d\u5b8c\u6210\uff0c\u6240\u4ee5\u9700\u8981\u5f00\u53d1dubbo\u670d\u52a1\u3002 4.2.1\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 \u5728my-tanhua-dubbo-interface\u5de5\u7a0b\u4e2d\uff1a package com.tanhua.dubbo.server.api ; import com.tanhua.dubbo.server.pojo.Publish ; import com.tanhua.dubbo.server.vo.PageInfo ; public interface QuanZiApi { /** * \u67e5\u8be2\u597d\u53cb\u52a8\u6001 * * @param userId \u7528\u6237id * @param page \u5f53\u524d\u9875\u6570 * @param pageSize \u6bcf\u4e00\u9875\u67e5\u8be2\u7684\u6570\u636e\u6761\u6570 * @return */ PageInfo < Publish > queryPublishList ( Long userId , Integer page , Integer pageSize ); } 4.2.2\u3001\u5b9e\u73b0\u63a5\u53e3 \u00b6 \u5728my-tanhua-dubbo-service\u4e2d\u5b8c\u6210\uff1a package com.tanhua.dubbo.server.api ; import cn.hutool.core.collection.CollUtil ; import com.alibaba.dubbo.config.annotation.Service ; import com.tanhua.dubbo.server.pojo.Publish ; import com.tanhua.dubbo.server.pojo.TimeLine ; import com.tanhua.dubbo.server.vo.PageInfo ; import org.bson.types.ObjectId ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.domain.PageRequest ; import org.springframework.data.domain.Pageable ; import org.springframework.data.domain.Sort ; import org.springframework.data.mongodb.core.MongoTemplate ; import org.springframework.data.mongodb.core.query.Criteria ; import org.springframework.data.mongodb.core.query.Query ; import java.util.ArrayList ; import java.util.List ; @Service ( version = \"1.0.0\" ) public class QuanZiApiImpl implements QuanZiApi { @Autowired private MongoTemplate mongoTemplate ; @Override public PageInfo < Publish > queryPublishList ( Long userId , Integer page , Integer pageSize ) { //\u5206\u6790\uff1a\u67e5\u8be2\u597d\u53cb\u7684\u52a8\u6001\uff0c\u5b9e\u9645\u4e0a\u67e5\u8be2\u65f6\u95f4\u7ebf\u8868 PageInfo < Publish > pageInfo = new PageInfo <> (); pageInfo . setPageNum ( page ); pageInfo . setPageSize ( pageSize ); Pageable pageable = PageRequest . of ( page - 1 , pageSize , Sort . by ( Sort . Order . desc ( \"date\" ))); Query query = new Query (). with ( pageable ); List < TimeLine > timeLineList = this . mongoTemplate . find ( query , TimeLine . class , \"quanzi_time_line_\" + userId ); if ( CollUtil . isEmpty ( timeLineList )){ //\u6ca1\u6709\u67e5\u8be2\u5230\u6570\u636e return pageInfo ; } //\u83b7\u53d6\u65f6\u95f4\u7ebf\u5217\u8868\u4e2d\u7684\u53d1\u5e03id\u7684\u5217\u8868 List < Object > ids = CollUtil . getFieldValues ( timeLineList , \"publishId\" ); //\u6839\u636e\u52a8\u6001id\u67e5\u8be2\u52a8\u6001\u5217\u8868 Query queryPublish = Query . query ( Criteria . where ( \"id\" ). in ( ids )) . with ( Sort . by ( Sort . Order . desc ( \"created\" ))); List < Publish > publishList = this . mongoTemplate . find ( queryPublish , Publish . class ); pageInfo . setRecords ( publishList ); return pageInfo ; } } \u5f15\u5165Hutool\u5de5\u5177\u5305\uff0c\u5b98\u65b9\u6587\u6863\uff1ahttps://www.hutool.cn/docs/#/ <!-- \u5728my-tanhua\u5de5\u7a0b\u4e2d\u5b9a\u4e49\u4f9d\u8d56 --> <dependency> <groupId> cn.hutool </groupId> <artifactId> hutool-all </artifactId> <version> 5.5.2 </version> </dependency> <!-- \u5728my-tanhua-dubbo-service\u4e2d\u5f15\u5165\u4f7f\u7528 --> <dependency> <groupId> cn.hutool </groupId> <artifactId> hutool-all </artifactId> </dependency> 4.2.3\u3001\u6d4b\u8bd5\u7528\u4f8b \u00b6 package com.tanhua.dubbo.server.api ; import com.tanhua.dubbo.server.pojo.Publish ; import com.tanhua.dubbo.server.vo.PageInfo ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestQuanZiApi { @Autowired private QuanZiApi quanZiApi ; @Test public void testQueryPublishList (){ this . quanZiApi . queryPublishList ( 1L , 1 , 2 ) . getRecords (). forEach ( publish -> System . out . println ( publish )); System . out . println ( \"------------\" ); this . quanZiApi . queryPublishList ( 1L , 2 , 2 ) . getRecords (). forEach ( publish -> System . out . println ( publish )); System . out . println ( \"------------\" ); this . quanZiApi . queryPublishList ( 1L , 3 , 2 ) . getRecords (). forEach ( publish -> System . out . println ( publish )); } } \u6d4b\u8bd5\u7ed3\u679c\uff1a 4.3\u3001APP\u63a5\u53e3\u670d\u52a1 \u00b6 \u5f00\u53d1\u5b8c\u6210dubbo\u670d\u52a1\u540e\uff0c\u6211\u4eec\u5c06\u5f00\u53d1APP\u7aef\u7684\u63a5\u53e3\u670d\u52a1\uff0c\u4f9d\u7136\u662f\u9700\u8981\u6309\u7167mock\u63a5\u53e3\u7684\u4e2d\u7684\u63a5\u53e3\u5b9a\u4e49\u5b9e\u73b0\u3002 \u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/683 4.3.1\u3001QuanZiVo \u00b6 \u6839\u636e\u63a5\u53e3\u4e2d\u54cd\u5e94\u7684\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u5b9a\u4e49vo\u5bf9\u8c61\uff1a(\u5728my-tanhua-server\u5de5\u7a0b\u4e2d) package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class QuanZiVo { private String id ; //\u52a8\u6001id private Long userId ; //\u7528\u6237id private String avatar ; //\u5934\u50cf private String nickname ; //\u6635\u79f0 private String gender ; //\u6027\u522b man woman private Integer age ; //\u5e74\u9f84 private String [] tags ; //\u6807\u7b7e private String textContent ; //\u6587\u5b57\u52a8\u6001 private String [] imageContent ; //\u56fe\u7247\u52a8\u6001 private String distance ; //\u8ddd\u79bb private String createDate ; //\u53d1\u5e03\u65f6\u95f4 \u5982: 10\u5206\u949f\u524d private Integer likeCount ; //\u70b9\u8d5e\u6570 private Integer commentCount ; //\u8bc4\u8bba\u6570 private Integer loveCount ; //\u559c\u6b22\u6570 private Integer hasLiked ; //\u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 private Integer hasLoved ; //\u662f\u5426\u559c\u6b22\uff081\u662f\uff0c0\u5426\uff09 } 4.3.2\u3001QuanZiController \u00b6 \u6839\u636e\u670d\u52a1\u63a5\u53e3\u7f16\u5199QuanZiController\uff0c\u5176\u8bf7\u6c42\u65b9\u6cd5\u4e3aGET\u8bf7\u6c42\uff0c\u4f1a\u4f20\u9012page\u3001pageSize\u3001token\u7b49\u4fe1\u606f\u3002 \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a package com.tanhua.server.controller ; import com.tanhua.server.service.QuanZiService ; import com.tanhua.server.vo.PageResult ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.web.bind.annotation.* ; @RestController @RequestMapping ( \"movements\" ) public class QuanZiController { @Autowired private QuanZiService quanZiService ; /** * \u67e5\u8be2\u597d\u53cb\u52a8\u6001 * * @param page * @param pageSize * @return */ @GetMapping public PageResult queryPublishList ( @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize , @RequestHeader ( \"Authorization\" ) String token ) { return this . quanZiService . queryPublishList ( page , pageSize , token ); } } 4.3.3\u3001QuanZiService \u00b6 \u5728QuanZiService\u4e2d\u5c06\u5b9e\u73b0\u5177\u4f53\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u9700\u8981\u8c03\u7528quanzi\u7684dubbo\u670d\u52a1\u5b8c\u6210\u6570\u636e\u7684\u67e5\u8be2\uff0c\u5e76\u4e14\u8981\u5b8c\u6210\u7528\u6237\u767b\u5f55\u662f\u5426\u6709\u6548\u7684\u6821\u9a8c\uff0c\u6700\u540e\u6309\u7167\u670d\u52a1\u63a5\u53e3\u4e2d\u5b9a\u4e49\u7684\u7ed3\u6784\u8fdb\u884c\u5c01\u88c5\u6570\u636e\u3002 package com.tanhua.server.service ; import cn.hutool.core.bean.BeanUtil ; import cn.hutool.core.collection.CollUtil ; import cn.hutool.core.util.StrUtil ; import com.alibaba.dubbo.config.annotation.Reference ; import com.tanhua.common.pojo.User ; import com.tanhua.common.pojo.UserInfo ; import com.tanhua.common.utils.RelativeDateFormat ; import com.tanhua.dubbo.server.api.QuanZiApi ; import com.tanhua.dubbo.server.pojo.Publish ; import com.tanhua.dubbo.server.vo.PageInfo ; import com.tanhua.server.vo.PageResult ; import com.tanhua.server.vo.QuanZiVo ; import org.apache.commons.lang3.StringUtils ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import java.util.ArrayList ; import java.util.Date ; import java.util.List ; @Service public class QuanZiService { @Reference ( version = \"1.0.0\" ) private QuanZiApi quanZiApi ; @Autowired private UserService userService ; @Autowired private UserInfoService userInfoService ; public PageResult queryPublishList ( Integer page , Integer pageSize , String token ) { //\u5206\u6790\uff1a\u901a\u8fc7dubbo\u4e2d\u7684\u670d\u52a1\u67e5\u8be2\u7528\u6237\u7684\u597d\u53cb\u52a8\u6001 //\u901a\u8fc7mysql\u67e5\u8be2\u7528\u6237\u7684\u4fe1\u606f\uff0c\u56de\u5199\u5230\u7ed3\u679c\u5bf9\u8c61\u4e2d\uff08QuanZiVo\uff09 PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); //\u6821\u9a8ctoken\u662f\u5426\u6709\u6548 User user = this . userService . queryUserByToken ( token ); if ( user == null ) { //token\u5df2\u7ecf\u5931\u6548 return pageResult ; } //\u901a\u8fc7dubbo\u67e5\u8be2\u6570\u636e PageInfo < Publish > pageInfo = this . quanZiApi . queryPublishList ( user . getId (), page , pageSize ); List < Publish > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )) { return pageResult ; } List < QuanZiVo > quanZiVoList = new ArrayList <> (); records . forEach ( publish -> { QuanZiVo quanZiVo = new QuanZiVo (); quanZiVo . setId ( publish . getId (). toHexString ()); quanZiVo . setTextContent ( publish . getText ()); quanZiVo . setImageContent ( publish . getMedias (). toArray ( new String [] {})); quanZiVo . setUserId ( publish . getUserId ()); quanZiVo . setCreateDate ( RelativeDateFormat . format ( new Date ( publish . getCreated ()))); quanZiVoList . add ( quanZiVo ); }); //\u67e5\u8be2\u7528\u6237\u4fe1\u606f List < Object > userIds = CollUtil . getFieldValues ( records , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIds ); for ( QuanZiVo quanZiVo : quanZiVoList ) { //\u627e\u5230\u5bf9\u5e94\u7684\u7528\u6237\u4fe1\u606f for ( UserInfo userInfo : userInfoList ) { if ( quanZiVo . getUserId (). longValue () == userInfo . getUserId (). longValue ()){ this . fillUserInfoToQuanZiVo ( userInfo , quanZiVo ); break ; } } } pageResult . setItems ( quanZiVoList ); return pageResult ; } /** * \u586b\u5145\u7528\u6237\u4fe1\u606f * * @param userInfo * @param quanZiVo */ private void fillUserInfoToQuanZiVo ( UserInfo userInfo , QuanZiVo quanZiVo ){ BeanUtil . copyProperties ( userInfo , quanZiVo , \"id\" ); quanZiVo . setGender ( userInfo . getSex (). name (). toLowerCase ()); quanZiVo . setTags ( StringUtils . split ( userInfo . getTags (), ',' )); quanZiVo . setCommentCount ( 0 ); //TODO \u8bc4\u8bba\u6570 quanZiVo . setDistance ( \"1.2\u516c\u91cc\" ); //TODO \u8ddd\u79bb quanZiVo . setHasLiked ( 0 ); //TODO \u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 quanZiVo . setLikeCount ( 0 ); //TODO \u70b9\u8d5e\u6570 quanZiVo . setHasLoved ( 0 ); //TODO \u662f\u5426\u559c\u6b22\uff081\u662f\uff0c0\u5426\uff09 quanZiVo . setLoveCount ( 0 ); //TODO \u559c\u6b22\u6570 } } // com.tanhua.server.service.UserInfoService /** * \u6839\u636e\u7528\u6237id\u7684\u96c6\u5408\u67e5\u8be2\u7528\u6237\u5217\u8868 * * @param userIds * @return */ public List < UserInfo > queryUserInfoList ( Collection <?> userIds ) { QueryWrapper < UserInfo > queryWrapper = new QueryWrapper <> (); queryWrapper . in ( \"user_id\" , userIds ); return this . queryUserInfoList ( queryWrapper ); } \u5728com.tanhua.server.vo.QuanZiVo\u4e2d\u589e\u52a0\u5b57\u6bb5\u522b\u540d\uff0c\u65b9\u4fbf\u76f4\u63a5\u62f7\u8d1d\u5c5e\u6027\u6570\u636e\uff1a package com.tanhua.server.vo ; import cn.hutool.core.annotation.Alias ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class QuanZiVo { private String id ; //\u52a8\u6001id private Long userId ; //\u7528\u6237id @Alias ( \"logo\" ) //\u522b\u540d private String avatar ; //\u5934\u50cf @Alias ( \"nickName\" ) //\u522b\u540d private String nickname ; //\u6635\u79f0 private String gender ; //\u6027\u522b man woman private Integer age ; //\u5e74\u9f84 private String [] tags ; //\u6807\u7b7e private String textContent ; //\u6587\u5b57\u52a8\u6001 private String [] imageContent ; //\u56fe\u7247\u52a8\u6001 private String distance ; //\u8ddd\u79bb private String createDate ; //\u53d1\u5e03\u65f6\u95f4 \u5982: 10\u5206\u949f\u524d private Integer likeCount ; //\u70b9\u8d5e\u6570 private Integer commentCount ; //\u8bc4\u8bba\u6570 private Integer loveCount ; //\u559c\u6b22\u6570 private Integer hasLiked ; //\u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 private Integer hasLoved ; //\u662f\u5426\u559c\u6b22\uff081\u662f\uff0c0\u5426\uff09 } 4.3.4\u3001\u6d4b\u8bd5 \u00b6 5\u3001\u7edf\u4e00\u6821\u9a8ctoken \u00b6 \u5728\u4e4b\u524d\u7684\u5f00\u53d1\u4e2d\uff0c\u6211\u4eec\u4f1a\u5728\u6bcf\u4e00\u4e2aService\u4e2d\u5bf9token\u505a\u5904\u7406\uff0c\u76f8\u540c\u7684\u903b\u8f91\u4e00\u5b9a\u662f\u8981\u8fdb\u884c\u7edf\u4e00\u5904\u7406\u7684\uff0c\u8be5\u5982\u4f55\u5904\u7406\u5462\uff1f \u7531\u4e8e\u7a0b\u5e8f\u662f\u8fd0\u884c\u5728web\u5bb9\u5668\u4e2d\uff0c\u6bcf\u4e00\u4e2aHTTP\u8bf7\u6c42\u90fd\u662f\u4e00\u4e2a\u72ec\u7acb\u7ebf\u7a0b\uff0c\u4e5f\u5c31\u662f\u53ef\u4ee5\u7406\u89e3\u6210\u6211\u4eec\u7f16\u5199\u7684\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u5728\u4e00\u4e2a\u591a\u7ebf\u7a0b\u7684\u73af\u5883\u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528ThreadLocal\u5728HTTP\u8bf7\u6c42\u7684\u751f\u547d\u5468\u671f\u5185\u8fdb\u884c\u5b58\u503c\u3001\u53d6\u503c\u64cd\u4f5c\u3002 \u5982\u4e0b\u56fe\uff1a \u8bf4\u660e\uff1a \u7528\u6237\u7684\u6bcf\u4e00\u4e2a\u8bf7\u6c42\uff0c\u90fd\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u7ebf\u7a0b \u56fe\u4e2d\u7684TL\u5c31\u662fThreadLocal\uff0c\u4e00\u65e6\u5c06\u6570\u636e\u7ed1\u5b9a\u5230ThreadLocal\u4e2d\uff0c\u90a3\u4e48\u5728\u6574\u4e2a\u8bf7\u6c42\u7684\u751f\u547d\u5468\u671f\u5185\u90fd\u53ef\u4ee5\u968f\u65f6\u62ff\u5230ThreadLocal\u4e2d\u5f53\u524d\u7ebf\u7a0b\u7684\u6570\u636e\u3002 \u6839\u636e\u4e0a\u9762\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728Controller\u8bf7\u6c42\u4e4b\u524d\u8fdb\u884c\u5bf9token\u505a\u6821\u9a8c\uff0c\u5982\u679ctoken\u6709\u6548\uff0c\u5219\u4f1a\u62ff\u5230User\u5bf9\u8c61\uff0c\u7136\u540e\u5c06\u8be5User\u5bf9\u8c61\u4fdd\u5b58\u5230ThreadLocal\u4e2d\u5373\u53ef\uff0c\u6700\u540e\u653e\u884c\u8bf7\u6c42\uff0c\u5728\u540e\u7eed\u7684\u5404\u4e2a\u73af\u8282\u4e2d\u90fd\u53ef\u4ee5\u83b7\u53d6\u5230\u8be5\u6570\u636e\u4e86\u3002 \u5982\u679ctoken\u65e0\u6548\uff0c\u7ed9\u5ba2\u6237\u7aef\u54cd\u5e94401\u72b6\u6001\u7801\uff0c\u62e6\u622a\u8bf7\u6c42\uff0c\u4e0d\u518d\u653e\u884c\u5230Controller\u4e2d\u3002 \u7531\u6b64\u53ef\u89c1\uff0c\u8fd9\u4e2a\u6821\u9a8c\u7684\u903b\u8f91\u662f\u6bd4\u8f83\u9002\u5408\u653e\u5728\u62e6\u622a\u5668\u4e2d\u5b8c\u6210\u7684\u3002 5.1\u3001\u7f16\u5199UserThreadLocal \u00b6 \u5728my-tanhua-common\u5de5\u7a0b\u4e2d\uff0c\u7f16\u5199UserThreadLocal\u3002 package com.tanhua.common.utils ; import com.tanhua.common.pojo.User ; public class UserThreadLocal { private static final ThreadLocal < User > LOCAL = new ThreadLocal <> (); private UserThreadLocal (){ } /** * \u5c06\u5bf9\u8c61\u653e\u5165\u5230ThreadLocal * * @param user */ public static void set ( User user ){ LOCAL . set ( user ); } /** * \u8fd4\u56de\u5f53\u524d\u7ebf\u7a0b\u4e2d\u7684User\u5bf9\u8c61 * * @return */ public static User get (){ return LOCAL . get (); } /** * \u5220\u9664\u5f53\u524d\u7ebf\u7a0b\u4e2d\u7684User\u5bf9\u8c61 */ public static void remove (){ LOCAL . remove (); } } 5.2\u3001\u7f16\u5199TokenInterceptor \u00b6 package com.tanhua.server.interceptor ; import cn.hutool.core.util.StrUtil ; import com.tanhua.common.pojo.User ; import com.tanhua.common.utils.NoAuthorization ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.server.service.UserService ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Component ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.method.HandlerMethod ; import org.springframework.web.servlet.HandlerInterceptor ; import javax.servlet.http.HttpServletRequest ; import javax.servlet.http.HttpServletResponse ; @Component public class UserTokenInterceptor implements HandlerInterceptor { @Autowired private UserService userService ; @Override public boolean preHandle ( HttpServletRequest request , HttpServletResponse response , Object handler ) throws Exception { //\u6821\u9a8chandler\u662f\u5426\u662fHandlerMethod if ( ! ( handler instanceof HandlerMethod )) { return true ; } //\u5224\u65ad\u662f\u5426\u5305\u542b@NoAuthorization\u6ce8\u89e3\uff0c\u5982\u679c\u5305\u542b\uff0c\u76f4\u63a5\u653e\u884c if ((( HandlerMethod ) handler ). hasMethodAnnotation ( NoAuthorization . class )) { return true ; } //\u4ece\u8bf7\u6c42\u5934\u4e2d\u83b7\u53d6token String token = request . getHeader ( \"Authorization\" ); if ( StrUtil . isNotEmpty ( token )){ User user = this . userService . queryUserByToken ( token ); if ( user != null ){ //token\u6709\u6548 //\u5c06User\u5bf9\u8c61\u653e\u5165\u5230ThreadLocal\u4e2d UserThreadLocal . set ( user ); return true ; } } //token\u65e0\u6548\uff0c\u54cd\u5e94\u72b6\u6001\u4e3a401 response . setStatus ( 401 ); //\u65e0\u6743\u9650 return false ; } @Override public void afterCompletion ( HttpServletRequest request , HttpServletResponse response , Object handler , Exception ex ) throws Exception { //\u4eceThreadLocal\u4e2d\u79fb\u9664User\u5bf9\u8c61 UserThreadLocal . remove (); } } 5.3\u3001\u7f16\u5199\u6ce8\u89e3NoAuthorization \u00b6 package com.tanhua.common.utils ; import java.lang.annotation.* ; @Target ( ElementType . METHOD ) @Retention ( RetentionPolicy . RUNTIME ) @Documented //\u6807\u8bb0\u6ce8\u89e3 public @interface NoAuthorization { } 5.4\u3001\u6ce8\u518c\u62e6\u622a\u5668 \u00b6 package com.tanhua.server.config ; import com.tanhua.server.interceptor.RedisCacheInterceptor ; import com.tanhua.server.interceptor.UserTokenInterceptor ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.context.annotation.Configuration ; import org.springframework.web.servlet.config.annotation.InterceptorRegistry ; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer ; @Configuration public class WebConfig implements WebMvcConfigurer { @Autowired private RedisCacheInterceptor redisCacheInterceptor ; @Autowired private UserTokenInterceptor userTokenInterceptor ; @Override public void addInterceptors ( InterceptorRegistry registry ) { //\u8003\u8651\u62e6\u622a\u5668\u7684\u987a\u5e8f registry . addInterceptor ( this . userTokenInterceptor ). addPathPatterns ( \"/**\" ); registry . addInterceptor ( this . redisCacheInterceptor ). addPathPatterns ( \"/**\" ); } } 5.5\u3001\u4f7f\u7528ThreadLocal \u00b6 \u5728\u6240\u6709\u7684Service\u4e2d\uff0c\u5982\u679c\u9700\u8981\u83b7\u53d6User\u5bf9\u8c61\u7684\uff0c\u76f4\u63a5\u4eceUserThreadLocal\u83b7\u53d6\u5373\u53ef\uff0c\u540c\u65f6\u5728Controller\u4e2d\u4e5f\u65e0\u9700\u8fdb\u884c\u83b7\u53d6token\u64cd\u4f5c\u3002 \u4f8b\u5982\uff1a //com.tanhua.server.service.QuanZiService public PageResult queryPublishList ( Integer page , Integer pageSize ) { PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); //\u83b7\u53d6User\u5bf9\u8c61\uff0c\u65e0\u9700\u5bf9User\u5bf9\u8c61\u6821\u9a8c\uff0c\u5176\u4e00\u5b9a\u4e0d\u4e3anull User user = UserThreadLocal . get (); PageInfo < Publish > pageInfo = this . quanZiApi . queryPublishList ( user . getId (), page , pageSize ); //\u3002\u3002\u3002\u3002\u4ee3\u7801\u7565\u3002\u3002\u3002\u3002\u3002 return pageResult ; } \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728APP\u4e2d\uff0c\u5982\u679c\u8bf7\u6c42\u54cd\u5e94401\uff0c\u4f1a\u8df3\u8f6c\u5230\u767b\u5f55\u9875\u9762\u3002 6\u3001\u53d1\u5e03\u52a8\u6001 \u00b6 \u7528\u6237\u53ef\u4ee5\u5728\u5708\u5b50\u4e2d\u53d1\u5e03\u52a8\u6001\uff0c\u52a8\u6001\u5185\u5bb9\u4e2d\u53ef\u4ee5\u6709\u6587\u5b57\u548c\u56fe\u7247\u3002\u5982\u4e0b\u56fe\uff1a 6.1\u3001dubbo\u670d\u52a1 \u00b6 6.1.1\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 package com.tanhua.dubbo.server.api ; import com.tanhua.dubbo.server.pojo.Publish ; import com.tanhua.dubbo.server.vo.PageInfo ; public interface QuanZiApi { /** * \u67e5\u8be2\u597d\u53cb\u52a8\u6001 * * @param userId \u7528\u6237id * @param page \u5f53\u524d\u9875\u6570 * @param pageSize \u6bcf\u4e00\u9875\u67e5\u8be2\u7684\u6570\u636e\u6761\u6570 * @return */ PageInfo < Publish > queryPublishList ( Long userId , Integer page , Integer pageSize ); /** * \u53d1\u5e03\u52a8\u6001 * * @param publish * @return \u53d1\u5e03\u6210\u529f\u8fd4\u56de\u52a8\u6001id */ String savePublish ( Publish publish ); } 6.1.2\u3001\u5b9e\u73b0\u63a5\u53e3 \u00b6 /** * \u53d1\u5e03\u52a8\u6001 * * @param publish * @return \u53d1\u5e03\u6210\u529f\u8fd4\u56de\u52a8\u6001id */ public String savePublish ( Publish publish ) { //\u5bf9publish\u5bf9\u8c61\u6821\u9a8c if ( ! ObjectUtil . isAllNotEmpty ( publish . getText (), publish . getUserId ())) { //\u53d1\u5e03\u5931\u8d25 return null ; } //\u8bbe\u7f6e\u4e3b\u952eid publish . setId ( ObjectId . get ()); try { //\u8bbe\u7f6e\u81ea\u589e\u957f\u7684pid publish . setPid ( this . idService . createId ( IdType . PUBLISH )); publish . setCreated ( System . currentTimeMillis ()); //\u5199\u5165\u5230publish\u8868\u4e2d this . mongoTemplate . save ( publish ); //\u5199\u5165\u76f8\u518c\u8868 Album album = new Album (); album . setId ( ObjectId . get ()); album . setCreated ( System . currentTimeMillis ()); album . setPublishId ( publish . getId ()); this . mongoTemplate . save ( album , \"quanzi_album_\" + publish . getUserId ()); //\u5199\u5165\u597d\u53cb\u7684\u65f6\u95f4\u7ebf\u8868\uff08\u5f02\u6b65\u5199\u5165\uff09 this . timeLineService . saveTimeLine ( publish . getUserId (), publish . getId ()); } catch ( Exception e ) { //TODO \u9700\u8981\u505a\u4e8b\u52a1\u7684\u56de\u6eda\uff0cMongodb\u7684\u5355\u8282\u70b9\u670d\u52a1\uff0c\u4e0d\u652f\u6301\u4e8b\u52a1\uff0c\u5bf9\u4e8e\u56de\u6eda\u6211\u4eec\u6682\u65f6\u4e0d\u5b9e\u73b0\u4e86 log . error ( \"\u53d1\u5e03\u52a8\u6001\u5931\u8d25~ publish = \" + publish , e ); } return publish . getId (). toHexString (); } package com.tanhua.dubbo.server.service ; import com.tanhua.dubbo.server.enums.IdType ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.redis.core.RedisTemplate ; import org.springframework.stereotype.Service ; //\u751f\u6210\u81ea\u589e\u957f\u7684id\uff0c\u539f\u7406\uff1a\u4f7f\u7528redis\u7684\u81ea\u589e\u957f\u503c @Service public class IdService { @Autowired private RedisTemplate < String , String > redisTemplate ; public Long createId ( IdType idType ) { String idKey = \"TANHUA_ID_\" + idType . toString (); return this . redisTemplate . opsForValue (). increment ( idKey ); } } package com.tanhua.dubbo.server.enums ; public enum IdType { PUBLISH , VIDEO ; } 6.1.3\u3001\u597d\u53cb\u65f6\u95f4\u7ebf\u6570\u636e \u00b6 \u597d\u53cb\u7684\u65f6\u95f4\u7ebf\u6570\u636e\u9700\u8981\u5f02\u6b65\u6267\u884c\u3002\u8fd9\u91cc\u4f7f\u7528Spring\u7684@Async\u6ce8\u89e3\u5b9e\u73b0\u5f02\u6b65\u6267\u884c\uff0c\u5176\u5e95\u5c42\u662f\u901a\u8fc7\u542f\u52a8\u72ec\u7acb\u7ebf\u7a0b\u6765\u6267\u884c\uff0c\u4ece\u800c\u53ef\u4ee5\u5f02\u6b65\u6267\u884c\u3002\u901a\u8fc7\u8fd4\u56de\u7684CompletableFuture\u6765\u5224\u65ad\u662f\u5426\u6267\u884c\u6210\u529f\u4ee5\u53ca\u662f\u5426\u5b58\u5728\u5f02\u5e38\u3002\u540c\u65f6\u9700\u8981\u5728\u542f\u52a8\u7c7b\u4e2d\u6dfb\u52a0@EnableAsync \u5f00\u542f\u5f02\u6b65\u7684\u652f\u6301\u3002 package com.tanhua.dubbo.server.service ; import cn.hutool.core.collection.CollUtil ; import com.tanhua.dubbo.server.pojo.TimeLine ; import com.tanhua.dubbo.server.pojo.Users ; import lombok.extern.slf4j.Slf4j ; import org.bson.types.ObjectId ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.mongodb.core.MongoTemplate ; import org.springframework.data.mongodb.core.query.Criteria ; import org.springframework.data.mongodb.core.query.Query ; import org.springframework.scheduling.annotation.Async ; import org.springframework.stereotype.Service ; import java.util.List ; import java.util.concurrent.CompletableFuture ; @Service @Slf4j public class TimeLineService { @Autowired private MongoTemplate mongoTemplate ; @Async //\u5f02\u6b65\u6267\u884c\uff0c\u539f\u7406\uff1a\u5e95\u5c42\u5f00\u4e00\u4e2a\u7ebf\u7a0b\u53bb\u6267\u884c\u8be5\u65b9\u6cd5 public CompletableFuture < String > saveTimeLine ( Long userId , ObjectId publishId ) { //\u5199\u5165\u597d\u53cb\u7684\u65f6\u95f4\u7ebf\u8868 try { //\u67e5\u8be2\u597d\u53cb\u5217\u8868 Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId )); List < Users > usersList = this . mongoTemplate . find ( query , Users . class ); if ( CollUtil . isEmpty ( usersList )) { //\u8fd4\u56de\u6210\u529f return CompletableFuture . completedFuture ( \"ok\" ); } //\u4f9d\u6b21\u5199\u5165\u5230\u597d\u53cb\u7684\u65f6\u95f4\u7ebf\u8868\u4e2d for ( Users users : usersList ) { TimeLine timeLine = new TimeLine (); timeLine . setId ( ObjectId . get ()); timeLine . setDate ( System . currentTimeMillis ()); timeLine . setPublishId ( publishId ); timeLine . setUserId ( userId ); //\u5199\u5165\u6570\u636e this . mongoTemplate . save ( timeLine , \"quanzi_time_line_\" + users . getFriendId ()); } } catch ( Exception e ) { log . error ( \"\u5199\u5165\u597d\u53cb\u65f6\u95f4\u7ebf\u8868\u5931\u8d25~ userId = \" + userId + \", publishId = \" + publishId , e ); //TODO \u4e8b\u52a1\u56de\u6eda\u95ee\u9898 return CompletableFuture . completedFuture ( \"error\" ); } return CompletableFuture . completedFuture ( \"ok\" ); } } \u5f00\u542f\u5f02\u6b65\u6267\u884c\uff1a package com.tanhua.dubbo.server ; import cn.hutool.core.util.StrUtil ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.scheduling.annotation.EnableAsync ; @SpringBootApplication @EnableAsync //\u5f00\u542f\u5f02\u6b65\u6267\u884c\u7684\u652f\u6301 public class DubboApplication { public static void main ( String [] args ) { SpringApplication . run ( DubboApplication . class , args ); } } 6.1.4\u3001\u6d4b\u8bd5\u597d\u53cb\u65f6\u95f4\u7ebf \u00b6 package com.tanhua.dubbo.server.api ; import com.tanhua.dubbo.server.service.TimeLineService ; import org.bson.types.ObjectId ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; import java.util.concurrent.CompletableFuture ; import java.util.concurrent.ExecutionException ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestTimeLineService { @Autowired private TimeLineService timeLineService ; @Test public void testSaveTimeLine () { ObjectId objectId = ObjectId . get (); System . out . println ( \"\u751f\u6210\u7684id\u4e3a\uff1a\" + objectId . toHexString ()); CompletableFuture < String > future = this . timeLineService . saveTimeLine ( 1L , objectId ); future . whenComplete (( s , throwable ) -> { System . out . println ( \"\u6267\u884c\u5b8c\u6210\uff1a\" + s ); }); System . out . println ( \"\u5f02\u6b65\u65b9\u6cd5\u6267\u884c\u5b8c\u6210\" ); try { future . get (); //\u963b\u585e\u5f53\u524d\u7684\u4e3b\u7ebf\u7a0b\uff0c\u7b49\u5f85\u5f02\u6b65\u6267\u884c\u7684\u7ed3\u675f } catch ( Exception e ) { e . printStackTrace (); } } } 6.1.5\u3001\u6d4b\u8bd5\u53d1\u5e03\u52a8\u6001 \u00b6 \u5c06dubbo\u670d\u52a1\u542f\u52a8\u8d77\u6765\uff0c\u5728my-tanhua-server\u5de5\u7a0b\u4e2d\u8fdb\u884c\u529f\u80fd\u7684\u6d4b\u8bd5\uff1a package com.tanhua.server ; import cn.hutool.core.collection.ListUtil ; import com.alibaba.dubbo.config.annotation.Reference ; import com.tanhua.dubbo.server.api.QuanZiApi ; import com.tanhua.dubbo.server.pojo.Publish ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestQuanZiApi { @Reference ( version = \"1.0.0\" ) private QuanZiApi quanZiApi ; @Test public void testSavePublish (){ Publish publish = new Publish (); publish . setText ( \"\u4eba\u751f\u4e0d\u5982\u610f\u4e8b\u5341\u4e4b\u516b\u4e5d\uff0c\u771f\u6b63\u6709\u683c\u5c40\u7684\u4eba\uff0c\u65e2\u80fd\u4eab\u53d7\u6700\u597d\u7684\uff0c\u4e5f\u80fd\u627f\u53d7\u6700\u574f\u7684\u3002\" ); publish . setMedias ( ListUtil . toList ( \"https://tanhua-dev.oss-cn-zhangjiakou.aliyuncs.com/photo/6/1.jpg\" , \"https://tanhua-dev.oss-cn-zhangjiakou.aliyuncs.com/photo/6/CL-3.jpg\" )); publish . setUserId ( 1L ); publish . setSeeType ( 1 ); publish . setLongitude ( \"116.350426\" ); publish . setLatitude ( \"40.066355\" ); publish . setLocationName ( \"\u4e2d\u56fd\u5317\u4eac\u5e02\u660c\u5e73\u533a\u5efa\u6750\u57ce\u897f\u8def16\u53f7\" ); this . quanZiApi . savePublish ( publish ); } } 6.2\u3001APP\u63a5\u53e3\u670d\u52a1 \u00b6 \u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/701 \u4ece\u63a5\u53e3\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u4e3b\u8981\u7684\u53c2\u6570\u6709\uff1a\u6587\u5b57\u3001\u56fe\u7247\u3001\u4f4d\u7f6e\u7b49\u5185\u5bb9\u3002 6.2.1\u3001\u56fe\u7247\u4e0a\u4f20 \u00b6 \u56fe\u7247\u4e0a\u4f20\u529f\u80fd\u539f\u6765\u662f\u5728sso\u4e2d\u5b8c\u6210\u7684\uff0c\u4e3a\u4e86\u80fd\u516c\u7528\u8be5\u529f\u80fd\uff0c\u6240\u4ee5\u9700\u8981\u5c06\u56fe\u7247\u4e0a\u4f20\u7684Service\u4ee5\u53ca\u914d\u7f6e\u79fb\u52a8\u81f3common\u5de5\u7a0b\u4e2d\u3002 pom.xml\uff1a <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> my-tanhua </artifactId> <groupId> cn.itcast.tanhua </groupId> <version> 1.0-SNAPSHOT </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> my-tanhua-common </artifactId> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> </dependency> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> </dependency> <dependency> <groupId> com.baomidou </groupId> <artifactId> mybatis-plus-boot-starter </artifactId> </dependency> <dependency> <groupId> com.fasterxml.jackson.core </groupId> <artifactId> jackson-databind </artifactId> </dependency> <dependency> <groupId> com.aliyun.oss </groupId> <artifactId> aliyun-sdk-oss </artifactId> </dependency> <dependency> <groupId> org.apache.commons </groupId> <artifactId> commons-lang3 </artifactId> </dependency> <dependency> <groupId> joda-time </groupId> <artifactId> joda-time </artifactId> </dependency> </dependencies> </project> \u9700\u8981\u6ce8\u610f3\u70b9\uff1a \u5c06sso\u7cfb\u7edf\u4e2d\u7684\u76f8\u5173\u4ee3\u7801\u5220\u9664 \u5c06aliyun.properties\u590d\u5236\u5230my-tanhua-server\u4e2d \u542f\u52a8\u7c7b\u4e2d\u9700\u8981\u5c06\u5305\u626b\u63cf\u8303\u56f4\u6269\u5927\u5230comm.tanhua\uff0c\u56e0\u4e3a\u76f8\u5173\u7c7b\u88ab\u79fb\u52a8\u5230com.tanhua.common\u4e0b\uff0c\u9ed8\u8ba4\u626b\u63cf\u4e0d\u80fd\u88ab\u626b\u63cf\u5230\u3002 sso\u4e0eserver\u7cfb\u7edf\u90fd\u9700\u8981\u8bbe\u7f6e\uff1a ~~~java package com.tanhua.server; @MapperScan(\"com.tanhua.common.mapper\") //\u8bbe\u7f6emapper\u63a5\u53e3\u7684\u626b\u63cf\u5305 @SpringBootApplication(exclude = {MongoAutoConfiguration.class, MongoDataAutoConfiguration.class}) //\u6392\u9664mongo\u7684\u81ea\u52a8\u914d\u7f6e @ComponentScan(basePackages={\"com.tanhua\"}) //\u8bbe\u7f6e\u626b\u63cf\u5305\u8303\u56f4 public class ServerApplication { public static void main(String[] args) { SpringApplication.run(ServerApplication.class, args); } } ~~~ 6.2.2\u3001\u63a5\u53e3\u670d\u52a1 \u00b6 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6587\u5b57\u662f\u5fc5\u987b\u63d0\u4ea4\u7684\uff0c\u56fe\u7247\u662f\u975e\u5fc5\u987b\u7684\u3002 //com.tanhua.server.controller.QuanZiController /** * \u53d1\u9001\u52a8\u6001 * * @param textContent * @param location * @param multipartFile * @return */ @PostMapping public ResponseEntity < Void > savePublish ( @RequestParam ( \"textContent\" ) String textContent , @RequestParam ( value = \"location\" , required = false ) String location , @RequestParam ( value = \"latitude\" , required = false ) String latitude , @RequestParam ( value = \"longitude\" , required = false ) String longitude , @RequestParam ( value = \"imageContent\" , required = false ) MultipartFile [] multipartFile ) { try { String publishId = this . quanZiService . savePublish ( textContent , location , latitude , longitude , multipartFile ); if ( StrUtil . isNotEmpty ( publishId )) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 6.2.3\u3001QuanZiService\u5b9e\u73b0 \u00b6 // com.tanhua.server.service.QuanZiService @Autowired private PicUploadService picUploadService ; public String savePublish ( String textContent , String location , String latitude , String longitude , MultipartFile [] multipartFile ) { //\u67e5\u8be2\u5f53\u524d\u7684\u767b\u5f55\u4fe1\u606f User user = UserThreadLocal . get (); Publish publish = new Publish (); publish . setUserId ( user . getId ()); publish . setText ( textContent ); publish . setLocationName ( location ); publish . setLatitude ( latitude ); publish . setLongitude ( longitude ); publish . setSeeType ( 1 ); List < String > picUrls = new ArrayList <> (); //\u56fe\u7247\u4e0a\u4f20 for ( MultipartFile file : multipartFile ) { PicUploadResult picUploadResult = this . picUploadService . upload ( file ); picUrls . add ( picUploadResult . getName ()); } publish . setMedias ( picUrls ); return this . quanZiApi . savePublish ( publish ); } 7\u3001\u67e5\u8be2\u63a8\u8350\u52a8\u6001 \u00b6 \u63a8\u8350\u52a8\u6001\u662f\u901a\u8fc7\u63a8\u8350\u7cfb\u7edf\u8ba1\u7b97\u51fa\u7684\u7ed3\u679c\uff0c\u73b0\u5728\u6211\u4eec\u53ea\u9700\u8981\u5b9e\u73b0\u67e5\u8be2\u5373\u53ef\uff0c\u63a8\u8350\u7cfb\u7edf\u5728\u540e\u9762\u7684\u8bfe\u7a0b\u4e2d\u5b8c\u6210\u3002 \u63a8\u8350\u7cfb\u7edf\u8ba1\u7b97\u5b8c\u6210\u540e\uff0c\u4f1a\u5c06\u7ed3\u679c\u6570\u636e\u5199\u5165\u5230Redis\u4e2d\uff0c\u6570\u636e\u5982\u4e0b\uff1a 192 .168.31.81:6379> get QUANZI_PUBLISH_RECOMMEND_1 \"2562,3639,2063,3448,2128,2597,2893,2333,3330,2642,2541,3002,3561,3649,2384,2504,3397,2843,2341,2249\" \u53ef\u4ee5\u770b\u5230\uff0c\u5728Redis\u4e2d\u7684\u6570\u636e\u662f\u6709\u591a\u4e2a\u53d1\u5e03id\u7ec4\u6210\uff08pid\uff09\u7531\u9017\u53f7\u5206\u9694\u3002\u6240\u4ee5\u5b9e\u73b0\u4e2d\u9700\u8981\u81ea\u5df1\u5bf9\u8fd9\u4e9b\u6570\u636e\u505a\u5206\u9875\u5904\u7406\u3002 7.1\u3001dubbo\u670d\u52a1 \u00b6 7.1.1\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 //com.tanhua.dubbo.server.api.QuanZiApi /** * \u67e5\u8be2\u63a8\u8350\u52a8\u6001 * * @param userId \u7528\u6237id * @param page \u5f53\u524d\u9875\u6570 * @param pageSize \u6bcf\u4e00\u9875\u67e5\u8be2\u7684\u6570\u636e\u6761\u6570 * @return */ PageInfo < Publish > queryRecommendPublishList ( Long userId , Integer page , Integer pageSize ); 7.1.2\u3001\u7f16\u5199\u5b9e\u73b0 \u00b6 //com.tanhua.dubbo.server.api.QuanZiApiImpl @Autowired private RedisTemplate < String , String > redisTemplate ; public PageInfo < Publish > queryRecommendPublishList ( Long userId , Integer page , Integer pageSize ) { PageInfo < Publish > pageInfo = new PageInfo <> (); pageInfo . setPageNum ( page ); pageInfo . setPageSize ( pageSize ); // \u67e5\u8be2\u63a8\u8350\u7ed3\u679c\u6570\u636e String key = \"QUANZI_PUBLISH_RECOMMEND_\" + userId ; String data = this . redisTemplate . opsForValue (). get ( key ); if ( StrUtil . isEmpty ( data )) { return pageInfo ; } //\u67e5\u8be2\u5230\u7684pid\u8fdb\u884c\u5206\u9875\u5904\u7406 List < String > pids = StrUtil . split ( data , ',' ); //\u8ba1\u7b97\u5206\u9875 //[0, 10] int [] startEnd = PageUtil . transToStartEnd ( page - 1 , pageSize ); int startIndex = startEnd [ 0 ] ; //\u5f00\u59cb int endIndex = Math . min ( startEnd [ 1 ] , pids . size ()); //\u7ed3\u675f List < Long > pidLongList = new ArrayList <> (); for ( int i = startIndex ; i < endIndex ; i ++ ) { pidLongList . add ( Long . valueOf ( pids . get ( i ))); } if ( CollUtil . isEmpty ( pidLongList )) { //\u6ca1\u6709\u67e5\u8be2\u5230\u6570\u636e return pageInfo ; } //\u6839\u636epid\u67e5\u8be2publish Query query = Query . query ( Criteria . where ( \"pid\" ). in ( pidLongList )) . with ( Sort . by ( Sort . Order . desc ( \"created\" ))); List < Publish > publishList = this . mongoTemplate . find ( query , Publish . class ); if ( CollUtil . isEmpty ( publishList )) { //\u6ca1\u6709\u67e5\u8be2\u5230\u6570\u636e return pageInfo ; } pageInfo . setRecords ( publishList ); return pageInfo ; } 7.2\u3001APP\u670d\u52a1 \u00b6 \u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/677 \u901a\u8fc7\u63a5\u53e3\u7684\u5b9a\u4e49\u53ef\u4ee5\u770b\u51fa\uff0c\u5176\u54cd\u5e94\u7684\u6570\u636e\u7ed3\u6784\u4e0e\u597d\u53cb\u52a8\u6001\u7ed3\u6784\u4e00\u6837\uff0c\u6240\u4ee5\u53ef\u4ee5\u590d\u7528QuanZiVo\u5bf9\u8c61\u3002 7.2.1\u3001QuanZiController \u00b6 //com.tanhua.server.controller.QuanZiController /** * \u67e5\u8be2\u63a8\u8350\u52a8\u6001 * * @param page * @param pageSize * @return */ @GetMapping ( \"recommend\" ) public PageResult queryRecommendPublishList ( @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize ) { return this . quanZiService . queryRecommendPublishList ( page , pageSize ); } 7.2.2\u3001QuanZiService \u00b6 \u5728\u5b9e\u73b0\u4e2d\uff0c\u5c06\u67e5\u8be2\u597d\u53cb\u52a8\u6001\u7684\u65b9\u6cd5\u4e2d\u516c\u5171\u7684\u5185\u5bb9\uff0c\u8fdb\u884c\u62bd\u53d6\uff0c\u5177\u4f53\u5982\u4e0b\uff1a //com.tanhua.server.service.QuanZiService public PageResult queryRecommendPublishList ( Integer page , Integer pageSize ) { //\u5206\u6790\uff1a\u901a\u8fc7dubbo\u4e2d\u7684\u670d\u52a1\u67e5\u8be2\u7cfb\u7edf\u63a8\u8350\u52a8\u6001 //\u901a\u8fc7mysql\u67e5\u8be2\u7528\u6237\u7684\u4fe1\u606f\uff0c\u56de\u5199\u5230\u7ed3\u679c\u5bf9\u8c61\u4e2d\uff08QuanZiVo\uff09 PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); //\u76f4\u63a5\u4eceThreadLocal\u4e2d\u83b7\u53d6\u5bf9\u8c61 User user = UserThreadLocal . get (); //\u901a\u8fc7dubbo\u67e5\u8be2\u6570\u636e PageInfo < Publish > pageInfo = this . quanZiApi . queryRecommendPublishList ( user . getId (), page , pageSize ); List < Publish > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )) { return pageResult ; } pageResult . setItems ( this . fillQuanZiVo ( records )); return pageResult ; } /** * \u586b\u5145\u7528\u6237\u4fe1\u606f * * @param userInfo * @param quanZiVo */ private void fillUserInfoToQuanZiVo ( UserInfo userInfo , QuanZiVo quanZiVo ){ BeanUtil . copyProperties ( userInfo , quanZiVo , \"id\" ); quanZiVo . setGender ( userInfo . getSex (). name (). toLowerCase ()); quanZiVo . setTags ( StringUtils . split ( userInfo . getTags (), ',' )); quanZiVo . setCommentCount ( 0 ); //TODO \u8bc4\u8bba\u6570 quanZiVo . setDistance ( \"1.2\u516c\u91cc\" ); //TODO \u8ddd\u79bb quanZiVo . setHasLiked ( 0 ); //TODO \u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 quanZiVo . setLikeCount ( 0 ); //TODO \u70b9\u8d5e\u6570 quanZiVo . setHasLoved ( 0 ); //TODO \u662f\u5426\u559c\u6b22\uff081\u662f\uff0c0\u5426\uff09 quanZiVo . setLoveCount ( 0 ); //TODO \u559c\u6b22\u6570 } /** * \u6839\u636e\u67e5\u8be2\u5230\u7684publish\u96c6\u5408\u586b\u5145QuanZiVo\u5bf9\u8c61 * * @param records * @return */ private List < QuanZiVo > fillQuanZiVo ( List < Publish > records ){ List < QuanZiVo > quanZiVoList = new ArrayList <> (); records . forEach ( publish -> { QuanZiVo quanZiVo = new QuanZiVo (); quanZiVo . setId ( publish . getId (). toHexString ()); quanZiVo . setTextContent ( publish . getText ()); quanZiVo . setImageContent ( publish . getMedias (). toArray ( new String [] {})); quanZiVo . setUserId ( publish . getUserId ()); quanZiVo . setCreateDate ( RelativeDateFormat . format ( new Date ( publish . getCreated ()))); quanZiVoList . add ( quanZiVo ); }); //\u67e5\u8be2\u7528\u6237\u4fe1\u606f List < Object > userIds = CollUtil . getFieldValues ( records , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIds ); for ( QuanZiVo quanZiVo : quanZiVoList ) { //\u627e\u5230\u5bf9\u5e94\u7684\u7528\u6237\u4fe1\u606f for ( UserInfo userInfo : userInfoList ) { if ( quanZiVo . getUserId (). longValue () == userInfo . getUserId (). longValue ()){ this . fillUserInfoToQuanZiVo ( userInfo , quanZiVo ); break ; } } } return quanZiVoList ; } 7.3\u3001\u6d4b\u8bd5 \u00b6","title":"day04"},{"location":"tantan/day04/#_1","text":"\u62bd\u53d6common\u5de5\u7a0b \u5708\u5b50\u529f\u80fd\u8bf4\u660e \u5708\u5b50\u6280\u672f\u5b9e\u73b0 \u5708\u5b50\u6280\u672f\u65b9\u6848 \u5708\u5b50\u5b9e\u73b0\u53d1\u5e03\u52a8\u6001 \u5708\u5b50\u5b9e\u73b0\u597d\u53cb\u52a8\u6001 \u5708\u5b50\u5b9e\u73b0\u63a8\u8350\u52a8\u6001","title":"\u8bfe\u7a0b\u8bf4\u660e"},{"location":"tantan/day04/#1common","text":"\u5728\u9879\u76ee\u4e2d\u4e00\u822c\u9700\u8981\u5c06\u516c\u7528\u7684\u5bf9\u8c61\u8fdb\u884c\u62bd\u53d6\u653e\u5230common\u5de5\u7a0b\u4e2d\uff0c\u5176\u4ed6\u7684\u5de5\u7a0b\u4f9d\u8d56\u6b64\u5de5\u7a0b\u5373\u53ef\u3002\u4e0b\u9762\u6211\u4eec\u5c06sso\u4ee5\u53caserver\u5de5\u7a0b\u4e2d\u7684\u516c\u7528\u7684\u5bf9\u8c61\u8fdb\u884c\u62bd\u53d6\u3002","title":"1\u3001\u62bd\u53d6common\u5de5\u7a0b"},{"location":"tantan/day04/#11my-tanhua-common","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> my-tanhua </artifactId> <groupId> cn.itcast.tanhua </groupId> <version> 1.0-SNAPSHOT </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> my-tanhua-common </artifactId> <dependencies> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> </dependency> <dependency> <groupId> com.baomidou </groupId> <artifactId> mybatis-plus-boot-starter </artifactId> </dependency> <dependency> <groupId> com.fasterxml.jackson.core </groupId> <artifactId> jackson-databind </artifactId> </dependency> </dependencies> </project>","title":"1.1\u3001\u521b\u5efamy-tanhua-common\u5de5\u7a0b"},{"location":"tantan/day04/#12","text":"\u5c06SexEnum\u679a\u4e3e\u79fb\u52a8\u81f3common\u5de5\u7a0b\uff0c\u5e76\u4e14\u540e\u7eed\u521b\u5efa\u7684\u679a\u4e3e\u4e5f\u8981\u653e\u5230\u6b21\u5de5\u7a0b\u4e2d\uff0c\u4ee5\u8fbe\u5230\u516c\u7528\u7684\u76ee\u7684\u3002 package com.tanhua.common.enums ; import com.baomidou.mybatisplus.core.enums.IEnum ; public enum SexEnum implements IEnum < Integer > { MAN ( 1 , \"\u7537\" ), WOMAN ( 2 , \"\u5973\" ), UNKNOWN ( 3 , \"\u672a\u77e5\" ); private int value ; private String desc ; SexEnum ( int value , String desc ) { this . value = value ; this . desc = desc ; } @Override public Integer getValue () { return this . value ; } @Override public String toString () { return this . desc ; } } \u9700\u8981\u4fee\u6539server\u4e0esso\u5de5\u7a0b\u4e2d\u7684application.properties\u914d\u7f6e\uff1a # \u679a\u4e3e\u5305\u626b\u63cf mybatis-plus.type-enums-package = com.tanhua.common.enums \u5c06server\u4e0esso\u5de5\u7a0b\u4e2d\u7684SexEnum\u5bf9\u8c61\u5220\u9664\u4ee5\u53ca\u5c06\u76f8\u5173\u7684\u7c7b\u5f15\u7528\u8fdb\u884c\u4fee\u6539\u3002","title":"1.2\u3001\u901a\u7528\u679a\u4e3e"},{"location":"tantan/day04/#13mapper","text":"\u9700\u8981\u5c06UserInfoMapper\u4ee5\u53caUserMapper\u653e\u7f6e\u5230common\u5de5\u7a0b\u7684com.tanhua.common.mapper\u5305\u4e0b\u3002 package com.tanhua.common.mapper ; import com.baomidou.mybatisplus.core.mapper.BaseMapper ; import com.tanhua.common.pojo.User ; public interface UserMapper extends BaseMapper < User > { } package com.tanhua.common.mapper ; import com.baomidou.mybatisplus.core.mapper.BaseMapper ; import com.tanhua.common.pojo.UserInfo ; public interface UserInfoMapper extends BaseMapper < UserInfo > { } \u8bf4\u660e\uff1a\u62bd\u53d6\u5b8c\u6210\u540e\uff0c\u9700\u8981\u5c06\u539f\u5de5\u7a0b\u7684\u4ee3\u7801\u5220\u9664\u4ee5\u53ca\u4fee\u6539\u5176\u4ed6\u4ee3\u7801\u4e2d\u5f15\u5165\u7684\u4f9d\u8d56\u3002","title":"1.3\u3001\u62bd\u53d6mapper"},{"location":"tantan/day04/#14pojo","text":"\u5c06BasePojo\u3001User\u3001UserInfo\u79fb\u52a8\u81f3common\u5de5\u7a0b\uff1a","title":"1.4\u3001\u62bd\u53d6pojo"},{"location":"tantan/day04/#15utils","text":"\u5c06server\u5de5\u7a0b\u7684utils\u8fdb\u884c\u62bd\u53d6\u516c\u7528\uff0c\u540e\u7eed\u7684\u5de5\u5177\u7c7b\u4e5f\u653e\u7f6e\u5230common\u5de5\u7a0b\u4e2d\u3002 \u62bd\u53d6\u5b8c\u6210\u540e\u8fdb\u884c\u6d4b\u8bd5\uff0c\u786e\u4fdd\u53ef\u4ee5\u6b63\u5e38\u542f\u52a8\u4ee5\u53ca\u529f\u80fd\u90fd\u6b63\u5e38\u3002","title":"1.5\u3001\u62bd\u53d6utils"},{"location":"tantan/day04/#2","text":"","title":"2\u3001\u5708\u5b50\u529f\u80fd"},{"location":"tantan/day04/#21","text":"\u63a2\u82b1\u4ea4\u53cb\u9879\u76ee\u4e2d\u7684\u5708\u5b50\u529f\u80fd\uff0c\u7c7b\u4f3c\u5fae\u4fe1\u7684\u670b\u53cb\u5708\uff0c\u57fa\u672c\u7684\u529f\u80fd\u4e3a\uff1a\u53d1\u5e03\u52a8\u6001\u3001\u6d4f\u89c8\u597d\u53cb\u52a8\u6001\u3001\u6d4f\u89c8\u63a8\u8350\u52a8\u6001\u3001\u70b9\u8d5e\u3001\u8bc4\u8bba\u3001\u559c\u6b22\u7b49\u529f\u80fd\u3002 \u53d1\u5e03\uff1a","title":"2.1\u3001\u529f\u80fd\u8bf4\u660e"},{"location":"tantan/day04/#22","text":"\u5bf9\u4e8e\u5708\u5b50\u529f\u80fd\u7684\u5b9e\u73b0\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u5b83\u7684\u529f\u80fd\u7279\u70b9\u505a\u5206\u6790\uff1a \u6570\u636e\u91cf\u4f1a\u968f\u7740\u7528\u6237\u6570\u589e\u5927\u800c\u589e\u5927 \u8bfb\u591a\u5199\u5c11\uff0c\u4e00\u822c\u800c\u8a00\uff0c\u6d4f\u89c8\u670b\u53cb\u5708\u52a8\u6001\u4f1a\u591a\u4e00\u4e9b\uff0c\u53d1\u52a8\u6001\u76f8\u5bf9\u5c31\u4f1a\u5c11\u4e00\u4e9b \u975e\u597d\u53cb\u770b\u4e0d\u5230\u5176\u52a8\u6001\u5185\u5bb9 \u2026\u2026 \u9488\u5bf9\u4ee5\u4e0a\u7279\u70b9\uff0c\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\uff1a \u5bf9\u4e8e\u6570\u636e\u91cf\u5927\u800c\u8a00\uff0c\u663e\u7136\u4e0d\u80fd\u591f\u4f7f\u7528\u5173\u7cfb\u578b\u6570\u636e\u5e93\u8fdb\u884c\u5b58\u50a8\uff0c\u6211\u4eec\u9700\u8981\u901a\u8fc7MongoDB\u8fdb\u884c\u5b58\u50a8 \u5bf9\u4e8e\u8bfb\u591a\u5199\u5c11\u7684\u5e94\u7528\uff0c\u5c3d\u53ef\u80fd\u7684\u51cf\u5c11\u8bfb\u53d6\u6570\u636e\u7684\u6210\u672c \u6bd4\u5982\u8bf4\uff0c\u4e00\u6761SQL\u8bed\u53e5\uff0c\u5355\u5f20\u8868\u67e5\u8be2\u4e00\u5b9a\u6bd4\u591a\u5f20\u8868\u67e5\u8be2\u8981\u5feb \u6761\u4ef6\u8d8a\u591a\u7684\u67e5\u8be2\u901f\u5ea6\u5c06\u8d8a\u6162\uff0c\u5c3d\u53ef\u80fd\u7684\u51cf\u5c11\u6761\u4ef6\u4ee5\u63d0\u5347\u67e5\u8be2\u901f\u5ea6 \u6240\u4ee5\u5bf9\u4e8e\u5b58\u50a8\u800c\u8a00\uff0c\u4e3b\u8981\u662f\u6838\u5fc3\u76844\u5f20\u8868\uff1a \u53d1\u5e03\u8868\uff1a\u8bb0\u5f55\u4e86\u6240\u6709\u7528\u6237\u7684\u53d1\u5e03\u7684\u4e1c\u897f\u4fe1\u606f\uff0c\u5982\u56fe\u7247\u3001\u89c6\u9891\u7b49\u3002 \u76f8\u518c\uff1a\u76f8\u518c\u662f\u6bcf\u4e2a\u7528\u6237\u72ec\u7acb\u7684\uff0c\u8bb0\u5f55\u4e86\u8be5\u7528\u6237\u6240\u53d1\u5e03\u7684\u6240\u6709\u5185\u5bb9\u3002 \u8bc4\u8bba\uff1a\u9488\u5bf9\u67d0\u4e2a\u5177\u4f53\u53d1\u5e03\u7684\u670b\u53cb\u8bc4\u8bba\u548c\u70b9\u8d5e\u64cd\u4f5c\u3002 \u65f6\u95f4\u7ebf\uff1a\u6240\u8c13\u201c\u5237\u670b\u53cb\u5708\u201d\uff0c\u5c31\u662f\u5237\u65f6\u95f4\u7ebf\uff0c\u5c31\u662f\u4e00\u4e2a\u7528\u6237\u6240\u6709\u7684\u670b\u53cb\u7684\u53d1\u5e03\u5185\u5bb9\u3002 \u6d41\u7a0b\uff1a \u6d41\u7a0b\u8bf4\u660e\uff1a \u7528\u6237\u53d1\u5e03\u52a8\u6001\uff0c\u52a8\u6001\u4e2d\u4e00\u822c\u5305\u542b\u4e86\u56fe\u7247\u548c\u6587\u5b57\uff0c\u56fe\u7247\u4e0a\u4f20\u5230\u963f\u91cc\u4e91\uff0c\u4e0a\u4f20\u6210\u529f\u540e\u62ff\u5230\u56fe\u7247\u5730\u5740\uff0c\u5c06\u6587\u5b57\u548c\u56fe\u7247\u5730\u5740\u8fdb\u884c\u6301\u4e45\u5316\u5b58\u50a8 \u9996\u5148\uff0c\u9700\u8981\u5c06\u52a8\u6001\u6570\u636e\u5199\u5165\u5230\u53d1\u5e03\u8868\u4e2d\uff0c\u5176\u6b21\uff0c\u518d\u5199\u5165\u5230\u81ea\u5df1\u7684\u76f8\u518c\u8868\u4e2d\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u76f8\u518c\u8868\u4e2d\u53ea\u5305\u542b\u4e86\u53d1\u5e03id\uff0c\u4e0d\u4f1a\u5197\u4f59\u5b58\u50a8\u53d1\u5e03\u6570\u636e \u6700\u540e\uff0c\u9700\u8981\u5c06\u53d1\u5e03\u6570\u636e\u5f02\u6b65\u7684\u5199\u5165\u5230\u597d\u53cb\u7684\u65f6\u95f4\u7ebf\u8868\u4e2d\uff0c\u4e4b\u6240\u4ee5\u8003\u8651\u5f02\u6b65\u64cd\u4f5c\uff0c\u662f\u56e0\u4e3a\u5e0c\u671b\u53d1\u5e03\u80fd\u591f\u5c3d\u5feb\u7ed9\u7528\u6237\u53cd\u9988\uff0c\u53d1\u5e03\u6210\u529f \u597d\u53cb\u5237\u670b\u53cb\u5708\u65f6\uff0c\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u67e5\u8be2\u81ea\u5df1\u7684\u65f6\u95f4\u7ebf\u8868\u5373\u53ef\uff0c\u8fd9\u6837\u6700\u5927\u9650\u5ea6\u7684\u63d0\u5347\u4e86\u67e5\u8be2\u901f\u5ea6\uff0c\u518d\u914d\u5408redis\u7684\u7f13\u5b58\uff0c\u90a3\u901f\u5ea6\u5c06\u662f\u98de\u5feb\u7684 \u7528\u6237\u5728\u5bf9\u52a8\u6001\u5185\u5bb9\u8fdb\u884c\u70b9\u8d5e\u3001\u559c\u6b22\u3001\u8bc4\u8bba\u64cd\u4f5c\u65f6\uff0c\u53ea\u9700\u8981\u5199\u5165\u5230\u8bc4\u8bba\u8868\u5373\u53ef\uff0c\u8be5\u8868\u4e2d\u4e5f\u662f\u53ea\u4f1a\u8bb0\u5f55\u53d1\u5e03id\uff0c\u5e76\u4e0d\u4f1a\u5197\u4f59\u5b58\u50a8\u53d1\u5e03\u6570\u636e","title":"2.2\u3001\u5b9e\u73b0\u65b9\u6848\u5206\u6790"},{"location":"tantan/day04/#23","text":"\u53d1\u5e03\u8868\uff1a #\u8868\u540d\uff1aqua n zi_publish { \"_id\" : \"5fae53d17e52992e78a3db61\" , #\u4e3b\u952eid \"pid\" : 1001 , #\u53d1\u5e03id\uff08Lo n g\u7c7b\u578b\uff09 \"userId\" : 1 , #\u7528\u6237id \"text\" : \"\u4eca\u5929\u5fc3\u60c5\u5f88\u597d\" , #\u6587\u672c\u5185\u5bb9 \"medias\" : \"http://xxxx/x/y/z.jpg\" , #\u5a92\u4f53\u6570\u636e\uff0c\u56fe\u7247\u6216\u5c0f\u89c6\u9891 url \"seeType\" : 1 , #\u8c01\u53ef\u4ee5\u770b\uff0c 1- \u516c\u5f00\uff0c 2- \u79c1\u5bc6\uff0c 3- \u90e8\u5206\u53ef\u89c1\uff0c 4- \u4e0d\u7ed9\u8c01\u770b \"seeList\" :[ 1 , 2 , 3 ], #\u90e8\u5206\u53ef\u89c1\u7684\u5217\u8868 \"notSeeList\" :[ 4 , 5 , 6 ], #\u4e0d\u7ed9\u8c01\u770b\u7684\u5217\u8868 \"longitude\" : 108.840974298098 , #\u7ecf\u5ea6 \"latitude\" : 34.2789316522934 , #\u7eac\u5ea6 \"locationName\" : \"\u4e0a\u6d77\u5e02\u6d66\u4e1c\u533a\" , #\u4f4d\u7f6e\u540d\u79f0 \"created\" , 1568012791171 #\u53d1\u5e03\u65f6\u95f4 } \u76f8\u518c\u8868\uff1a #\u8868\u540d\uff1aqua n zi_album_ { userId } { \"_id\" : \"5fae539d7e52992e78a3b684\" , #\u4e3b\u952eid \"publishId\" : \"5fae53d17e52992e78a3db61\" , #\u53d1\u5e03id \"created\" : 1568012791171 #\u53d1\u5e03\u65f6\u95f4 } \u65f6\u95f4\u7ebf\u8868\uff1a #\u8868\u540d\uff1aqua n zi_ t ime_li ne _ { userId } { \"_id\" : \"5fae539b7e52992e78a3b4ae\" , #\u4e3b\u952eid , \"userId\" : 2 , #\u597d\u53cbid \"publishId\" : \"5fae53d17e52992e78a3db61\" , #\u53d1\u5e03id \"date\" : 1568012791171 #\u53d1\u5e03\u65f6\u95f4 } \u8bc4\u8bba\u8868\uff1a #\u8868\u540d\uff1aqua n zi_comme nt { \"_id\" : \"5fae539d7e52992e78a3b648\" , #\u4e3b\u952eid \"publishId\" : \"5fae53d17e52992e78a3db61\" , #\u53d1\u5e03id \"commentType\" : 1 , #\u8bc4\u8bba\u7c7b\u578b\uff0c 1- \u70b9\u8d5e\uff0c 2- \u8bc4\u8bba\uff0c 3- \u559c\u6b22 \"content\" : \"\u7ed9\u529b\uff01\" , #\u8bc4\u8bba\u5185\u5bb9 \"userId\" : 2 , #\u8bc4\u8bba\u4eba \"publishUserId\" : 9 , #\u53d1\u5e03\u52a8\u6001\u7684\u4eba\u7684id \"isParent\" : false , #\u662f\u5426\u4e3a\u7236\u8282\u70b9\uff0c\u9ed8\u8ba4\u662f\u5426 \"parentId\" : 1001 , #\u7236\u8282\u70b9id \"created\" : 1568012791171 }","title":"2.3\u3001\u8868\u7ed3\u6784\u8bbe\u8ba1"},{"location":"tantan/day04/#3","text":"\u7531\u4e8e\u5708\u5b50\u4e2d\u4f1a\u6d89\u53ca\u7684\u597d\u53cb\u5173\u7cfb\u6570\u636e\uff0c\u867d\u7136\u73b0\u5728\u4e3b\u7ebf\u662f\u5f00\u53d1\u5708\u5b50\u529f\u80fd\uff0c\u4f46\u662f\u4e5f\u9700\u8981\u5bf9\u4e8e\u597d\u53cb\u5173\u7cfb\u6709\u6240\u4e86\u89e3\uff0c\u5728\u6211\u4eec\u63d0\u4f9b\u7684Mongodb\u6570\u636e\u5e93\u4e2d\u6709\u4e00\u4e9bmock\u6570\u636e\u3002 \u597d\u53cb\u5173\u7cfb\u7ed3\u6784\uff1a package com.tanhua.dubbo.server.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.mongodb.core.mapping.Document ; @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"tanhua_users\" ) public class Users implements java . io . Serializable { private static final long serialVersionUID = 6003135946820874230L ; private ObjectId id ; private Long userId ; //\u7528\u6237id private Long friendId ; //\u597d\u53cbid private Long date ; //\u65f6\u95f4 } \u5728mock\u6570\u636e\u4e2d\uff0c\u4e3a\u6bcf\u4e2a\u7528\u6237\u6784\u9020\u4e8610\u4e2a\u597d\u53cb\u6570\u636e\uff1a","title":"3\u3001\u597d\u53cb\u5173\u7cfb\u6570\u636e"},{"location":"tantan/day04/#4","text":"\u67e5\u8be2\u597d\u53cb\u52a8\u6001\u4e0e\u67e5\u8be2\u63a8\u8350\u52a8\u6001\u663e\u793a\u7684\u7ed3\u6784\u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u5176\u67e5\u8be2\u6570\u636e\u6e90\u4e0d\u540c\uff1a","title":"4\u3001\u67e5\u8be2\u597d\u53cb\u52a8\u6001"},{"location":"tantan/day04/#41","text":"\u5728my-tanhua-dubbo-interface\u4e2d\u7f16\u5199\uff1a package com.tanhua.dubbo.server.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.annotation.Id ; import org.springframework.data.mongodb.core.mapping.Document ; import java.util.Date ; import java.util.List ; /** * \u53d1\u5e03\u8868\uff0c\u52a8\u6001\u5185\u5bb9 */ @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"quanzi_publish\" ) public class Publish implements java . io . Serializable { private static final long serialVersionUID = 8732308321082804771L ; @Id private ObjectId id ; //\u4e3b\u952eid private Long pid ; //\u53d1\u5e03id private Long userId ; //\u53d1\u5e03\u7528\u6237id private String text ; //\u6587\u5b57 private List < String > medias ; //\u5a92\u4f53\u6570\u636e\uff0c\u56fe\u7247\u6216\u5c0f\u89c6\u9891 url private Integer seeType ; // \u8c01\u53ef\u4ee5\u770b\uff0c1-\u516c\u5f00\uff0c2-\u79c1\u5bc6\uff0c3-\u90e8\u5206\u53ef\u89c1\uff0c4-\u4e0d\u7ed9\u8c01\u770b private List < Long > seeList ; //\u90e8\u5206\u53ef\u89c1\u7684\u5217\u8868 private List < Long > notSeeList ; //\u4e0d\u7ed9\u8c01\u770b\u7684\u5217\u8868 private String longitude ; //\u7ecf\u5ea6 private String latitude ; //\u7eac\u5ea6 private String locationName ; //\u4f4d\u7f6e\u540d\u79f0 private Long created ; //\u53d1\u5e03\u65f6\u95f4 } package com.tanhua.dubbo.server.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.annotation.Id ; import org.springframework.data.mongodb.core.mapping.Document ; import java.util.Date ; /** * \u76f8\u518c\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u81ea\u5df1\u53d1\u5e03\u7684\u6570\u636e\uff0c\u6bcf\u4e00\u4e2a\u7528\u6237\u4e00\u5f20\u8868\u8fdb\u884c\u5b58\u50a8 */ @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"quanzi_album_{userId}\" ) public class Album implements java . io . Serializable { private static final long serialVersionUID = 432183095092216817L ; @Id private ObjectId id ; //\u4e3b\u952eid private ObjectId publishId ; //\u53d1\u5e03id private Long created ; //\u53d1\u5e03\u65f6\u95f4 } package com.tanhua.dubbo.server.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.annotation.Id ; import org.springframework.data.mongodb.core.mapping.Document ; import java.util.Date ; /** * \u65f6\u95f4\u7ebf\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u53d1\u5e03\u7684\u6570\u636e\uff0c\u6bcf\u4e00\u4e2a\u7528\u6237\u4e00\u5f20\u8868\u8fdb\u884c\u5b58\u50a8 */ @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"quanzi_time_line_{userId}\" ) public class TimeLine implements java . io . Serializable { private static final long serialVersionUID = 9096178416317502524L ; @Id private ObjectId id ; private Long userId ; // \u597d\u53cbid private ObjectId publishId ; //\u53d1\u5e03id private Long date ; //\u53d1\u5e03\u7684\u65f6\u95f4 } package com.tanhua.dubbo.server.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.annotation.Id ; import org.springframework.data.mongodb.core.mapping.Document ; import java.util.Date ; /** * \u8bc4\u8bba\u8868 */ @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"quanzi_comment\" ) public class Comment implements java . io . Serializable { private static final long serialVersionUID = - 291788258125767614L ; @Id private ObjectId id ; private ObjectId publishId ; //\u53d1\u5e03id private Integer commentType ; //\u8bc4\u8bba\u7c7b\u578b\uff0c1-\u70b9\u8d5e\uff0c2-\u8bc4\u8bba\uff0c3-\u559c\u6b22 private String content ; //\u8bc4\u8bba\u5185\u5bb9 private Long userId ; //\u8bc4\u8bba\u4eba private Long publishUserId ; //\u53d1\u5e03\u52a8\u6001\u7684\u7528\u6237id private Boolean isParent = false ; //\u662f\u5426\u4e3a\u7236\u8282\u70b9\uff0c\u9ed8\u8ba4\u662f\u5426 private ObjectId parentId ; // \u7236\u8282\u70b9id private Long created ; //\u53d1\u8868\u65f6\u95f4 }","title":"4.1\u3001\u57fa\u7840\u4ee3\u7801"},{"location":"tantan/day04/#42dubbo","text":"\u5708\u5b50\u7684\u5177\u4f53\u4e1a\u52a1\u903b\u8f91\u7684\u5b9e\u73b0\u9700\u8981\u5728dubbo\u4e2d\u5b8c\u6210\uff0c\u6240\u4ee5\u9700\u8981\u5f00\u53d1dubbo\u670d\u52a1\u3002","title":"4.2\u3001dubbo\u670d\u52a1"},{"location":"tantan/day04/#421","text":"\u5728my-tanhua-dubbo-interface\u5de5\u7a0b\u4e2d\uff1a package com.tanhua.dubbo.server.api ; import com.tanhua.dubbo.server.pojo.Publish ; import com.tanhua.dubbo.server.vo.PageInfo ; public interface QuanZiApi { /** * \u67e5\u8be2\u597d\u53cb\u52a8\u6001 * * @param userId \u7528\u6237id * @param page \u5f53\u524d\u9875\u6570 * @param pageSize \u6bcf\u4e00\u9875\u67e5\u8be2\u7684\u6570\u636e\u6761\u6570 * @return */ PageInfo < Publish > queryPublishList ( Long userId , Integer page , Integer pageSize ); }","title":"4.2.1\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day04/#422","text":"\u5728my-tanhua-dubbo-service\u4e2d\u5b8c\u6210\uff1a package com.tanhua.dubbo.server.api ; import cn.hutool.core.collection.CollUtil ; import com.alibaba.dubbo.config.annotation.Service ; import com.tanhua.dubbo.server.pojo.Publish ; import com.tanhua.dubbo.server.pojo.TimeLine ; import com.tanhua.dubbo.server.vo.PageInfo ; import org.bson.types.ObjectId ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.domain.PageRequest ; import org.springframework.data.domain.Pageable ; import org.springframework.data.domain.Sort ; import org.springframework.data.mongodb.core.MongoTemplate ; import org.springframework.data.mongodb.core.query.Criteria ; import org.springframework.data.mongodb.core.query.Query ; import java.util.ArrayList ; import java.util.List ; @Service ( version = \"1.0.0\" ) public class QuanZiApiImpl implements QuanZiApi { @Autowired private MongoTemplate mongoTemplate ; @Override public PageInfo < Publish > queryPublishList ( Long userId , Integer page , Integer pageSize ) { //\u5206\u6790\uff1a\u67e5\u8be2\u597d\u53cb\u7684\u52a8\u6001\uff0c\u5b9e\u9645\u4e0a\u67e5\u8be2\u65f6\u95f4\u7ebf\u8868 PageInfo < Publish > pageInfo = new PageInfo <> (); pageInfo . setPageNum ( page ); pageInfo . setPageSize ( pageSize ); Pageable pageable = PageRequest . of ( page - 1 , pageSize , Sort . by ( Sort . Order . desc ( \"date\" ))); Query query = new Query (). with ( pageable ); List < TimeLine > timeLineList = this . mongoTemplate . find ( query , TimeLine . class , \"quanzi_time_line_\" + userId ); if ( CollUtil . isEmpty ( timeLineList )){ //\u6ca1\u6709\u67e5\u8be2\u5230\u6570\u636e return pageInfo ; } //\u83b7\u53d6\u65f6\u95f4\u7ebf\u5217\u8868\u4e2d\u7684\u53d1\u5e03id\u7684\u5217\u8868 List < Object > ids = CollUtil . getFieldValues ( timeLineList , \"publishId\" ); //\u6839\u636e\u52a8\u6001id\u67e5\u8be2\u52a8\u6001\u5217\u8868 Query queryPublish = Query . query ( Criteria . where ( \"id\" ). in ( ids )) . with ( Sort . by ( Sort . Order . desc ( \"created\" ))); List < Publish > publishList = this . mongoTemplate . find ( queryPublish , Publish . class ); pageInfo . setRecords ( publishList ); return pageInfo ; } } \u5f15\u5165Hutool\u5de5\u5177\u5305\uff0c\u5b98\u65b9\u6587\u6863\uff1ahttps://www.hutool.cn/docs/#/ <!-- \u5728my-tanhua\u5de5\u7a0b\u4e2d\u5b9a\u4e49\u4f9d\u8d56 --> <dependency> <groupId> cn.hutool </groupId> <artifactId> hutool-all </artifactId> <version> 5.5.2 </version> </dependency> <!-- \u5728my-tanhua-dubbo-service\u4e2d\u5f15\u5165\u4f7f\u7528 --> <dependency> <groupId> cn.hutool </groupId> <artifactId> hutool-all </artifactId> </dependency>","title":"4.2.2\u3001\u5b9e\u73b0\u63a5\u53e3"},{"location":"tantan/day04/#423","text":"package com.tanhua.dubbo.server.api ; import com.tanhua.dubbo.server.pojo.Publish ; import com.tanhua.dubbo.server.vo.PageInfo ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestQuanZiApi { @Autowired private QuanZiApi quanZiApi ; @Test public void testQueryPublishList (){ this . quanZiApi . queryPublishList ( 1L , 1 , 2 ) . getRecords (). forEach ( publish -> System . out . println ( publish )); System . out . println ( \"------------\" ); this . quanZiApi . queryPublishList ( 1L , 2 , 2 ) . getRecords (). forEach ( publish -> System . out . println ( publish )); System . out . println ( \"------------\" ); this . quanZiApi . queryPublishList ( 1L , 3 , 2 ) . getRecords (). forEach ( publish -> System . out . println ( publish )); } } \u6d4b\u8bd5\u7ed3\u679c\uff1a","title":"4.2.3\u3001\u6d4b\u8bd5\u7528\u4f8b"},{"location":"tantan/day04/#43app","text":"\u5f00\u53d1\u5b8c\u6210dubbo\u670d\u52a1\u540e\uff0c\u6211\u4eec\u5c06\u5f00\u53d1APP\u7aef\u7684\u63a5\u53e3\u670d\u52a1\uff0c\u4f9d\u7136\u662f\u9700\u8981\u6309\u7167mock\u63a5\u53e3\u7684\u4e2d\u7684\u63a5\u53e3\u5b9a\u4e49\u5b9e\u73b0\u3002 \u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/683","title":"4.3\u3001APP\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day04/#431quanzivo","text":"\u6839\u636e\u63a5\u53e3\u4e2d\u54cd\u5e94\u7684\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u5b9a\u4e49vo\u5bf9\u8c61\uff1a(\u5728my-tanhua-server\u5de5\u7a0b\u4e2d) package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class QuanZiVo { private String id ; //\u52a8\u6001id private Long userId ; //\u7528\u6237id private String avatar ; //\u5934\u50cf private String nickname ; //\u6635\u79f0 private String gender ; //\u6027\u522b man woman private Integer age ; //\u5e74\u9f84 private String [] tags ; //\u6807\u7b7e private String textContent ; //\u6587\u5b57\u52a8\u6001 private String [] imageContent ; //\u56fe\u7247\u52a8\u6001 private String distance ; //\u8ddd\u79bb private String createDate ; //\u53d1\u5e03\u65f6\u95f4 \u5982: 10\u5206\u949f\u524d private Integer likeCount ; //\u70b9\u8d5e\u6570 private Integer commentCount ; //\u8bc4\u8bba\u6570 private Integer loveCount ; //\u559c\u6b22\u6570 private Integer hasLiked ; //\u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 private Integer hasLoved ; //\u662f\u5426\u559c\u6b22\uff081\u662f\uff0c0\u5426\uff09 }","title":"4.3.1\u3001QuanZiVo"},{"location":"tantan/day04/#432quanzicontroller","text":"\u6839\u636e\u670d\u52a1\u63a5\u53e3\u7f16\u5199QuanZiController\uff0c\u5176\u8bf7\u6c42\u65b9\u6cd5\u4e3aGET\u8bf7\u6c42\uff0c\u4f1a\u4f20\u9012page\u3001pageSize\u3001token\u7b49\u4fe1\u606f\u3002 \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a package com.tanhua.server.controller ; import com.tanhua.server.service.QuanZiService ; import com.tanhua.server.vo.PageResult ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.web.bind.annotation.* ; @RestController @RequestMapping ( \"movements\" ) public class QuanZiController { @Autowired private QuanZiService quanZiService ; /** * \u67e5\u8be2\u597d\u53cb\u52a8\u6001 * * @param page * @param pageSize * @return */ @GetMapping public PageResult queryPublishList ( @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize , @RequestHeader ( \"Authorization\" ) String token ) { return this . quanZiService . queryPublishList ( page , pageSize , token ); } }","title":"4.3.2\u3001QuanZiController"},{"location":"tantan/day04/#433quanziservice","text":"\u5728QuanZiService\u4e2d\u5c06\u5b9e\u73b0\u5177\u4f53\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u9700\u8981\u8c03\u7528quanzi\u7684dubbo\u670d\u52a1\u5b8c\u6210\u6570\u636e\u7684\u67e5\u8be2\uff0c\u5e76\u4e14\u8981\u5b8c\u6210\u7528\u6237\u767b\u5f55\u662f\u5426\u6709\u6548\u7684\u6821\u9a8c\uff0c\u6700\u540e\u6309\u7167\u670d\u52a1\u63a5\u53e3\u4e2d\u5b9a\u4e49\u7684\u7ed3\u6784\u8fdb\u884c\u5c01\u88c5\u6570\u636e\u3002 package com.tanhua.server.service ; import cn.hutool.core.bean.BeanUtil ; import cn.hutool.core.collection.CollUtil ; import cn.hutool.core.util.StrUtil ; import com.alibaba.dubbo.config.annotation.Reference ; import com.tanhua.common.pojo.User ; import com.tanhua.common.pojo.UserInfo ; import com.tanhua.common.utils.RelativeDateFormat ; import com.tanhua.dubbo.server.api.QuanZiApi ; import com.tanhua.dubbo.server.pojo.Publish ; import com.tanhua.dubbo.server.vo.PageInfo ; import com.tanhua.server.vo.PageResult ; import com.tanhua.server.vo.QuanZiVo ; import org.apache.commons.lang3.StringUtils ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import java.util.ArrayList ; import java.util.Date ; import java.util.List ; @Service public class QuanZiService { @Reference ( version = \"1.0.0\" ) private QuanZiApi quanZiApi ; @Autowired private UserService userService ; @Autowired private UserInfoService userInfoService ; public PageResult queryPublishList ( Integer page , Integer pageSize , String token ) { //\u5206\u6790\uff1a\u901a\u8fc7dubbo\u4e2d\u7684\u670d\u52a1\u67e5\u8be2\u7528\u6237\u7684\u597d\u53cb\u52a8\u6001 //\u901a\u8fc7mysql\u67e5\u8be2\u7528\u6237\u7684\u4fe1\u606f\uff0c\u56de\u5199\u5230\u7ed3\u679c\u5bf9\u8c61\u4e2d\uff08QuanZiVo\uff09 PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); //\u6821\u9a8ctoken\u662f\u5426\u6709\u6548 User user = this . userService . queryUserByToken ( token ); if ( user == null ) { //token\u5df2\u7ecf\u5931\u6548 return pageResult ; } //\u901a\u8fc7dubbo\u67e5\u8be2\u6570\u636e PageInfo < Publish > pageInfo = this . quanZiApi . queryPublishList ( user . getId (), page , pageSize ); List < Publish > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )) { return pageResult ; } List < QuanZiVo > quanZiVoList = new ArrayList <> (); records . forEach ( publish -> { QuanZiVo quanZiVo = new QuanZiVo (); quanZiVo . setId ( publish . getId (). toHexString ()); quanZiVo . setTextContent ( publish . getText ()); quanZiVo . setImageContent ( publish . getMedias (). toArray ( new String [] {})); quanZiVo . setUserId ( publish . getUserId ()); quanZiVo . setCreateDate ( RelativeDateFormat . format ( new Date ( publish . getCreated ()))); quanZiVoList . add ( quanZiVo ); }); //\u67e5\u8be2\u7528\u6237\u4fe1\u606f List < Object > userIds = CollUtil . getFieldValues ( records , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIds ); for ( QuanZiVo quanZiVo : quanZiVoList ) { //\u627e\u5230\u5bf9\u5e94\u7684\u7528\u6237\u4fe1\u606f for ( UserInfo userInfo : userInfoList ) { if ( quanZiVo . getUserId (). longValue () == userInfo . getUserId (). longValue ()){ this . fillUserInfoToQuanZiVo ( userInfo , quanZiVo ); break ; } } } pageResult . setItems ( quanZiVoList ); return pageResult ; } /** * \u586b\u5145\u7528\u6237\u4fe1\u606f * * @param userInfo * @param quanZiVo */ private void fillUserInfoToQuanZiVo ( UserInfo userInfo , QuanZiVo quanZiVo ){ BeanUtil . copyProperties ( userInfo , quanZiVo , \"id\" ); quanZiVo . setGender ( userInfo . getSex (). name (). toLowerCase ()); quanZiVo . setTags ( StringUtils . split ( userInfo . getTags (), ',' )); quanZiVo . setCommentCount ( 0 ); //TODO \u8bc4\u8bba\u6570 quanZiVo . setDistance ( \"1.2\u516c\u91cc\" ); //TODO \u8ddd\u79bb quanZiVo . setHasLiked ( 0 ); //TODO \u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 quanZiVo . setLikeCount ( 0 ); //TODO \u70b9\u8d5e\u6570 quanZiVo . setHasLoved ( 0 ); //TODO \u662f\u5426\u559c\u6b22\uff081\u662f\uff0c0\u5426\uff09 quanZiVo . setLoveCount ( 0 ); //TODO \u559c\u6b22\u6570 } } // com.tanhua.server.service.UserInfoService /** * \u6839\u636e\u7528\u6237id\u7684\u96c6\u5408\u67e5\u8be2\u7528\u6237\u5217\u8868 * * @param userIds * @return */ public List < UserInfo > queryUserInfoList ( Collection <?> userIds ) { QueryWrapper < UserInfo > queryWrapper = new QueryWrapper <> (); queryWrapper . in ( \"user_id\" , userIds ); return this . queryUserInfoList ( queryWrapper ); } \u5728com.tanhua.server.vo.QuanZiVo\u4e2d\u589e\u52a0\u5b57\u6bb5\u522b\u540d\uff0c\u65b9\u4fbf\u76f4\u63a5\u62f7\u8d1d\u5c5e\u6027\u6570\u636e\uff1a package com.tanhua.server.vo ; import cn.hutool.core.annotation.Alias ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class QuanZiVo { private String id ; //\u52a8\u6001id private Long userId ; //\u7528\u6237id @Alias ( \"logo\" ) //\u522b\u540d private String avatar ; //\u5934\u50cf @Alias ( \"nickName\" ) //\u522b\u540d private String nickname ; //\u6635\u79f0 private String gender ; //\u6027\u522b man woman private Integer age ; //\u5e74\u9f84 private String [] tags ; //\u6807\u7b7e private String textContent ; //\u6587\u5b57\u52a8\u6001 private String [] imageContent ; //\u56fe\u7247\u52a8\u6001 private String distance ; //\u8ddd\u79bb private String createDate ; //\u53d1\u5e03\u65f6\u95f4 \u5982: 10\u5206\u949f\u524d private Integer likeCount ; //\u70b9\u8d5e\u6570 private Integer commentCount ; //\u8bc4\u8bba\u6570 private Integer loveCount ; //\u559c\u6b22\u6570 private Integer hasLiked ; //\u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 private Integer hasLoved ; //\u662f\u5426\u559c\u6b22\uff081\u662f\uff0c0\u5426\uff09 }","title":"4.3.3\u3001QuanZiService"},{"location":"tantan/day04/#434","text":"","title":"4.3.4\u3001\u6d4b\u8bd5"},{"location":"tantan/day04/#5token","text":"\u5728\u4e4b\u524d\u7684\u5f00\u53d1\u4e2d\uff0c\u6211\u4eec\u4f1a\u5728\u6bcf\u4e00\u4e2aService\u4e2d\u5bf9token\u505a\u5904\u7406\uff0c\u76f8\u540c\u7684\u903b\u8f91\u4e00\u5b9a\u662f\u8981\u8fdb\u884c\u7edf\u4e00\u5904\u7406\u7684\uff0c\u8be5\u5982\u4f55\u5904\u7406\u5462\uff1f \u7531\u4e8e\u7a0b\u5e8f\u662f\u8fd0\u884c\u5728web\u5bb9\u5668\u4e2d\uff0c\u6bcf\u4e00\u4e2aHTTP\u8bf7\u6c42\u90fd\u662f\u4e00\u4e2a\u72ec\u7acb\u7ebf\u7a0b\uff0c\u4e5f\u5c31\u662f\u53ef\u4ee5\u7406\u89e3\u6210\u6211\u4eec\u7f16\u5199\u7684\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u5728\u4e00\u4e2a\u591a\u7ebf\u7a0b\u7684\u73af\u5883\u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528ThreadLocal\u5728HTTP\u8bf7\u6c42\u7684\u751f\u547d\u5468\u671f\u5185\u8fdb\u884c\u5b58\u503c\u3001\u53d6\u503c\u64cd\u4f5c\u3002 \u5982\u4e0b\u56fe\uff1a \u8bf4\u660e\uff1a \u7528\u6237\u7684\u6bcf\u4e00\u4e2a\u8bf7\u6c42\uff0c\u90fd\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u7ebf\u7a0b \u56fe\u4e2d\u7684TL\u5c31\u662fThreadLocal\uff0c\u4e00\u65e6\u5c06\u6570\u636e\u7ed1\u5b9a\u5230ThreadLocal\u4e2d\uff0c\u90a3\u4e48\u5728\u6574\u4e2a\u8bf7\u6c42\u7684\u751f\u547d\u5468\u671f\u5185\u90fd\u53ef\u4ee5\u968f\u65f6\u62ff\u5230ThreadLocal\u4e2d\u5f53\u524d\u7ebf\u7a0b\u7684\u6570\u636e\u3002 \u6839\u636e\u4e0a\u9762\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728Controller\u8bf7\u6c42\u4e4b\u524d\u8fdb\u884c\u5bf9token\u505a\u6821\u9a8c\uff0c\u5982\u679ctoken\u6709\u6548\uff0c\u5219\u4f1a\u62ff\u5230User\u5bf9\u8c61\uff0c\u7136\u540e\u5c06\u8be5User\u5bf9\u8c61\u4fdd\u5b58\u5230ThreadLocal\u4e2d\u5373\u53ef\uff0c\u6700\u540e\u653e\u884c\u8bf7\u6c42\uff0c\u5728\u540e\u7eed\u7684\u5404\u4e2a\u73af\u8282\u4e2d\u90fd\u53ef\u4ee5\u83b7\u53d6\u5230\u8be5\u6570\u636e\u4e86\u3002 \u5982\u679ctoken\u65e0\u6548\uff0c\u7ed9\u5ba2\u6237\u7aef\u54cd\u5e94401\u72b6\u6001\u7801\uff0c\u62e6\u622a\u8bf7\u6c42\uff0c\u4e0d\u518d\u653e\u884c\u5230Controller\u4e2d\u3002 \u7531\u6b64\u53ef\u89c1\uff0c\u8fd9\u4e2a\u6821\u9a8c\u7684\u903b\u8f91\u662f\u6bd4\u8f83\u9002\u5408\u653e\u5728\u62e6\u622a\u5668\u4e2d\u5b8c\u6210\u7684\u3002","title":"5\u3001\u7edf\u4e00\u6821\u9a8ctoken"},{"location":"tantan/day04/#51userthreadlocal","text":"\u5728my-tanhua-common\u5de5\u7a0b\u4e2d\uff0c\u7f16\u5199UserThreadLocal\u3002 package com.tanhua.common.utils ; import com.tanhua.common.pojo.User ; public class UserThreadLocal { private static final ThreadLocal < User > LOCAL = new ThreadLocal <> (); private UserThreadLocal (){ } /** * \u5c06\u5bf9\u8c61\u653e\u5165\u5230ThreadLocal * * @param user */ public static void set ( User user ){ LOCAL . set ( user ); } /** * \u8fd4\u56de\u5f53\u524d\u7ebf\u7a0b\u4e2d\u7684User\u5bf9\u8c61 * * @return */ public static User get (){ return LOCAL . get (); } /** * \u5220\u9664\u5f53\u524d\u7ebf\u7a0b\u4e2d\u7684User\u5bf9\u8c61 */ public static void remove (){ LOCAL . remove (); } }","title":"5.1\u3001\u7f16\u5199UserThreadLocal"},{"location":"tantan/day04/#52tokeninterceptor","text":"package com.tanhua.server.interceptor ; import cn.hutool.core.util.StrUtil ; import com.tanhua.common.pojo.User ; import com.tanhua.common.utils.NoAuthorization ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.server.service.UserService ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Component ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.method.HandlerMethod ; import org.springframework.web.servlet.HandlerInterceptor ; import javax.servlet.http.HttpServletRequest ; import javax.servlet.http.HttpServletResponse ; @Component public class UserTokenInterceptor implements HandlerInterceptor { @Autowired private UserService userService ; @Override public boolean preHandle ( HttpServletRequest request , HttpServletResponse response , Object handler ) throws Exception { //\u6821\u9a8chandler\u662f\u5426\u662fHandlerMethod if ( ! ( handler instanceof HandlerMethod )) { return true ; } //\u5224\u65ad\u662f\u5426\u5305\u542b@NoAuthorization\u6ce8\u89e3\uff0c\u5982\u679c\u5305\u542b\uff0c\u76f4\u63a5\u653e\u884c if ((( HandlerMethod ) handler ). hasMethodAnnotation ( NoAuthorization . class )) { return true ; } //\u4ece\u8bf7\u6c42\u5934\u4e2d\u83b7\u53d6token String token = request . getHeader ( \"Authorization\" ); if ( StrUtil . isNotEmpty ( token )){ User user = this . userService . queryUserByToken ( token ); if ( user != null ){ //token\u6709\u6548 //\u5c06User\u5bf9\u8c61\u653e\u5165\u5230ThreadLocal\u4e2d UserThreadLocal . set ( user ); return true ; } } //token\u65e0\u6548\uff0c\u54cd\u5e94\u72b6\u6001\u4e3a401 response . setStatus ( 401 ); //\u65e0\u6743\u9650 return false ; } @Override public void afterCompletion ( HttpServletRequest request , HttpServletResponse response , Object handler , Exception ex ) throws Exception { //\u4eceThreadLocal\u4e2d\u79fb\u9664User\u5bf9\u8c61 UserThreadLocal . remove (); } }","title":"5.2\u3001\u7f16\u5199TokenInterceptor"},{"location":"tantan/day04/#53noauthorization","text":"package com.tanhua.common.utils ; import java.lang.annotation.* ; @Target ( ElementType . METHOD ) @Retention ( RetentionPolicy . RUNTIME ) @Documented //\u6807\u8bb0\u6ce8\u89e3 public @interface NoAuthorization { }","title":"5.3\u3001\u7f16\u5199\u6ce8\u89e3NoAuthorization"},{"location":"tantan/day04/#54","text":"package com.tanhua.server.config ; import com.tanhua.server.interceptor.RedisCacheInterceptor ; import com.tanhua.server.interceptor.UserTokenInterceptor ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.context.annotation.Configuration ; import org.springframework.web.servlet.config.annotation.InterceptorRegistry ; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer ; @Configuration public class WebConfig implements WebMvcConfigurer { @Autowired private RedisCacheInterceptor redisCacheInterceptor ; @Autowired private UserTokenInterceptor userTokenInterceptor ; @Override public void addInterceptors ( InterceptorRegistry registry ) { //\u8003\u8651\u62e6\u622a\u5668\u7684\u987a\u5e8f registry . addInterceptor ( this . userTokenInterceptor ). addPathPatterns ( \"/**\" ); registry . addInterceptor ( this . redisCacheInterceptor ). addPathPatterns ( \"/**\" ); } }","title":"5.4\u3001\u6ce8\u518c\u62e6\u622a\u5668"},{"location":"tantan/day04/#55threadlocal","text":"\u5728\u6240\u6709\u7684Service\u4e2d\uff0c\u5982\u679c\u9700\u8981\u83b7\u53d6User\u5bf9\u8c61\u7684\uff0c\u76f4\u63a5\u4eceUserThreadLocal\u83b7\u53d6\u5373\u53ef\uff0c\u540c\u65f6\u5728Controller\u4e2d\u4e5f\u65e0\u9700\u8fdb\u884c\u83b7\u53d6token\u64cd\u4f5c\u3002 \u4f8b\u5982\uff1a //com.tanhua.server.service.QuanZiService public PageResult queryPublishList ( Integer page , Integer pageSize ) { PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); //\u83b7\u53d6User\u5bf9\u8c61\uff0c\u65e0\u9700\u5bf9User\u5bf9\u8c61\u6821\u9a8c\uff0c\u5176\u4e00\u5b9a\u4e0d\u4e3anull User user = UserThreadLocal . get (); PageInfo < Publish > pageInfo = this . quanZiApi . queryPublishList ( user . getId (), page , pageSize ); //\u3002\u3002\u3002\u3002\u4ee3\u7801\u7565\u3002\u3002\u3002\u3002\u3002 return pageResult ; } \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728APP\u4e2d\uff0c\u5982\u679c\u8bf7\u6c42\u54cd\u5e94401\uff0c\u4f1a\u8df3\u8f6c\u5230\u767b\u5f55\u9875\u9762\u3002","title":"5.5\u3001\u4f7f\u7528ThreadLocal"},{"location":"tantan/day04/#6","text":"\u7528\u6237\u53ef\u4ee5\u5728\u5708\u5b50\u4e2d\u53d1\u5e03\u52a8\u6001\uff0c\u52a8\u6001\u5185\u5bb9\u4e2d\u53ef\u4ee5\u6709\u6587\u5b57\u548c\u56fe\u7247\u3002\u5982\u4e0b\u56fe\uff1a","title":"6\u3001\u53d1\u5e03\u52a8\u6001"},{"location":"tantan/day04/#61dubbo","text":"","title":"6.1\u3001dubbo\u670d\u52a1"},{"location":"tantan/day04/#611","text":"package com.tanhua.dubbo.server.api ; import com.tanhua.dubbo.server.pojo.Publish ; import com.tanhua.dubbo.server.vo.PageInfo ; public interface QuanZiApi { /** * \u67e5\u8be2\u597d\u53cb\u52a8\u6001 * * @param userId \u7528\u6237id * @param page \u5f53\u524d\u9875\u6570 * @param pageSize \u6bcf\u4e00\u9875\u67e5\u8be2\u7684\u6570\u636e\u6761\u6570 * @return */ PageInfo < Publish > queryPublishList ( Long userId , Integer page , Integer pageSize ); /** * \u53d1\u5e03\u52a8\u6001 * * @param publish * @return \u53d1\u5e03\u6210\u529f\u8fd4\u56de\u52a8\u6001id */ String savePublish ( Publish publish ); }","title":"6.1.1\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day04/#612","text":"/** * \u53d1\u5e03\u52a8\u6001 * * @param publish * @return \u53d1\u5e03\u6210\u529f\u8fd4\u56de\u52a8\u6001id */ public String savePublish ( Publish publish ) { //\u5bf9publish\u5bf9\u8c61\u6821\u9a8c if ( ! ObjectUtil . isAllNotEmpty ( publish . getText (), publish . getUserId ())) { //\u53d1\u5e03\u5931\u8d25 return null ; } //\u8bbe\u7f6e\u4e3b\u952eid publish . setId ( ObjectId . get ()); try { //\u8bbe\u7f6e\u81ea\u589e\u957f\u7684pid publish . setPid ( this . idService . createId ( IdType . PUBLISH )); publish . setCreated ( System . currentTimeMillis ()); //\u5199\u5165\u5230publish\u8868\u4e2d this . mongoTemplate . save ( publish ); //\u5199\u5165\u76f8\u518c\u8868 Album album = new Album (); album . setId ( ObjectId . get ()); album . setCreated ( System . currentTimeMillis ()); album . setPublishId ( publish . getId ()); this . mongoTemplate . save ( album , \"quanzi_album_\" + publish . getUserId ()); //\u5199\u5165\u597d\u53cb\u7684\u65f6\u95f4\u7ebf\u8868\uff08\u5f02\u6b65\u5199\u5165\uff09 this . timeLineService . saveTimeLine ( publish . getUserId (), publish . getId ()); } catch ( Exception e ) { //TODO \u9700\u8981\u505a\u4e8b\u52a1\u7684\u56de\u6eda\uff0cMongodb\u7684\u5355\u8282\u70b9\u670d\u52a1\uff0c\u4e0d\u652f\u6301\u4e8b\u52a1\uff0c\u5bf9\u4e8e\u56de\u6eda\u6211\u4eec\u6682\u65f6\u4e0d\u5b9e\u73b0\u4e86 log . error ( \"\u53d1\u5e03\u52a8\u6001\u5931\u8d25~ publish = \" + publish , e ); } return publish . getId (). toHexString (); } package com.tanhua.dubbo.server.service ; import com.tanhua.dubbo.server.enums.IdType ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.redis.core.RedisTemplate ; import org.springframework.stereotype.Service ; //\u751f\u6210\u81ea\u589e\u957f\u7684id\uff0c\u539f\u7406\uff1a\u4f7f\u7528redis\u7684\u81ea\u589e\u957f\u503c @Service public class IdService { @Autowired private RedisTemplate < String , String > redisTemplate ; public Long createId ( IdType idType ) { String idKey = \"TANHUA_ID_\" + idType . toString (); return this . redisTemplate . opsForValue (). increment ( idKey ); } } package com.tanhua.dubbo.server.enums ; public enum IdType { PUBLISH , VIDEO ; }","title":"6.1.2\u3001\u5b9e\u73b0\u63a5\u53e3"},{"location":"tantan/day04/#613","text":"\u597d\u53cb\u7684\u65f6\u95f4\u7ebf\u6570\u636e\u9700\u8981\u5f02\u6b65\u6267\u884c\u3002\u8fd9\u91cc\u4f7f\u7528Spring\u7684@Async\u6ce8\u89e3\u5b9e\u73b0\u5f02\u6b65\u6267\u884c\uff0c\u5176\u5e95\u5c42\u662f\u901a\u8fc7\u542f\u52a8\u72ec\u7acb\u7ebf\u7a0b\u6765\u6267\u884c\uff0c\u4ece\u800c\u53ef\u4ee5\u5f02\u6b65\u6267\u884c\u3002\u901a\u8fc7\u8fd4\u56de\u7684CompletableFuture\u6765\u5224\u65ad\u662f\u5426\u6267\u884c\u6210\u529f\u4ee5\u53ca\u662f\u5426\u5b58\u5728\u5f02\u5e38\u3002\u540c\u65f6\u9700\u8981\u5728\u542f\u52a8\u7c7b\u4e2d\u6dfb\u52a0@EnableAsync \u5f00\u542f\u5f02\u6b65\u7684\u652f\u6301\u3002 package com.tanhua.dubbo.server.service ; import cn.hutool.core.collection.CollUtil ; import com.tanhua.dubbo.server.pojo.TimeLine ; import com.tanhua.dubbo.server.pojo.Users ; import lombok.extern.slf4j.Slf4j ; import org.bson.types.ObjectId ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.mongodb.core.MongoTemplate ; import org.springframework.data.mongodb.core.query.Criteria ; import org.springframework.data.mongodb.core.query.Query ; import org.springframework.scheduling.annotation.Async ; import org.springframework.stereotype.Service ; import java.util.List ; import java.util.concurrent.CompletableFuture ; @Service @Slf4j public class TimeLineService { @Autowired private MongoTemplate mongoTemplate ; @Async //\u5f02\u6b65\u6267\u884c\uff0c\u539f\u7406\uff1a\u5e95\u5c42\u5f00\u4e00\u4e2a\u7ebf\u7a0b\u53bb\u6267\u884c\u8be5\u65b9\u6cd5 public CompletableFuture < String > saveTimeLine ( Long userId , ObjectId publishId ) { //\u5199\u5165\u597d\u53cb\u7684\u65f6\u95f4\u7ebf\u8868 try { //\u67e5\u8be2\u597d\u53cb\u5217\u8868 Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId )); List < Users > usersList = this . mongoTemplate . find ( query , Users . class ); if ( CollUtil . isEmpty ( usersList )) { //\u8fd4\u56de\u6210\u529f return CompletableFuture . completedFuture ( \"ok\" ); } //\u4f9d\u6b21\u5199\u5165\u5230\u597d\u53cb\u7684\u65f6\u95f4\u7ebf\u8868\u4e2d for ( Users users : usersList ) { TimeLine timeLine = new TimeLine (); timeLine . setId ( ObjectId . get ()); timeLine . setDate ( System . currentTimeMillis ()); timeLine . setPublishId ( publishId ); timeLine . setUserId ( userId ); //\u5199\u5165\u6570\u636e this . mongoTemplate . save ( timeLine , \"quanzi_time_line_\" + users . getFriendId ()); } } catch ( Exception e ) { log . error ( \"\u5199\u5165\u597d\u53cb\u65f6\u95f4\u7ebf\u8868\u5931\u8d25~ userId = \" + userId + \", publishId = \" + publishId , e ); //TODO \u4e8b\u52a1\u56de\u6eda\u95ee\u9898 return CompletableFuture . completedFuture ( \"error\" ); } return CompletableFuture . completedFuture ( \"ok\" ); } } \u5f00\u542f\u5f02\u6b65\u6267\u884c\uff1a package com.tanhua.dubbo.server ; import cn.hutool.core.util.StrUtil ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.scheduling.annotation.EnableAsync ; @SpringBootApplication @EnableAsync //\u5f00\u542f\u5f02\u6b65\u6267\u884c\u7684\u652f\u6301 public class DubboApplication { public static void main ( String [] args ) { SpringApplication . run ( DubboApplication . class , args ); } }","title":"6.1.3\u3001\u597d\u53cb\u65f6\u95f4\u7ebf\u6570\u636e"},{"location":"tantan/day04/#614","text":"package com.tanhua.dubbo.server.api ; import com.tanhua.dubbo.server.service.TimeLineService ; import org.bson.types.ObjectId ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; import java.util.concurrent.CompletableFuture ; import java.util.concurrent.ExecutionException ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestTimeLineService { @Autowired private TimeLineService timeLineService ; @Test public void testSaveTimeLine () { ObjectId objectId = ObjectId . get (); System . out . println ( \"\u751f\u6210\u7684id\u4e3a\uff1a\" + objectId . toHexString ()); CompletableFuture < String > future = this . timeLineService . saveTimeLine ( 1L , objectId ); future . whenComplete (( s , throwable ) -> { System . out . println ( \"\u6267\u884c\u5b8c\u6210\uff1a\" + s ); }); System . out . println ( \"\u5f02\u6b65\u65b9\u6cd5\u6267\u884c\u5b8c\u6210\" ); try { future . get (); //\u963b\u585e\u5f53\u524d\u7684\u4e3b\u7ebf\u7a0b\uff0c\u7b49\u5f85\u5f02\u6b65\u6267\u884c\u7684\u7ed3\u675f } catch ( Exception e ) { e . printStackTrace (); } } }","title":"6.1.4\u3001\u6d4b\u8bd5\u597d\u53cb\u65f6\u95f4\u7ebf"},{"location":"tantan/day04/#615","text":"\u5c06dubbo\u670d\u52a1\u542f\u52a8\u8d77\u6765\uff0c\u5728my-tanhua-server\u5de5\u7a0b\u4e2d\u8fdb\u884c\u529f\u80fd\u7684\u6d4b\u8bd5\uff1a package com.tanhua.server ; import cn.hutool.core.collection.ListUtil ; import com.alibaba.dubbo.config.annotation.Reference ; import com.tanhua.dubbo.server.api.QuanZiApi ; import com.tanhua.dubbo.server.pojo.Publish ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestQuanZiApi { @Reference ( version = \"1.0.0\" ) private QuanZiApi quanZiApi ; @Test public void testSavePublish (){ Publish publish = new Publish (); publish . setText ( \"\u4eba\u751f\u4e0d\u5982\u610f\u4e8b\u5341\u4e4b\u516b\u4e5d\uff0c\u771f\u6b63\u6709\u683c\u5c40\u7684\u4eba\uff0c\u65e2\u80fd\u4eab\u53d7\u6700\u597d\u7684\uff0c\u4e5f\u80fd\u627f\u53d7\u6700\u574f\u7684\u3002\" ); publish . setMedias ( ListUtil . toList ( \"https://tanhua-dev.oss-cn-zhangjiakou.aliyuncs.com/photo/6/1.jpg\" , \"https://tanhua-dev.oss-cn-zhangjiakou.aliyuncs.com/photo/6/CL-3.jpg\" )); publish . setUserId ( 1L ); publish . setSeeType ( 1 ); publish . setLongitude ( \"116.350426\" ); publish . setLatitude ( \"40.066355\" ); publish . setLocationName ( \"\u4e2d\u56fd\u5317\u4eac\u5e02\u660c\u5e73\u533a\u5efa\u6750\u57ce\u897f\u8def16\u53f7\" ); this . quanZiApi . savePublish ( publish ); } }","title":"6.1.5\u3001\u6d4b\u8bd5\u53d1\u5e03\u52a8\u6001"},{"location":"tantan/day04/#62app","text":"\u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/701 \u4ece\u63a5\u53e3\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u4e3b\u8981\u7684\u53c2\u6570\u6709\uff1a\u6587\u5b57\u3001\u56fe\u7247\u3001\u4f4d\u7f6e\u7b49\u5185\u5bb9\u3002","title":"6.2\u3001APP\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day04/#621","text":"\u56fe\u7247\u4e0a\u4f20\u529f\u80fd\u539f\u6765\u662f\u5728sso\u4e2d\u5b8c\u6210\u7684\uff0c\u4e3a\u4e86\u80fd\u516c\u7528\u8be5\u529f\u80fd\uff0c\u6240\u4ee5\u9700\u8981\u5c06\u56fe\u7247\u4e0a\u4f20\u7684Service\u4ee5\u53ca\u914d\u7f6e\u79fb\u52a8\u81f3common\u5de5\u7a0b\u4e2d\u3002 pom.xml\uff1a <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> my-tanhua </artifactId> <groupId> cn.itcast.tanhua </groupId> <version> 1.0-SNAPSHOT </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> my-tanhua-common </artifactId> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> </dependency> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> </dependency> <dependency> <groupId> com.baomidou </groupId> <artifactId> mybatis-plus-boot-starter </artifactId> </dependency> <dependency> <groupId> com.fasterxml.jackson.core </groupId> <artifactId> jackson-databind </artifactId> </dependency> <dependency> <groupId> com.aliyun.oss </groupId> <artifactId> aliyun-sdk-oss </artifactId> </dependency> <dependency> <groupId> org.apache.commons </groupId> <artifactId> commons-lang3 </artifactId> </dependency> <dependency> <groupId> joda-time </groupId> <artifactId> joda-time </artifactId> </dependency> </dependencies> </project> \u9700\u8981\u6ce8\u610f3\u70b9\uff1a \u5c06sso\u7cfb\u7edf\u4e2d\u7684\u76f8\u5173\u4ee3\u7801\u5220\u9664 \u5c06aliyun.properties\u590d\u5236\u5230my-tanhua-server\u4e2d \u542f\u52a8\u7c7b\u4e2d\u9700\u8981\u5c06\u5305\u626b\u63cf\u8303\u56f4\u6269\u5927\u5230comm.tanhua\uff0c\u56e0\u4e3a\u76f8\u5173\u7c7b\u88ab\u79fb\u52a8\u5230com.tanhua.common\u4e0b\uff0c\u9ed8\u8ba4\u626b\u63cf\u4e0d\u80fd\u88ab\u626b\u63cf\u5230\u3002 sso\u4e0eserver\u7cfb\u7edf\u90fd\u9700\u8981\u8bbe\u7f6e\uff1a ~~~java package com.tanhua.server; @MapperScan(\"com.tanhua.common.mapper\") //\u8bbe\u7f6emapper\u63a5\u53e3\u7684\u626b\u63cf\u5305 @SpringBootApplication(exclude = {MongoAutoConfiguration.class, MongoDataAutoConfiguration.class}) //\u6392\u9664mongo\u7684\u81ea\u52a8\u914d\u7f6e @ComponentScan(basePackages={\"com.tanhua\"}) //\u8bbe\u7f6e\u626b\u63cf\u5305\u8303\u56f4 public class ServerApplication { public static void main(String[] args) { SpringApplication.run(ServerApplication.class, args); } } ~~~","title":"6.2.1\u3001\u56fe\u7247\u4e0a\u4f20"},{"location":"tantan/day04/#622","text":"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6587\u5b57\u662f\u5fc5\u987b\u63d0\u4ea4\u7684\uff0c\u56fe\u7247\u662f\u975e\u5fc5\u987b\u7684\u3002 //com.tanhua.server.controller.QuanZiController /** * \u53d1\u9001\u52a8\u6001 * * @param textContent * @param location * @param multipartFile * @return */ @PostMapping public ResponseEntity < Void > savePublish ( @RequestParam ( \"textContent\" ) String textContent , @RequestParam ( value = \"location\" , required = false ) String location , @RequestParam ( value = \"latitude\" , required = false ) String latitude , @RequestParam ( value = \"longitude\" , required = false ) String longitude , @RequestParam ( value = \"imageContent\" , required = false ) MultipartFile [] multipartFile ) { try { String publishId = this . quanZiService . savePublish ( textContent , location , latitude , longitude , multipartFile ); if ( StrUtil . isNotEmpty ( publishId )) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"6.2.2\u3001\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day04/#623quanziservice","text":"// com.tanhua.server.service.QuanZiService @Autowired private PicUploadService picUploadService ; public String savePublish ( String textContent , String location , String latitude , String longitude , MultipartFile [] multipartFile ) { //\u67e5\u8be2\u5f53\u524d\u7684\u767b\u5f55\u4fe1\u606f User user = UserThreadLocal . get (); Publish publish = new Publish (); publish . setUserId ( user . getId ()); publish . setText ( textContent ); publish . setLocationName ( location ); publish . setLatitude ( latitude ); publish . setLongitude ( longitude ); publish . setSeeType ( 1 ); List < String > picUrls = new ArrayList <> (); //\u56fe\u7247\u4e0a\u4f20 for ( MultipartFile file : multipartFile ) { PicUploadResult picUploadResult = this . picUploadService . upload ( file ); picUrls . add ( picUploadResult . getName ()); } publish . setMedias ( picUrls ); return this . quanZiApi . savePublish ( publish ); }","title":"6.2.3\u3001QuanZiService\u5b9e\u73b0"},{"location":"tantan/day04/#7","text":"\u63a8\u8350\u52a8\u6001\u662f\u901a\u8fc7\u63a8\u8350\u7cfb\u7edf\u8ba1\u7b97\u51fa\u7684\u7ed3\u679c\uff0c\u73b0\u5728\u6211\u4eec\u53ea\u9700\u8981\u5b9e\u73b0\u67e5\u8be2\u5373\u53ef\uff0c\u63a8\u8350\u7cfb\u7edf\u5728\u540e\u9762\u7684\u8bfe\u7a0b\u4e2d\u5b8c\u6210\u3002 \u63a8\u8350\u7cfb\u7edf\u8ba1\u7b97\u5b8c\u6210\u540e\uff0c\u4f1a\u5c06\u7ed3\u679c\u6570\u636e\u5199\u5165\u5230Redis\u4e2d\uff0c\u6570\u636e\u5982\u4e0b\uff1a 192 .168.31.81:6379> get QUANZI_PUBLISH_RECOMMEND_1 \"2562,3639,2063,3448,2128,2597,2893,2333,3330,2642,2541,3002,3561,3649,2384,2504,3397,2843,2341,2249\" \u53ef\u4ee5\u770b\u5230\uff0c\u5728Redis\u4e2d\u7684\u6570\u636e\u662f\u6709\u591a\u4e2a\u53d1\u5e03id\u7ec4\u6210\uff08pid\uff09\u7531\u9017\u53f7\u5206\u9694\u3002\u6240\u4ee5\u5b9e\u73b0\u4e2d\u9700\u8981\u81ea\u5df1\u5bf9\u8fd9\u4e9b\u6570\u636e\u505a\u5206\u9875\u5904\u7406\u3002","title":"7\u3001\u67e5\u8be2\u63a8\u8350\u52a8\u6001"},{"location":"tantan/day04/#71dubbo","text":"","title":"7.1\u3001dubbo\u670d\u52a1"},{"location":"tantan/day04/#711","text":"//com.tanhua.dubbo.server.api.QuanZiApi /** * \u67e5\u8be2\u63a8\u8350\u52a8\u6001 * * @param userId \u7528\u6237id * @param page \u5f53\u524d\u9875\u6570 * @param pageSize \u6bcf\u4e00\u9875\u67e5\u8be2\u7684\u6570\u636e\u6761\u6570 * @return */ PageInfo < Publish > queryRecommendPublishList ( Long userId , Integer page , Integer pageSize );","title":"7.1.1\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day04/#712","text":"//com.tanhua.dubbo.server.api.QuanZiApiImpl @Autowired private RedisTemplate < String , String > redisTemplate ; public PageInfo < Publish > queryRecommendPublishList ( Long userId , Integer page , Integer pageSize ) { PageInfo < Publish > pageInfo = new PageInfo <> (); pageInfo . setPageNum ( page ); pageInfo . setPageSize ( pageSize ); // \u67e5\u8be2\u63a8\u8350\u7ed3\u679c\u6570\u636e String key = \"QUANZI_PUBLISH_RECOMMEND_\" + userId ; String data = this . redisTemplate . opsForValue (). get ( key ); if ( StrUtil . isEmpty ( data )) { return pageInfo ; } //\u67e5\u8be2\u5230\u7684pid\u8fdb\u884c\u5206\u9875\u5904\u7406 List < String > pids = StrUtil . split ( data , ',' ); //\u8ba1\u7b97\u5206\u9875 //[0, 10] int [] startEnd = PageUtil . transToStartEnd ( page - 1 , pageSize ); int startIndex = startEnd [ 0 ] ; //\u5f00\u59cb int endIndex = Math . min ( startEnd [ 1 ] , pids . size ()); //\u7ed3\u675f List < Long > pidLongList = new ArrayList <> (); for ( int i = startIndex ; i < endIndex ; i ++ ) { pidLongList . add ( Long . valueOf ( pids . get ( i ))); } if ( CollUtil . isEmpty ( pidLongList )) { //\u6ca1\u6709\u67e5\u8be2\u5230\u6570\u636e return pageInfo ; } //\u6839\u636epid\u67e5\u8be2publish Query query = Query . query ( Criteria . where ( \"pid\" ). in ( pidLongList )) . with ( Sort . by ( Sort . Order . desc ( \"created\" ))); List < Publish > publishList = this . mongoTemplate . find ( query , Publish . class ); if ( CollUtil . isEmpty ( publishList )) { //\u6ca1\u6709\u67e5\u8be2\u5230\u6570\u636e return pageInfo ; } pageInfo . setRecords ( publishList ); return pageInfo ; }","title":"7.1.2\u3001\u7f16\u5199\u5b9e\u73b0"},{"location":"tantan/day04/#72app","text":"\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/677 \u901a\u8fc7\u63a5\u53e3\u7684\u5b9a\u4e49\u53ef\u4ee5\u770b\u51fa\uff0c\u5176\u54cd\u5e94\u7684\u6570\u636e\u7ed3\u6784\u4e0e\u597d\u53cb\u52a8\u6001\u7ed3\u6784\u4e00\u6837\uff0c\u6240\u4ee5\u53ef\u4ee5\u590d\u7528QuanZiVo\u5bf9\u8c61\u3002","title":"7.2\u3001APP\u670d\u52a1"},{"location":"tantan/day04/#721quanzicontroller","text":"//com.tanhua.server.controller.QuanZiController /** * \u67e5\u8be2\u63a8\u8350\u52a8\u6001 * * @param page * @param pageSize * @return */ @GetMapping ( \"recommend\" ) public PageResult queryRecommendPublishList ( @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize ) { return this . quanZiService . queryRecommendPublishList ( page , pageSize ); }","title":"7.2.1\u3001QuanZiController"},{"location":"tantan/day04/#722quanziservice","text":"\u5728\u5b9e\u73b0\u4e2d\uff0c\u5c06\u67e5\u8be2\u597d\u53cb\u52a8\u6001\u7684\u65b9\u6cd5\u4e2d\u516c\u5171\u7684\u5185\u5bb9\uff0c\u8fdb\u884c\u62bd\u53d6\uff0c\u5177\u4f53\u5982\u4e0b\uff1a //com.tanhua.server.service.QuanZiService public PageResult queryRecommendPublishList ( Integer page , Integer pageSize ) { //\u5206\u6790\uff1a\u901a\u8fc7dubbo\u4e2d\u7684\u670d\u52a1\u67e5\u8be2\u7cfb\u7edf\u63a8\u8350\u52a8\u6001 //\u901a\u8fc7mysql\u67e5\u8be2\u7528\u6237\u7684\u4fe1\u606f\uff0c\u56de\u5199\u5230\u7ed3\u679c\u5bf9\u8c61\u4e2d\uff08QuanZiVo\uff09 PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); //\u76f4\u63a5\u4eceThreadLocal\u4e2d\u83b7\u53d6\u5bf9\u8c61 User user = UserThreadLocal . get (); //\u901a\u8fc7dubbo\u67e5\u8be2\u6570\u636e PageInfo < Publish > pageInfo = this . quanZiApi . queryRecommendPublishList ( user . getId (), page , pageSize ); List < Publish > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )) { return pageResult ; } pageResult . setItems ( this . fillQuanZiVo ( records )); return pageResult ; } /** * \u586b\u5145\u7528\u6237\u4fe1\u606f * * @param userInfo * @param quanZiVo */ private void fillUserInfoToQuanZiVo ( UserInfo userInfo , QuanZiVo quanZiVo ){ BeanUtil . copyProperties ( userInfo , quanZiVo , \"id\" ); quanZiVo . setGender ( userInfo . getSex (). name (). toLowerCase ()); quanZiVo . setTags ( StringUtils . split ( userInfo . getTags (), ',' )); quanZiVo . setCommentCount ( 0 ); //TODO \u8bc4\u8bba\u6570 quanZiVo . setDistance ( \"1.2\u516c\u91cc\" ); //TODO \u8ddd\u79bb quanZiVo . setHasLiked ( 0 ); //TODO \u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 quanZiVo . setLikeCount ( 0 ); //TODO \u70b9\u8d5e\u6570 quanZiVo . setHasLoved ( 0 ); //TODO \u662f\u5426\u559c\u6b22\uff081\u662f\uff0c0\u5426\uff09 quanZiVo . setLoveCount ( 0 ); //TODO \u559c\u6b22\u6570 } /** * \u6839\u636e\u67e5\u8be2\u5230\u7684publish\u96c6\u5408\u586b\u5145QuanZiVo\u5bf9\u8c61 * * @param records * @return */ private List < QuanZiVo > fillQuanZiVo ( List < Publish > records ){ List < QuanZiVo > quanZiVoList = new ArrayList <> (); records . forEach ( publish -> { QuanZiVo quanZiVo = new QuanZiVo (); quanZiVo . setId ( publish . getId (). toHexString ()); quanZiVo . setTextContent ( publish . getText ()); quanZiVo . setImageContent ( publish . getMedias (). toArray ( new String [] {})); quanZiVo . setUserId ( publish . getUserId ()); quanZiVo . setCreateDate ( RelativeDateFormat . format ( new Date ( publish . getCreated ()))); quanZiVoList . add ( quanZiVo ); }); //\u67e5\u8be2\u7528\u6237\u4fe1\u606f List < Object > userIds = CollUtil . getFieldValues ( records , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIds ); for ( QuanZiVo quanZiVo : quanZiVoList ) { //\u627e\u5230\u5bf9\u5e94\u7684\u7528\u6237\u4fe1\u606f for ( UserInfo userInfo : userInfoList ) { if ( quanZiVo . getUserId (). longValue () == userInfo . getUserId (). longValue ()){ this . fillUserInfoToQuanZiVo ( userInfo , quanZiVo ); break ; } } } return quanZiVoList ; }","title":"7.2.2\u3001QuanZiService"},{"location":"tantan/day04/#73","text":"","title":"7.3\u3001\u6d4b\u8bd5"},{"location":"tantan/day04/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/","text":"\u72ec\u7acb\u5b8c\u6210common\u7684\u62bd\u53d6 \u4e86\u89e3\u5708\u5b50\u529f\u80fd \u4e86\u89e3\u5708\u5b50\u7684\u6280\u672f\u65b9\u6848 \u72ec\u7acb\u5b8c\u6210\u5708\u5b50\u7684\u597d\u53cb\u52a8\u6001\u529f\u80fd \u72ec\u7acb\u5b8c\u6210\u5708\u5b50\u7684\u53d1\u5e03\u52a8\u6001\u529f\u80fd \u72ec\u7acb\u5b8c\u6210\u5708\u5b50\u7684\u63a8\u8350\u52a8\u6001\u529f\u80fd","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"tantan/day05/","text":"\u8bfe\u7a0b\u8bf4\u660e \u00b6 \u5708\u5b50\u5b9e\u73b0\u70b9\u8d5e\u3001\u559c\u6b22\u529f\u80fd \u5708\u5b50\u5b9e\u73b0\u8bc4\u8bba \u5708\u5b50\u5b9e\u73b0\u8bc4\u8bba\u7684\u70b9\u8d5e \u5c0f\u89c6\u9891\u529f\u80fd\u4ecb\u7ecd FastDFS\u5165\u95e8\u5b66\u4e60 \u5b9e\u73b0\u53d1\u5e03\u5c0f\u89c6\u9891\u529f\u80fd \u5b9e\u73b0\u67e5\u8be2\u5c0f\u89c6\u9891\u5217\u8868\u529f\u80fd 1\u3001\u5708\u5b50\u70b9\u8d5e\u5b9e\u73b0\u5206\u6790 \u00b6 \u5728\u5708\u5b50\u529f\u80fd\u4e2d\uff0c\u5bf9\u4e8e\u5708\u5b50\u7684\u70b9\u8d5e\u3001\u559c\u6b22\u3001\u8bc4\u8bba\u7b49\u5747\u53ef\u7406\u89e3\u4e3a\u7528\u6237\u5bf9\u52a8\u6001\u7684\u8bc4\u8bba\uff08Comment\uff09\uff0c\u5728quanzi_comment\u8868\u4e2d\u4f7f\u7528commentType\u8fdb\u884c\u533a\u5206\u3002 \u5728\u5177\u4f53\u7684\u5b9e\u73b0\u4e2d\uff0c\u9700\u8981\u5c06\u70b9\u8d5e\u6570\u3001\u67d0\u7528\u6237\u662f\u5426\u70b9\u8d5e\u7b49\u6570\u636e\u4fdd\u5b58\u5230Reds\u4e2d\uff0c\u4ee5\u51cf\u8f7bMongoDB\u7684\u538b\u529b\u3002 \u5177\u4f53\u5b58\u50a8\u7ed3\u6784\u5982\u4e0b\uff1a \u8bf4\u660e\uff1a\u5728Redis\u7684\u5b58\u50a8\u7ed3\u6784\u4e2d\uff0c\u91c7\u7528\u7684\u662fHash\u5b58\u50a8\uff0c\u8fd9\u6837\u7684\u597d\u5904\u5c31\u5728\u4e8e\u4e00\u6761\u52a8\u6001\u7684\u70b9\u8d5e\u3001\u559c\u6b22\u7b49\u6570\u636e\u90fd\u4f1a\u96c6\u4e2d\u7684\u5b58\u50a8\u5230\u4e00\u8d77\uff0c\u4ece\u800c\u51cf\u5c11\u4e86Redis\u4e2d\u6570\u636e\u6761\u6570\u3002 2\u3001\u70b9\u8d5e \u00b6 2.1\u3001\u5b9a\u4e49\u679a\u4e3e \u00b6 \u4e3a\u4e86\u89c4\u8303\u4f7f\u7528CommentType\uff0c\u6240\u4ee5\u5c06\u5176\u5b9a\u4e49\u4e3a\u679a\u4e3e\u7c7b\u578b\u3002 package com.tanhua.dubbo.server.enums ; /** * \u8bc4\u8bba\u7c7b\u578b\uff1a1-\u70b9\u8d5e\uff0c2-\u8bc4\u8bba\uff0c3-\u559c\u6b22 */ public enum CommentType { LIKE ( 1 ), COMMENT ( 2 ), LOVE ( 3 ); int type ; CommentType ( int type ) { this . type = type ; } public int getType () { return type ; } } 2.2\u3001dubbo\u670d\u52a1 \u00b6 2.2.1\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 package com.tanhua.dubbo.server.api ; import com.tanhua.dubbo.server.pojo.Publish ; import com.tanhua.dubbo.server.vo.PageInfo ; public interface QuanZiApi { //........\u6b64\u5904\u5ffd\u7565\u5176\u4ed6\u4ee3\u7801.......... /** * \u6839\u636eid\u67e5\u8be2\u52a8\u6001 * * @param id \u52a8\u6001id * @return */ Publish queryPublishById ( String id ); /** * \u70b9\u8d5e * * @param userId * @param publishId * @return */ Boolean likeComment ( Long userId , String publishId ); /** * \u53d6\u6d88\u70b9\u8d5e * * @param userId * @param publishId * @return */ Boolean disLikeComment ( Long userId , String publishId ); /** * \u67e5\u8be2\u70b9\u8d5e\u6570 * * @param publishId * @return */ Long queryLikeCount ( String publishId ); /** * \u67e5\u8be2\u7528\u6237\u662f\u5426\u70b9\u8d5e\u8be5\u52a8\u6001 * * @param userId * @param publishId * @return */ Boolean queryUserIsLike ( Long userId , String publishId ); } 2.2.2\u3001\u7f16\u5199\u5b9e\u73b0 \u00b6 package com.tanhua.dubbo.server.api ; @Service ( version = \"1.0.0\" ) @Slf4j public class QuanZiApiImpl implements QuanZiApi { //\u8bc4\u8bba\u6570\u636e\u5b58\u50a8\u5728Redis\u4e2dkey\u7684\u524d\u7f00 private static final String COMMENT_REDIS_KEY_PREFIX = \"QUANZI_COMMENT_\" ; //\u7528\u6237\u662f\u5426\u70b9\u8d5e\u7684\u524d\u7f00 private static final String COMMENT_USER_LIEK_REDIS_KEY_PREFIX = \"USER_LIKE_\" ; //\u7528\u6237\u662f\u5426\u559c\u6b22\u7684\u524d\u7f00 private static final String COMMENT_USER_LOVE_REDIS_KEY_PREFIX = \"USER_LOVE_\" ; @Autowired private MongoTemplate mongoTemplate ; @Autowired private RedisTemplate < String , String > redisTemplate ; //........\u6b64\u5904\u5ffd\u7565\u5176\u4ed6\u4ee3\u7801.......... @Override public Publish queryPublishById ( String id ) { return this . mongoTemplate . findById ( new ObjectId ( id ), Publish . class ); } @Override public Boolean likeComment ( Long userId , String publishId ) { //\u5224\u65ad\u8be5\u7528\u6237\u662f\u5426\u5df2\u7ecf\u70b9\u8d5e\uff0c\u5982\u679c\u5df2\u7ecf\u70b9\u8d5e\u5c31\u76f4\u63a5\u8fd4\u56de if ( this . queryUserIsLike ( userId , publishId )) { return false ; } //\u4fdd\u5b58Comment\u6570\u636e Boolean result = this . saveComment ( userId , publishId , CommentType . LIKE , null ); if ( ! result ) { return false ; } //\u4fee\u6539redis\u4e2d\u7684\u70b9\u8d5e\u6570\u4ee5\u53ca\u662f\u5426\u70b9\u8d5e //\u4fee\u6539\u70b9\u8d5e\u6570 String redisKey = this . getCommentRedisKeyPrefix ( publishId ); String hashKey = CommentType . LIKE . toString (); this . redisTemplate . opsForHash (). increment ( redisKey , hashKey , 1 ); //\u7528\u6237\u662f\u5426\u70b9\u8d5e String userHashKey = this . getCommentUserLikeRedisKeyPrefix ( userId ); this . redisTemplate . opsForHash (). put ( redisKey , userHashKey , \"1\" ); return true ; } private String getCommentRedisKeyPrefix ( String publishId ) { return COMMENT_REDIS_KEY_PREFIX + publishId ; } private String getCommentUserLikeRedisKeyPrefix ( Long userId ) { return COMMENT_USER_LIKE_REDIS_KEY_PREFIX + userId ; } @Override public Boolean disLikeComment ( Long userId , String publishId ) { //\u5224\u65ad\u7528\u6237\u662f\u5426\u5df2\u7ecf\u70b9\u8d5e\uff0c\u5982\u679c\u6ca1\u6709\u70b9\u8d5e\u5c31\u8fd4\u56de if ( ! this . queryUserIsLike ( userId , publishId )) { return false ; } //\u5220\u9664\u8bc4\u8bba\u6570\u636e Boolean result = this . removeComment ( userId , publishId , CommentType . LIKE ); if ( ! result ) { return false ; } //\u4fee\u6539Redis\u4e2d\u7684\u6570\u636e //\u4fee\u6539\u70b9\u8d5e\u6570 String redisKey = this . getCommentRedisKeyPrefix ( publishId ); String hashKey = CommentType . LIKE . toString (); this . redisTemplate . opsForHash (). increment ( redisKey , hashKey , - 1 ); //\u7528\u6237\u662f\u5426\u70b9\u8d5e String userHashKey = this . getCommentUserLikeRedisKeyPrefix ( userId ); this . redisTemplate . opsForHash (). delete ( redisKey , userHashKey ); return true ; } @Override public Long queryLikeCount ( String publishId ) { //\u4eceRedis\u4e2d\u547d\u4e2d\u67e5\u8be2\uff0c\u5982\u679c\u547d\u4e2d\u76f4\u63a5\u8fd4\u56de\u5373\u53ef String redisKey = this . getCommentRedisKeyPrefix ( publishId ); String hashKey = CommentType . LIKE . toString (); Object data = this . redisTemplate . opsForHash (). get ( redisKey , hashKey ); if ( ObjectUtil . isNotEmpty ( data )) { return Convert . toLong ( data ); } //\u67e5\u8be2Mongodb Long count = this . queryCommentCount ( publishId , CommentType . LIKE ); //\u5199\u5165Redis\u4e2d this . redisTemplate . opsForHash (). put ( redisKey , hashKey , String . valueOf ( count )); return count ; } @Override public Boolean queryUserIsLike ( Long userId , String publishId ) { //\u4eceredis\u4e2d\u67e5\u8be2\u6570\u636e String redisKey = this . getCommentRedisKeyPrefix ( publishId ); String userHashKey = this . getCommentUserLikeRedisKeyPrefix ( userId ); Object data = this . redisTemplate . opsForHash (). get ( redisKey , userHashKey ); if ( ObjectUtil . isNotEmpty ( data )) { return StrUtil . equals ( Convert . toStr ( data ), \"1\" ); } //\u67e5\u8be2Mongodb\uff0c\u786e\u5b9a\u662f\u5426\u5df2\u7ecf\u70b9\u8d5e Query query = Query . query ( Criteria . where ( \"publishId\" ). is ( new ObjectId ( publishId )) . and ( \"userId\" ). is ( userId ) . and ( \"commentType\" ). is ( CommentType . LIKE ) ); long count = this . mongoTemplate . count ( query , Comment . class ); if ( count == 0 ){ return false ; } //\u5199\u5165\u5230redis\u4e2d this . redisTemplate . opsForHash (). put ( redisKey , userHashKey , \"1\" ); return true ; } /** * \u4fdd\u5b58Comment * * @return */ private Boolean saveComment ( Long userId , String publishId , CommentType commentType , String content ) { try { Comment comment = new Comment (); comment . setId ( ObjectId . get ()); comment . setUserId ( userId ); comment . setPublishId ( new ObjectId ( publishId )); // \u8bc4\u8bba\u7c7b\u578b comment . setCommentType ( commentType . getType ()); // \u5185\u5bb9 comment . setContent ( content ); comment . setCreated ( System . currentTimeMillis ()); Publish publish = this . queryPublishById ( publishId ); //TODO \u5176\u4ed6\u8bc4\u8bba\u5bf9\u8c61\uff0c\u6682\u4e0d\u5904\u7406 comment . setPublishUserId ( publish . getUserId ()); this . mongoTemplate . save ( comment ); return true ; } catch ( Exception e ) { log . error ( \"\u4fdd\u5b58Comment\u51fa\u9519~ userId = \" + userId + \", publishId = \" + publishId + \", commentType = \" + commentType , e ); } return false ; } /** * \u5220\u9664\u8bc4\u8bba\u6570\u636e * * @param userId * @param publishId * @param commentType * @return */ private Boolean removeComment ( Long userId , String publishId , CommentType commentType ) { Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId ) . and ( \"publishId\" ). is ( new ObjectId ( publishId )) . and ( \"commentType\" ). is ( commentType . getType ()) ); return this . mongoTemplate . remove ( query , Comment . class ). getDeletedCount () > 0 ; } /** * \u67e5\u8be2\u6570\u91cf * * @param publishId * @param commentType * @return */ private Long queryCommentCount ( String publishId , CommentType commentType ) { Query query = Query . query ( Criteria . where ( \"publishId\" ). is ( new ObjectId ( publishId )) . and ( \"commentType\" ). is ( commentType . getType ()) ); return this . mongoTemplate . count ( query , Comment . class ); } } 2.2.3\u3001\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b \u00b6 package com.tanhua.dubbo.server.api ; import com.tanhua.dubbo.server.pojo.Publish ; import com.tanhua.dubbo.server.vo.PageInfo ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestQuanZiApi { @Autowired private QuanZiApi quanZiApi ; //........\u6b64\u5904\u5ffd\u7565\u5176\u4ed6\u4ee3\u7801.......... @Test public void testLike (){ Long userId = 1L ; String publishId = \"5fae53947e52992e78a3afb1\" ; Boolean data = this . quanZiApi . queryUserIsLike ( userId , publishId ); System . out . println ( data ); System . out . println ( this . quanZiApi . likeComment ( userId , publishId )); System . out . println ( this . quanZiApi . queryLikeCount ( publishId )); System . out . println ( this . quanZiApi . disLikeComment ( userId , publishId )); System . out . println ( this . quanZiApi . queryLikeCount ( publishId )); } } 2.3\u3001APP\u63a5\u53e3\u670d\u52a1 \u00b6 \u70b9\u8d5e\u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/707 \u4ece\u63a5\u53e3\u6587\u6863\u6765\u770b\uff0c\u70b9\u8d5e\u5b8c\u6210\u540e\u9700\u8981\u8fd4\u56de\u70b9\u8d5e\u6570\u3002 2.3.1\u3001\u7f16\u5199\u63a5\u53e3\u670d\u52a1 \u00b6 //com.tanhua.server.controller.QuanZiController /** * \u70b9\u8d5e * * @param publishId * @return */ @GetMapping ( \"/{id}/like\" ) public ResponseEntity < Long > likeComment ( @PathVariable ( \"id\" ) String publishId ) { try { Long likeCount = this . quanZiService . likeComment ( publishId ); if ( likeCount != null ) { return ResponseEntity . ok ( likeCount ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u53d6\u6d88\u70b9\u8d5e * * @param publishId * @return */ @GetMapping ( \"/{id}/dislike\" ) public ResponseEntity < Long > disLikeComment ( @PathVariable ( \"id\" ) String publishId ) { try { Long likeCount = this . quanZiService . disLikeComment ( publishId ); if ( null != likeCount ) { return ResponseEntity . ok ( likeCount ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 2.3.2\u3001\u7f16\u5199\u670d\u52a1\u5b9e\u73b0 \u00b6 //com.tanhua.server.service.QuanZiService public Long likeComment ( String publishId ) { User user = UserThreadLocal . get (); //\u70b9\u8d5e Boolean result = this . quanZiApi . likeComment ( user . getId (), publishId ); if ( result ){ //\u67e5\u8be2\u70b9\u8d5e\u6570 return this . quanZiApi . queryLikeCount ( publishId ); } return null ; } public Long disLikeComment ( String publishId ) { User user = UserThreadLocal . get (); //\u53d6\u6d88\u70b9\u8d5e Boolean result = this . quanZiApi . disLikeComment ( user . getId (), publishId ); if ( result ){ //\u67e5\u8be2\u70b9\u8d5e\u6570 return this . quanZiApi . queryLikeCount ( publishId ); } return null ; } 2.3.3\u3001\u4fee\u6539\u67e5\u8be2\u52a8\u6001\u70b9\u8d5e\u6570 \u00b6 \u67e5\u8be2\u70b9\u8d5e\u6570\u3001\u662f\u5426\u70b9\u8d5e\uff0c\u9700\u8981\u901a\u8fc7dubbo\u670d\u52a1\u8fdb\u884c\u67e5\u8be2\u3002 //com.tanhua.server.service.QuanZiService /** * \u586b\u5145\u7528\u6237\u4fe1\u606f * * @param userInfo * @param quanZiVo */ private void fillUserInfoToQuanZiVo ( UserInfo userInfo , QuanZiVo quanZiVo ) { BeanUtil . copyProperties ( userInfo , quanZiVo , \"id\" ); quanZiVo . setGender ( userInfo . getSex (). name (). toLowerCase ()); quanZiVo . setTags ( StringUtils . split ( userInfo . getTags (), ',' )); //\u5f53\u524d\u7528\u6237 User user = UserThreadLocal . get (); quanZiVo . setCommentCount ( 0 ); //TODO \u8bc4\u8bba\u6570 quanZiVo . setDistance ( \"1.2\u516c\u91cc\" ); //TODO \u8ddd\u79bb quanZiVo . setHasLiked ( this . quanZiApi . queryUserIsLike ( user . getId (), quanZiVo . getId ()) ? 1 : 0 ); //\u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 quanZiVo . setLikeCount ( Convert . toInt ( this . quanZiApi . queryLikeCount ( quanZiVo . getId ()))); //\u70b9\u8d5e\u6570 quanZiVo . setHasLoved ( 0 ); //TODO \u662f\u5426\u559c\u6b22\uff081\u662f\uff0c0\u5426\uff09 quanZiVo . setLoveCount ( 0 ); //TODO \u559c\u6b22\u6570 } 2.3.4\u3001\u6d4b\u8bd5 \u00b6 \u4ece\u6d4b\u8bd5\u7ed3\u679c\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u54cd\u5e94\u7ed3\u679c\u4e2d\u8fd4\u56de\u4e86\u70b9\u8d5e\u6570\u4ee5\u53ca\u662f\u5426\u70b9\u8d5e\u7684\u6570\u636e\u3002 3\u3001\u559c\u6b22 \u00b6 \u559c\u6b22\u7684\u5b9e\u73b0\u4e0e\u70b9\u8d5e\u7c7b\u4f3c\uff0c\u53ea\u662f\u5176\u7c7b\u578b\u4e0d\u540c\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u63a8\u8350\u52a8\u6001\u4e2d\u624d\u6709\u559c\u6b22\u529f\u80fd\uff0c\u597d\u53cb\u52a8\u6001\u4e2d\u662f\u6ca1\u6709\u6b64\u529f\u80fd\u7684\u3002 3.1\u3001dubbo\u670d\u52a1 \u00b6 3.1.1\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 //com.tanhua.dubbo.server.api.QuanZiApi /** * \u559c\u6b22 * * @param userId * @param publishId * @return */ Boolean loveComment ( Long userId , String publishId ); /** * \u53d6\u6d88\u559c\u6b22 * * @param userId * @param publishId * @return */ Boolean disLoveComment ( Long userId , String publishId ); /** * \u67e5\u8be2\u559c\u6b22\u6570 * * @param publishId * @return */ Long queryLoveCount ( String publishId ); /** * \u67e5\u8be2\u7528\u6237\u662f\u5426\u559c\u6b22\u8be5\u52a8\u6001 * * @param userId * @param publishId * @return */ Boolean queryUserIsLove ( Long userId , String publishId ); 3.1.2\u3001\u7f16\u5199\u5b9e\u73b0 \u00b6 //com.tanhua.dubbo.server.api.QuanZiApiImpl @Override public Boolean loveComment ( Long userId , String publishId ) { //\u67e5\u8be2\u8be5\u7528\u6237\u662f\u5426\u5df2\u7ecf\u559c\u6b22 if ( this . queryUserIsLove ( userId , publishId )) { return false ; } //\u559c\u6b22 boolean result = this . saveComment ( userId , publishId , CommentType . LOVE , null ); if ( ! result ) { return false ; } //\u559c\u6b22\u6210\u529f\u540e\uff0c\u4fee\u6539Redis\u4e2d\u7684\u603b\u7684\u559c\u6b22\u6570 String redisKey = this . getCommentRedisKeyPrefix ( publishId ); String hashKey = CommentType . LOVE . toString (); this . redisTemplate . opsForHash (). increment ( redisKey , hashKey , 1 ); //\u6807\u8bb0\u7528\u6237\u5df2\u7ecf\u559c\u6b22 hashKey = this . getCommentUserLoveRedisKey ( userId ); this . redisTemplate . opsForHash (). put ( redisKey , hashKey , \"1\" ); return true ; } private String getCommentUserLoveRedisKey ( Long userId ) { return COMMENT_USER_LOVE_REDIS_KEY_PREFIX + userId ; } @Override public Boolean disLoveComment ( Long userId , String publishId ) { if ( ! this . queryUserIsLove ( userId , publishId )) { //\u5982\u679c\u7528\u6237\u6ca1\u6709\u559c\u6b22\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de return false ; } boolean result = this . removeComment ( userId , publishId , CommentType . LOVE ); if ( ! result ) { //\u5220\u9664\u5931\u8d25 return false ; } //\u5220\u9664redis\u4e2d\u7684\u8bb0\u5f55 String redisKey = this . getCommentRedisKeyPrefix ( publishId ); String hashKey = this . getCommentUserLoveRedisKey ( userId ); this . redisTemplate . opsForHash (). delete ( redisKey , hashKey ); this . redisTemplate . opsForHash (). increment ( redisKey , CommentType . LOVE . toString (), - 1 ); return true ; } @Override public Long queryLoveCount ( String publishId ) { //\u9996\u5148\u4eceredis\u4e2d\u547d\u4e2d\uff0c\u5982\u679c\u547d\u4e2d\u7684\u8bdd\u5c31\u8fd4\u56de\uff0c\u6ca1\u6709\u547d\u4e2d\u5c31\u67e5\u8be2Mongodb String redisKey = this . getCommentRedisKeyPrefix ( publishId ); String hashKey = CommentType . LOVE . toString (); Object value = this . redisTemplate . opsForHash (). get ( redisKey , hashKey ); if ( ObjectUtil . isNotEmpty ( value )) { return Convert . toLong ( value ); } //\u67e5\u8be2count Long count = this . queryCommentCount ( publishId , CommentType . LOVE ); //\u5b58\u50a8\u5230redis\u4e2d this . redisTemplate . opsForHash (). put ( redisKey , hashKey , String . valueOf ( count )); return count ; } @Override public Boolean queryUserIsLove ( Long userId , String publishId ) { String redisKey = this . getCommentRedisKeyPrefix ( publishId ); String hashKey = this . getCommentUserLoveRedisKey ( userId ); Object value = this . redisTemplate . opsForHash (). get ( redisKey , hashKey ); if ( ObjectUtil . isNotEmpty ( value )) { return StrUtil . equals ( Convert . toStr ( value ), \"1\" ); } //\u67e5\u8be2mongodb Query query = Query . query ( Criteria . where ( \"publishId\" ) . is ( new ObjectId ( publishId )) . and ( \"userId\" ). is ( userId ) . and ( \"commentType\" ). is ( CommentType . LOVE . getType ())); long count = this . mongoTemplate . count ( query , Comment . class ); if ( count == 0 ) { return false ; } //\u6807\u8bb0\u7528\u6237\u5df2\u7ecf\u559c\u6b22 this . redisTemplate . opsForHash (). put ( redisKey , hashKey , \"1\" ); return true ; } 3.2\u3001APP\u63a5\u53e3\u670d\u52a1 \u00b6 3.2.1\u3001\u7f16\u5199\u63a5\u53e3\u670d\u52a1 \u00b6 //com.tanhua.server.controller.QuanZiController /** * \u559c\u6b22 * * @param publishId * @return */ @GetMapping ( \"/{id}/love\" ) public ResponseEntity < Long > loveComment ( @PathVariable ( \"id\" ) String publishId ) { try { Long loveCount = this . quanZiService . loveComment ( publishId ); if ( null != loveCount ) { return ResponseEntity . ok ( loveCount ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u53d6\u6d88\u559c\u6b22 * * @param publishId * @return */ @GetMapping ( \"/{id}/unlove\" ) public ResponseEntity < Long > disLoveComment ( @PathVariable ( \"id\" ) String publishId ) { try { Long loveCount = this . quanZiService . disLoveComment ( publishId ); if ( null != loveCount ) { return ResponseEntity . ok ( loveCount ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 3.2.2\u3001\u7f16\u5199\u670d\u52a1\u5b9e\u73b0 \u00b6 //com.tanhua.server.service.QuanZiService public Long loveComment ( String publishId ) { User user = UserThreadLocal . get (); //\u559c\u6b22 Boolean result = this . quanZiApi . loveComment ( user . getId (), publishId ); if ( result ){ //\u67e5\u8be2\u559c\u6b22\u6570 return this . quanZiApi . queryLoveCount ( publishId ); } return null ; } public Long disLoveComment ( String publishId ) { User user = UserThreadLocal . get (); //\u53d6\u6d88\u559c\u6b22 Boolean result = this . quanZiApi . disLoveComment ( user . getId (), publishId ); if ( result ){ //\u67e5\u8be2\u559c\u6b22\u6570 return this . quanZiApi . queryLoveCount ( publishId ); } return null ; } /** * \u586b\u5145\u7528\u6237\u4fe1\u606f * * @param userInfo * @param quanZiVo */ private void fillUserInfoToQuanZiVo ( UserInfo userInfo , QuanZiVo quanZiVo ) { BeanUtil . copyProperties ( userInfo , quanZiVo , \"id\" ); quanZiVo . setGender ( userInfo . getSex (). name (). toLowerCase ()); quanZiVo . setTags ( StringUtils . split ( userInfo . getTags (), ',' )); //\u5f53\u524d\u7528\u6237 User user = UserThreadLocal . get (); quanZiVo . setCommentCount ( 0 ); //TODO \u8bc4\u8bba\u6570 quanZiVo . setDistance ( \"1.2\u516c\u91cc\" ); //TODO \u8ddd\u79bb quanZiVo . setHasLiked ( this . quanZiApi . queryUserIsLike ( user . getId (), quanZiVo . getId ()) ? 1 : 0 ); //\u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 quanZiVo . setLikeCount ( Convert . toInt ( this . quanZiApi . queryLikeCount ( quanZiVo . getId ()))); //\u70b9\u8d5e\u6570 quanZiVo . setHasLoved ( this . quanZiApi . queryUserIsLove ( user . getId (), quanZiVo . getId ()) ? 1 : 0 ); //\u662f\u5426\u559c\u6b22\uff081\u662f\uff0c0\u5426\uff09 quanZiVo . setLoveCount ( Convert . toInt ( this . quanZiApi . queryLoveCount ( quanZiVo . getId ()))); //\u559c\u6b22\u6570 } 1.2.3\u3001\u6d4b\u8bd5 \u00b6 4\u3001\u67e5\u8be2\u5355\u6761\u52a8\u6001 \u00b6 \u7528\u6237\u70b9\u51fb\u8bc4\u8bba\u65f6\u9700\u8981\u67e5\u8be2\u5355\u6761\u52a8\u6001\u8be6\u60c5\uff0c\u9700\u8981\u6709\u63a5\u53e3\u652f\u6301\u3002 \u670d\u52a1\u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/695 \u54cd\u5e94\u7684\u6570\u636e\u63a5\u53e3\u4e0e\u67e5\u8be2\u597d\u53cb\u52a8\u6001\u4e00\u81f4\uff0c\u53ea\u662f\u5355\u6761\u8fd4\u56de\u800c\u4e0d\u662f\u96c6\u5408\u3002 \u8981\u6ce8\u610f\u7684\u662f\uff0cdubbo\u670d\u52a1\u63a5\u53e3\u5728\u524d\u9762\u5df2\u7ecf\u5f00\u53d1\u5b8c\u6210\uff0c\u73b0\u5728\u53ea\u8981\u60f3\u5b9e\u73b0APP\u7aef\u7684\u63a5\u53e3\u670d\u52a1\u5373\u53ef\u3002 4.1\u3001\u5b9a\u4e49\u670d\u52a1\u63a5\u53e3 \u00b6 //com.tanhua.server.controller.QuanZiController /** * \u67e5\u8be2\u5355\u6761\u52a8\u6001\u4fe1\u606f * * @param publishId * @return */ @GetMapping ( \"/{id}\" ) public ResponseEntity < QuanZiVo > queryById ( @PathVariable ( \"id\" ) String publishId ) { try { QuanZiVo movements = this . quanZiService . queryById ( publishId ); if ( null != movements ){ return ResponseEntity . ok ( movements ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 4.2\u3001\u670d\u52a1\u5b9e\u73b0 \u00b6 //com.tanhua.server.service.QuanZiService public QuanZiVo queryById ( String publishId ) { Publish publish = this . quanZiApi . queryPublishById ( publishId ); if ( publish == null ) { return null ; } return this . fillQuanZiVo ( Arrays . asList ( publish )). get ( 0 ); } 4.3\u3001\u6d4b\u8bd5 \u00b6 \u53ef\u4ee5\u770b\u5230\uff0c\u8fd4\u56de\u4e86\u5355\u6761\u6570\u636e\u3002 4.4\u3001\u5f02\u5e38\u7684\u89e3\u51b3 \u00b6 \u5728\u5b8c\u6210\u67e5\u8be2\u5355\u6761\u52a8\u6001\u63a5\u53e3\u540e\uff0c\u4f1a\u53d1\u73b0\uff0c\u5237\u65b0\u9996\u9875\u65f6\u4f1a\u51fa\u73b0\u5982\u4e0b\u5f02\u5e38\uff1a java.lang.IllegalArgumentException: invalid hexadecimal representation of an ObjectId: [ visitors ] at org.bson.types.ObjectId.parseHexString ( ObjectId.java:550 ) at org.bson.types.ObjectId.<init> ( ObjectId.java:239 ) at com.tanhua.dubbo.server.api.QuanZiApiImpl.queryPublishById ( QuanZiApiImpl.java:411 ) at com.alibaba.dubbo.common.bytecode.Wrapper1.invokeMethod ( Wrapper1.java ) at com.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory $1 .doInvoke ( JavassistProxyFactory.java:47 ) at com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker.invoke ( AbstractProxyInvoker.java:76 ) at com.alibaba.dubbo.config.invoker.DelegateProviderMetaDataInvoker.invoke ( DelegateProviderMetaDataInvoker.java:52 ) at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke ( InvokerWrapper.java:56 ) \u539f\u56e0\u662f\uff1a\u8c01\u770b\u8fc7\u6211\u7684\u63a5\u53e3\u8fd8\u6ca1\u5b9e\u73b0\uff0c\u5bfc\u81f4\u4e86\u6620\u5c04\u5230\u4e86\u67e5\u8be2\u5355\u6761\u52a8\u6001\u7684\u63a5\u53e3\uff0c\u5bfc\u81f4\u7684\u5f02\u5e38\uff0c\u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/743 \u89e3\u51b3\u65b9\u6cd5\uff1a\u7f16\u5199\u4e00\u4e2a\u7a7a\u7684\u65b9\u6cd5\u300a\u8c01\u770b\u8fc7\u6211\u300b\u7684\u63a5\u53e3\u5b9e\u73b0\u3002 //com.tanhua.server.controller.QuanZiController /** * TODO\uff1a\u8c01\u770b\u8fc7\u6211 * * @return */ @GetMapping ( \"visitors\" ) public ResponseEntity < Object > queryVisitors () { return ResponseEntity . ok ( Collections . EMPTY_LIST ); } 5\u3001\u8bc4\u8bba \u00b6 \u5728\u5355\u6761\u52a8\u6001\u6253\u5f00\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u6709\u8bc4\u8bba\u5217\u8868\uff0c\u529f\u80fd\u5305\u62ec\uff1a\u67e5\u8be2\u8bc4\u8bba\u5217\u8868\uff0c\u8bc4\u8bba\u70b9\u8d5e\u3001\u53d6\u6d88\u70b9\u8d5e\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8bc4\u8bba\u7684\u70b9\u8d5e\u64cd\u4f5c\u4e0e\u5708\u5b50\u52a8\u6001\u7684\u70b9\u8d5e\u4f7f\u7528\u540c\u4e00\u5957\u903b\u8f91\u3002 5.1\u3001dubbo\u670d\u52a1 \u00b6 5.1.1\u3001\u5b9a\u4e49\u670d\u52a1\u63a5\u53e3 \u00b6 //com.tanhua.dubbo.server.api.QuanZiApi /** * \u67e5\u8be2\u8bc4\u8bba * * @return */ PageInfo < Comment > queryCommentList ( String publishId , Integer page , Integer pageSize ); /** * \u53d1\u8868\u8bc4\u8bba * * @param userId * @param publishId * @param content * @return */ Boolean saveComment ( Long userId , String publishId , String content ); 5.1.2\u3001\u7f16\u5199\u5b9e\u73b0 \u00b6 /** * \u67e5\u8be2\u8bc4\u8bba\u5217\u8868 * * @param publishId * @param page * @param pageSize * @return */ @Override public PageInfo < Comment > queryCommentList ( String publishId , Integer page , Integer pageSize ) { PageRequest pageRequest = PageRequest . of ( page - 1 , pageSize , Sort . by ( Sort . Order . asc ( \"created\" ))); Query query = new Query ( Criteria . where ( \"publishId\" ). is ( new ObjectId ( publishId )) . and ( \"commentType\" ). is ( CommentType . COMMENT . getType ())). with ( pageRequest ); //\u67e5\u8be2\u8bc4\u8bba\u5217\u8868 List < Comment > commentList = this . mongoTemplate . find ( query , Comment . class ); PageInfo < Comment > pageInfo = new PageInfo <> (); pageInfo . setPageNum ( page ); pageInfo . setPageSize ( pageSize ); pageInfo . setRecords ( commentList ); return pageInfo ; } /** * \u53d1\u8868\u8bc4\u8bba * * @param userId * @param publishId * @param content * @return */ @Override public Boolean saveComment ( Long userId , String publishId , String content ) { return this . saveComment ( userId , publishId , CommentType . COMMENT , content ); } 5.2\u3001APP\u63a5\u53e3\u670d\u52a1 \u00b6 5.2.1\u3001CommentVo \u00b6 \u6839\u636e\u54cd\u5e94\u7ed3\u679c\u7684\u6570\u636e\u7ed3\u6784\u5b9a\u4e49\u5bf9\u8c61\uff1a package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; /** * \u8bc4\u8bba */ @Data @NoArgsConstructor @AllArgsConstructor public class CommentVo { private String id ; //\u8bc4\u8bbaid private String avatar ; //\u5934\u50cf private String nickname ; //\u6635\u79f0 private String content ; //\u8bc4\u8bba private String createDate ; //\u8bc4\u8bba\u65f6\u95f4: 08:27 private Integer likeCount ; //\u70b9\u8d5e\u6570 private Integer hasLiked ; //\u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 } 5.2.2\u3001\u7f16\u5199Controller \u00b6 \u5728APP\u63a5\u53e3\u670d\u52a1\u4e2d\uff0c\u9700\u8981\u5f00\u53d14\u4e2a\u63a5\u53e3\uff0c\u5206\u522b\u662f\u67e5\u8be2\u8bc4\u8bba\u5217\u8868\u3001\u53d1\u8868\u8bc4\u8bba\u3001\u70b9\u8d5e\u3001\u53d6\u6d88\u70b9\u8d5e\u3002 \u7531\u4e8e\u5176\u63a5\u53e3\u7684url\u5730\u5740\u4e0eQuanZiConroller\u5730\u5740\u4e0d\u540c\uff0c\u6240\u4ee5\u9700\u8981\u521b\u5efa\u4e0d\u540c\u7684Controller\u7c7b\u3002 package com.tanhua.server.controller ; import com.tanhua.server.service.QuanZiService ; import com.tanhua.server.vo.PageResult ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.* ; import java.util.Map ; /** * \u5708\u5b50\u529f\u80fd\u4e2d\u7684\u8bc4\u8bba */ @RestController @RequestMapping ( \"comments\" ) public class QuanZiCommentController { @Autowired private QuanZiService quanZiService ; /** * \u67e5\u8be2\u8bc4\u8bba\u5217\u8868 * * @return */ @GetMapping public ResponseEntity < PageResult > queryCommentsList ( @RequestParam ( \"movementId\" ) String publishId , @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize ) { try { PageResult pageResult = this . quanZiService . queryCommentList ( publishId , page , pageSize ); return ResponseEntity . ok ( pageResult ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u4fdd\u5b58\u8bc4\u8bba */ @PostMapping public ResponseEntity < Void > saveComments ( @RequestBody Map < String , String > param ) { try { String publishId = param . get ( \"movementId\" ); String content = param . get ( \"comment\" ); Boolean result = this . quanZiService . saveComments ( publishId , content ); if ( result ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u70b9\u8d5e * * @param publishId * @return */ @GetMapping ( \"{id}/like\" ) public ResponseEntity < Long > likeComment ( @PathVariable ( \"id\" ) String publishId ) { try { Long likeCount = this . quanZiService . likeComment ( publishId ); if ( likeCount != null ) { return ResponseEntity . ok ( likeCount ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u53d6\u6d88\u70b9\u8d5e * * @param publishId * @return */ @GetMapping ( \"{id}/dislike\" ) public ResponseEntity < Long > disLikeComment ( @PathVariable ( \"id\" ) String publishId ) { try { Long likeCount = this . quanZiService . disLikeComment ( publishId ); if ( null != likeCount ) { return ResponseEntity . ok ( likeCount ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } } 5.2.3\u3001\u7f16\u5199Service\u5b9e\u73b0 \u00b6 Service\u7684\u5177\u4f53\u5b9e\u73b0\u4f9d\u7136\u662f\u653e\u5230QuanZiSerivce\u4e2d\u5b8c\u6210\u3002 //com.tanhua.server.service.QuanZiService /** * \u67e5\u8be2\u8bc4\u8bba\u5217\u8868 * * @param publishId * @param page * @param pageSize * @return */ public PageResult queryCommentList ( String publishId , Integer page , Integer pageSize ) { PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); User user = UserThreadLocal . get (); //\u67e5\u8be2\u8bc4\u8bba\u5217\u8868\u6570\u636e PageInfo < Comment > pageInfo = this . quanZiApi . queryCommentList ( publishId , page , pageSize ); List < Comment > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )){ return pageResult ; } //\u67e5\u8be2\u7528\u6237\u4fe1\u606f List < Object > userIdList = CollUtil . getFieldValues ( records , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIdList ); List < CommentVo > result = new ArrayList <> (); for ( Comment record : records ) { CommentVo commentVo = new CommentVo (); commentVo . setContent ( record . getContent ()); commentVo . setId ( record . getId (). toHexString ()); commentVo . setCreateDate ( DateUtil . format ( new Date ( record . getCreated ()), \"HH:mm\" )); //\u662f\u5426\u70b9\u8d5e commentVo . setHasLiked ( this . quanZiApi . queryUserIsLike ( user . getId (), commentVo . getId ()) ? 1 : 0 ); //\u70b9\u8d5e\u6570 commentVo . setLikeCount ( Convert . toInt ( this . quanZiApi . queryLikeCount ( commentVo . getId ()))); for ( UserInfo userInfo : userInfoList ) { if ( ObjectUtil . equals ( record . getUserId (), userInfo . getUserId ())){ commentVo . setAvatar ( userInfo . getLogo ()); commentVo . setNickname ( userInfo . getNickName ()); break ; } } result . add ( commentVo ); } pageResult . setItems ( result ); return pageResult ; } /** * \u53d1\u8868\u8bc4\u8bba * @param publishId * @param content * @return */ public Boolean saveComments ( String publishId , String content ) { User user = UserThreadLocal . get (); return this . quanZiApi . saveComment ( user . getId (), publishId , content ); } 5.2.4\u3001\u6d4b\u8bd5 \u00b6 \u6d4b\u8bd5\u70b9\u8d5e\u65f6\u4f1a\u53d1\u73b0dubbo\u670d\u52a1\u4e2d\u4f1a\u51fa\u73b0null\u6307\u9488\u5f02\u5e38\uff0c\u5982\u4e0b\uff1a java.lang.NullPointerException at com.tanhua.dubbo.server.api.QuanZiApiImpl.saveComment ( QuanZiApiImpl.java:386 ) at com.tanhua.dubbo.server.api.QuanZiApiImpl.likeComment ( QuanZiApiImpl.java:180 ) at com.alibaba.dubbo.common.bytecode.Wrapper1.invokeMethod ( Wrapper1.java ) at com.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory $1 .doInvoke ( JavassistProxyFactory.java:47 ) at com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker.invoke ( AbstractProxyInvoker.java:76 ) at com.alibaba.dubbo.config.invoker.DelegateProviderMetaDataInvoker.invoke ( DelegateProviderMetaDataInvoker.java:52 ) at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke ( InvokerWrapper.java:56 ) \u539f\u56e0\u662f\uff1a\u539f\u6709\u7684\u70b9\u8d5e\u5b9e\u73b0\u4e2d\uff0c\u9700\u8981\u67e5\u8be2Publish\u5bf9\u8c61\uff0c\u4f46\u662f\u73b0\u5728\u5b9e\u73b0\u7684\u662f\u9488\u5bf9\u8bc4\u8bba\u7684\u70b9\u8d5e\uff0c\u662f\u67e5\u8be2\u4e0d\u5230Publish\u5bf9\u8c61\u7684\uff0c\u6240\u4ee5\u629b\u51fa\u4e86\u7a7a\u6307\u9488\u5f02\u5e38\u3002 \u89e3\u51b3\u5982\u4e0b\uff1a //com.tanhua.dubbo.server.api.QuanZiApiImpl /** * \u4fdd\u5b58Comment * * @return */ private Boolean saveComment ( Long userId , String publishId , CommentType commentType , String content ) { try { Comment comment = new Comment (); comment . setId ( ObjectId . get ()); comment . setUserId ( userId ); comment . setPublishId ( new ObjectId ( publishId )); // \u8bc4\u8bba\u7c7b\u578b comment . setCommentType ( commentType . getType ()); // \u5185\u5bb9 comment . setContent ( content ); comment . setCreated ( System . currentTimeMillis ()); Publish publish = this . queryPublishById ( publishId ); if ( ObjectUtil . isNotEmpty ( publish )) { comment . setPublishUserId ( publish . getUserId ()); } else { //\u67e5\u8be2\u8bc4\u8bba Comment myComment = this . queryCommentById ( publishId ); if ( ObjectUtil . isNotEmpty ( myComment )){ comment . setPublishUserId ( myComment . getUserId ()); } else { //TODO \u5176\u4ed6\u60c5\u51b5\uff0c\u6bd4\u5982\u5c0f\u89c6\u9891\u7b49 } } this . mongoTemplate . save ( comment ); return true ; } catch ( Exception e ) { log . error ( \"\u4fdd\u5b58Comment\u51fa\u9519~ userId = \" + userId + \", publishId = \" + publishId + \", commentType = \" + commentType , e ); } return false ; } /** * \u6839\u636eid\u67e5\u8be2Comment\u5bf9\u8c61 * * @param id * @return */ private Comment queryCommentById ( String id ) { return this . mongoTemplate . findById ( new ObjectId ( id ), Comment . class ); } \u8fd9\u6837\uff0c\u70b9\u8d5e\u529f\u80fd\u6b63\u5e38\u4e86\u3002 6\u3001\u5c0f\u89c6\u9891 \u00b6 6.1\u3001\u529f\u80fd\u8bf4\u660e \u00b6 \u5c0f\u89c6\u9891\u529f\u80fd\u7c7b\u4f3c\u4e8e\u6296\u97f3\u3001\u5feb\u624b\u5c0f\u89c6\u9891\u7684\u5e94\u7528\uff0c\u7528\u6237\u53ef\u4ee5\u4e0a\u4f20\u5c0f\u89c6\u9891\u8fdb\u884c\u5206\u4eab\uff0c\u4e5f\u53ef\u4ee5\u6d4f\u89c8\u67e5\u770b\u522b\u4eba\u5206\u4eab\u7684\u89c6\u9891\uff0c\u5e76\u4e14\u53ef\u4ee5\u5bf9\u89c6\u9891\u8bc4\u8bba\u548c\u70b9\u8d5e\u64cd\u4f5c\u3002 \u6548\u679c\uff1a \u67e5\u770b\u8be6\u60c5\uff1a \u8bc4\u8bba\uff1a \u70b9\u8d5e\uff1a 6.2\u3001\u6280\u672f\u65b9\u6848 \u00b6 \u5bf9\u4e8e\u5c0f\u89c6\u9891\u7684\u529f\u80fd\u7684\u5f00\u53d1\uff0c\u6838\u5fc3\u70b9\u5c31\u662f\uff1a\u5b58\u50a8 + \u63a8\u8350 + \u52a0\u8f7d\u901f\u5ea6 \u3002 \u5bf9\u4e8e\u5b58\u50a8\u800c\u8a00\uff0c\u5c0f\u89c6\u9891\u7684\u5b58\u50a8\u91cf\u4ee5\u53ca\u5bb9\u91cf\u90fd\u662f\u975e\u5e38\u5de8\u5927\u7684\u3002 \u6240\u4ee5\u6211\u4eec\u9009\u62e9\u81ea\u5df1\u642d\u5efa\u5206\u5e03\u5f0f\u5b58\u50a8\u7cfb\u7edf FastDFS\u8fdb\u884c\u5b58\u50a8\u3002 \u5bf9\u4e8e\u63a8\u8350\u7b97\u6cd5\uff0c\u6211\u4eec\u5c06\u91c7\u7528\u591a\u79cd\u6743\u91cd\u7684\u8ba1\u7b97\u65b9\u5f0f\u8fdb\u884c\u8ba1\u7b97\u3002 \u5bf9\u4e8e\u52a0\u8f7d\u901f\u5ea6\uff0c\u9664\u4e86\u63d0\u5347\u670d\u52a1\u5668\u5e26\u5bbd\u5916\u53ef\u4ee5\u901a\u8fc7CDN\u7684\u65b9\u5f0f\u8fdb\u884c\u52a0\u901f\uff0c\u5f53\u7136\u4e86\u8fd9\u9700\u8981\u989d\u5916\u8d2d\u4e70CDN\u670d\u52a1\u3002 7\u3001FastDFS \u00b6 7.1\u3001FastDFS\u662f\u4ec0\u4e48\uff1f \u00b6 FastDFS\u662f\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf\u3002\u4f7f\u7528 FastDFS\u5f88\u5bb9\u6613\u642d\u5efa\u4e00\u5957\u9ad8\u6027\u80fd\u7684\u6587\u4ef6\u670d\u52a1\u5668\u96c6\u7fa4\u63d0\u4f9b\u6587\u4ef6\u4e0a\u4f20\u3001\u4e0b\u8f7d\u7b49\u670d\u52a1\u3002 7.2\u3001\u5de5\u4f5c\u539f\u7406 \u00b6 FastDFS \u67b6\u6784\u5305\u62ec Tracker server \u548c Storage server\u3002\u5ba2\u6237\u7aef\u8bf7\u6c42 Tracker server \u8fdb\u884c\u6587\u4ef6\u4e0a\u4f20\u3001\u4e0b\u8f7d\uff0c\u901a\u8fc7 Tracker server \u8c03\u5ea6\u6700\u7ec8\u7531 Storage server \u5b8c\u6210\u6587\u4ef6\u4e0a\u4f20\u548c\u4e0b\u8f7d\u3002 Tracker server \u4f5c\u7528\u662f\u8d1f\u8f7d\u5747\u8861\u548c\u8c03\u5ea6\uff0c\u901a\u8fc7 Tracker server \u5728\u6587\u4ef6\u4e0a\u4f20\u65f6\u53ef\u4ee5\u6839\u636e\u4e00\u4e9b\u7b56\u7565\u627e\u5230 Storage server \u63d0\u4f9b\u6587\u4ef6\u4e0a\u4f20\u670d\u52a1\u3002\u53ef\u4ee5\u5c06 tracker \u79f0\u4e3a\u8ffd\u8e2a\u670d\u52a1\u5668\u6216\u8c03\u5ea6\u670d\u52a1\u5668\u3002 Storage server \u4f5c\u7528\u662f\u6587\u4ef6\u5b58\u50a8\uff0c\u5ba2\u6237\u7aef\u4e0a\u4f20\u7684\u6587\u4ef6\u6700\u7ec8\u5b58\u50a8\u5728 Storage \u670d\u52a1\u5668\u4e0a\uff0cStorage server \u6ca1\u6709\u5b9e\u73b0\u81ea\u5df1\u7684\u6587\u4ef6\u7cfb\u7edf\u800c\u662f\u5229\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u6587\u4ef6\u7cfb\u7edf\u6765\u7ba1\u7406\u6587\u4ef6\u3002\u53ef\u4ee5\u5c06storage\u79f0\u4e3a\u5b58\u50a8\u670d\u52a1\u5668\u3002 \u6bcf\u4e2a tracker \u8282\u70b9\u5730\u4f4d\u5e73\u7b49\uff0c\u6536\u96c6 Storage \u96c6\u7fa4\u7684\u72b6\u6001\u3002 Storage \u5206\u4e3a\u591a\u4e2a\u7ec4\uff0c\u6bcf\u4e2a\u7ec4\u4e4b\u95f4\u4fdd\u5b58\u7684\u6587\u4ef6\u662f\u4e0d\u540c\u7684\u3002\u6bcf\u4e2a\u7ec4\u5185\u90e8\u53ef\u4ee5\u6709\u591a\u4e2a\u6210\u5458\uff0c\u7ec4\u6210\u5458\u5185\u90e8\u4fdd\u5b58\u7684\u5185\u5bb9\u662f\u4e00\u6837\u7684\uff0c\u7ec4\u6210\u5458\u7684\u5730\u4f4d\u662f\u4e00\u81f4\u7684\uff0c\u6ca1\u6709\u4e3b\u4ece\u7684\u6982\u5ff5\u3002 7.3\u3001\u6587\u4ef6\u7684\u4e0a\u4f20 \u00b6 \u5ba2\u6237\u7aef\u4e0a\u4f20\u6587\u4ef6\u540e\u5b58\u50a8\u670d\u52a1\u5668\u5c06\u6587\u4ef6 ID \u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\uff0c\u6b64\u6587\u4ef6 ID \u7528\u4e8e\u4ee5\u540e\u8bbf\u95ee\u8be5\u6587\u4ef6\u7684\u7d22\u5f15\u4fe1\u606f\u3002\u6587\u4ef6\u7d22\u5f15\u4fe1\u606f\u5305\u62ec\uff1a\u7ec4\u540d\uff0c\u865a\u62df\u78c1\u76d8\u8def\u5f84\uff0c\u6570\u636e\u4e24\u7ea7\u76ee\u5f55\uff0c\u6587\u4ef6\u540d\u3002 7.4\u3001\u6587\u4ef6\u7684\u4e0b\u8f7d \u00b6 \u5ba2\u6237\u7aef\u4e0b\u8f7d\u8bf7\u6c42\u5230Tracker\u670d\u52a1\uff0cTracker\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aefstorage\u7684\u4fe1\u606f\uff0c\u5ba2\u6237\u7aef\u6839\u636e\u8fd9\u4e9b\u4fe1\u606f\u8fdb\u884c\u8bf7\u6c42storage\u83b7\u53d6\u5230\u6587\u4ef6\u3002 7.5\u3001\u5f00\u59cb\u4f7f\u7528 \u00b6 \u5728\u6211\u4eec\u63d0\u4f9b\u7684\u865a\u62df\u673a\u4e2d\u5df2\u7ecf\u901a\u8fc7docker\u642d\u5efa\u4e86FastDFS\u73af\u5883\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u5b66\u4e60\u4e0b\u5982\u4f55\u901a\u8fc7Java\u7a0b\u5e8f\u6765\u4f7f\u7528FastDFS\u3002 7.5.1\u3001\u5f15\u5165\u4f9d\u8d56 \u00b6 \u5173\u4e8e\u4f7f\u7528FastDFS\u4e0a\u4f20\u5c0f\u89c6\u9891\u7684\u903b\u8f91\u6211\u4eec\u5728server\u5de5\u7a0b\u4e2d\u5b8c\u6210\uff0c\u6240\u4ee5\u9700\u8981\u5728server\u5de5\u7a0b\u4e2d\u5f15\u5165\u4f9d\u8d56\u3002 <dependency> <groupId> com.github.tobato </groupId> <artifactId> fastdfs-client </artifactId> <version> 1.26.7 </version> <exclusions> <exclusion> <groupId> ch.qos.logback </groupId> <artifactId> logback-classic </artifactId> </exclusion> </exclusions> </dependency> 7.5.2\u3001\u7f16\u5199\u914d\u7f6e\u6587\u4ef6 \u00b6 \u5728application.properties\u914d\u7f6e\u6587\u4ef6\u4e2d\u52a0\u5165\u5982\u4e0b\u5185\u5bb9\uff1a # =================================================================== # \u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edfFDFS\u914d\u7f6e # =================================================================== fdfs.so-timeout = 1501 fdfs.connect-timeout = 601 #\u7f29\u7565\u56fe\u751f\u6210\u53c2\u6570 fdfs.thumb-image.width = 150 fdfs.thumb-image.height = 150 #TrackerList\u53c2\u6570,\u652f\u6301\u591a\u4e2a fdfs.tracker-list = 192.168.31.81:22122 #\u8bbf\u95ee\u8def\u5f84 fdfs.web-server-url = http://192.168.31.81:8888/ 7.5.3\u3001\u6d4b\u8bd5\u4ee3\u7801 \u00b6 package com.tanhua.server ; import com.github.tobato.fastdfs.domain.conn.FdfsWebServer ; import com.github.tobato.fastdfs.domain.fdfs.StorePath ; import com.github.tobato.fastdfs.service.FastFileStorageClient ; import org.apache.commons.io.FileUtils ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; import java.io.File ; import java.io.IOException ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestFastDFS { @Autowired protected FastFileStorageClient storageClient ; @Autowired private FdfsWebServer fdfsWebServer ; @Test public void testUpload (){ String path = \"F:\\\\1.jpg\" ; File file = new File ( path ); try { StorePath storePath = this . storageClient . uploadFile ( FileUtils . openInputStream ( file ), file . length (), \"jpg\" , null ); System . out . println ( storePath ); //StorePath [group=group1, path=M00/00/00/wKgfUV2GJSuAOUd_AAHnjh7KpOc1.1.jpg] System . out . println ( fdfsWebServer . getWebServerUrl () + storePath . getFullPath ()); //group1/M00/00/00/wKgfUV2GJSuAOUd_AAHnjh7KpOc1.1.jpg } catch ( IOException e ) { e . printStackTrace (); } } } \u901a\u8fc7\u6d4f\u89c8\u5668\u8bbf\u95ee\u56fe\u7247\uff1a 8\u3001\u53d1\u5e03\u5c0f\u89c6\u9891 \u00b6 \u53d1\u5e03\u5c0f\u89c6\u9891\u7684\u6d41\u7a0b\u5982\u4e0b\uff1a \u8bf4\u660e\uff1a \u7528\u6237\u53d1\u901a\u8fc7\u5ba2\u6237\u7aefAPP\u4e0a\u4f20\u89c6\u9891\u5230server\u670d\u52a1 server\u670d\u52a1\u4e0a\u4f20\u89c6\u9891\u5230FastDFS\u6587\u4ef6\u7cfb\u7edf\uff0c\u4e0a\u4f20\u6210\u529f\u540e\u8fd4\u56de\u89c6\u9891\u7684url\u5730\u5740 server\u901a\u8fc7rpc\u7684\u8c03\u7528dubbo\u670d\u52a1\u8fdb\u884c\u4fdd\u5b58\u5c0f\u89c6\u9891\u6570\u636e 8.1\u3001dubbo\u670d\u52a1 \u00b6 8.1.1\u3001\u7f16\u5199pojo \u00b6 \u5728dubbo\u63a5\u53e3\u5de5\u7a0b\u4e2d\u7f16\u5199pojo\uff1a package com.tanhua.dubbo.server.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.mongodb.core.mapping.Document ; import java.util.List ; @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"video\" ) public class Video implements java . io . Serializable { private static final long serialVersionUID = - 3136732836884933873L ; private ObjectId id ; //\u4e3b\u952eid private Long vid ; //\u81ea\u589e\u957fid private Long userId ; private String text ; //\u6587\u5b57 private String picUrl ; //\u89c6\u9891\u5c01\u9762\u6587\u4ef6 private String videoUrl ; //\u89c6\u9891\u6587\u4ef6 private Long created ; //\u521b\u5efa\u65f6\u95f4 private Integer seeType ; // \u8c01\u53ef\u4ee5\u770b\uff0c1-\u516c\u5f00\uff0c2-\u79c1\u5bc6\uff0c3-\u90e8\u5206\u53ef\u89c1\uff0c4-\u4e0d\u7ed9\u8c01\u770b private List < Long > seeList ; //\u90e8\u5206\u53ef\u89c1\u7684\u5217\u8868 private List < Long > notSeeList ; //\u4e0d\u7ed9\u8c01\u770b\u7684\u5217\u8868 private String longitude ; //\u7ecf\u5ea6 private String latitude ; //\u7eac\u5ea6 private String locationName ; //\u4f4d\u7f6e\u540d\u79f0 } 8.1.2\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 package com.tanhua.dubbo.server.api ; import com.tanhua.dubbo.server.pojo.Video ; public interface VideoApi { /** * \u4fdd\u5b58\u5c0f\u89c6\u9891 * * @param video * @return \u4fdd\u5b58\u6210\u529f\u540e\uff0c\u8fd4\u56de\u89c6\u9891id */ String saveVideo ( Video video ); } 8.1.3\u3001\u7f16\u5199\u5b9e\u73b0 \u00b6 package com.tanhua.dubbo.server.api ; import cn.hutool.core.util.ObjectUtil ; import com.alibaba.dubbo.config.annotation.Service ; import com.mongodb.Mongo ; import com.tanhua.dubbo.server.enums.IdType ; import com.tanhua.dubbo.server.pojo.Video ; import com.tanhua.dubbo.server.service.IdService ; import lombok.extern.slf4j.Slf4j ; import org.bson.types.ObjectId ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.mongodb.core.MongoTemplate ; @Service ( version = \"1.0.0\" ) @Slf4j public class VideoApiImpl implements VideoApi { @Autowired private IdService idService ; @Autowired private MongoTemplate mongoTemplate ; /** * \u53d1\u5e03\u5c0f\u89c6\u9891 * * @param video * @return */ @Override public String saveVideo ( Video video ) { try { //\u6821\u9a8c if ( ! ObjectUtil . isAllNotEmpty ( video . getUserId (), video . getPicUrl (), video . getVideoUrl ())){ return null ; } //\u8bbe\u7f6eid video . setId ( ObjectId . get ()); video . setVid ( this . idService . createId ( IdType . VIDEO )); //\u53d1\u5e03\u65f6\u95f4 video . setCreated ( System . currentTimeMillis ()); //\u4fdd\u5b58\u5230Mongodb\u4e2d this . mongoTemplate . save ( video ); return video . getId (). toHexString (); } catch ( Exception e ) { log . error ( \"\u5c0f\u89c6\u9891\u53d1\u5e03\u5931\u8d25~ video = \" + video , e ); } return null ; } } 8.2\u3001APP\u63a5\u53e3\u670d\u52a1 \u00b6 \u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/821 8.2.1\u3001VideoController \u00b6 package com.tanhua.server.controller ; import com.tanhua.server.service.VideoService ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.PostMapping ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RequestParam ; import org.springframework.web.bind.annotation.RestController ; import org.springframework.web.multipart.MultipartFile ; @RestController @RequestMapping ( \"smallVideos\" ) public class VideoController { @Autowired private VideoService videoService ; /** * \u53d1\u5e03\u5c0f\u89c6\u9891 * * @param picFile * @param videoFile * @return */ @PostMapping public ResponseEntity < Void > saveVideo ( @RequestParam ( \"videoThumbnail\" ) MultipartFile picFile , @RequestParam ( \"videoFile\" ) MultipartFile videoFile ) { try { Boolean bool = this . videoService . saveVideo ( picFile , videoFile ); if ( bool ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } } 8.2.2\u3001VideoService \u00b6 package com.tanhua.server.service ; import cn.hutool.core.util.StrUtil ; import com.alibaba.dubbo.config.annotation.Reference ; import com.github.tobato.fastdfs.domain.conn.FdfsWebServer ; import com.github.tobato.fastdfs.domain.fdfs.StorePath ; import com.github.tobato.fastdfs.service.FastFileStorageClient ; import com.tanhua.common.pojo.User ; import com.tanhua.common.service.PicUploadService ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.common.vo.PicUploadResult ; import com.tanhua.dubbo.server.api.VideoApi ; import com.tanhua.dubbo.server.pojo.Video ; import lombok.extern.slf4j.Slf4j ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import org.springframework.web.multipart.MultipartFile ; @Service @Slf4j public class VideoService { @Autowired private PicUploadService picUploadService ; @Autowired protected FastFileStorageClient storageClient ; @Autowired private FdfsWebServer fdfsWebServer ; @Reference ( version = \"1.0.0\" ) private VideoApi videoApi ; /** * \u53d1\u5e03\u5c0f\u89c6\u9891 * * @param picFile * @param videoFile * @return */ public Boolean saveVideo ( MultipartFile picFile , MultipartFile videoFile ) { User user = UserThreadLocal . get (); Video video = new Video (); video . setUserId ( user . getId ()); video . setSeeType ( 1 ); //\u9ed8\u8ba4\u516c\u5f00 try { //\u4e0a\u4f20\u5c01\u9762\u56fe\u7247 PicUploadResult picUploadResult = this . picUploadService . upload ( picFile ); video . setPicUrl ( picUploadResult . getName ()); //\u56fe\u7247\u8def\u5f84 //\u4e0a\u4f20\u89c6\u9891 StorePath storePath = storageClient . uploadFile ( videoFile . getInputStream (), videoFile . getSize (), StrUtil . subAfter ( videoFile . getOriginalFilename (), '.' , true ), null ); //\u8bbe\u7f6e\u89c6\u9891url video . setVideoUrl ( fdfsWebServer . getWebServerUrl () + storePath . getFullPath ()); String videoId = this . videoApi . saveVideo ( video ); return StrUtil . isNotEmpty ( videoId ); } catch ( Exception e ) { log . error ( \"\u53d1\u5e03\u5c0f\u89c6\u9891\u5931\u8d25\uff01file = \" + picFile . getOriginalFilename () , e ); } return false ; } } 5.4.3\u3001\u6d4b\u8bd5 \u00b6 \u5982\u679c\u4e0a\u4f20\u89c6\u9891\uff0c\u4f1a\u5bfc\u81f4\u5f02\u5e38\uff0c\u662f\u56e0\u4e3a\u8bf7\u6c42\u592a\u5927\u7684\u7f18\u6545\uff1a \u89e3\u51b3\uff1aapplication.properties spring.servlet.multipart.max-file-size = 30MB spring.servlet.multipart.max-request-size = 30MB \u6d4b\u8bd5\uff1a \u53ef\u4ee5\u770b\u5230\u6570\u636e\u5df2\u7ecf\u5199\u5165\u5230\u4e86MongoDB\u4e2d\u3002 9\u3001\u5c0f\u89c6\u9891\u5217\u8868 \u00b6 \u5c0f\u89c6\u9891\u7684\u5217\u8868\u67e5\u8be2\u7684\u5b9e\u73b0\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u6709\u63a8\u8350\u89c6\u9891\uff0c\u4f18\u5148\u8fd4\u56de\u63a8\u8350\u89c6\u9891\uff0c\u5982\u679c\u4e0d\u591f\u6216\u6ca1\u6709\uff0c\u6309\u7167\u65f6\u95f4\u5012\u5e8f\u67e5\u8be2\u89c6\u9891\u8868\u3002 \u63a8\u8350\u6570\u636e\uff1a 9.1\u3001dubbo\u670d\u52a1 \u00b6 9.1.1\u3001\u5b9a\u4e49dubbo\u670d\u52a1 \u00b6 package com.tanhua.dubbo.server.api ; import com.tanhua.dubbo.server.pojo.Video ; import com.tanhua.dubbo.server.vo.PageInfo ; public interface VideoApi { /** * \u4fdd\u5b58\u5c0f\u89c6\u9891 * * @param video * @return */ Boolean saveVideo ( Video video ); /** * \u5206\u9875\u67e5\u8be2\u5c0f\u89c6\u9891\u5217\u8868\uff0c\u6309\u7167\u65f6\u95f4\u5012\u5e8f\u6392\u5e8f * * @param userId * @param page * @param pageSize * @return */ PageInfo < Video > queryVideoList ( Long userId , Integer page , Integer pageSize ); } 9.1.2\u3001\u5b9e\u73b0dubbo\u670d\u52a1 \u00b6 //com.tanhua.dubbo.server.api.VideoApiImpl /** * \u67e5\u8be2\u5c0f\u89c6\u9891\u5217\u8868\uff0c\u4f18\u5148\u5c55\u73b0\u63a8\u8350\u7684\u89c6\u9891\uff0c\u5982\u679c\u6ca1\u6709\u63a8\u8350\u7684\u89c6\u9891\u6216\u5df2\u7ecf\u67e5\u8be2\u5b8c\u6210\uff0c\u5c31\u9700\u8981\u67e5\u8be2\u7cfb\u7edf\u89c6\u9891\u6570\u636e * * @param userId * @param page * @param pageSize * @return */ @Override public PageInfo < Video > queryVideoList ( Long userId , Integer page , Integer pageSize ) { PageInfo < Video > pageInfo = new PageInfo <> (); pageInfo . setPageNum ( page ); pageInfo . setPageSize ( pageSize ); //\u4eceredis\u4e2d\u83b7\u53d6\u63a8\u8350\u89c6\u9891\u7684\u6570\u636e String redisKey = \"QUANZI_VIDEO_RECOMMEND_\" + userId ; String redisData = this . redisTemplate . opsForValue (). get ( redisKey ); List < Long > vids = new ArrayList <> (); int recommendCount = 0 ; if ( StrUtil . isNotEmpty ( redisData )) { //\u624b\u52a8\u5206\u9875\u67e5\u8be2\u6570\u636e List < String > vidList = StrUtil . split ( redisData , ',' ); //\u8ba1\u7b97\u5206\u9875 //[0, 10] int [] startEnd = PageUtil . transToStartEnd ( page - 1 , pageSize ); int startIndex = startEnd [ 0 ] ; //\u5f00\u59cb int endIndex = Math . min ( startEnd [ 1 ] , vidList . size ()); //\u7ed3\u675f for ( int i = startIndex ; i < endIndex ; i ++ ) { vids . add ( Convert . toLong ( vidList . get ( i ))); } recommendCount = vidList . size (); } if ( CollUtil . isEmpty ( vids )) { //\u6ca1\u6709\u63a8\u8350\u6216\u524d\u9762\u63a8\u8350\u5df2\u7ecf\u67e5\u8be2\u5b8c\u6bd5\uff0c\u67e5\u8be2\u7cfb\u7edf\u7684\u89c6\u9891\u6570\u636e //\u8ba1\u7b97\u524d\u9762\u7684\u63a8\u8350\u89c6\u9891\u9875\u6570 int totalPage = PageUtil . totalPage ( recommendCount , pageSize ); PageRequest pageRequest = PageRequest . of ( page - totalPage - 1 , pageSize , Sort . by ( Sort . Order . desc ( \"created\" ))); Query query = new Query (). with ( pageRequest ); List < Video > videoList = this . mongoTemplate . find ( query , Video . class ); pageInfo . setRecords ( videoList ); return pageInfo ; } //\u6839\u636evid\u67e5\u8be2\u5bf9\u5e94\u7684\u89c6\u9891\u6570\u636e\u4e86 Query query = Query . query ( Criteria . where ( \"vid\" ). in ( vids )); List < Video > videoList = this . mongoTemplate . find ( query , Video . class ); pageInfo . setRecords ( videoList ); return pageInfo ; } 9.1.3\u3001\u6d4b\u8bd5\u7528\u4f8b \u00b6 package com.tanhua.dubbo.server.api ; import com.tanhua.dubbo.server.pojo.Video ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestVideoApi { @Autowired private VideoApi videoApi ; @Test public void testQueryVideoList () { //\u8fd4\u56de\u7684\u63a8\u8350\u7ed3\u679c\u6570\u636e System . out . println ( this . videoApi . queryVideoList ( 1L , 1 , 8 )); //\u8fd4\u56de\u5c11\u4e8epageSize\u6570\u636e\uff0c\u56e0\u4e3a\u63a8\u8350\u6570\u636e\u4e0d\u591f\u4e86 System . out . println ( this . videoApi . queryVideoList ( 1L , 3 , 8 )); //\u8fd4\u56de\u7cfb\u7edf\u6570\u636e System . out . println ( this . videoApi . queryVideoList ( 1L , 4 , 8 )); } } 9.2\u3001APP\u63a5\u53e3\u670d\u52a1 \u00b6 \u670d\u52a1\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/815 9.2.1\u3001\u5b9a\u4e49VideoVo \u00b6 package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class VideoVo { private String id ; private Long userId ; private String avatar ; //\u5934\u50cf private String nickname ; //\u6635\u79f0 private String cover ; //\u5c01\u9762 private String videoUrl ; //\u89c6\u9891URL private String signature ; //\u7b7e\u540d private Integer likeCount ; //\u70b9\u8d5e\u6570\u91cf private Integer hasLiked ; //\u662f\u5426\u5df2\u8d5e\uff081\u662f\uff0c0\u5426\uff09 private Integer hasFocus ; //\u662f\u662f\u5426\u5173\u6ce8 \uff081\u662f\uff0c0\u5426\uff09 private Integer commentCount ; //\u8bc4\u8bba\u6570\u91cf } 9.2.2\u3001VideoController \u00b6 @RestController @RequestMapping ( \"smallVideos\" ) public class VideoController { /** * \u67e5\u8be2\u5c0f\u89c6\u9891\u5217\u8868 * * @param page * @param pageSize * @return */ @GetMapping public ResponseEntity < PageResult > queryVideoList ( @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize ) { try { if ( page <= 0 ) { page = 1 ; } PageResult pageResult = this . videoService . queryVideoList ( page , pageSize ); if ( null != pageResult ) { return ResponseEntity . ok ( pageResult ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } } 9.2.3\u3001VideoService \u00b6 //com.tanhua.server.service.VideoService public PageResult queryVideoList ( Integer page , Integer pageSize ) { User user = UserThreadLocal . get (); PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); PageInfo < Video > pageInfo = this . videoApi . queryVideoList ( user . getId (), page , pageSize ); List < Video > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )){ return pageResult ; } //\u67e5\u8be2\u7528\u6237\u4fe1\u606f List < Object > userIds = CollUtil . getFieldValues ( records , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIds ); List < VideoVo > videoVoList = new ArrayList <> (); for ( Video record : records ) { VideoVo videoVo = new VideoVo (); videoVo . setUserId ( record . getUserId ()); videoVo . setCover ( record . getPicUrl ()); videoVo . setVideoUrl ( record . getVideoUrl ()); videoVo . setId ( record . getId (). toHexString ()); videoVo . setSignature ( \"\u6211\u5c31\u662f\u6211~\" ); //TODO \u7b7e\u540d videoVo . setCommentCount ( 0 ); //TODO \u8bc4\u8bba\u6570 videoVo . setHasFocus ( 0 ); //TODO \u662f\u5426\u5173\u6ce8 videoVo . setHasLiked ( 0 ); //TODO \u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 videoVo . setLikeCount ( 0 ); //TODO \u70b9\u8d5e\u6570 //\u586b\u5145\u7528\u6237\u4fe1\u606f for ( UserInfo userInfo : userInfoList ) { if ( ObjectUtil . equals ( videoVo . getUserId (), userInfo . getUserId ())) { videoVo . setNickname ( userInfo . getNickName ()); videoVo . setAvatar ( userInfo . getLogo ()); break ; } } videoVoList . add ( videoVo ); } pageResult . setItems ( videoVoList ); return pageResult ; } 9.2.5\u3001\u6d4b\u8bd5 \u00b6 \u53ef\u4ee5\u770b\u5230\u5df2\u7ecf\u67e5\u8be2\u5230\u6570\u636e\u3002\u4e0b\u9762\u4f7f\u7528\u624b\u673a\u8fdb\u884c\u6d4b\u8bd5\uff1a","title":"day05"},{"location":"tantan/day05/#_1","text":"\u5708\u5b50\u5b9e\u73b0\u70b9\u8d5e\u3001\u559c\u6b22\u529f\u80fd \u5708\u5b50\u5b9e\u73b0\u8bc4\u8bba \u5708\u5b50\u5b9e\u73b0\u8bc4\u8bba\u7684\u70b9\u8d5e \u5c0f\u89c6\u9891\u529f\u80fd\u4ecb\u7ecd FastDFS\u5165\u95e8\u5b66\u4e60 \u5b9e\u73b0\u53d1\u5e03\u5c0f\u89c6\u9891\u529f\u80fd \u5b9e\u73b0\u67e5\u8be2\u5c0f\u89c6\u9891\u5217\u8868\u529f\u80fd","title":"\u8bfe\u7a0b\u8bf4\u660e"},{"location":"tantan/day05/#1","text":"\u5728\u5708\u5b50\u529f\u80fd\u4e2d\uff0c\u5bf9\u4e8e\u5708\u5b50\u7684\u70b9\u8d5e\u3001\u559c\u6b22\u3001\u8bc4\u8bba\u7b49\u5747\u53ef\u7406\u89e3\u4e3a\u7528\u6237\u5bf9\u52a8\u6001\u7684\u8bc4\u8bba\uff08Comment\uff09\uff0c\u5728quanzi_comment\u8868\u4e2d\u4f7f\u7528commentType\u8fdb\u884c\u533a\u5206\u3002 \u5728\u5177\u4f53\u7684\u5b9e\u73b0\u4e2d\uff0c\u9700\u8981\u5c06\u70b9\u8d5e\u6570\u3001\u67d0\u7528\u6237\u662f\u5426\u70b9\u8d5e\u7b49\u6570\u636e\u4fdd\u5b58\u5230Reds\u4e2d\uff0c\u4ee5\u51cf\u8f7bMongoDB\u7684\u538b\u529b\u3002 \u5177\u4f53\u5b58\u50a8\u7ed3\u6784\u5982\u4e0b\uff1a \u8bf4\u660e\uff1a\u5728Redis\u7684\u5b58\u50a8\u7ed3\u6784\u4e2d\uff0c\u91c7\u7528\u7684\u662fHash\u5b58\u50a8\uff0c\u8fd9\u6837\u7684\u597d\u5904\u5c31\u5728\u4e8e\u4e00\u6761\u52a8\u6001\u7684\u70b9\u8d5e\u3001\u559c\u6b22\u7b49\u6570\u636e\u90fd\u4f1a\u96c6\u4e2d\u7684\u5b58\u50a8\u5230\u4e00\u8d77\uff0c\u4ece\u800c\u51cf\u5c11\u4e86Redis\u4e2d\u6570\u636e\u6761\u6570\u3002","title":"1\u3001\u5708\u5b50\u70b9\u8d5e\u5b9e\u73b0\u5206\u6790"},{"location":"tantan/day05/#2","text":"","title":"2\u3001\u70b9\u8d5e"},{"location":"tantan/day05/#21","text":"\u4e3a\u4e86\u89c4\u8303\u4f7f\u7528CommentType\uff0c\u6240\u4ee5\u5c06\u5176\u5b9a\u4e49\u4e3a\u679a\u4e3e\u7c7b\u578b\u3002 package com.tanhua.dubbo.server.enums ; /** * \u8bc4\u8bba\u7c7b\u578b\uff1a1-\u70b9\u8d5e\uff0c2-\u8bc4\u8bba\uff0c3-\u559c\u6b22 */ public enum CommentType { LIKE ( 1 ), COMMENT ( 2 ), LOVE ( 3 ); int type ; CommentType ( int type ) { this . type = type ; } public int getType () { return type ; } }","title":"2.1\u3001\u5b9a\u4e49\u679a\u4e3e"},{"location":"tantan/day05/#22dubbo","text":"","title":"2.2\u3001dubbo\u670d\u52a1"},{"location":"tantan/day05/#221","text":"package com.tanhua.dubbo.server.api ; import com.tanhua.dubbo.server.pojo.Publish ; import com.tanhua.dubbo.server.vo.PageInfo ; public interface QuanZiApi { //........\u6b64\u5904\u5ffd\u7565\u5176\u4ed6\u4ee3\u7801.......... /** * \u6839\u636eid\u67e5\u8be2\u52a8\u6001 * * @param id \u52a8\u6001id * @return */ Publish queryPublishById ( String id ); /** * \u70b9\u8d5e * * @param userId * @param publishId * @return */ Boolean likeComment ( Long userId , String publishId ); /** * \u53d6\u6d88\u70b9\u8d5e * * @param userId * @param publishId * @return */ Boolean disLikeComment ( Long userId , String publishId ); /** * \u67e5\u8be2\u70b9\u8d5e\u6570 * * @param publishId * @return */ Long queryLikeCount ( String publishId ); /** * \u67e5\u8be2\u7528\u6237\u662f\u5426\u70b9\u8d5e\u8be5\u52a8\u6001 * * @param userId * @param publishId * @return */ Boolean queryUserIsLike ( Long userId , String publishId ); }","title":"2.2.1\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day05/#222","text":"package com.tanhua.dubbo.server.api ; @Service ( version = \"1.0.0\" ) @Slf4j public class QuanZiApiImpl implements QuanZiApi { //\u8bc4\u8bba\u6570\u636e\u5b58\u50a8\u5728Redis\u4e2dkey\u7684\u524d\u7f00 private static final String COMMENT_REDIS_KEY_PREFIX = \"QUANZI_COMMENT_\" ; //\u7528\u6237\u662f\u5426\u70b9\u8d5e\u7684\u524d\u7f00 private static final String COMMENT_USER_LIEK_REDIS_KEY_PREFIX = \"USER_LIKE_\" ; //\u7528\u6237\u662f\u5426\u559c\u6b22\u7684\u524d\u7f00 private static final String COMMENT_USER_LOVE_REDIS_KEY_PREFIX = \"USER_LOVE_\" ; @Autowired private MongoTemplate mongoTemplate ; @Autowired private RedisTemplate < String , String > redisTemplate ; //........\u6b64\u5904\u5ffd\u7565\u5176\u4ed6\u4ee3\u7801.......... @Override public Publish queryPublishById ( String id ) { return this . mongoTemplate . findById ( new ObjectId ( id ), Publish . class ); } @Override public Boolean likeComment ( Long userId , String publishId ) { //\u5224\u65ad\u8be5\u7528\u6237\u662f\u5426\u5df2\u7ecf\u70b9\u8d5e\uff0c\u5982\u679c\u5df2\u7ecf\u70b9\u8d5e\u5c31\u76f4\u63a5\u8fd4\u56de if ( this . queryUserIsLike ( userId , publishId )) { return false ; } //\u4fdd\u5b58Comment\u6570\u636e Boolean result = this . saveComment ( userId , publishId , CommentType . LIKE , null ); if ( ! result ) { return false ; } //\u4fee\u6539redis\u4e2d\u7684\u70b9\u8d5e\u6570\u4ee5\u53ca\u662f\u5426\u70b9\u8d5e //\u4fee\u6539\u70b9\u8d5e\u6570 String redisKey = this . getCommentRedisKeyPrefix ( publishId ); String hashKey = CommentType . LIKE . toString (); this . redisTemplate . opsForHash (). increment ( redisKey , hashKey , 1 ); //\u7528\u6237\u662f\u5426\u70b9\u8d5e String userHashKey = this . getCommentUserLikeRedisKeyPrefix ( userId ); this . redisTemplate . opsForHash (). put ( redisKey , userHashKey , \"1\" ); return true ; } private String getCommentRedisKeyPrefix ( String publishId ) { return COMMENT_REDIS_KEY_PREFIX + publishId ; } private String getCommentUserLikeRedisKeyPrefix ( Long userId ) { return COMMENT_USER_LIKE_REDIS_KEY_PREFIX + userId ; } @Override public Boolean disLikeComment ( Long userId , String publishId ) { //\u5224\u65ad\u7528\u6237\u662f\u5426\u5df2\u7ecf\u70b9\u8d5e\uff0c\u5982\u679c\u6ca1\u6709\u70b9\u8d5e\u5c31\u8fd4\u56de if ( ! this . queryUserIsLike ( userId , publishId )) { return false ; } //\u5220\u9664\u8bc4\u8bba\u6570\u636e Boolean result = this . removeComment ( userId , publishId , CommentType . LIKE ); if ( ! result ) { return false ; } //\u4fee\u6539Redis\u4e2d\u7684\u6570\u636e //\u4fee\u6539\u70b9\u8d5e\u6570 String redisKey = this . getCommentRedisKeyPrefix ( publishId ); String hashKey = CommentType . LIKE . toString (); this . redisTemplate . opsForHash (). increment ( redisKey , hashKey , - 1 ); //\u7528\u6237\u662f\u5426\u70b9\u8d5e String userHashKey = this . getCommentUserLikeRedisKeyPrefix ( userId ); this . redisTemplate . opsForHash (). delete ( redisKey , userHashKey ); return true ; } @Override public Long queryLikeCount ( String publishId ) { //\u4eceRedis\u4e2d\u547d\u4e2d\u67e5\u8be2\uff0c\u5982\u679c\u547d\u4e2d\u76f4\u63a5\u8fd4\u56de\u5373\u53ef String redisKey = this . getCommentRedisKeyPrefix ( publishId ); String hashKey = CommentType . LIKE . toString (); Object data = this . redisTemplate . opsForHash (). get ( redisKey , hashKey ); if ( ObjectUtil . isNotEmpty ( data )) { return Convert . toLong ( data ); } //\u67e5\u8be2Mongodb Long count = this . queryCommentCount ( publishId , CommentType . LIKE ); //\u5199\u5165Redis\u4e2d this . redisTemplate . opsForHash (). put ( redisKey , hashKey , String . valueOf ( count )); return count ; } @Override public Boolean queryUserIsLike ( Long userId , String publishId ) { //\u4eceredis\u4e2d\u67e5\u8be2\u6570\u636e String redisKey = this . getCommentRedisKeyPrefix ( publishId ); String userHashKey = this . getCommentUserLikeRedisKeyPrefix ( userId ); Object data = this . redisTemplate . opsForHash (). get ( redisKey , userHashKey ); if ( ObjectUtil . isNotEmpty ( data )) { return StrUtil . equals ( Convert . toStr ( data ), \"1\" ); } //\u67e5\u8be2Mongodb\uff0c\u786e\u5b9a\u662f\u5426\u5df2\u7ecf\u70b9\u8d5e Query query = Query . query ( Criteria . where ( \"publishId\" ). is ( new ObjectId ( publishId )) . and ( \"userId\" ). is ( userId ) . and ( \"commentType\" ). is ( CommentType . LIKE ) ); long count = this . mongoTemplate . count ( query , Comment . class ); if ( count == 0 ){ return false ; } //\u5199\u5165\u5230redis\u4e2d this . redisTemplate . opsForHash (). put ( redisKey , userHashKey , \"1\" ); return true ; } /** * \u4fdd\u5b58Comment * * @return */ private Boolean saveComment ( Long userId , String publishId , CommentType commentType , String content ) { try { Comment comment = new Comment (); comment . setId ( ObjectId . get ()); comment . setUserId ( userId ); comment . setPublishId ( new ObjectId ( publishId )); // \u8bc4\u8bba\u7c7b\u578b comment . setCommentType ( commentType . getType ()); // \u5185\u5bb9 comment . setContent ( content ); comment . setCreated ( System . currentTimeMillis ()); Publish publish = this . queryPublishById ( publishId ); //TODO \u5176\u4ed6\u8bc4\u8bba\u5bf9\u8c61\uff0c\u6682\u4e0d\u5904\u7406 comment . setPublishUserId ( publish . getUserId ()); this . mongoTemplate . save ( comment ); return true ; } catch ( Exception e ) { log . error ( \"\u4fdd\u5b58Comment\u51fa\u9519~ userId = \" + userId + \", publishId = \" + publishId + \", commentType = \" + commentType , e ); } return false ; } /** * \u5220\u9664\u8bc4\u8bba\u6570\u636e * * @param userId * @param publishId * @param commentType * @return */ private Boolean removeComment ( Long userId , String publishId , CommentType commentType ) { Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId ) . and ( \"publishId\" ). is ( new ObjectId ( publishId )) . and ( \"commentType\" ). is ( commentType . getType ()) ); return this . mongoTemplate . remove ( query , Comment . class ). getDeletedCount () > 0 ; } /** * \u67e5\u8be2\u6570\u91cf * * @param publishId * @param commentType * @return */ private Long queryCommentCount ( String publishId , CommentType commentType ) { Query query = Query . query ( Criteria . where ( \"publishId\" ). is ( new ObjectId ( publishId )) . and ( \"commentType\" ). is ( commentType . getType ()) ); return this . mongoTemplate . count ( query , Comment . class ); } }","title":"2.2.2\u3001\u7f16\u5199\u5b9e\u73b0"},{"location":"tantan/day05/#223","text":"package com.tanhua.dubbo.server.api ; import com.tanhua.dubbo.server.pojo.Publish ; import com.tanhua.dubbo.server.vo.PageInfo ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestQuanZiApi { @Autowired private QuanZiApi quanZiApi ; //........\u6b64\u5904\u5ffd\u7565\u5176\u4ed6\u4ee3\u7801.......... @Test public void testLike (){ Long userId = 1L ; String publishId = \"5fae53947e52992e78a3afb1\" ; Boolean data = this . quanZiApi . queryUserIsLike ( userId , publishId ); System . out . println ( data ); System . out . println ( this . quanZiApi . likeComment ( userId , publishId )); System . out . println ( this . quanZiApi . queryLikeCount ( publishId )); System . out . println ( this . quanZiApi . disLikeComment ( userId , publishId )); System . out . println ( this . quanZiApi . queryLikeCount ( publishId )); } }","title":"2.2.3\u3001\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b"},{"location":"tantan/day05/#23app","text":"\u70b9\u8d5e\u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/707 \u4ece\u63a5\u53e3\u6587\u6863\u6765\u770b\uff0c\u70b9\u8d5e\u5b8c\u6210\u540e\u9700\u8981\u8fd4\u56de\u70b9\u8d5e\u6570\u3002","title":"2.3\u3001APP\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day05/#231","text":"//com.tanhua.server.controller.QuanZiController /** * \u70b9\u8d5e * * @param publishId * @return */ @GetMapping ( \"/{id}/like\" ) public ResponseEntity < Long > likeComment ( @PathVariable ( \"id\" ) String publishId ) { try { Long likeCount = this . quanZiService . likeComment ( publishId ); if ( likeCount != null ) { return ResponseEntity . ok ( likeCount ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u53d6\u6d88\u70b9\u8d5e * * @param publishId * @return */ @GetMapping ( \"/{id}/dislike\" ) public ResponseEntity < Long > disLikeComment ( @PathVariable ( \"id\" ) String publishId ) { try { Long likeCount = this . quanZiService . disLikeComment ( publishId ); if ( null != likeCount ) { return ResponseEntity . ok ( likeCount ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"2.3.1\u3001\u7f16\u5199\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day05/#232","text":"//com.tanhua.server.service.QuanZiService public Long likeComment ( String publishId ) { User user = UserThreadLocal . get (); //\u70b9\u8d5e Boolean result = this . quanZiApi . likeComment ( user . getId (), publishId ); if ( result ){ //\u67e5\u8be2\u70b9\u8d5e\u6570 return this . quanZiApi . queryLikeCount ( publishId ); } return null ; } public Long disLikeComment ( String publishId ) { User user = UserThreadLocal . get (); //\u53d6\u6d88\u70b9\u8d5e Boolean result = this . quanZiApi . disLikeComment ( user . getId (), publishId ); if ( result ){ //\u67e5\u8be2\u70b9\u8d5e\u6570 return this . quanZiApi . queryLikeCount ( publishId ); } return null ; }","title":"2.3.2\u3001\u7f16\u5199\u670d\u52a1\u5b9e\u73b0"},{"location":"tantan/day05/#233","text":"\u67e5\u8be2\u70b9\u8d5e\u6570\u3001\u662f\u5426\u70b9\u8d5e\uff0c\u9700\u8981\u901a\u8fc7dubbo\u670d\u52a1\u8fdb\u884c\u67e5\u8be2\u3002 //com.tanhua.server.service.QuanZiService /** * \u586b\u5145\u7528\u6237\u4fe1\u606f * * @param userInfo * @param quanZiVo */ private void fillUserInfoToQuanZiVo ( UserInfo userInfo , QuanZiVo quanZiVo ) { BeanUtil . copyProperties ( userInfo , quanZiVo , \"id\" ); quanZiVo . setGender ( userInfo . getSex (). name (). toLowerCase ()); quanZiVo . setTags ( StringUtils . split ( userInfo . getTags (), ',' )); //\u5f53\u524d\u7528\u6237 User user = UserThreadLocal . get (); quanZiVo . setCommentCount ( 0 ); //TODO \u8bc4\u8bba\u6570 quanZiVo . setDistance ( \"1.2\u516c\u91cc\" ); //TODO \u8ddd\u79bb quanZiVo . setHasLiked ( this . quanZiApi . queryUserIsLike ( user . getId (), quanZiVo . getId ()) ? 1 : 0 ); //\u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 quanZiVo . setLikeCount ( Convert . toInt ( this . quanZiApi . queryLikeCount ( quanZiVo . getId ()))); //\u70b9\u8d5e\u6570 quanZiVo . setHasLoved ( 0 ); //TODO \u662f\u5426\u559c\u6b22\uff081\u662f\uff0c0\u5426\uff09 quanZiVo . setLoveCount ( 0 ); //TODO \u559c\u6b22\u6570 }","title":"2.3.3\u3001\u4fee\u6539\u67e5\u8be2\u52a8\u6001\u70b9\u8d5e\u6570"},{"location":"tantan/day05/#234","text":"\u4ece\u6d4b\u8bd5\u7ed3\u679c\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u54cd\u5e94\u7ed3\u679c\u4e2d\u8fd4\u56de\u4e86\u70b9\u8d5e\u6570\u4ee5\u53ca\u662f\u5426\u70b9\u8d5e\u7684\u6570\u636e\u3002","title":"2.3.4\u3001\u6d4b\u8bd5"},{"location":"tantan/day05/#3","text":"\u559c\u6b22\u7684\u5b9e\u73b0\u4e0e\u70b9\u8d5e\u7c7b\u4f3c\uff0c\u53ea\u662f\u5176\u7c7b\u578b\u4e0d\u540c\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u63a8\u8350\u52a8\u6001\u4e2d\u624d\u6709\u559c\u6b22\u529f\u80fd\uff0c\u597d\u53cb\u52a8\u6001\u4e2d\u662f\u6ca1\u6709\u6b64\u529f\u80fd\u7684\u3002","title":"3\u3001\u559c\u6b22"},{"location":"tantan/day05/#31dubbo","text":"","title":"3.1\u3001dubbo\u670d\u52a1"},{"location":"tantan/day05/#311","text":"//com.tanhua.dubbo.server.api.QuanZiApi /** * \u559c\u6b22 * * @param userId * @param publishId * @return */ Boolean loveComment ( Long userId , String publishId ); /** * \u53d6\u6d88\u559c\u6b22 * * @param userId * @param publishId * @return */ Boolean disLoveComment ( Long userId , String publishId ); /** * \u67e5\u8be2\u559c\u6b22\u6570 * * @param publishId * @return */ Long queryLoveCount ( String publishId ); /** * \u67e5\u8be2\u7528\u6237\u662f\u5426\u559c\u6b22\u8be5\u52a8\u6001 * * @param userId * @param publishId * @return */ Boolean queryUserIsLove ( Long userId , String publishId );","title":"3.1.1\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day05/#312","text":"//com.tanhua.dubbo.server.api.QuanZiApiImpl @Override public Boolean loveComment ( Long userId , String publishId ) { //\u67e5\u8be2\u8be5\u7528\u6237\u662f\u5426\u5df2\u7ecf\u559c\u6b22 if ( this . queryUserIsLove ( userId , publishId )) { return false ; } //\u559c\u6b22 boolean result = this . saveComment ( userId , publishId , CommentType . LOVE , null ); if ( ! result ) { return false ; } //\u559c\u6b22\u6210\u529f\u540e\uff0c\u4fee\u6539Redis\u4e2d\u7684\u603b\u7684\u559c\u6b22\u6570 String redisKey = this . getCommentRedisKeyPrefix ( publishId ); String hashKey = CommentType . LOVE . toString (); this . redisTemplate . opsForHash (). increment ( redisKey , hashKey , 1 ); //\u6807\u8bb0\u7528\u6237\u5df2\u7ecf\u559c\u6b22 hashKey = this . getCommentUserLoveRedisKey ( userId ); this . redisTemplate . opsForHash (). put ( redisKey , hashKey , \"1\" ); return true ; } private String getCommentUserLoveRedisKey ( Long userId ) { return COMMENT_USER_LOVE_REDIS_KEY_PREFIX + userId ; } @Override public Boolean disLoveComment ( Long userId , String publishId ) { if ( ! this . queryUserIsLove ( userId , publishId )) { //\u5982\u679c\u7528\u6237\u6ca1\u6709\u559c\u6b22\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de return false ; } boolean result = this . removeComment ( userId , publishId , CommentType . LOVE ); if ( ! result ) { //\u5220\u9664\u5931\u8d25 return false ; } //\u5220\u9664redis\u4e2d\u7684\u8bb0\u5f55 String redisKey = this . getCommentRedisKeyPrefix ( publishId ); String hashKey = this . getCommentUserLoveRedisKey ( userId ); this . redisTemplate . opsForHash (). delete ( redisKey , hashKey ); this . redisTemplate . opsForHash (). increment ( redisKey , CommentType . LOVE . toString (), - 1 ); return true ; } @Override public Long queryLoveCount ( String publishId ) { //\u9996\u5148\u4eceredis\u4e2d\u547d\u4e2d\uff0c\u5982\u679c\u547d\u4e2d\u7684\u8bdd\u5c31\u8fd4\u56de\uff0c\u6ca1\u6709\u547d\u4e2d\u5c31\u67e5\u8be2Mongodb String redisKey = this . getCommentRedisKeyPrefix ( publishId ); String hashKey = CommentType . LOVE . toString (); Object value = this . redisTemplate . opsForHash (). get ( redisKey , hashKey ); if ( ObjectUtil . isNotEmpty ( value )) { return Convert . toLong ( value ); } //\u67e5\u8be2count Long count = this . queryCommentCount ( publishId , CommentType . LOVE ); //\u5b58\u50a8\u5230redis\u4e2d this . redisTemplate . opsForHash (). put ( redisKey , hashKey , String . valueOf ( count )); return count ; } @Override public Boolean queryUserIsLove ( Long userId , String publishId ) { String redisKey = this . getCommentRedisKeyPrefix ( publishId ); String hashKey = this . getCommentUserLoveRedisKey ( userId ); Object value = this . redisTemplate . opsForHash (). get ( redisKey , hashKey ); if ( ObjectUtil . isNotEmpty ( value )) { return StrUtil . equals ( Convert . toStr ( value ), \"1\" ); } //\u67e5\u8be2mongodb Query query = Query . query ( Criteria . where ( \"publishId\" ) . is ( new ObjectId ( publishId )) . and ( \"userId\" ). is ( userId ) . and ( \"commentType\" ). is ( CommentType . LOVE . getType ())); long count = this . mongoTemplate . count ( query , Comment . class ); if ( count == 0 ) { return false ; } //\u6807\u8bb0\u7528\u6237\u5df2\u7ecf\u559c\u6b22 this . redisTemplate . opsForHash (). put ( redisKey , hashKey , \"1\" ); return true ; }","title":"3.1.2\u3001\u7f16\u5199\u5b9e\u73b0"},{"location":"tantan/day05/#32app","text":"","title":"3.2\u3001APP\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day05/#321","text":"//com.tanhua.server.controller.QuanZiController /** * \u559c\u6b22 * * @param publishId * @return */ @GetMapping ( \"/{id}/love\" ) public ResponseEntity < Long > loveComment ( @PathVariable ( \"id\" ) String publishId ) { try { Long loveCount = this . quanZiService . loveComment ( publishId ); if ( null != loveCount ) { return ResponseEntity . ok ( loveCount ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u53d6\u6d88\u559c\u6b22 * * @param publishId * @return */ @GetMapping ( \"/{id}/unlove\" ) public ResponseEntity < Long > disLoveComment ( @PathVariable ( \"id\" ) String publishId ) { try { Long loveCount = this . quanZiService . disLoveComment ( publishId ); if ( null != loveCount ) { return ResponseEntity . ok ( loveCount ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"3.2.1\u3001\u7f16\u5199\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day05/#322","text":"//com.tanhua.server.service.QuanZiService public Long loveComment ( String publishId ) { User user = UserThreadLocal . get (); //\u559c\u6b22 Boolean result = this . quanZiApi . loveComment ( user . getId (), publishId ); if ( result ){ //\u67e5\u8be2\u559c\u6b22\u6570 return this . quanZiApi . queryLoveCount ( publishId ); } return null ; } public Long disLoveComment ( String publishId ) { User user = UserThreadLocal . get (); //\u53d6\u6d88\u559c\u6b22 Boolean result = this . quanZiApi . disLoveComment ( user . getId (), publishId ); if ( result ){ //\u67e5\u8be2\u559c\u6b22\u6570 return this . quanZiApi . queryLoveCount ( publishId ); } return null ; } /** * \u586b\u5145\u7528\u6237\u4fe1\u606f * * @param userInfo * @param quanZiVo */ private void fillUserInfoToQuanZiVo ( UserInfo userInfo , QuanZiVo quanZiVo ) { BeanUtil . copyProperties ( userInfo , quanZiVo , \"id\" ); quanZiVo . setGender ( userInfo . getSex (). name (). toLowerCase ()); quanZiVo . setTags ( StringUtils . split ( userInfo . getTags (), ',' )); //\u5f53\u524d\u7528\u6237 User user = UserThreadLocal . get (); quanZiVo . setCommentCount ( 0 ); //TODO \u8bc4\u8bba\u6570 quanZiVo . setDistance ( \"1.2\u516c\u91cc\" ); //TODO \u8ddd\u79bb quanZiVo . setHasLiked ( this . quanZiApi . queryUserIsLike ( user . getId (), quanZiVo . getId ()) ? 1 : 0 ); //\u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 quanZiVo . setLikeCount ( Convert . toInt ( this . quanZiApi . queryLikeCount ( quanZiVo . getId ()))); //\u70b9\u8d5e\u6570 quanZiVo . setHasLoved ( this . quanZiApi . queryUserIsLove ( user . getId (), quanZiVo . getId ()) ? 1 : 0 ); //\u662f\u5426\u559c\u6b22\uff081\u662f\uff0c0\u5426\uff09 quanZiVo . setLoveCount ( Convert . toInt ( this . quanZiApi . queryLoveCount ( quanZiVo . getId ()))); //\u559c\u6b22\u6570 }","title":"3.2.2\u3001\u7f16\u5199\u670d\u52a1\u5b9e\u73b0"},{"location":"tantan/day05/#123","text":"","title":"1.2.3\u3001\u6d4b\u8bd5"},{"location":"tantan/day05/#4","text":"\u7528\u6237\u70b9\u51fb\u8bc4\u8bba\u65f6\u9700\u8981\u67e5\u8be2\u5355\u6761\u52a8\u6001\u8be6\u60c5\uff0c\u9700\u8981\u6709\u63a5\u53e3\u652f\u6301\u3002 \u670d\u52a1\u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/695 \u54cd\u5e94\u7684\u6570\u636e\u63a5\u53e3\u4e0e\u67e5\u8be2\u597d\u53cb\u52a8\u6001\u4e00\u81f4\uff0c\u53ea\u662f\u5355\u6761\u8fd4\u56de\u800c\u4e0d\u662f\u96c6\u5408\u3002 \u8981\u6ce8\u610f\u7684\u662f\uff0cdubbo\u670d\u52a1\u63a5\u53e3\u5728\u524d\u9762\u5df2\u7ecf\u5f00\u53d1\u5b8c\u6210\uff0c\u73b0\u5728\u53ea\u8981\u60f3\u5b9e\u73b0APP\u7aef\u7684\u63a5\u53e3\u670d\u52a1\u5373\u53ef\u3002","title":"4\u3001\u67e5\u8be2\u5355\u6761\u52a8\u6001"},{"location":"tantan/day05/#41","text":"//com.tanhua.server.controller.QuanZiController /** * \u67e5\u8be2\u5355\u6761\u52a8\u6001\u4fe1\u606f * * @param publishId * @return */ @GetMapping ( \"/{id}\" ) public ResponseEntity < QuanZiVo > queryById ( @PathVariable ( \"id\" ) String publishId ) { try { QuanZiVo movements = this . quanZiService . queryById ( publishId ); if ( null != movements ){ return ResponseEntity . ok ( movements ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"4.1\u3001\u5b9a\u4e49\u670d\u52a1\u63a5\u53e3"},{"location":"tantan/day05/#42","text":"//com.tanhua.server.service.QuanZiService public QuanZiVo queryById ( String publishId ) { Publish publish = this . quanZiApi . queryPublishById ( publishId ); if ( publish == null ) { return null ; } return this . fillQuanZiVo ( Arrays . asList ( publish )). get ( 0 ); }","title":"4.2\u3001\u670d\u52a1\u5b9e\u73b0"},{"location":"tantan/day05/#43","text":"\u53ef\u4ee5\u770b\u5230\uff0c\u8fd4\u56de\u4e86\u5355\u6761\u6570\u636e\u3002","title":"4.3\u3001\u6d4b\u8bd5"},{"location":"tantan/day05/#44","text":"\u5728\u5b8c\u6210\u67e5\u8be2\u5355\u6761\u52a8\u6001\u63a5\u53e3\u540e\uff0c\u4f1a\u53d1\u73b0\uff0c\u5237\u65b0\u9996\u9875\u65f6\u4f1a\u51fa\u73b0\u5982\u4e0b\u5f02\u5e38\uff1a java.lang.IllegalArgumentException: invalid hexadecimal representation of an ObjectId: [ visitors ] at org.bson.types.ObjectId.parseHexString ( ObjectId.java:550 ) at org.bson.types.ObjectId.<init> ( ObjectId.java:239 ) at com.tanhua.dubbo.server.api.QuanZiApiImpl.queryPublishById ( QuanZiApiImpl.java:411 ) at com.alibaba.dubbo.common.bytecode.Wrapper1.invokeMethod ( Wrapper1.java ) at com.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory $1 .doInvoke ( JavassistProxyFactory.java:47 ) at com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker.invoke ( AbstractProxyInvoker.java:76 ) at com.alibaba.dubbo.config.invoker.DelegateProviderMetaDataInvoker.invoke ( DelegateProviderMetaDataInvoker.java:52 ) at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke ( InvokerWrapper.java:56 ) \u539f\u56e0\u662f\uff1a\u8c01\u770b\u8fc7\u6211\u7684\u63a5\u53e3\u8fd8\u6ca1\u5b9e\u73b0\uff0c\u5bfc\u81f4\u4e86\u6620\u5c04\u5230\u4e86\u67e5\u8be2\u5355\u6761\u52a8\u6001\u7684\u63a5\u53e3\uff0c\u5bfc\u81f4\u7684\u5f02\u5e38\uff0c\u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/743 \u89e3\u51b3\u65b9\u6cd5\uff1a\u7f16\u5199\u4e00\u4e2a\u7a7a\u7684\u65b9\u6cd5\u300a\u8c01\u770b\u8fc7\u6211\u300b\u7684\u63a5\u53e3\u5b9e\u73b0\u3002 //com.tanhua.server.controller.QuanZiController /** * TODO\uff1a\u8c01\u770b\u8fc7\u6211 * * @return */ @GetMapping ( \"visitors\" ) public ResponseEntity < Object > queryVisitors () { return ResponseEntity . ok ( Collections . EMPTY_LIST ); }","title":"4.4\u3001\u5f02\u5e38\u7684\u89e3\u51b3"},{"location":"tantan/day05/#5","text":"\u5728\u5355\u6761\u52a8\u6001\u6253\u5f00\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u6709\u8bc4\u8bba\u5217\u8868\uff0c\u529f\u80fd\u5305\u62ec\uff1a\u67e5\u8be2\u8bc4\u8bba\u5217\u8868\uff0c\u8bc4\u8bba\u70b9\u8d5e\u3001\u53d6\u6d88\u70b9\u8d5e\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8bc4\u8bba\u7684\u70b9\u8d5e\u64cd\u4f5c\u4e0e\u5708\u5b50\u52a8\u6001\u7684\u70b9\u8d5e\u4f7f\u7528\u540c\u4e00\u5957\u903b\u8f91\u3002","title":"5\u3001\u8bc4\u8bba"},{"location":"tantan/day05/#51dubbo","text":"","title":"5.1\u3001dubbo\u670d\u52a1"},{"location":"tantan/day05/#511","text":"//com.tanhua.dubbo.server.api.QuanZiApi /** * \u67e5\u8be2\u8bc4\u8bba * * @return */ PageInfo < Comment > queryCommentList ( String publishId , Integer page , Integer pageSize ); /** * \u53d1\u8868\u8bc4\u8bba * * @param userId * @param publishId * @param content * @return */ Boolean saveComment ( Long userId , String publishId , String content );","title":"5.1.1\u3001\u5b9a\u4e49\u670d\u52a1\u63a5\u53e3"},{"location":"tantan/day05/#512","text":"/** * \u67e5\u8be2\u8bc4\u8bba\u5217\u8868 * * @param publishId * @param page * @param pageSize * @return */ @Override public PageInfo < Comment > queryCommentList ( String publishId , Integer page , Integer pageSize ) { PageRequest pageRequest = PageRequest . of ( page - 1 , pageSize , Sort . by ( Sort . Order . asc ( \"created\" ))); Query query = new Query ( Criteria . where ( \"publishId\" ). is ( new ObjectId ( publishId )) . and ( \"commentType\" ). is ( CommentType . COMMENT . getType ())). with ( pageRequest ); //\u67e5\u8be2\u8bc4\u8bba\u5217\u8868 List < Comment > commentList = this . mongoTemplate . find ( query , Comment . class ); PageInfo < Comment > pageInfo = new PageInfo <> (); pageInfo . setPageNum ( page ); pageInfo . setPageSize ( pageSize ); pageInfo . setRecords ( commentList ); return pageInfo ; } /** * \u53d1\u8868\u8bc4\u8bba * * @param userId * @param publishId * @param content * @return */ @Override public Boolean saveComment ( Long userId , String publishId , String content ) { return this . saveComment ( userId , publishId , CommentType . COMMENT , content ); }","title":"5.1.2\u3001\u7f16\u5199\u5b9e\u73b0"},{"location":"tantan/day05/#52app","text":"","title":"5.2\u3001APP\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day05/#521commentvo","text":"\u6839\u636e\u54cd\u5e94\u7ed3\u679c\u7684\u6570\u636e\u7ed3\u6784\u5b9a\u4e49\u5bf9\u8c61\uff1a package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; /** * \u8bc4\u8bba */ @Data @NoArgsConstructor @AllArgsConstructor public class CommentVo { private String id ; //\u8bc4\u8bbaid private String avatar ; //\u5934\u50cf private String nickname ; //\u6635\u79f0 private String content ; //\u8bc4\u8bba private String createDate ; //\u8bc4\u8bba\u65f6\u95f4: 08:27 private Integer likeCount ; //\u70b9\u8d5e\u6570 private Integer hasLiked ; //\u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 }","title":"5.2.1\u3001CommentVo"},{"location":"tantan/day05/#522controller","text":"\u5728APP\u63a5\u53e3\u670d\u52a1\u4e2d\uff0c\u9700\u8981\u5f00\u53d14\u4e2a\u63a5\u53e3\uff0c\u5206\u522b\u662f\u67e5\u8be2\u8bc4\u8bba\u5217\u8868\u3001\u53d1\u8868\u8bc4\u8bba\u3001\u70b9\u8d5e\u3001\u53d6\u6d88\u70b9\u8d5e\u3002 \u7531\u4e8e\u5176\u63a5\u53e3\u7684url\u5730\u5740\u4e0eQuanZiConroller\u5730\u5740\u4e0d\u540c\uff0c\u6240\u4ee5\u9700\u8981\u521b\u5efa\u4e0d\u540c\u7684Controller\u7c7b\u3002 package com.tanhua.server.controller ; import com.tanhua.server.service.QuanZiService ; import com.tanhua.server.vo.PageResult ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.* ; import java.util.Map ; /** * \u5708\u5b50\u529f\u80fd\u4e2d\u7684\u8bc4\u8bba */ @RestController @RequestMapping ( \"comments\" ) public class QuanZiCommentController { @Autowired private QuanZiService quanZiService ; /** * \u67e5\u8be2\u8bc4\u8bba\u5217\u8868 * * @return */ @GetMapping public ResponseEntity < PageResult > queryCommentsList ( @RequestParam ( \"movementId\" ) String publishId , @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize ) { try { PageResult pageResult = this . quanZiService . queryCommentList ( publishId , page , pageSize ); return ResponseEntity . ok ( pageResult ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u4fdd\u5b58\u8bc4\u8bba */ @PostMapping public ResponseEntity < Void > saveComments ( @RequestBody Map < String , String > param ) { try { String publishId = param . get ( \"movementId\" ); String content = param . get ( \"comment\" ); Boolean result = this . quanZiService . saveComments ( publishId , content ); if ( result ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u70b9\u8d5e * * @param publishId * @return */ @GetMapping ( \"{id}/like\" ) public ResponseEntity < Long > likeComment ( @PathVariable ( \"id\" ) String publishId ) { try { Long likeCount = this . quanZiService . likeComment ( publishId ); if ( likeCount != null ) { return ResponseEntity . ok ( likeCount ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u53d6\u6d88\u70b9\u8d5e * * @param publishId * @return */ @GetMapping ( \"{id}/dislike\" ) public ResponseEntity < Long > disLikeComment ( @PathVariable ( \"id\" ) String publishId ) { try { Long likeCount = this . quanZiService . disLikeComment ( publishId ); if ( null != likeCount ) { return ResponseEntity . ok ( likeCount ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } }","title":"5.2.2\u3001\u7f16\u5199Controller"},{"location":"tantan/day05/#523service","text":"Service\u7684\u5177\u4f53\u5b9e\u73b0\u4f9d\u7136\u662f\u653e\u5230QuanZiSerivce\u4e2d\u5b8c\u6210\u3002 //com.tanhua.server.service.QuanZiService /** * \u67e5\u8be2\u8bc4\u8bba\u5217\u8868 * * @param publishId * @param page * @param pageSize * @return */ public PageResult queryCommentList ( String publishId , Integer page , Integer pageSize ) { PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); User user = UserThreadLocal . get (); //\u67e5\u8be2\u8bc4\u8bba\u5217\u8868\u6570\u636e PageInfo < Comment > pageInfo = this . quanZiApi . queryCommentList ( publishId , page , pageSize ); List < Comment > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )){ return pageResult ; } //\u67e5\u8be2\u7528\u6237\u4fe1\u606f List < Object > userIdList = CollUtil . getFieldValues ( records , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIdList ); List < CommentVo > result = new ArrayList <> (); for ( Comment record : records ) { CommentVo commentVo = new CommentVo (); commentVo . setContent ( record . getContent ()); commentVo . setId ( record . getId (). toHexString ()); commentVo . setCreateDate ( DateUtil . format ( new Date ( record . getCreated ()), \"HH:mm\" )); //\u662f\u5426\u70b9\u8d5e commentVo . setHasLiked ( this . quanZiApi . queryUserIsLike ( user . getId (), commentVo . getId ()) ? 1 : 0 ); //\u70b9\u8d5e\u6570 commentVo . setLikeCount ( Convert . toInt ( this . quanZiApi . queryLikeCount ( commentVo . getId ()))); for ( UserInfo userInfo : userInfoList ) { if ( ObjectUtil . equals ( record . getUserId (), userInfo . getUserId ())){ commentVo . setAvatar ( userInfo . getLogo ()); commentVo . setNickname ( userInfo . getNickName ()); break ; } } result . add ( commentVo ); } pageResult . setItems ( result ); return pageResult ; } /** * \u53d1\u8868\u8bc4\u8bba * @param publishId * @param content * @return */ public Boolean saveComments ( String publishId , String content ) { User user = UserThreadLocal . get (); return this . quanZiApi . saveComment ( user . getId (), publishId , content ); }","title":"5.2.3\u3001\u7f16\u5199Service\u5b9e\u73b0"},{"location":"tantan/day05/#524","text":"\u6d4b\u8bd5\u70b9\u8d5e\u65f6\u4f1a\u53d1\u73b0dubbo\u670d\u52a1\u4e2d\u4f1a\u51fa\u73b0null\u6307\u9488\u5f02\u5e38\uff0c\u5982\u4e0b\uff1a java.lang.NullPointerException at com.tanhua.dubbo.server.api.QuanZiApiImpl.saveComment ( QuanZiApiImpl.java:386 ) at com.tanhua.dubbo.server.api.QuanZiApiImpl.likeComment ( QuanZiApiImpl.java:180 ) at com.alibaba.dubbo.common.bytecode.Wrapper1.invokeMethod ( Wrapper1.java ) at com.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory $1 .doInvoke ( JavassistProxyFactory.java:47 ) at com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker.invoke ( AbstractProxyInvoker.java:76 ) at com.alibaba.dubbo.config.invoker.DelegateProviderMetaDataInvoker.invoke ( DelegateProviderMetaDataInvoker.java:52 ) at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke ( InvokerWrapper.java:56 ) \u539f\u56e0\u662f\uff1a\u539f\u6709\u7684\u70b9\u8d5e\u5b9e\u73b0\u4e2d\uff0c\u9700\u8981\u67e5\u8be2Publish\u5bf9\u8c61\uff0c\u4f46\u662f\u73b0\u5728\u5b9e\u73b0\u7684\u662f\u9488\u5bf9\u8bc4\u8bba\u7684\u70b9\u8d5e\uff0c\u662f\u67e5\u8be2\u4e0d\u5230Publish\u5bf9\u8c61\u7684\uff0c\u6240\u4ee5\u629b\u51fa\u4e86\u7a7a\u6307\u9488\u5f02\u5e38\u3002 \u89e3\u51b3\u5982\u4e0b\uff1a //com.tanhua.dubbo.server.api.QuanZiApiImpl /** * \u4fdd\u5b58Comment * * @return */ private Boolean saveComment ( Long userId , String publishId , CommentType commentType , String content ) { try { Comment comment = new Comment (); comment . setId ( ObjectId . get ()); comment . setUserId ( userId ); comment . setPublishId ( new ObjectId ( publishId )); // \u8bc4\u8bba\u7c7b\u578b comment . setCommentType ( commentType . getType ()); // \u5185\u5bb9 comment . setContent ( content ); comment . setCreated ( System . currentTimeMillis ()); Publish publish = this . queryPublishById ( publishId ); if ( ObjectUtil . isNotEmpty ( publish )) { comment . setPublishUserId ( publish . getUserId ()); } else { //\u67e5\u8be2\u8bc4\u8bba Comment myComment = this . queryCommentById ( publishId ); if ( ObjectUtil . isNotEmpty ( myComment )){ comment . setPublishUserId ( myComment . getUserId ()); } else { //TODO \u5176\u4ed6\u60c5\u51b5\uff0c\u6bd4\u5982\u5c0f\u89c6\u9891\u7b49 } } this . mongoTemplate . save ( comment ); return true ; } catch ( Exception e ) { log . error ( \"\u4fdd\u5b58Comment\u51fa\u9519~ userId = \" + userId + \", publishId = \" + publishId + \", commentType = \" + commentType , e ); } return false ; } /** * \u6839\u636eid\u67e5\u8be2Comment\u5bf9\u8c61 * * @param id * @return */ private Comment queryCommentById ( String id ) { return this . mongoTemplate . findById ( new ObjectId ( id ), Comment . class ); } \u8fd9\u6837\uff0c\u70b9\u8d5e\u529f\u80fd\u6b63\u5e38\u4e86\u3002","title":"5.2.4\u3001\u6d4b\u8bd5"},{"location":"tantan/day05/#6","text":"","title":"6\u3001\u5c0f\u89c6\u9891"},{"location":"tantan/day05/#61","text":"\u5c0f\u89c6\u9891\u529f\u80fd\u7c7b\u4f3c\u4e8e\u6296\u97f3\u3001\u5feb\u624b\u5c0f\u89c6\u9891\u7684\u5e94\u7528\uff0c\u7528\u6237\u53ef\u4ee5\u4e0a\u4f20\u5c0f\u89c6\u9891\u8fdb\u884c\u5206\u4eab\uff0c\u4e5f\u53ef\u4ee5\u6d4f\u89c8\u67e5\u770b\u522b\u4eba\u5206\u4eab\u7684\u89c6\u9891\uff0c\u5e76\u4e14\u53ef\u4ee5\u5bf9\u89c6\u9891\u8bc4\u8bba\u548c\u70b9\u8d5e\u64cd\u4f5c\u3002 \u6548\u679c\uff1a \u67e5\u770b\u8be6\u60c5\uff1a \u8bc4\u8bba\uff1a \u70b9\u8d5e\uff1a","title":"6.1\u3001\u529f\u80fd\u8bf4\u660e"},{"location":"tantan/day05/#62","text":"\u5bf9\u4e8e\u5c0f\u89c6\u9891\u7684\u529f\u80fd\u7684\u5f00\u53d1\uff0c\u6838\u5fc3\u70b9\u5c31\u662f\uff1a\u5b58\u50a8 + \u63a8\u8350 + \u52a0\u8f7d\u901f\u5ea6 \u3002 \u5bf9\u4e8e\u5b58\u50a8\u800c\u8a00\uff0c\u5c0f\u89c6\u9891\u7684\u5b58\u50a8\u91cf\u4ee5\u53ca\u5bb9\u91cf\u90fd\u662f\u975e\u5e38\u5de8\u5927\u7684\u3002 \u6240\u4ee5\u6211\u4eec\u9009\u62e9\u81ea\u5df1\u642d\u5efa\u5206\u5e03\u5f0f\u5b58\u50a8\u7cfb\u7edf FastDFS\u8fdb\u884c\u5b58\u50a8\u3002 \u5bf9\u4e8e\u63a8\u8350\u7b97\u6cd5\uff0c\u6211\u4eec\u5c06\u91c7\u7528\u591a\u79cd\u6743\u91cd\u7684\u8ba1\u7b97\u65b9\u5f0f\u8fdb\u884c\u8ba1\u7b97\u3002 \u5bf9\u4e8e\u52a0\u8f7d\u901f\u5ea6\uff0c\u9664\u4e86\u63d0\u5347\u670d\u52a1\u5668\u5e26\u5bbd\u5916\u53ef\u4ee5\u901a\u8fc7CDN\u7684\u65b9\u5f0f\u8fdb\u884c\u52a0\u901f\uff0c\u5f53\u7136\u4e86\u8fd9\u9700\u8981\u989d\u5916\u8d2d\u4e70CDN\u670d\u52a1\u3002","title":"6.2\u3001\u6280\u672f\u65b9\u6848"},{"location":"tantan/day05/#7fastdfs","text":"","title":"7\u3001FastDFS"},{"location":"tantan/day05/#71fastdfs","text":"FastDFS\u662f\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf\u3002\u4f7f\u7528 FastDFS\u5f88\u5bb9\u6613\u642d\u5efa\u4e00\u5957\u9ad8\u6027\u80fd\u7684\u6587\u4ef6\u670d\u52a1\u5668\u96c6\u7fa4\u63d0\u4f9b\u6587\u4ef6\u4e0a\u4f20\u3001\u4e0b\u8f7d\u7b49\u670d\u52a1\u3002","title":"7.1\u3001FastDFS\u662f\u4ec0\u4e48\uff1f"},{"location":"tantan/day05/#72","text":"FastDFS \u67b6\u6784\u5305\u62ec Tracker server \u548c Storage server\u3002\u5ba2\u6237\u7aef\u8bf7\u6c42 Tracker server \u8fdb\u884c\u6587\u4ef6\u4e0a\u4f20\u3001\u4e0b\u8f7d\uff0c\u901a\u8fc7 Tracker server \u8c03\u5ea6\u6700\u7ec8\u7531 Storage server \u5b8c\u6210\u6587\u4ef6\u4e0a\u4f20\u548c\u4e0b\u8f7d\u3002 Tracker server \u4f5c\u7528\u662f\u8d1f\u8f7d\u5747\u8861\u548c\u8c03\u5ea6\uff0c\u901a\u8fc7 Tracker server \u5728\u6587\u4ef6\u4e0a\u4f20\u65f6\u53ef\u4ee5\u6839\u636e\u4e00\u4e9b\u7b56\u7565\u627e\u5230 Storage server \u63d0\u4f9b\u6587\u4ef6\u4e0a\u4f20\u670d\u52a1\u3002\u53ef\u4ee5\u5c06 tracker \u79f0\u4e3a\u8ffd\u8e2a\u670d\u52a1\u5668\u6216\u8c03\u5ea6\u670d\u52a1\u5668\u3002 Storage server \u4f5c\u7528\u662f\u6587\u4ef6\u5b58\u50a8\uff0c\u5ba2\u6237\u7aef\u4e0a\u4f20\u7684\u6587\u4ef6\u6700\u7ec8\u5b58\u50a8\u5728 Storage \u670d\u52a1\u5668\u4e0a\uff0cStorage server \u6ca1\u6709\u5b9e\u73b0\u81ea\u5df1\u7684\u6587\u4ef6\u7cfb\u7edf\u800c\u662f\u5229\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u6587\u4ef6\u7cfb\u7edf\u6765\u7ba1\u7406\u6587\u4ef6\u3002\u53ef\u4ee5\u5c06storage\u79f0\u4e3a\u5b58\u50a8\u670d\u52a1\u5668\u3002 \u6bcf\u4e2a tracker \u8282\u70b9\u5730\u4f4d\u5e73\u7b49\uff0c\u6536\u96c6 Storage \u96c6\u7fa4\u7684\u72b6\u6001\u3002 Storage \u5206\u4e3a\u591a\u4e2a\u7ec4\uff0c\u6bcf\u4e2a\u7ec4\u4e4b\u95f4\u4fdd\u5b58\u7684\u6587\u4ef6\u662f\u4e0d\u540c\u7684\u3002\u6bcf\u4e2a\u7ec4\u5185\u90e8\u53ef\u4ee5\u6709\u591a\u4e2a\u6210\u5458\uff0c\u7ec4\u6210\u5458\u5185\u90e8\u4fdd\u5b58\u7684\u5185\u5bb9\u662f\u4e00\u6837\u7684\uff0c\u7ec4\u6210\u5458\u7684\u5730\u4f4d\u662f\u4e00\u81f4\u7684\uff0c\u6ca1\u6709\u4e3b\u4ece\u7684\u6982\u5ff5\u3002","title":"7.2\u3001\u5de5\u4f5c\u539f\u7406"},{"location":"tantan/day05/#73","text":"\u5ba2\u6237\u7aef\u4e0a\u4f20\u6587\u4ef6\u540e\u5b58\u50a8\u670d\u52a1\u5668\u5c06\u6587\u4ef6 ID \u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\uff0c\u6b64\u6587\u4ef6 ID \u7528\u4e8e\u4ee5\u540e\u8bbf\u95ee\u8be5\u6587\u4ef6\u7684\u7d22\u5f15\u4fe1\u606f\u3002\u6587\u4ef6\u7d22\u5f15\u4fe1\u606f\u5305\u62ec\uff1a\u7ec4\u540d\uff0c\u865a\u62df\u78c1\u76d8\u8def\u5f84\uff0c\u6570\u636e\u4e24\u7ea7\u76ee\u5f55\uff0c\u6587\u4ef6\u540d\u3002","title":"7.3\u3001\u6587\u4ef6\u7684\u4e0a\u4f20"},{"location":"tantan/day05/#74","text":"\u5ba2\u6237\u7aef\u4e0b\u8f7d\u8bf7\u6c42\u5230Tracker\u670d\u52a1\uff0cTracker\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aefstorage\u7684\u4fe1\u606f\uff0c\u5ba2\u6237\u7aef\u6839\u636e\u8fd9\u4e9b\u4fe1\u606f\u8fdb\u884c\u8bf7\u6c42storage\u83b7\u53d6\u5230\u6587\u4ef6\u3002","title":"7.4\u3001\u6587\u4ef6\u7684\u4e0b\u8f7d"},{"location":"tantan/day05/#75","text":"\u5728\u6211\u4eec\u63d0\u4f9b\u7684\u865a\u62df\u673a\u4e2d\u5df2\u7ecf\u901a\u8fc7docker\u642d\u5efa\u4e86FastDFS\u73af\u5883\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u5b66\u4e60\u4e0b\u5982\u4f55\u901a\u8fc7Java\u7a0b\u5e8f\u6765\u4f7f\u7528FastDFS\u3002","title":"7.5\u3001\u5f00\u59cb\u4f7f\u7528"},{"location":"tantan/day05/#751","text":"\u5173\u4e8e\u4f7f\u7528FastDFS\u4e0a\u4f20\u5c0f\u89c6\u9891\u7684\u903b\u8f91\u6211\u4eec\u5728server\u5de5\u7a0b\u4e2d\u5b8c\u6210\uff0c\u6240\u4ee5\u9700\u8981\u5728server\u5de5\u7a0b\u4e2d\u5f15\u5165\u4f9d\u8d56\u3002 <dependency> <groupId> com.github.tobato </groupId> <artifactId> fastdfs-client </artifactId> <version> 1.26.7 </version> <exclusions> <exclusion> <groupId> ch.qos.logback </groupId> <artifactId> logback-classic </artifactId> </exclusion> </exclusions> </dependency>","title":"7.5.1\u3001\u5f15\u5165\u4f9d\u8d56"},{"location":"tantan/day05/#752","text":"\u5728application.properties\u914d\u7f6e\u6587\u4ef6\u4e2d\u52a0\u5165\u5982\u4e0b\u5185\u5bb9\uff1a # =================================================================== # \u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edfFDFS\u914d\u7f6e # =================================================================== fdfs.so-timeout = 1501 fdfs.connect-timeout = 601 #\u7f29\u7565\u56fe\u751f\u6210\u53c2\u6570 fdfs.thumb-image.width = 150 fdfs.thumb-image.height = 150 #TrackerList\u53c2\u6570,\u652f\u6301\u591a\u4e2a fdfs.tracker-list = 192.168.31.81:22122 #\u8bbf\u95ee\u8def\u5f84 fdfs.web-server-url = http://192.168.31.81:8888/","title":"7.5.2\u3001\u7f16\u5199\u914d\u7f6e\u6587\u4ef6"},{"location":"tantan/day05/#753","text":"package com.tanhua.server ; import com.github.tobato.fastdfs.domain.conn.FdfsWebServer ; import com.github.tobato.fastdfs.domain.fdfs.StorePath ; import com.github.tobato.fastdfs.service.FastFileStorageClient ; import org.apache.commons.io.FileUtils ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; import java.io.File ; import java.io.IOException ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestFastDFS { @Autowired protected FastFileStorageClient storageClient ; @Autowired private FdfsWebServer fdfsWebServer ; @Test public void testUpload (){ String path = \"F:\\\\1.jpg\" ; File file = new File ( path ); try { StorePath storePath = this . storageClient . uploadFile ( FileUtils . openInputStream ( file ), file . length (), \"jpg\" , null ); System . out . println ( storePath ); //StorePath [group=group1, path=M00/00/00/wKgfUV2GJSuAOUd_AAHnjh7KpOc1.1.jpg] System . out . println ( fdfsWebServer . getWebServerUrl () + storePath . getFullPath ()); //group1/M00/00/00/wKgfUV2GJSuAOUd_AAHnjh7KpOc1.1.jpg } catch ( IOException e ) { e . printStackTrace (); } } } \u901a\u8fc7\u6d4f\u89c8\u5668\u8bbf\u95ee\u56fe\u7247\uff1a","title":"7.5.3\u3001\u6d4b\u8bd5\u4ee3\u7801"},{"location":"tantan/day05/#8","text":"\u53d1\u5e03\u5c0f\u89c6\u9891\u7684\u6d41\u7a0b\u5982\u4e0b\uff1a \u8bf4\u660e\uff1a \u7528\u6237\u53d1\u901a\u8fc7\u5ba2\u6237\u7aefAPP\u4e0a\u4f20\u89c6\u9891\u5230server\u670d\u52a1 server\u670d\u52a1\u4e0a\u4f20\u89c6\u9891\u5230FastDFS\u6587\u4ef6\u7cfb\u7edf\uff0c\u4e0a\u4f20\u6210\u529f\u540e\u8fd4\u56de\u89c6\u9891\u7684url\u5730\u5740 server\u901a\u8fc7rpc\u7684\u8c03\u7528dubbo\u670d\u52a1\u8fdb\u884c\u4fdd\u5b58\u5c0f\u89c6\u9891\u6570\u636e","title":"8\u3001\u53d1\u5e03\u5c0f\u89c6\u9891"},{"location":"tantan/day05/#81dubbo","text":"","title":"8.1\u3001dubbo\u670d\u52a1"},{"location":"tantan/day05/#811pojo","text":"\u5728dubbo\u63a5\u53e3\u5de5\u7a0b\u4e2d\u7f16\u5199pojo\uff1a package com.tanhua.dubbo.server.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.mongodb.core.mapping.Document ; import java.util.List ; @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"video\" ) public class Video implements java . io . Serializable { private static final long serialVersionUID = - 3136732836884933873L ; private ObjectId id ; //\u4e3b\u952eid private Long vid ; //\u81ea\u589e\u957fid private Long userId ; private String text ; //\u6587\u5b57 private String picUrl ; //\u89c6\u9891\u5c01\u9762\u6587\u4ef6 private String videoUrl ; //\u89c6\u9891\u6587\u4ef6 private Long created ; //\u521b\u5efa\u65f6\u95f4 private Integer seeType ; // \u8c01\u53ef\u4ee5\u770b\uff0c1-\u516c\u5f00\uff0c2-\u79c1\u5bc6\uff0c3-\u90e8\u5206\u53ef\u89c1\uff0c4-\u4e0d\u7ed9\u8c01\u770b private List < Long > seeList ; //\u90e8\u5206\u53ef\u89c1\u7684\u5217\u8868 private List < Long > notSeeList ; //\u4e0d\u7ed9\u8c01\u770b\u7684\u5217\u8868 private String longitude ; //\u7ecf\u5ea6 private String latitude ; //\u7eac\u5ea6 private String locationName ; //\u4f4d\u7f6e\u540d\u79f0 }","title":"8.1.1\u3001\u7f16\u5199pojo"},{"location":"tantan/day05/#812","text":"package com.tanhua.dubbo.server.api ; import com.tanhua.dubbo.server.pojo.Video ; public interface VideoApi { /** * \u4fdd\u5b58\u5c0f\u89c6\u9891 * * @param video * @return \u4fdd\u5b58\u6210\u529f\u540e\uff0c\u8fd4\u56de\u89c6\u9891id */ String saveVideo ( Video video ); }","title":"8.1.2\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day05/#813","text":"package com.tanhua.dubbo.server.api ; import cn.hutool.core.util.ObjectUtil ; import com.alibaba.dubbo.config.annotation.Service ; import com.mongodb.Mongo ; import com.tanhua.dubbo.server.enums.IdType ; import com.tanhua.dubbo.server.pojo.Video ; import com.tanhua.dubbo.server.service.IdService ; import lombok.extern.slf4j.Slf4j ; import org.bson.types.ObjectId ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.mongodb.core.MongoTemplate ; @Service ( version = \"1.0.0\" ) @Slf4j public class VideoApiImpl implements VideoApi { @Autowired private IdService idService ; @Autowired private MongoTemplate mongoTemplate ; /** * \u53d1\u5e03\u5c0f\u89c6\u9891 * * @param video * @return */ @Override public String saveVideo ( Video video ) { try { //\u6821\u9a8c if ( ! ObjectUtil . isAllNotEmpty ( video . getUserId (), video . getPicUrl (), video . getVideoUrl ())){ return null ; } //\u8bbe\u7f6eid video . setId ( ObjectId . get ()); video . setVid ( this . idService . createId ( IdType . VIDEO )); //\u53d1\u5e03\u65f6\u95f4 video . setCreated ( System . currentTimeMillis ()); //\u4fdd\u5b58\u5230Mongodb\u4e2d this . mongoTemplate . save ( video ); return video . getId (). toHexString (); } catch ( Exception e ) { log . error ( \"\u5c0f\u89c6\u9891\u53d1\u5e03\u5931\u8d25~ video = \" + video , e ); } return null ; } }","title":"8.1.3\u3001\u7f16\u5199\u5b9e\u73b0"},{"location":"tantan/day05/#82app","text":"\u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/821","title":"8.2\u3001APP\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day05/#821videocontroller","text":"package com.tanhua.server.controller ; import com.tanhua.server.service.VideoService ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.PostMapping ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RequestParam ; import org.springframework.web.bind.annotation.RestController ; import org.springframework.web.multipart.MultipartFile ; @RestController @RequestMapping ( \"smallVideos\" ) public class VideoController { @Autowired private VideoService videoService ; /** * \u53d1\u5e03\u5c0f\u89c6\u9891 * * @param picFile * @param videoFile * @return */ @PostMapping public ResponseEntity < Void > saveVideo ( @RequestParam ( \"videoThumbnail\" ) MultipartFile picFile , @RequestParam ( \"videoFile\" ) MultipartFile videoFile ) { try { Boolean bool = this . videoService . saveVideo ( picFile , videoFile ); if ( bool ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } }","title":"8.2.1\u3001VideoController"},{"location":"tantan/day05/#822videoservice","text":"package com.tanhua.server.service ; import cn.hutool.core.util.StrUtil ; import com.alibaba.dubbo.config.annotation.Reference ; import com.github.tobato.fastdfs.domain.conn.FdfsWebServer ; import com.github.tobato.fastdfs.domain.fdfs.StorePath ; import com.github.tobato.fastdfs.service.FastFileStorageClient ; import com.tanhua.common.pojo.User ; import com.tanhua.common.service.PicUploadService ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.common.vo.PicUploadResult ; import com.tanhua.dubbo.server.api.VideoApi ; import com.tanhua.dubbo.server.pojo.Video ; import lombok.extern.slf4j.Slf4j ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import org.springframework.web.multipart.MultipartFile ; @Service @Slf4j public class VideoService { @Autowired private PicUploadService picUploadService ; @Autowired protected FastFileStorageClient storageClient ; @Autowired private FdfsWebServer fdfsWebServer ; @Reference ( version = \"1.0.0\" ) private VideoApi videoApi ; /** * \u53d1\u5e03\u5c0f\u89c6\u9891 * * @param picFile * @param videoFile * @return */ public Boolean saveVideo ( MultipartFile picFile , MultipartFile videoFile ) { User user = UserThreadLocal . get (); Video video = new Video (); video . setUserId ( user . getId ()); video . setSeeType ( 1 ); //\u9ed8\u8ba4\u516c\u5f00 try { //\u4e0a\u4f20\u5c01\u9762\u56fe\u7247 PicUploadResult picUploadResult = this . picUploadService . upload ( picFile ); video . setPicUrl ( picUploadResult . getName ()); //\u56fe\u7247\u8def\u5f84 //\u4e0a\u4f20\u89c6\u9891 StorePath storePath = storageClient . uploadFile ( videoFile . getInputStream (), videoFile . getSize (), StrUtil . subAfter ( videoFile . getOriginalFilename (), '.' , true ), null ); //\u8bbe\u7f6e\u89c6\u9891url video . setVideoUrl ( fdfsWebServer . getWebServerUrl () + storePath . getFullPath ()); String videoId = this . videoApi . saveVideo ( video ); return StrUtil . isNotEmpty ( videoId ); } catch ( Exception e ) { log . error ( \"\u53d1\u5e03\u5c0f\u89c6\u9891\u5931\u8d25\uff01file = \" + picFile . getOriginalFilename () , e ); } return false ; } }","title":"8.2.2\u3001VideoService"},{"location":"tantan/day05/#543","text":"\u5982\u679c\u4e0a\u4f20\u89c6\u9891\uff0c\u4f1a\u5bfc\u81f4\u5f02\u5e38\uff0c\u662f\u56e0\u4e3a\u8bf7\u6c42\u592a\u5927\u7684\u7f18\u6545\uff1a \u89e3\u51b3\uff1aapplication.properties spring.servlet.multipart.max-file-size = 30MB spring.servlet.multipart.max-request-size = 30MB \u6d4b\u8bd5\uff1a \u53ef\u4ee5\u770b\u5230\u6570\u636e\u5df2\u7ecf\u5199\u5165\u5230\u4e86MongoDB\u4e2d\u3002","title":"5.4.3\u3001\u6d4b\u8bd5"},{"location":"tantan/day05/#9","text":"\u5c0f\u89c6\u9891\u7684\u5217\u8868\u67e5\u8be2\u7684\u5b9e\u73b0\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u6709\u63a8\u8350\u89c6\u9891\uff0c\u4f18\u5148\u8fd4\u56de\u63a8\u8350\u89c6\u9891\uff0c\u5982\u679c\u4e0d\u591f\u6216\u6ca1\u6709\uff0c\u6309\u7167\u65f6\u95f4\u5012\u5e8f\u67e5\u8be2\u89c6\u9891\u8868\u3002 \u63a8\u8350\u6570\u636e\uff1a","title":"9\u3001\u5c0f\u89c6\u9891\u5217\u8868"},{"location":"tantan/day05/#91dubbo","text":"","title":"9.1\u3001dubbo\u670d\u52a1"},{"location":"tantan/day05/#911dubbo","text":"package com.tanhua.dubbo.server.api ; import com.tanhua.dubbo.server.pojo.Video ; import com.tanhua.dubbo.server.vo.PageInfo ; public interface VideoApi { /** * \u4fdd\u5b58\u5c0f\u89c6\u9891 * * @param video * @return */ Boolean saveVideo ( Video video ); /** * \u5206\u9875\u67e5\u8be2\u5c0f\u89c6\u9891\u5217\u8868\uff0c\u6309\u7167\u65f6\u95f4\u5012\u5e8f\u6392\u5e8f * * @param userId * @param page * @param pageSize * @return */ PageInfo < Video > queryVideoList ( Long userId , Integer page , Integer pageSize ); }","title":"9.1.1\u3001\u5b9a\u4e49dubbo\u670d\u52a1"},{"location":"tantan/day05/#912dubbo","text":"//com.tanhua.dubbo.server.api.VideoApiImpl /** * \u67e5\u8be2\u5c0f\u89c6\u9891\u5217\u8868\uff0c\u4f18\u5148\u5c55\u73b0\u63a8\u8350\u7684\u89c6\u9891\uff0c\u5982\u679c\u6ca1\u6709\u63a8\u8350\u7684\u89c6\u9891\u6216\u5df2\u7ecf\u67e5\u8be2\u5b8c\u6210\uff0c\u5c31\u9700\u8981\u67e5\u8be2\u7cfb\u7edf\u89c6\u9891\u6570\u636e * * @param userId * @param page * @param pageSize * @return */ @Override public PageInfo < Video > queryVideoList ( Long userId , Integer page , Integer pageSize ) { PageInfo < Video > pageInfo = new PageInfo <> (); pageInfo . setPageNum ( page ); pageInfo . setPageSize ( pageSize ); //\u4eceredis\u4e2d\u83b7\u53d6\u63a8\u8350\u89c6\u9891\u7684\u6570\u636e String redisKey = \"QUANZI_VIDEO_RECOMMEND_\" + userId ; String redisData = this . redisTemplate . opsForValue (). get ( redisKey ); List < Long > vids = new ArrayList <> (); int recommendCount = 0 ; if ( StrUtil . isNotEmpty ( redisData )) { //\u624b\u52a8\u5206\u9875\u67e5\u8be2\u6570\u636e List < String > vidList = StrUtil . split ( redisData , ',' ); //\u8ba1\u7b97\u5206\u9875 //[0, 10] int [] startEnd = PageUtil . transToStartEnd ( page - 1 , pageSize ); int startIndex = startEnd [ 0 ] ; //\u5f00\u59cb int endIndex = Math . min ( startEnd [ 1 ] , vidList . size ()); //\u7ed3\u675f for ( int i = startIndex ; i < endIndex ; i ++ ) { vids . add ( Convert . toLong ( vidList . get ( i ))); } recommendCount = vidList . size (); } if ( CollUtil . isEmpty ( vids )) { //\u6ca1\u6709\u63a8\u8350\u6216\u524d\u9762\u63a8\u8350\u5df2\u7ecf\u67e5\u8be2\u5b8c\u6bd5\uff0c\u67e5\u8be2\u7cfb\u7edf\u7684\u89c6\u9891\u6570\u636e //\u8ba1\u7b97\u524d\u9762\u7684\u63a8\u8350\u89c6\u9891\u9875\u6570 int totalPage = PageUtil . totalPage ( recommendCount , pageSize ); PageRequest pageRequest = PageRequest . of ( page - totalPage - 1 , pageSize , Sort . by ( Sort . Order . desc ( \"created\" ))); Query query = new Query (). with ( pageRequest ); List < Video > videoList = this . mongoTemplate . find ( query , Video . class ); pageInfo . setRecords ( videoList ); return pageInfo ; } //\u6839\u636evid\u67e5\u8be2\u5bf9\u5e94\u7684\u89c6\u9891\u6570\u636e\u4e86 Query query = Query . query ( Criteria . where ( \"vid\" ). in ( vids )); List < Video > videoList = this . mongoTemplate . find ( query , Video . class ); pageInfo . setRecords ( videoList ); return pageInfo ; }","title":"9.1.2\u3001\u5b9e\u73b0dubbo\u670d\u52a1"},{"location":"tantan/day05/#913","text":"package com.tanhua.dubbo.server.api ; import com.tanhua.dubbo.server.pojo.Video ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestVideoApi { @Autowired private VideoApi videoApi ; @Test public void testQueryVideoList () { //\u8fd4\u56de\u7684\u63a8\u8350\u7ed3\u679c\u6570\u636e System . out . println ( this . videoApi . queryVideoList ( 1L , 1 , 8 )); //\u8fd4\u56de\u5c11\u4e8epageSize\u6570\u636e\uff0c\u56e0\u4e3a\u63a8\u8350\u6570\u636e\u4e0d\u591f\u4e86 System . out . println ( this . videoApi . queryVideoList ( 1L , 3 , 8 )); //\u8fd4\u56de\u7cfb\u7edf\u6570\u636e System . out . println ( this . videoApi . queryVideoList ( 1L , 4 , 8 )); } }","title":"9.1.3\u3001\u6d4b\u8bd5\u7528\u4f8b"},{"location":"tantan/day05/#92app","text":"\u670d\u52a1\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/815","title":"9.2\u3001APP\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day05/#921videovo","text":"package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class VideoVo { private String id ; private Long userId ; private String avatar ; //\u5934\u50cf private String nickname ; //\u6635\u79f0 private String cover ; //\u5c01\u9762 private String videoUrl ; //\u89c6\u9891URL private String signature ; //\u7b7e\u540d private Integer likeCount ; //\u70b9\u8d5e\u6570\u91cf private Integer hasLiked ; //\u662f\u5426\u5df2\u8d5e\uff081\u662f\uff0c0\u5426\uff09 private Integer hasFocus ; //\u662f\u662f\u5426\u5173\u6ce8 \uff081\u662f\uff0c0\u5426\uff09 private Integer commentCount ; //\u8bc4\u8bba\u6570\u91cf }","title":"9.2.1\u3001\u5b9a\u4e49VideoVo"},{"location":"tantan/day05/#922videocontroller","text":"@RestController @RequestMapping ( \"smallVideos\" ) public class VideoController { /** * \u67e5\u8be2\u5c0f\u89c6\u9891\u5217\u8868 * * @param page * @param pageSize * @return */ @GetMapping public ResponseEntity < PageResult > queryVideoList ( @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize ) { try { if ( page <= 0 ) { page = 1 ; } PageResult pageResult = this . videoService . queryVideoList ( page , pageSize ); if ( null != pageResult ) { return ResponseEntity . ok ( pageResult ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } }","title":"9.2.2\u3001VideoController"},{"location":"tantan/day05/#923videoservice","text":"//com.tanhua.server.service.VideoService public PageResult queryVideoList ( Integer page , Integer pageSize ) { User user = UserThreadLocal . get (); PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); PageInfo < Video > pageInfo = this . videoApi . queryVideoList ( user . getId (), page , pageSize ); List < Video > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )){ return pageResult ; } //\u67e5\u8be2\u7528\u6237\u4fe1\u606f List < Object > userIds = CollUtil . getFieldValues ( records , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIds ); List < VideoVo > videoVoList = new ArrayList <> (); for ( Video record : records ) { VideoVo videoVo = new VideoVo (); videoVo . setUserId ( record . getUserId ()); videoVo . setCover ( record . getPicUrl ()); videoVo . setVideoUrl ( record . getVideoUrl ()); videoVo . setId ( record . getId (). toHexString ()); videoVo . setSignature ( \"\u6211\u5c31\u662f\u6211~\" ); //TODO \u7b7e\u540d videoVo . setCommentCount ( 0 ); //TODO \u8bc4\u8bba\u6570 videoVo . setHasFocus ( 0 ); //TODO \u662f\u5426\u5173\u6ce8 videoVo . setHasLiked ( 0 ); //TODO \u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 videoVo . setLikeCount ( 0 ); //TODO \u70b9\u8d5e\u6570 //\u586b\u5145\u7528\u6237\u4fe1\u606f for ( UserInfo userInfo : userInfoList ) { if ( ObjectUtil . equals ( videoVo . getUserId (), userInfo . getUserId ())) { videoVo . setNickname ( userInfo . getNickName ()); videoVo . setAvatar ( userInfo . getLogo ()); break ; } } videoVoList . add ( videoVo ); } pageResult . setItems ( videoVoList ); return pageResult ; }","title":"9.2.3\u3001VideoService"},{"location":"tantan/day05/#925","text":"\u53ef\u4ee5\u770b\u5230\u5df2\u7ecf\u67e5\u8be2\u5230\u6570\u636e\u3002\u4e0b\u9762\u4f7f\u7528\u624b\u673a\u8fdb\u884c\u6d4b\u8bd5\uff1a","title":"9.2.5\u3001\u6d4b\u8bd5"},{"location":"tantan/day05/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/","text":"\u72ec\u7acb\u5b8c\u6210\u5708\u5b50\u7684\u70b9\u8d5e\u529f\u80fd \u72ec\u7acb\u5b8c\u6210\u5708\u5b50\u7684\u559c\u6b22\u529f\u80fd \u72ec\u7acb\u5b8c\u6210\u5708\u5b50\u7684\u8bc4\u8bba\u529f\u80fd \u4e86\u89e3\u5c0f\u89c6\u9891\u7684\u529f\u80fd \u4e86\u89e3FastDFS\u662f\u4ec0\u4e48 \u72ec\u7acb\u5b8c\u6210\u5c0f\u89c6\u9891\u7684\u53d1\u5e03 \u72ec\u7acb\u5b8c\u6210\u5c0f\u89c6\u9891\u7684\u67e5\u8be2","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"tantan/day06/","text":"\u8bfe\u7a0b\u8bf4\u660e \u00b6 \u5b9e\u73b0\u89c6\u9891\u70b9\u8d5e\u3001\u8bc4\u8bba\u3001\u5173\u6ce8\u529f\u80fd \u4e86\u89e3\u4ec0\u4e48\u662f\u5373\u65f6\u901a\u4fe1 \u4e86\u89e3\u63a2\u82b1\u4ea4\u53cb\u7684\u6d88\u606f\u529f\u80fd \u4e86\u89e3\u5373\u65f6\u901a\u4fe1\u7684\u6280\u672f\u65b9\u6848 \u4e86\u89e3\u73af\u4fe1\u7684\u5373\u65f6\u901a\u8baf \u5b9e\u73b0\u73af\u4fe1\u7684\u7528\u6237\u4f53\u7cfb\u96c6\u6210 \u5b9e\u73b0\u6dfb\u52a0\u8054\u7cfb\u4eba\u3001\u8054\u7cfb\u4eba\u5217\u8868\u529f\u80fd 1\u3001\u89c6\u9891\u70b9\u8d5e \u00b6 \u70b9\u8d5e\u903b\u8f91\u4e0e\u5708\u5b50\u70b9\u8d5e\u903b\u8f91\u4e00\u81f4\uff0c\u6240\u4ee5\u53ef\u4ee5\u590d\u7528\u5708\u5b50\u70b9\u8d5e\u7684\u903b\u8f91\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u70b9\u8d5e\u5bf9\u8c61\u662fVideo\uff0c\u8bbe\u7f6epublishUserId\u7684\u903b\u8f91\u4e5f\u9700\u8981\u5b8c\u5584\u4e0b\u3002 1.1\u3001dubbo\u670d\u52a1 \u00b6 \u4fee\u6539\u4fdd\u5b58Comment\u903b\u8f91\uff0c\u5728\u539f\u6709\u903b\u8f91\u4e2d\u589e\u52a0\u5bf9\u5c0f\u89c6\u9891\u7684\u652f\u6301\uff1a //com.tanhua.dubbo.server.api.QuanZiApiImpl /** * \u4fdd\u5b58Comment * * @return */ private Boolean saveComment ( Long userId , String publishId , CommentType commentType , String content ) { try { Comment comment = new Comment (); comment . setId ( ObjectId . get ()); comment . setUserId ( userId ); comment . setPublishId ( new ObjectId ( publishId )); // \u8bc4\u8bba\u7c7b\u578b comment . setCommentType ( commentType . getType ()); // \u5185\u5bb9 comment . setContent ( content ); comment . setCreated ( System . currentTimeMillis ()); Publish publish = this . queryPublishById ( publishId ); if ( ObjectUtil . isNotEmpty ( publish )) { comment . setPublishUserId ( publish . getUserId ()); } else { //\u67e5\u8be2\u8bc4\u8bba Comment myComment = this . queryCommentById ( publishId ); if ( ObjectUtil . isNotEmpty ( myComment )){ comment . setPublishUserId ( myComment . getUserId ()); } else { //\u67e5\u8be2\u5c0f\u89c6\u9891 Video video = this . videoApi . queryVideoById ( publishId ); if ( ObjectUtil . isNotEmpty ( video )){ comment . setPublishUserId ( video . getUserId ()); } else { // \u5176\u4ed6\u60c5\u51b5\uff0c\u76f4\u63a5\u8fd4\u56de return false ; } } } this . mongoTemplate . save ( comment ); return true ; } catch ( Exception e ) { log . error ( \"\u4fdd\u5b58Comment\u51fa\u9519~ userId = \" + userId + \", publishId = \" + publishId + \", commentType = \" + commentType , e ); } return false ; } \u5728VideoApi\u4e2d\u5b9a\u4e49\u6839\u636eid\u67e5\u8be2Video\u7684\u65b9\u6cd5\uff1a // com.tanhua.dubbo.server.api.VideoApi /** * \u6839\u636eid\u67e5\u8be2\u89c6\u9891\u5bf9\u8c61 * * @param videoId \u5c0f\u89c6\u9891id * @return */ Video queryVideoById ( String videoId ); \u7f16\u5199\u5b9e\u73b0\uff1a // com.tanhua.dubbo.server.api.VideoApiImpl @Override public Video queryVideoById ( String videoId ) { return this . mongoTemplate . findById ( new ObjectId ( videoId ), Video . class ); } 1.2\u3001APP\u63a5\u53e3\u670d\u52a1 \u00b6 \u63a5\u53e3\u5730\u5740\uff1a \u70b9\u8d5e https://mock-java.itheima.net/project/35/interface/api/827 \u53d6\u6d88\u70b9\u8d5e\uff1ahttps://mock-java.itheima.net/project/35/interface/api/833 1.2.1\u3001VideoController \u00b6 /** * \u89c6\u9891\u70b9\u8d5e * * @param videoId \u89c6\u9891id * @return */ @PostMapping ( \"/{id}/like\" ) public ResponseEntity < Long > likeComment ( @PathVariable ( \"id\" ) String videoId ) { try { Long likeCount = this . videoService . likeComment ( videoId ); if ( likeCount != null ) { return ResponseEntity . ok ( likeCount ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u53d6\u6d88\u70b9\u8d5e * * @param videoId * @return */ @PostMapping ( \"/{id}/dislike\" ) public ResponseEntity < Long > disLikeComment ( @PathVariable ( \"id\" ) String videoId ) { try { Long likeCount = this . videoService . disLikeComment ( videoId ); if ( null != likeCount ) { return ResponseEntity . ok ( likeCount ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 1.2.2\u3001VideoService \u00b6 //com.tanhua.server.service.VideoService /** * \u70b9\u8d5e * * @param videoId * @return */ public Long likeComment ( String videoId ) { User user = UserThreadLocal . get (); Boolean result = this . quanZiApi . likeComment ( user . getId (), videoId ); if ( result ) { return this . quanZiApi . queryLikeCount ( videoId ); } return null ; } /** * \u53d6\u6d88\u70b9\u8d5e * * @param videoId * @return */ public Long disLikeComment ( String videoId ) { User user = UserThreadLocal . get (); Boolean result = this . quanZiApi . disLikeComment ( user . getId (), videoId ); if ( result ) { return this . quanZiApi . queryLikeCount ( videoId ); } return null ; } 1.2.3\u3001\u4fee\u6539\u70b9\u8d5e\u6570\u67e5\u8be2 \u00b6 \u5728\u67e5\u8be2\u5c0f\u89c6\u9891\u5217\u8868\u4e2d\uff0c\u9700\u8981\u5b8c\u5584\u4e4b\u524dTODO\u7684\u90e8\u5206\u3002 //com.tanhua.server.service.VideoService public PageResult queryVideoList ( Integer page , Integer pageSize ) { User user = UserThreadLocal . get (); PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); PageInfo < Video > pageInfo = this . videoApi . queryVideoList ( user . getId (), page , pageSize ); List < Video > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )) { return pageResult ; } //\u67e5\u8be2\u7528\u6237\u4fe1\u606f List < Object > userIds = CollUtil . getFieldValues ( records , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIds ); List < VideoVo > videoVoList = new ArrayList <> (); for ( Video record : records ) { VideoVo videoVo = new VideoVo (); videoVo . setUserId ( record . getUserId ()); videoVo . setCover ( record . getPicUrl ()); videoVo . setVideoUrl ( record . getVideoUrl ()); videoVo . setId ( record . getId (). toHexString ()); videoVo . setSignature ( \"\u6211\u5c31\u662f\u6211~\" ); //TODO \u7b7e\u540d videoVo . setCommentCount ( 0 ); //TODO \u8bc4\u8bba\u6570 videoVo . setHasFocus ( 0 ); //TODO \u662f\u5426\u5173\u6ce8 videoVo . setHasLiked ( this . quanZiApi . queryUserIsLike ( user . getId (), videoVo . getId ()) ? 1 : 0 ); //\u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 videoVo . setLikeCount ( Convert . toInt ( this . quanZiApi . queryLikeCount ( videoVo . getId ()))); //\u70b9\u8d5e\u6570 //\u586b\u5145\u7528\u6237\u4fe1\u606f for ( UserInfo userInfo : userInfoList ) { if ( ObjectUtil . equals ( videoVo . getUserId (), userInfo . getUserId ())) { videoVo . setNickname ( userInfo . getNickName ()); videoVo . setAvatar ( userInfo . getLogo ()); break ; } } videoVoList . add ( videoVo ); } pageResult . setItems ( videoVoList ); return pageResult ; } 2\u3001\u89c6\u9891\u8bc4\u8bba \u00b6 \u5c0f\u89c6\u9891\u7684\u8bc4\u8bba\u4e0e\u5708\u5b50\u7684\u8bc4\u8bba\u903b\u8f91\u7c7b\u4f3c\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u4f7f\u7528\u540c\u4e00\u5957\u903b\u8f91\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5f00\u53d1APP\u63a5\u53e3\u529f\u80fd\u5373\u53ef\u3002 \u8bc4\u8bba\u76f8\u5173\u7684\u63a5\u53e3\u5b9a\u4e49\uff1a \u53d1\u5e03\u8bc4\u8bba\uff1ahttps://mock-java.itheima.net/project/35/interface/api/857 \u8bc4\u8bba\u5217\u8868\uff1ahttps://mock-java.itheima.net/project/35/interface/api/851 \u8bc4\u8bba\u70b9\u8d5e\uff1ahttps://mock-java.itheima.net/project/35/interface/api/863 \u8bc4\u8bba\u53d6\u6d88\u70b9\u8d5e\uff1ahttps://mock-java.itheima.net/project/35/interface/api/869 2.1\u3001VideoController \u00b6 //com.tanhua.server.controller.VideoController /** * \u8bc4\u8bba\u5217\u8868 */ @GetMapping ( \"/{id}/comments\" ) public ResponseEntity < PageResult > queryCommentsList ( @PathVariable ( \"id\" ) String videoId , @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize ) { try { PageResult pageResult = this . videoService . queryCommentList ( videoId , page , pageSize ); return ResponseEntity . ok ( pageResult ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u63d0\u4ea4\u8bc4\u8bba * * @param param * @param videoId * @return */ @PostMapping ( \"/{id}/comments\" ) public ResponseEntity < Void > saveComments ( @RequestBody Map < String , String > param , @PathVariable ( \"id\" ) String videoId ) { try { String content = param . get ( \"comment\" ); Boolean result = this . videoService . saveComment ( videoId , content ); if ( result ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u8bc4\u8bba\u70b9\u8d5e * * @param videoCommentId \u89c6\u9891\u4e2d\u7684\u8bc4\u8bbaid * @return */ @PostMapping ( \"/comments/{id}/like\" ) public ResponseEntity < Long > commentsLikeComment ( @PathVariable ( \"id\" ) String videoCommentId ) { try { Long likeCount = this . videoService . likeComment ( videoCommentId ); if ( likeCount != null ) { return ResponseEntity . ok ( likeCount ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u8bc4\u8bba\u53d6\u6d88\u70b9\u8d5e * * @param videoCommentId \u89c6\u9891\u4e2d\u7684\u8bc4\u8bbaid * @return */ @PostMapping ( \"/comments/{id}/dislike\" ) public ResponseEntity < Long > disCommentsLikeComment ( @PathVariable ( \"id\" ) String videoCommentId ) { try { Long likeCount = this . videoService . disLikeComment ( videoCommentId ); if ( null != likeCount ) { return ResponseEntity . ok ( likeCount ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 2.2\u3001VideoService \u00b6 // com.tanhua.server.service.VideoService public PageResult queryCommentList ( String videoId , Integer page , Integer pageSize ) { return this . quanZiService . queryCommentList ( videoId , page , pageSize ); } public Boolean saveComment ( String videoId , String content ) { return this . quanZiService . saveComments ( videoId , content ); } 2.3\u3001\u67e5\u8be2\u8bc4\u8bba\u6570 \u00b6 \u5728\u5c0f\u89c6\u9891\u5217\u8868\u67e5\u8be2\u7ed3\u679c\u4e2d\uff0c\u9700\u8981\u8fd4\u56de\u8be5\u89c6\u9891\u7684\u8bc4\u8bba\u6570\u636e\uff0c\u7531\u4e8e\u4e4b\u524d\u5728dubbo\u670d\u52a1\u4e2d\u6ca1\u6709\u63d0\u4f9b\u67e5\u8be2\u65b9\u6cd5\uff0c\u6240\u4ee5\u9700\u8981\u5148\u5b9e\u73b0\u67e5\u8be2\u65b9\u6cd5\u3002 2.3.1\u3001dubbo\u670d\u52a1 \u00b6 2.3.1.1\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 //com.tanhua.dubbo.server.api.QuanZiApi /** * \u67e5\u8be2\u8bc4\u8bba\u6570 * * @param publishId * @return */ Long queryCommentCount ( String publishId ); 2.3.1.2\u3001\u7f16\u5199\u5b9e\u73b0 \u00b6 // com.tanhua.dubbo.server.api.QuanZiApiImpl @Override public Long queryCommentCount ( String publishId ) { return this . queryCommentCount ( publishId , CommentType . COMMENT ); } 2.3.2\u3001\u67e5\u8be2\u8bc4\u8bba\u6570 \u00b6 //com.tanhua.server.service.VideoService public PageResult queryVideoList ( Integer page , Integer pageSize ) { User user = UserThreadLocal . get (); PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); PageInfo < Video > pageInfo = this . videoApi . queryVideoList ( user . getId (), page , pageSize ); List < Video > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )) { return pageResult ; } //\u67e5\u8be2\u7528\u6237\u4fe1\u606f List < Object > userIds = CollUtil . getFieldValues ( records , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIds ); List < VideoVo > videoVoList = new ArrayList <> (); for ( Video record : records ) { VideoVo videoVo = new VideoVo (); videoVo . setUserId ( record . getUserId ()); videoVo . setCover ( record . getPicUrl ()); videoVo . setVideoUrl ( record . getVideoUrl ()); videoVo . setId ( record . getId (). toHexString ()); videoVo . setSignature ( \"\u6211\u5c31\u662f\u6211~\" ); //TODO \u7b7e\u540d videoVo . setCommentCount ( Convert . toInt ( this . quanZiApi . queryCommentCount ( videoVo . getId ()))); //\u8bc4\u8bba\u6570 videoVo . setHasFocus ( 0 ); //TODO \u662f\u5426\u5173\u6ce8 videoVo . setHasLiked ( this . quanZiApi . queryUserIsLike ( user . getId (), videoVo . getId ()) ? 1 : 0 ); //\u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 videoVo . setLikeCount ( Convert . toInt ( this . quanZiApi . queryLikeCount ( videoVo . getId ()))); //\u70b9\u8d5e\u6570 //\u586b\u5145\u7528\u6237\u4fe1\u606f for ( UserInfo userInfo : userInfoList ) { if ( ObjectUtil . equals ( videoVo . getUserId (), userInfo . getUserId ())) { videoVo . setNickname ( userInfo . getNickName ()); videoVo . setAvatar ( userInfo . getLogo ()); break ; } } videoVoList . add ( videoVo ); } pageResult . setItems ( videoVoList ); return pageResult ; } 2.4\u3001\u6d4b\u8bd5 \u00b6 3\u3001\u5173\u6ce8\u7528\u6237 \u00b6 \u5173\u6ce8\u7528\u6237\u662f\u5173\u6ce8\u5c0f\u89c6\u9891\u53d1\u5e03\u7684\u4f5c\u8005\uff0c\u9700\u8981\u5728dubbo\u670d\u52a1\u4e2d\u63d0\u4f9b\u7ed9\u76f8\u5173\u7684\u670d\u52a1\u3002 3.1\u3001dubbo\u670d\u52a1 \u00b6 3.1.1\u3001FollowUser \u00b6 package com.tanhua.dubbo.server.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.mongodb.core.mapping.Document ; /** * \u5173\u6ce8\u7528\u6237 */ @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"follow_user\" ) public class FollowUser implements java . io . Serializable { private static final long serialVersionUID = 3148619072405056052L ; private ObjectId id ; //\u4e3b\u952eid private Long userId ; //\u7528\u6237id private Long followUserId ; //\u5173\u6ce8\u7684\u7528\u6237id private Long created ; //\u5173\u6ce8\u65f6\u95f4 } 3.1.2\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 //com.tanhua.dubbo.server.api.VideoApi /** * \u5173\u6ce8\u7528\u6237 * * @param userId \u5f53\u524d\u7528\u6237 * @param followUserId \u5173\u6ce8\u7684\u76ee\u6807\u7528\u6237 * @return */ Boolean followUser ( Long userId , Long followUserId ); /** * \u53d6\u6d88\u5173\u6ce8\u7528\u6237 * * @param userId \u5f53\u524d\u7528\u6237 * @param followUserId \u5173\u6ce8\u7684\u76ee\u6807\u7528\u6237 * @return */ Boolean disFollowUser ( Long userId , Long followUserId ); /** * \u67e5\u8be2\u7528\u6237\u662f\u5426\u5173\u6ce8\u67d0\u4e2a\u7528\u6237 * * @param userId \u5f53\u524d\u7528\u6237 * @param followUserId \u5173\u6ce8\u7684\u76ee\u6807\u7528\u6237 * @return */ Boolean isFollowUser ( Long userId , Long followUserId ); 3.1.3\u3001\u7f16\u5199\u5b9e\u73b0 \u00b6 //com.tanhua.dubbo.server.api.VideoApiImpl private static final String VIDEO_FOLLOW_USER_KEY_PREFIX = \"VIDEO_FOLLOW_USER_\" ; @Override public Boolean followUser ( Long userId , Long followUserId ) { if ( ! ObjectUtil . isAllNotEmpty ( userId , followUserId )) { return false ; } try { //\u9700\u8981\u5c06\u7528\u6237\u7684\u5173\u6ce8\u5217\u8868\uff0c\u4fdd\u5b58\u5230redis\u4e2d\uff0c\u65b9\u4fbf\u540e\u7eed\u7684\u67e5\u8be2 //\u4f7f\u7528redis\u7684hash\u7ed3\u6784 if ( this . isFollowUser ( userId , followUserId )) { return false ; } FollowUser followUser = new FollowUser (); followUser . setId ( ObjectId . get ()); followUser . setUserId ( userId ); followUser . setFollowUserId ( followUserId ); followUser . setCreated ( System . currentTimeMillis ()); this . mongoTemplate . save ( followUser ); //\u4fdd\u5b58\u6570\u636e\u5230redis String redisKey = this . getVideoFollowUserKey ( userId ); String hashKey = String . valueOf ( followUserId ); this . redisTemplate . opsForHash (). put ( redisKey , hashKey , \"1\" ); return true ; } catch ( Exception e ) { e . printStackTrace (); } return false ; } @Override public Boolean disFollowUser ( Long userId , Long followUserId ) { if ( ! ObjectUtil . isAllNotEmpty ( userId , followUserId )) { return false ; } if ( ! this . isFollowUser ( userId , followUserId )) { return false ; } //\u53d6\u6d88\u5173\u6ce8\uff0c\u5220\u9664\u5173\u6ce8\u6570\u636e\u5373\u53ef Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId ) . and ( \"followUserId\" ). is ( followUserId ) ); DeleteResult result = this . mongoTemplate . remove ( query , FollowUser . class ); if ( result . getDeletedCount () > 0 ) { //\u540c\u65f6\u5220\u9664redis\u4e2d\u7684\u6570\u636e String redisKey = this . getVideoFollowUserKey ( userId ); String hashKey = String . valueOf ( followUserId ); this . redisTemplate . opsForHash (). delete ( redisKey , hashKey ); return true ; } return false ; } @Override public Boolean isFollowUser ( Long userId , Long followUserId ) { String redisKey = this . getVideoFollowUserKey ( userId ); String hashKey = String . valueOf ( followUserId ); return this . redisTemplate . opsForHash (). hasKey ( redisKey , hashKey ); } private String getVideoFollowUserKey ( Long userId ) { return VIDEO_FOLLOW_USER_KEY_PREFIX + userId ; } 3.2\u3001APP\u670d\u52a1 \u00b6 \u5173\u6ce8\u7528\u6237\uff1ahttps://mock-java.itheima.net/project/35/interface/api/839 \u53d6\u6d88\u5173\u6ce8\uff1ahttps://mock-java.itheima.net/project/35/interface/api/845 3.2.1\u3001VideoController \u00b6 //com.tanhua.server.controller.VideoController /** * \u89c6\u9891\u7528\u6237\u5173\u6ce8 */ @PostMapping ( \"/{id}/userFocus\" ) public ResponseEntity < Void > saveUserFocusComments ( @PathVariable ( \"id\" ) Long userId ) { try { Boolean bool = this . videoService . followUser ( userId ); if ( bool ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u53d6\u6d88\u89c6\u9891\u7528\u6237\u5173\u6ce8 */ @PostMapping ( \"/{id}/userUnFocus\" ) public ResponseEntity < Void > saveUserUnFocusComments ( @PathVariable ( \"id\" ) Long userId ) { try { Boolean bool = this . videoService . disFollowUser ( userId ); if ( bool ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 3.2.2\u3001VideoService \u00b6 //com.tanhua.server.service.VideoService /** * \u5173\u6ce8\u7528\u6237 * * @param userId * @return */ public Boolean followUser ( Long userId ) { User user = UserThreadLocal . get (); return this . videoApi . followUser ( user . getId (), userId ); } /** * \u53d6\u6d88\u5173\u6ce8 * * @param userId * @return */ public Boolean disFollowUser ( Long userId ) { User user = UserThreadLocal . get (); return this . videoApi . disFollowUser ( user . getId (), userId ); } 3.2.3\u3001\u67e5\u8be2\u662f\u5426\u5173\u6ce8 \u00b6 //com.tanhua.server.service.VideoService public PageResult queryVideoList ( Integer page , Integer pageSize ) { User user = UserThreadLocal . get (); PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); PageInfo < Video > pageInfo = this . videoApi . queryVideoList ( user . getId (), page , pageSize ); List < Video > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )) { return pageResult ; } //\u67e5\u8be2\u7528\u6237\u4fe1\u606f List < Object > userIds = CollUtil . getFieldValues ( records , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIds ); List < VideoVo > videoVoList = new ArrayList <> (); for ( Video record : records ) { VideoVo videoVo = new VideoVo (); videoVo . setUserId ( record . getUserId ()); videoVo . setCover ( record . getPicUrl ()); videoVo . setVideoUrl ( record . getVideoUrl ()); videoVo . setId ( record . getId (). toHexString ()); videoVo . setSignature ( \"\u6211\u5c31\u662f\u6211~\" ); //TODO \u7b7e\u540d videoVo . setCommentCount ( Convert . toInt ( this . quanZiApi . queryCommentCount ( videoVo . getId ()))); //\u8bc4\u8bba\u6570 videoVo . setHasFocus ( this . videoApi . isFollowUser ( user . getId (), videoVo . getUserId ()) ? 1 : 0 ); //\u662f\u5426\u5173\u6ce8 videoVo . setHasLiked ( this . quanZiApi . queryUserIsLike ( user . getId (), videoVo . getId ()) ? 1 : 0 ); //\u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 videoVo . setLikeCount ( Convert . toInt ( this . quanZiApi . queryLikeCount ( videoVo . getId ()))); //\u70b9\u8d5e\u6570 //\u586b\u5145\u7528\u6237\u4fe1\u606f for ( UserInfo userInfo : userInfoList ) { if ( ObjectUtil . equals ( videoVo . getUserId (), userInfo . getUserId ())) { videoVo . setNickname ( userInfo . getNickName ()); videoVo . setAvatar ( userInfo . getLogo ()); break ; } } videoVoList . add ( videoVo ); } pageResult . setItems ( videoVoList ); return pageResult ; } 3.3\u3001\u6d4b\u8bd5 \u00b6 \u53ef\u4ee5\u770b\u5230\uff0c\u5df2\u7ecf\u5b8c\u6210\u4e86\u5173\u6ce8\u7528\u6237\u3002 4\u3001\u5373\u65f6\u901a\u4fe1 \u00b6 4.1\u3001\u4ec0\u4e48\u662f\u5373\u65f6\u901a\u4fe1\uff1f \u00b6 4.2\u3001\u529f\u80fd\u8bf4\u660e \u00b6 \u5728\u63a2\u82b1\u4ea4\u53cb\u9879\u76ee\u4e2d\u4e5f\u63d0\u4f9b\u4e86\u7c7b\u4f3c\u5fae\u4fe1\u7684\u804a\u5929\u529f\u80fd\uff0c\u7528\u6237\u53ef\u4ee5\u548c\u597d\u53cb\u6216\u964c\u751f\u4eba\u804a\u5929\u3002 \u5982\u679c\u662f\u964c\u751f\u4eba\uff0c\u901a\u8fc7\u300a\u804a\u4e00\u4e0b\u300b\u529f\u80fd\u8fdb\u884c\u6253\u62db\u547c\uff0c\u5982\u679c\u5bf9\u65b9\u540c\u610f\u540e\uff0c\u5c31\u6210\u4e3a\u4e86\u597d\u53cb\uff0c\u53ef\u4ee5\u8fdb\u884c\u804a\u5929\u4e86\u3002 \u964c\u751f\u4eba\u4e4b\u95f4\u5982\u679c\u76f8\u4e92\u559c\u6b22\uff0c\u90a3\u4e48\u5c31\u4f1a\u6210\u4e3a\u597d\u53cb\uff0c\u4e5f\u5c31\u53ef\u4ee5\u804a\u5929\u4e86\u3002 \u5728\u6d88\u606f\u754c\u9762\u4e2d\u4e5f\u53ef\u4ee5\u67e5\u770b\uff1a\u70b9\u8d5e\u3001\u8bc4\u8bba\u3001\u559c\u6b22\u3001\u516c\u544a\u7b49\u6d88\u606f\u4fe1\u606f\u3002 5\u3001\u6280\u672f\u65b9\u6848 \u00b6 \u5bf9\u4e8e\u9ad8\u5e76\u53d1\u7684\u5373\u65f6\u901a\u8baf\u5b9e\u73b0\uff0c\u8fd8\u662f\u5f88\u6709\u6311\u6218\u7684\uff0c\u6240\u9700\u8981\u8003\u8651\u7684\u70b9\u975e\u5e38\u591a\uff0c\u9664\u4e86\u8981\u5b9e\u73b0\u529f\u80fd\uff0c\u8fd8\u8981\u8003\u8651\u5e76\u53d1\u3001\u6d41\u91cf\u3001\u8d1f\u8f7d\u3001\u670d\u52a1\u5668\u3001\u5bb9\u707e\u7b49\u7b49\u3002\u867d\u7136\u6709\u96be\u5ea6\u4e5f\u5e76\u4e0d\u662f\u9ad8\u4e0d\u53ef\u6500\u3002 \u5bf9\u4e8e\u73b0\u5b9e\u5373\u65f6\u901a\u8baf\u5f80\u5f80\u6709\u4e24\u79cd\u65b9\u6848\uff1a \u65b9\u6848\u4e00\uff1a \u81ea\u4e3b\u5b9e\u73b0\uff0c\u4ece\u8bbe\u8ba1\u5230\u67b6\u6784\uff0c\u518d\u5230\u5b9e\u73b0\u3002 \u6280\u672f\u65b9\u9762\u53ef\u4ee5\u91c7\u7528\uff1aNetty + WebSocket + RocketMQ + MongoDB + Redis + ZooKeeper + MySQL \u65b9\u6848\u4e8c\uff1a \u5bf9\u63a5\u7b2c\u4e09\u65b9\u670d\u52a1\u5b8c\u6210\u3002 \u8fd9\u79cd\u65b9\u5f0f\u7b80\u5355\uff0c\u53ea\u9700\u8981\u6309\u7167\u7b2c\u4e09\u65b9\u7684api\u8fdb\u884c\u5bf9\u63a5\u5c31\u53ef\u4ee5\u4e86\u3002 \u5982\uff1a\u73af\u4fe1\u3001\u7f51\u6613\u3001\u5bb9\u8054\u4e91\u901a\u8baf\u7b49\u3002 \u5982\u4f55\u9009\u62e9\u5462\uff1f \u5982\u679c\u662f\u4e2d\u5927\u578b\u4f01\u4e1a\u505a\u9879\u76ee\u53ef\u4ee5\u9009\u62e9\u81ea\u4e3b\u7814\u53d1\uff0c\u5982\u679c\u662f\u4e2d\u5c0f\u578b\u4f01\u4e1a\u7814\u53d1\u4e2d\u5c0f\u578b\u7684\u9879\u76ee\uff0c\u9009\u62e9\u7b2c\u4e8c\u79cd\u65b9\u6848\u5373\u53ef\u3002\u65b9\u6848\u4e00\u9700\u8981\u6709\u5927\u91cf\u7684\u4eba\u529b\u3001\u7269\u529b\u7684\u652f\u6301\uff0c\u5f00\u53d1\u5468\u671f\u957f\uff0c\u6210\u672c\u9ad8\uff0c\u4f46\u53ef\u63a7\u6027\u5f3a\u3002\u65b9\u6848\u4e8c\uff0c\u6210\u672c\u4f4e\uff0c\u5f00\u53d1\u5468\u671f\u77ed\uff0c\u80fd\u591f\u5feb\u901f\u7684\u96c6\u6210\u8d77\u6765\u8fdb\u884c\u529f\u80fd\u7684\u5f00\u53d1\uff0c\u53ea\u662f\u5728\u53ef\u63a7\u6027\u65b9\u9762\u6765\u8bf4\u5c31\u5dee\u4e86\u4e00\u4e9b\u3002 \u63a2\u82b1\u4ea4\u53cb\u9879\u76ee\u9009\u62e9\u65b9\u6848\u4e8c\u8fdb\u884c\u5b9e\u73b0\u3002 6\u3001\u73af\u4fe1 \u00b6 \u5b98\u7f51\uff1ahttps://www.easemob.com/ \u7a33\u5b9a\u5065\u58ee\uff0c\u6d88\u606f\u5fc5\u8fbe\uff0c\u4ebf\u7ea7\u5e76\u53d1\u7684\u5373\u65f6\u901a\u8baf\u4e91 \u73af\u4fe1\u5e73\u53f0\u4e3a\u9ed1\u9a6c\u5b66\u5458\u5f00\u8bbe\u7684\u4e13\u7528\u6ce8\u518c\u5730\u5740\uff1ahttps://datayi.cn/w/woVL50vR 6.1\u3001\u5f00\u53d1\u7b80\u4ecb \u00b6 \u6587\u6863\u5730\u5740\uff1ahttp://docs-im.easemob.com/ \u5e73\u53f0\u67b6\u6784\uff1a \u96c6\u6210\uff1a \u73af\u4fe1\u548c\u7528\u6237\u4f53\u7cfb\u7684\u96c6\u6210\u4e3b\u8981\u53d1\u751f\u57282\u4e2a\u5730\u65b9\uff0c\u670d\u52a1\u5668\u7aef\u96c6\u6210\u548c\u5ba2\u6237\u7aef\u96c6\u6210\u3002 \u63a2\u82b1\u96c6\u6210\uff1a \u63a2\u82b1\u524d\u7aef\u4f7f\u7528AndroidSDK\u8fdb\u884c\u96c6\u6210 \u6587\u6863\uff1ahttp://docs-im.easemob.com/im/android/sdk/import \u540e\u7aef\u96c6\u6210\u7528\u6237\u4f53\u7cfb \u6587\u6863\uff1ahttp://docs-im.easemob.com/im/server/ready/user 6.2\u3001\u73af\u4fe1Console \u00b6 \u9700\u8981\u4f7f\u7528\u73af\u4fe1\u5e73\u53f0\uff0c\u90a3\u4e48\u5fc5\u987b\u8981\u8fdb\u884c\u6ce8\u518c\uff0c\u767b\u5f55\u4e4b\u540e\u5373\u53ef\u521b\u5efa\u5e94\u7528\u3002\u73af\u4fe1100\u4ee5\u5185\u7684\u7528\u6237\u514d\u8d39\u4f7f\u7528\uff0c100\u4ee5\u4e0a\u5c31\u8981\u6ce8\u518c\u4f01\u4e1a\u7248\u4e86\u3002 \u4f01\u4e1a\u7248\u4ef7\u683c\uff1a \u521b\u5efa\u5e94\u7528\uff1a \u521b\u5efa\u5b8c\u6210\uff1a 6.3\u3001\u6574\u4f53\u6d41\u7a0b\u56fe \u00b6 \u8bf4\u660e\uff1a \u5728APP\u7aef\u4e0e\u540e\u7aef\u7cfb\u7edf\uff0c\u90fd\u9700\u8981\u5b8c\u6210\u4e0e\u73af\u4fe1\u7684\u96c6\u6210\u3002 \u5728APP\u7aef\uff0c\u4f7f\u7528Android\u7684SDK\u4e0e\u73af\u4fe1\u8fdb\u884c\u901a\u4fe1\uff0c\u901a\u4fe1\u65f6\u9700\u8981\u901a\u8fc7\u540e\u53f0\u7cfb\u7edf\u7684\u63a5\u53e3\u67e5\u8be2\u5f53\u524d\u7528\u6237\u7684\u73af\u4fe1\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u8fdb\u884c\u767b\u5f55\u73af\u4fe1\u3002 \u540e\u53f0\u7cfb\u7edf\uff0c\u5728\u7528\u6237\u6ce8\u518c\u540e\uff0c\u540c\u6b65\u6ce8\u518c\u73af\u4fe1\u7528\u6237\u5230\u73af\u4fe1\u5e73\u53f0\uff0c\u5728\u540e\u53f0\u7cfb\u7edf\u4e2d\u4fdd\u5b58\u73af\u4fe1\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 APP\u62ff\u5230\u7528\u6237\u540d\u548c\u5bc6\u7801\u540e\uff0c\u8fdb\u884c\u767b\u5f55\u73af\u4fe1\uff0c\u767b\u5f55\u6210\u529f\u540e\u5373\u53ef\u5411\u73af\u4fe1\u53d1\u9001\u6d88\u606f\u7ed9\u597d\u53cb\u3002 \u540e\u53f0\u7cfb\u7edf\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7ba1\u7406\u5458\u7684\u8eab\u4efd\u7ed9\u7528\u6237\u53d1\u9001\u7cfb\u7edf\u4fe1\u606f\u3002 7\u3001\u83b7\u53d6\u7ba1\u7406\u5458\u6743\u9650 \u00b6 \u73af\u4fe1\u63d0\u4f9b\u7684 REST API \u9700\u8981\u6743\u9650\u624d\u80fd\u8bbf\u95ee\uff0c\u6743\u9650\u901a\u8fc7\u53d1\u9001 HTTP \u8bf7\u6c42\u65f6\u643a\u5e26 token \u6765\u4f53\u73b0\u3002 \u5b98\u65b9\u6587\u6863\uff1a \u83b7\u53d6\u7ba1\u7406\u5458\u6743\u9650 \u4e0e\u73af\u4fe1\u7684\u96c6\u6210\uff0c\u6211\u4eec\u5c06\u76f8\u5173\u7684\u4ee3\u7801\u903b\u8f91\u5199\u5165\u5230\u65b0\u7684dubbo\u5de5\u7a0b\u4e2d\uff0c\u540d\u5b57\u53eb\uff1amy-tanhua-dubbo-huanxin\u3002 7.1\u3001\u521b\u5efadubbo\u5de5\u7a0b \u00b6 pom.xml\uff1a <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> my-tanhua-dubbo </artifactId> <groupId> cn.itcast.tanhua </groupId> <version> 1.0-SNAPSHOT </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> my-tanhua-dubbo-huanxin </artifactId> <dependencies> <!--\u5f15\u5165interface\u4f9d\u8d56--> <dependency> <groupId> cn.itcast.tanhua </groupId> <artifactId> my-tanhua-dubbo-interface </artifactId> <version> 1.0-SNAPSHOT </version> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-redis </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-test </artifactId> <scope> test </scope> </dependency> <dependency> <groupId> com.baomidou </groupId> <artifactId> mybatis-plus </artifactId> </dependency> <dependency> <groupId> com.baomidou </groupId> <artifactId> mybatis-plus-boot-starter </artifactId> </dependency> <dependency> <groupId> mysql </groupId> <artifactId> mysql-connector-java </artifactId> </dependency> <!--dubbo\u7684springboot\u652f\u6301--> <dependency> <groupId> com.alibaba.boot </groupId> <artifactId> dubbo-spring-boot-starter </artifactId> </dependency> <!--dubbo\u6846\u67b6--> <dependency> <groupId> com.alibaba </groupId> <artifactId> dubbo </artifactId> </dependency> <!--zk\u4f9d\u8d56--> <dependency> <groupId> org.apache.zookeeper </groupId> <artifactId> zookeeper </artifactId> </dependency> <dependency> <groupId> com.github.sgroschupf </groupId> <artifactId> zkclient </artifactId> </dependency> <dependency> <groupId> io.netty </groupId> <artifactId> netty-all </artifactId> </dependency> <dependency> <groupId> cn.hutool </groupId> <artifactId> hutool-all </artifactId> </dependency> </dependencies> </project> application.properties: # Spring boot application spring.application.name = itcast-tanhua-dubbo-huanxin # dubbo \u626b\u63cf\u5305\u914d\u7f6e dubbo.scan.basePackages = com.tanhua.dubbo.server dubbo.application.name = dubbo-provider-huanxin #dubbo \u5bf9\u5916\u66b4\u9732\u7684\u7aef\u53e3\u4fe1\u606f dubbo.protocol.name = dubbo dubbo.protocol.port = 20881 #dubbo\u6ce8\u518c\u4e2d\u5fc3\u7684\u914d\u7f6e dubbo.registry.address = zookeeper://192.168.31.81:2181 dubbo.registry.client = zkclient dubbo.registry.timeout = 60000 # Redis\u76f8\u5173\u914d\u7f6e spring.redis.jedis.pool.max-wait = 5000ms spring.redis.jedis.pool.max-Idle = 100 spring.redis.jedis.pool.min-Idle = 10 spring.redis.timeout = 10s spring.redis.cluster.nodes = 192.168.31.81:6379,192.168.31.81:6380,192.168.31.81:6381 spring.redis.cluster.max-redirects = 5 #\u6570\u636e\u5e93\u8fde\u63a5\u4fe1\u606f spring.datasource.driver-class-name = com.mysql.jdbc.Driver spring.datasource.url = jdbc:mysql://192.168.31.81:3306/mytanhua?useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true&useSSL=false spring.datasource.username = root spring.datasource.password = root # \u8868\u540d\u524d\u7f00 mybatis-plus.global-config.db-config.table-prefix = tb_ # id\u7b56\u7565\u4e3a\u81ea\u589e\u957f mybatis-plus.global-config.db-config.id-type = auto \u5165\u53e3\u542f\u52a8\u7c7b\uff1a package com.tanhua.dubbo.server ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration ; import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration ; @SpringBootApplication ( exclude = { MongoAutoConfiguration . class , MongoDataAutoConfiguration . class }) //\u6392\u9664mongo\u7684\u81ea\u52a8\u914d\u7f6e public class HuanXinDubboApplication { public static void main ( String [] args ) { SpringApplication . run ( HuanXinDubboApplication . class , args ); } } 7.2\u3001\u914d\u7f6e \u00b6 \u76f8\u5173\u7684\u914d\u7f6e\uff0c\u5728\u73af\u4fe1\u7ba1\u7406\u63a7\u5236\u53f0\u4e2d\uff0c\u53ef\u4ee5\u627e\u5230\u76f8\u5173\u7684\u53c2\u6570\u3002 #huanxin.properties tanhua.huanxin.url = http://a1.easemob.com/ tanhua.huanxin.orgName = 1105190515097562 tanhua.huanxin.appName = tanhua tanhua.huanxin.clientId = YXA67ZofwHblEems-_Fh-17T2g tanhua.huanxin.clientSecret = YXA60r45rNy2Ux5wQ7YYoEPwynHmUZk \u7f16\u5199\u914d\u7f6e\u7c7b\uff1a package com.tanhua.dubbo.server.config ; import lombok.Data ; import org.springframework.boot.context.properties.ConfigurationProperties ; import org.springframework.context.annotation.Configuration ; import org.springframework.context.annotation.PropertySource ; @Configuration @PropertySource ( \"classpath:huanxin.properties\" ) @ConfigurationProperties ( prefix = \"tanhua.huanxin\" ) @Data public class HuanXinConfig { private String url ; private String orgName ; private String appName ; private String clientId ; private String clientSecret ; } 7.3\u3001\u7f16\u5199\u5b9e\u73b0 \u00b6 \u5177\u4f53\u7684\u83b7\u53d6token\u7684\u4e1a\u52a1\u903b\u8f91\u5728TokenService\u4e2d\u5b8c\u6210\u3002\u5b9e\u73b0\u8981\u70b9\uff1a \u5206\u6790\u5b98\u65b9\u6587\u6863\u4e2d\u7684\u8bf7\u6c42url\u3001\u53c2\u6570\u3001\u54cd\u5e94\u6570\u636e\u7b49\u5185\u5bb9 \u8bf7\u6c42\u5230token\u9700\u8981\u7f13\u5b58\u5230redis\u4e2d\uff0c\u4e0d\u80fd\u9891\u7e41\u7684\u83b7\u53d6token\u64cd\u4f5c\uff0c\u53ef\u80fd\u4f1a\u88ab\u5c01\u53f7 package com.tanhua.dubbo.server.service ; import cn.hutool.core.util.StrUtil ; import cn.hutool.http.HttpRequest ; import cn.hutool.http.HttpResponse ; import cn.hutool.json.JSONObject ; import cn.hutool.json.JSONUtil ; import com.tanhua.dubbo.server.config.HuanXinConfig ; import lombok.extern.slf4j.Slf4j ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.redis.core.RedisTemplate ; import org.springframework.stereotype.Service ; import java.util.HashMap ; import java.util.Map ; import java.util.concurrent.TimeUnit ; @Service @Slf4j public class TokenService { @Autowired private RedisTemplate < String , String > redisTemplate ; private static final String REDIS_KEY = \"HX_TOKEN\" ; @Autowired private HuanXinConfig huanXinConfig ; /** * \u83b7\u53d6token\uff0c\u5148\u4eceredis\u4e2d\u83b7\u53d6\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u518d\u53bb\u73af\u4fe1\u63a5\u53e3\u83b7\u53d6 * * @return */ public String getToken () { String token = this . redisTemplate . opsForValue (). get ( REDIS_KEY ); if ( StrUtil . isNotEmpty ( token )) { return token ; } //\u8bbf\u95ee\u73af\u4fe1\u63a5\u53e3\u83b7\u53d6token return this . refreshToken (); } /** * \u5237\u65b0token\uff0c\u8bf7\u6c42\u73af\u4fe1\u63a5\u53e3\uff0c\u5c06token\u5b58\u50a8\u5230redis\u4e2d * * @return */ public String refreshToken () { String targetUrl = this . huanXinConfig . getUrl () + this . huanXinConfig . getOrgName () + \"/\" + this . huanXinConfig . getAppName () + \"/token\" ; Map < String , Object > param = new HashMap <> (); param . put ( \"grant_type\" , \"client_credentials\" ); param . put ( \"client_id\" , this . huanXinConfig . getClientId ()); param . put ( \"client_secret\" , this . huanXinConfig . getClientSecret ()); HttpResponse response = HttpRequest . post ( targetUrl ) . body ( JSONUtil . toJsonStr ( param )) . timeout ( 20000 ) //\u8bf7\u6c42\u8d85\u65f6\u65f6\u95f4 . execute (); if ( ! response . isOk ()) { log . error ( \"\u5237\u65b0token\u5931\u8d25~~~ \" ); return null ; } String jsonBody = response . body (); JSONObject jsonObject = JSONUtil . parseObj ( jsonBody ); String token = jsonObject . getStr ( \"access_token\" ); if ( StrUtil . isNotEmpty ( token )) { //\u5c06token\u6570\u636e\u7f13\u5b58\u5230redis\u4e2d\uff0c\u7f13\u5b58\u65f6\u95f4\u7531expires_in\u51b3\u5b9a //\u63d0\u524d1\u5c0f\u65f6\u5931\u6548 long timeout = jsonObject . getLong ( \"expires_in\" ) - 3600 ; this . redisTemplate . opsForValue (). set ( REDIS_KEY , token , timeout , TimeUnit . SECONDS ); return token ; } return null ; } } 7.4\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 \u63a5\u53e3\u5b9a\u4e49\u5728my-tanhua-dubbo-interface\u5de5\u7a0b\u4e2d\u3002 package com.tanhua.dubbo.server.api ; /** * \u4e0e\u73af\u4fe1\u5e73\u53f0\u96c6\u6210\u7684\u76f8\u5173\u64cd\u4f5c */ public interface HuanXinApi { /** * \u83b7\u53d6\u73af\u4fe1token\uff08\u83b7\u53d6\u7ba1\u7406\u5458\u6743\u9650\uff09 * \u53c2\u89c1\uff1ahttp://docs-im.easemob.com/im/server/ready/user#%E8%8E%B7%E5%8F%96%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90 * * @return */ String getToken (); } 7.5\u3001\u5b9e\u73b0\u63a5\u53e3 \u00b6 \u5728my-tanhua-dubbo-huanxin\u4e2d\u5b8c\u6210\u3002 package com.tanhua.dubbo.server.api ; @Service ( version = \"1.0.0\" ) @Slf4j public class HuanXinApiImpl implements HuanXinApi { @Autowired private TokenService tokenService ; @Override public String getToken () { return this . tokenService . getToken (); } } 7.6\u3001\u6d4b\u8bd5 \u00b6 package com.tanhua.dubbo.server ; import com.tanhua.dubbo.server.api.HuanXinApi ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @SpringBootTest @RunWith ( SpringRunner . class ) public class TestHuanXinApi { @Autowired private HuanXinApi huanXinApi ; @Test public void testGetToken (){ String token = this . huanXinApi . getToken (); System . out . println ( token ); } } \u6d4b\u8bd5\u7ed3\u679c\uff0c\u5df2\u7ecf\u4fdd\u5b58\u5230redis\u4e2d\u4e86\uff1a 8\u3001\u7528\u6237\u7cfb\u7edf\u96c6\u6210 \u00b6 \u4f7f\u7528\u73af\u4fe1\u5e73\u53f0\uff0c\u6700\u91cd\u8981\u7684\u5c31\u662f\u96c6\u6210\u7528\u6237\u4f53\u7cfb\uff0c\u57fa\u672c\u7684\u903b\u8f91\u662f\u8fd9\u6837\u7684\uff1a\u65b0\u7528\u6237\u5728\u6ce8\u518c\u540e\uff0c\u540c\u65f6\u9700\u8981\u6ce8\u518c\u73af\u4fe1\u7528\u6237\u3002 \u6d41\u7a0b\u5982\u4e0b\uff1a \u6d41\u7a0b\u8bf4\u660e\uff1a \u7528\u6237\u5728\u767b\u5f55\u65f6\u5728sso\u7cfb\u7edf\u4e2d\u8fdb\u884c\u5224\u65ad\uff0c\u5982\u679c\u662f\u65b0\u7528\u6237\uff0c\u5728\u6ce8\u518c\u5b8c\u6210\u540e\uff0c\u9700\u8981\u8c03\u7528dubbo\u4e2d\u7684\u73af\u4fe1\u670d\u52a1\u8fdb\u884c\u6ce8\u518c\u73af\u4fe1\u7528\u6237\u3002 dubbo-huanxin\u670d\u52a1\u5728\u6ce8\u518c\u73af\u4fe1\u7528\u6237\u65f6\uff0c\u9700\u8981\u968f\u673a\u751f\u6210\u5bc6\u7801\uff0c\u643a\u5e26token\u8bf7\u6c42\u73af\u4fe1\u7684REST API\u8fdb\u884c\u7528\u6237\u6ce8\u518c\u3002 \u6ce8\u518c\u6210\u529f\u540e\uff0c\u9700\u8981\u5c06\u73af\u4fe1\u7684\u7528\u6237\u4fe1\u606f\u4fdd\u5b58\u5230MySQL\u4e2d\u3002 \u7528\u6237\u5728APP\u7aef\u4f7f\u7528\u5373\u65f6\u901a\u8baf\u529f\u80fd\u65f6\uff0c\u9700\u8981\u901a\u8fc7\u73af\u4fe1\u7528\u6237\u4fe1\u606f\u767b\u5f55\u5230\u73af\u4fe1\u5e73\u53f0\uff0c\u7531\u4e8e\u6570\u636e\u5b58\u50a8\u5230\u670d\u52a1\u7aef\uff0c\u6240\u4ee5\u9700\u8981\u901a\u8fc7dubbo-huanxin\u8fdb\u884c\u67e5\u8be2\u3002 \u5728\u62ff\u5230\u73af\u4fe1\u8d26\u53f7\u4fe1\u606f\u540e\uff0c\u767b\u5f55\u73af\u4fe1\uff0c\u767b\u5f55\u6210\u529f\u540e\u5373\u53ef\u4e0e\u73af\u4fe1\u5e73\u53f0\u8fdb\u884c\u4ea4\u4e92\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cAPP\u7aef\u4e0e\u73af\u4fe1\u5e73\u53f0\u4ea4\u4e92\uff0c\u662f\u4e0d\u8d70\u540e\u7aef\u7cfb\u7edf\u7684\uff0c\u662f\u76f4\u8fde\u64cd\u4f5c\u3002 \u5b98\u65b9\u6587\u6863\uff1a \u300a\u7528\u6237\u7ba1\u7406\u300b 8.1\u3001\u901a\u7528\u8bf7\u6c42\u903b\u8f91 \u00b6 \u5728\u4e0e\u73af\u4fe1\u63a5\u53e3\u901a\u4fe1\u65f6\uff0c\u4f7f\u7528\u7684\u662f\u73af\u4fe1\u7684REST\u63a5\u53e3\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c01\u88c5\u4e00\u4e2a\u901a\u7528\u7684\u8bf7\u6c42\u670d\u52a1\uff0c\u5728\u4e0e\u6240\u6709\u73af\u4fe1\u63a5\u53e3\u5bf9\u63a5\u65f6\u4f7f\u7528\u3002 \u53e6\u5916\uff0c\u8bf7\u6c42\u63a5\u53e3\u65f6\u90fd\u9700\u8981\u643a\u5e26token\uff0c\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u5c06token\u5b58\u50a8\u5230redis\u4e2d\uff0c\u4f46\u662f\uff0c\u53ef\u80fd\u5b58\u5728\u8fd9\u6837\u4e00\u79cd\u60c5\u51b5\uff0ctoken\u5728\u6211\u4eecredis\u4e2d\u6709\u6548\uff0c\u4f46\u662f\u5728\u73af\u4fe1\u5e73\u53f0\u5df2\u7ecf\u5931\u6548\uff0c\u8fd9\u6837\u73af\u4fe1\u5e73\u53f0\u4f1a\u7ed9\u6211\u4eec\u54cd\u5e94401\u72b6\u6001\u7801\u3002 \u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5c31\u9700\u8981\u68c0\u6d4b\u72b6\u6001\u7801\u662f\u5426\u4e3a401\uff0c\u5982\u679c\u662f401\u7684\u8bdd\uff0c\u5c31\u9700\u8981\u91cd\u65b0\u5237\u65b0token\uff0c\u518d\u91cd\u65b0\u6267\u884c\u6b64\u6b21\u8bf7\u6c42\u3002 \u4e5f\u5c31\u662f\u8981\u652f\u6301\u8bf7\u6c42\u7684\u91cd\u8bd5\u3002 8.1.1\u3001Spring-Retry \u00b6 Spring\u63d0\u4f9b\u4e86\u91cd\u8bd5\u7684\u529f\u80fd\uff0c\u4f7f\u7528\u975e\u5e38\u7684\u7b80\u5355\u3001\u4f18\u96c5\u3002 \u7b2c\u4e00\u6b65\uff0c\u5bfc\u5165\u4f9d\u8d56\uff1a <!--Spring\u91cd\u8bd5\u6a21\u5757--> <dependency> <groupId> org.springframework.retry </groupId> <artifactId> spring-retry </artifactId> </dependency> <dependency> <groupId> org.aspectj </groupId> <artifactId> aspectjweaver </artifactId> </dependency> \u7b2c\u4e8c\u6b65\uff0c\u5728\u542f\u52a8\u7c7b\u4e2d\u6dfb\u52a0@EnableRetry\u6ce8\u89e3\u6765\u6fc0\u6d3b\u91cd\u8bd5\u529f\u80fd\uff1a package com.tanhua.dubbo.server ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration ; import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration ; import org.springframework.retry.annotation.EnableRetry ; @SpringBootApplication ( exclude = { MongoAutoConfiguration . class , MongoDataAutoConfiguration . class }) //\u6392\u9664mongo\u7684\u81ea\u52a8\u914d\u7f6e @EnableRetry public class HuanXinDubboApplication { public static void main ( String [] args ) { SpringApplication . run ( HuanXinDubboApplication . class , args ); } } \u7b2c\u4e09\u6b65\uff0c\u5728\u9700\u8981\u652f\u6301\u91cd\u8bd5\u64cd\u4f5c\u7684Service\u65b9\u6cd5\u4e2d\u6dfb\u52a0@Retryable\u6ce8\u89e3\uff0cdemo\u5982\u4e0b\uff1a //\u5c06\u6b64\u7c7b\u653e\u5230test\u5305\u4e0b\u6d4b\u8bd5\u5373\u53ef package com.tanhua.dubbo.server ; import cn.hutool.core.util.RandomUtil ; import org.springframework.retry.annotation.Backoff ; import org.springframework.retry.annotation.Recover ; import org.springframework.retry.annotation.Retryable ; import org.springframework.stereotype.Service ; @Service public class RetryService { @Retryable ( value = RuntimeException . class , maxAttempts = 3 , backoff = @Backoff ( delay = 2000L , multiplier = 2 )) public int execute ( int max ) { int data = RandomUtil . randomInt ( 1 , 99 ); System . out . println ( \"\u751f\u6210\uff1a\" + data ); if ( data < max ) { throw new RuntimeException (); } return data ; } @Recover //\u5168\u90e8\u91cd\u8bd5\u5931\u8d25\u540e\u6267\u884c public int recover ( Exception e ) { System . out . println ( \"\u5168\u90e8\u91cd\u8bd5\u5b8c\u6210\u3002\u3002\u3002\u3002\u3002\" ); return 88 ; //\u8fd4\u56de\u9ed8\u8ba4 } } @Retryable\u53c2\u6570\u8bf4\u660e\uff1a value\uff1a\u629b\u51fa\u6307\u5b9a\u5f02\u5e38\u624d\u4f1a\u91cd\u8bd5 maxAttempts\uff1a\u6700\u5927\u91cd\u8bd5\u6b21\u6570\uff0c\u9ed8\u8ba43\u6b21 backoff\uff1a\u91cd\u8bd5\u7b49\u5f85\u7b56\u7565\uff0c\u9ed8\u8ba4\u4f7f\u7528@Backoff @Backoff \u7684value\u9ed8\u8ba4\u4e3a1000L\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e3a2000L\uff1b multiplier\uff08\u6307\u5b9a\u5ef6\u8fdf\u500d\u6570\uff09\u9ed8\u8ba4\u4e3a0\uff0c\u8868\u793a\u56fa\u5b9a\u6682\u505c1\u79d2\u540e\u8fdb\u884c\u91cd\u8bd5\uff0c\u5982\u679c\u628amultiplier\u8bbe\u7f6e\u4e3a2\uff0c\u5219\u7b2c\u4e00\u6b21\u91cd\u8bd5\u4e3a2\u79d2\uff0c\u7b2c\u4e8c\u6b21\u4e3a4\u79d2\uff0c\u7b2c\u4e09\u6b21\u4e3a6\u79d2\u3002 @Recover\u6807\u6ce8\u7684\u65b9\u6cd5\uff0c\u662f\u5728\u6240\u6709\u7684\u91cd\u8bd5\u90fd\u5931\u8d25\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u540e\u6267\u884c\u8be5\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u67092\u4e2a\u8981\u6c42\uff1a \u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u662f Throwable \u7c7b\u578b\uff0c\u6700\u597d\u4e0e @Retryable \u4e2d\u7684 value\u4e00\u81f4\u3002 \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u5fc5\u987b\u4e0e@Retryable\u7684\u65b9\u6cd5\u8fd4\u56de\u503c\u4e00\u81f4\uff0c\u5426\u5219\u8be5\u65b9\u6cd5\u4e0d\u80fd\u88ab\u6267\u884c\u3002 \u6d4b\u8bd5\u7c7b\uff1a package com.tanhua.dubbo.server ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @SpringBootTest @RunWith ( SpringRunner . class ) public class TestRetryService { @Autowired private RetryService retryService ; @Test public void testRetry () { System . out . println ( this . retryService . execute ( 90 )); } } \u6d4b\u8bd5\u7ed3\u679c\uff0c\u4f1a\u67093\u6b21\u91cd\u8bd5\u673a\u4f1a\u8fdb\u884c\u751f\u6210\u968f\u673a\u6570\uff0c\u5982\u679c3\u6b21\u968f\u673a\u6570\u90fd\u5c0f\u4e8e90\uff0c\u6700\u540e\u8fd4\u56de88\u3002 8.1.2\u3001RequestService \u00b6 package com.tanhua.dubbo.server.service ; import cn.hutool.http.HttpRequest ; import cn.hutool.http.HttpResponse ; import cn.hutool.http.Method ; import com.tanhua.dubbo.server.exception.UnauthorizedException ; import lombok.extern.slf4j.Slf4j ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.retry.annotation.Backoff ; import org.springframework.retry.annotation.Recover ; import org.springframework.retry.annotation.Retryable ; import org.springframework.stereotype.Service ; /** * \u73af\u4fe1\u63a5\u53e3\u901a\u7528\u8bf7\u6c42\u670d\u52a1 */ @Service @Slf4j public class RequestService { @Autowired private TokenService tokenService ; /** * \u901a\u7528\u7684\u53d1\u9001\u8bf7\u6c42\u65b9\u6cd5 * * @param url \u8bf7\u6c42\u5730\u5740 * @param body \u8bf7\u6c42\u53c2\u6570 * @param method \u8bf7\u6c42\u65b9\u6cd5 * @return */ @Retryable ( value = UnauthorizedException . class , maxAttempts = 5 , backoff = @Backoff ( delay = 2000L , multiplier = 2 )) public HttpResponse execute ( String url , String body , Method method ) { String token = this . tokenService . getToken (); HttpRequest httpRequest ; switch ( method ) { case POST : { httpRequest = HttpRequest . post ( url ); break ; } case DELETE : { httpRequest = HttpRequest . delete ( url ); break ; } case PUT : { httpRequest = HttpRequest . put ( url ); break ; } case GET : { httpRequest = HttpRequest . get ( url ); break ; } default : { return null ; } } HttpResponse response = httpRequest . header ( \"Content-Type\" , \"application/json\" ) //\u8bbe\u7f6e\u8bf7\u6c42\u5185\u5bb9\u7c7b\u578b . header ( \"Authorization\" , \"Bearer \" + token ) //\u8bbe\u7f6etoken . body ( body ) // \u8bbe\u7f6e\u8bf7\u6c42\u6570\u636e . timeout ( 20000 ) // \u8d85\u65f6\u65f6\u95f4 . execute (); // \u6267\u884c\u8bf7\u6c42 if ( response . getStatus () == 401 ) { //token\u5931\u6548\uff0c\u91cd\u65b0\u5237\u65b0token this . tokenService . refreshToken (); //\u629b\u51fa\u5f02\u5e38\uff0c\u9700\u8981\u8fdb\u884c\u91cd\u8bd5 throw new UnauthorizedException ( url , body , method ); } return response ; } @Recover //\u5168\u90e8\u91cd\u8bd5\u5931\u8d25\u540e\u6267\u884c public HttpResponse recover ( UnauthorizedException e ) { log . error ( \"\u83b7\u53d6token\u5931\u8d25\uff01url = \" + e . getUrl () + \", body = \" + e . getBody () + \", method = \" + e . getMethod (). toString ()); //\u5982\u679c\u91cd\u8bd55\u6b21\u540e\uff0c\u4f9d\u7136\u4e0d\u80fd\u83b7\u53d6\u5230token\uff0c\u8bf4\u660e\u7f51\u7edc\u6216\u8d26\u53f7\u51fa\u73b0\u4e86\u95ee\u9898\uff0c\u53ea\u80fd\u8fd4\u56denull\u4e86\uff0c\u540e\u7eed\u7684\u8bf7\u6c42\u5c06\u65e0\u6cd5\u518d\u6267\u884c return null ; } } package com.tanhua.dubbo.server.exception ; import cn.hutool.http.Method ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @AllArgsConstructor @NoArgsConstructor @Data public class UnauthorizedException extends RuntimeException { private String url ; private String body ; private Method method ; } \u6d4b\u8bd5\u7528\u4f8b\uff1a package com.tanhua.dubbo.server ; import cn.hutool.http.HttpResponse ; import cn.hutool.http.Method ; import com.tanhua.dubbo.server.config.HuanXinConfig ; import com.tanhua.dubbo.server.service.RequestService ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @SpringBootTest @RunWith ( SpringRunner . class ) public class TestRequestService { @Autowired private RequestService requestService ; @Autowired private HuanXinConfig huanXinConfig ; @Test public void testQueryHuanXinUser () { String targetUrl = this . huanXinConfig . getUrl () + this . huanXinConfig . getOrgName () + \"/\" + this . huanXinConfig . getAppName () + \"/users/1\" ; HttpResponse response = this . requestService . execute ( targetUrl , null , Method . GET ); System . out . println ( response ); } } 8.2\u3001\u6ce8\u518c\u73af\u4fe1\u7528\u6237 \u00b6 \u6ce8\u518c\u73af\u4fe1\u7528\u6237\u5206\u4e3a2\u79cd\uff0c\u5f00\u653e\u6ce8\u518c\u3001\u6388\u6743\u6ce8\u518c\uff0c\u533a\u522b\u5728\u4e8e\u5f00\u53d1\u6ce8\u518c\u4e0d\u9700\u8981token\uff0c\u6388\u6743\u6ce8\u518c\u9700\u8981token\u3002\u6211\u4eec\u4f7f\u7528\u7684\u6388\u6743\u6ce8\u518c\u3002 \u5b98\u65b9\u6587\u6863\uff1a \u300a\u6ce8\u518c\u5355\u4e2a\u7528\u6237(\u6388\u6743)\u300b \u8bf4\u660e\uff1a\u73af\u4fe1\u7528\u6237\u6570\u636e\u9700\u8981\u4fdd\u5b58\u5230\u6570\u636e\u4e2d\u3002 8.2.1\u3001HuanXinUser \u00b6 \u5728my-tanhua-dubbo-interface\u5de5\u7a0b\u4e2d\u521b\u5efa\u8be5\u7c7b\uff1a \u9700\u8981\u5728\u6b64\u5de5\u7a0b\u4e2d\u6dfb\u52a0MybatisPlus\u4f9d\u8d56\uff1a <dependency> <groupId> com.baomidou </groupId> <artifactId> mybatis-plus </artifactId> </dependency> package com.tanhua.dubbo.server.pojo ; import com.baomidou.mybatisplus.annotation.TableName ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import java.util.Date ; /** * \u73af\u4fe1\u7528\u6237\u5bf9\u8c61 */ @Data @NoArgsConstructor @AllArgsConstructor @TableName ( \"tb_huanxin_user\" ) public class HuanXinUser implements java . io . Serializable { private static final long serialVersionUID = - 6400630011196593976L ; private Long id ; //\u4e3b\u952eId /** * \u73af\u4fe1 ID ;\u4e5f\u5c31\u662f IM \u7528\u6237\u540d\u7684\u552f\u4e00\u767b\u5f55\u8d26\u53f7\uff0c\u957f\u5ea6\u4e0d\u53ef\u8d85\u8fc764\u4e2a\u5b57\u7b26\u957f\u5ea6 */ private String username ; /** * \u767b\u5f55\u5bc6\u7801\uff0c\u957f\u5ea6\u4e0d\u53ef\u8d85\u8fc764\u4e2a\u5b57\u7b26\u957f\u5ea6 */ private String password ; /** * \u6635\u79f0\uff08\u53ef\u9009\uff09\uff0c\u5728 iOS Apns \u63a8\u9001\u65f6\u4f1a\u4f7f\u7528\u7684\u6635\u79f0\uff08\u4ec5\u5728\u63a8\u9001\u901a\u77e5\u680f\u5185\u663e\u793a\u7684\u6635\u79f0\uff09\uff0c * \u5e76\u4e0d\u662f\u7528\u6237\u4e2a\u4eba\u4fe1\u606f\u7684\u6635\u79f0\uff0c\u73af\u4fe1\u662f\u4e0d\u4fdd\u5b58\u7528\u6237\u6635\u79f0\uff0c\u5934\u50cf\u7b49\u4e2a\u4eba\u4fe1\u606f\u7684\uff0c * \u9700\u8981\u81ea\u5df1\u670d\u52a1\u5668\u4fdd\u5b58\u5e76\u4e0e\u7ed9\u81ea\u5df1\u7528\u6237\u6ce8\u518c\u7684IM\u7528\u6237\u540d\u7ed1\u5b9a\uff0c\u957f\u5ea6\u4e0d\u53ef\u8d85\u8fc7100\u4e2a\u5b57\u7b26 */ private String nickname ; private Long userId ; //\u7528\u6237id private Date created ; //\u521b\u5efa\u65f6\u95f4 private Date updated ; //\u66f4\u65b0\u65f6\u95f4 } \u6570\u636e\u5e93\u8868\u7ed3\u6784\uff1a CREATE TABLE ` tb_huanxin_user ` ( ` id ` bigint ( 20 ) NOT NULL AUTO_INCREMENT , ` user_id ` bigint ( 20 ) NOT NULL COMMENT '\u7528\u6237id' , ` username ` varchar ( 32 ) NOT NULL COMMENT '\u73af\u4fe1\u7528\u6237\u540d' , ` password ` varchar ( 32 ) NOT NULL COMMENT '\u73af\u4fe1\u5bc6\u7801' , ` nickname ` varchar ( 100 ) DEFAULT NULL COMMENT '\u6635\u79f0' , ` created ` datetime DEFAULT NULL COMMENT '\u521b\u5efa\u65f6\u95f4' , ` updated ` datetime DEFAULT NULL COMMENT '\u66f4\u65b0\u65f6\u95f4' , PRIMARY KEY ( ` id ` ), KEY ` user_id ` ( ` user_id ` ), KEY ` username ` ( ` username ` ) ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8 ; 8.2.2\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 //com.tanhua.dubbo.server.api.HuanXinApi /** * \u6ce8\u518c\u73af\u4fe1\u7528\u6237 * \u53c2\u89c1\uff1ahttp://docs-im.easemob.com/im/server/ready/user#%E6%B3%A8%E5%86%8C%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7_%E5%BC%80%E6%94%BE * * @param userId \u7528\u6237id * @return */ Boolean register ( Long userId ); /** * \u6839\u636e\u7528\u6237Id\u8be2\u73af\u4fe1\u8d26\u6237\u4fe1\u606f * * @param userId * @return */ HuanXinUser queryHuanXinUser ( Long userId ); 8.2.3\u3001\u5b9e\u73b0\u63a5\u53e3 \u00b6 //com.tanhua.dubbo.server.api.HuanXinApiImpl @Override public Boolean register ( Long userId ) { String targetUrl = this . huanXinConfig . getUrl () + this . huanXinConfig . getOrgName () + \"/\" + this . huanXinConfig . getAppName () + \"/users\" ; HuanXinUser huanXinUser = new HuanXinUser (); huanXinUser . setUsername ( \"HX_\" + userId ); // \u7528\u6237\u540d huanXinUser . setPassword ( IdUtil . simpleUUID ()); //\u968f\u673a\u751f\u6210\u7684\u5bc6\u7801 HttpResponse response = this . requestService . execute ( targetUrl , JSONUtil . toJsonStr ( Arrays . asList ( huanXinUser )), Method . POST ); if ( response . isOk ()) { //\u5c06\u73af\u4fe1\u7684\u8d26\u53f7\u4fe1\u606f\u4fdd\u5b58\u5230\u6570\u636e\u5e93 huanXinUser . setUserId ( userId ); huanXinUser . setCreated ( new Date ()); huanXinUser . setUpdated ( huanXinUser . getCreated ()); this . huanXinUserMapper . insert ( huanXinUser ); return true ; } return false ; } @Override public HuanXinUser queryHuanXinUser ( Long userId ) { QueryWrapper < HuanXinUser > wrapper = new QueryWrapper <> (); wrapper . eq ( \"user_id\" , userId ); return this . huanXinUserMapper . selectOne ( wrapper ); } package com.tanhua.dubbo.server.mapper ; import com.baomidou.mybatisplus.core.mapper.BaseMapper ; import com.tanhua.dubbo.server.pojo.HuanXinUser ; import org.apache.ibatis.annotations.Mapper ; @Mapper public interface HuanXinUserMapper extends BaseMapper < HuanXinUser > { } 8.2.4\u3001\u6d4b\u8bd5\u7528\u4f8b \u00b6 package com.tanhua.dubbo.server ; import com.tanhua.dubbo.server.api.HuanXinApi ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @SpringBootTest @RunWith ( SpringRunner . class ) public class TestHuanXinApi { @Autowired private HuanXinApi huanXinApi ; @Test public void testRegister (){ //\u6ce8\u518c\u7528\u6237id\u4e3a1\u7684\u7528\u6237\u5230\u73af\u4fe1 System . out . println ( this . huanXinApi . register ( 1L )); } @Test public void testQueryHuanXinUser (){ //\u6839\u636e\u7528\u6237id\u67e5\u8be2\u73af\u4fe1\u7528\u6237\u4fe1\u606f System . out . println ( this . huanXinApi . queryHuanXinUser ( 1L )); } } 8.2.5\u3001\u5728sso\u4e2d\u6ce8\u518c\u73af\u4fe1\u7528\u6237 \u00b6 \u9700\u8981\u5728sso\u7cfb\u7edf\u4e2d\u4f7f\u7528dubbo\u670d\u52a1\u8fdb\u884c\u6ce8\u518c\u73af\u4fe1\u7528\u6237\u3002 \u7b2c\u4e00\u6b65\uff0c\u5bfc\u5165\u4f9d\u8d56\uff1a <dependency> <groupId> cn.itcast.tanhua </groupId> <artifactId> my-tanhua-dubbo-interface </artifactId> <version> 1.0-SNAPSHOT </version> </dependency> <!--dubbo\u7684springboot\u652f\u6301--> <dependency> <groupId> com.alibaba.boot </groupId> <artifactId> dubbo-spring-boot-starter </artifactId> </dependency> <!--dubbo\u6846\u67b6--> <dependency> <groupId> com.alibaba </groupId> <artifactId> dubbo </artifactId> </dependency> <!--zk\u4f9d\u8d56--> <dependency> <groupId> org.apache.zookeeper </groupId> <artifactId> zookeeper </artifactId> </dependency> <dependency> <groupId> com.github.sgroschupf </groupId> <artifactId> zkclient </artifactId> </dependency> \u7b2c\u4e8c\u6b65\uff0c\u589e\u52a0dubbo\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e application.properties\uff1a #dubbo\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e dubbo.application.name = itcast-tanhua-server dubbo.registry.address = zookeeper://192.168.31.81:2181 dubbo.registry.client = zkclient dubbo.registry.timeout = 60000 dubbo.consumer.timeout = 60000 \u7b2c\u4e09\u6b65\uff0c\u5728UserService\u4e2d\u589e\u52a0\u76f8\u5e94\u7684\u903b\u8f91\uff1a @Reference ( version = \"1.0.0\" ) private HuanXinApi huanXinApi ; /** * \u7528\u6237\u767b\u5f55 * * @param phone \u624b\u673a\u53f7 * @param code \u9a8c\u8bc1\u7801 * @return */ public String login ( String phone , String code ) { String redisKey = \"CHECK_CODE_\" + phone ; boolean isNew = false ; //\u6821\u9a8c\u9a8c\u8bc1\u7801 String redisData = this . redisTemplate . opsForValue (). get ( redisKey ); if ( ! StringUtils . equals ( code , redisData )) { return null ; //\u9a8c\u8bc1\u7801\u9519\u8bef } //\u9a8c\u8bc1\u7801\u5728\u6821\u9a8c\u5b8c\u6210\u540e\uff0c\u9700\u8981\u5e9f\u5f03 this . redisTemplate . delete ( redisKey ); QueryWrapper < User > queryWrapper = new QueryWrapper <> (); queryWrapper . eq ( \"mobile\" , phone ); User user = this . userMapper . selectOne ( queryWrapper ); if ( null == user ) { //\u9700\u8981\u6ce8\u518c\u8be5\u7528\u6237 user = new User (); user . setMobile ( phone ); user . setPassword ( DigestUtils . md5Hex ( \"123456\" )); //\u6ce8\u518c\u65b0\u7528\u6237 this . userMapper . insert ( user ); isNew = true ; //\u6ce8\u518c\u73af\u4fe1\u7528\u6237 Boolean result = this . huanXinApi . register ( user . getId ()); if ( ! result ) { //\u6ce8\u518c\u73af\u4fe1\u5931\u8d25\uff0c\u8bb0\u5f55\u65e5\u5fd7 log . error ( \"\u6ce8\u518c\u73af\u4fe1\u7528\u6237\u5931\u8d25~ userId = \" + user . getId ()); } } //\u751f\u6210token Map < String , Object > claims = new HashMap < String , Object > (); claims . put ( \"id\" , user . getId ()); // \u751f\u6210token String token = Jwts . builder () . setClaims ( claims ) //payload\uff0c\u5b58\u653e\u6570\u636e\u7684\u4f4d\u7f6e\uff0c\u4e0d\u80fd\u653e\u7f6e\u654f\u611f\u6570\u636e\uff0c\u5982\uff1a\u5bc6\u7801\u7b49 . signWith ( SignatureAlgorithm . HS256 , secret ) //\u8bbe\u7f6e\u52a0\u5bc6\u65b9\u6cd5\u548c\u52a0\u5bc6\u76d0 . setExpiration ( new DateTime (). plusHours ( 12 ). toDate ()) //\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0c12\u5c0f\u65f6\u540e\u8fc7\u671f . compact (); try { //\u53d1\u9001\u7528\u6237\u767b\u5f55\u6210\u529f\u7684\u6d88\u606f Map < String , Object > msg = new HashMap <> (); msg . put ( \"id\" , user . getId ()); msg . put ( \"date\" , System . currentTimeMillis ()); this . rocketMQTemplate . convertAndSend ( \"tanhua-sso-login\" , msg ); } catch ( MessagingException e ) { log . error ( \"\u53d1\u9001\u6d88\u606f\u5931\u8d25\uff01\" , e ); } return token + \"|\" + isNew ; } 8.2.6\u3001\u6d4b\u8bd5 \u00b6 \u5c06\u670d\u52a1\u5168\u90e8\u8dd1\u8d77\u6765\uff0c\u4f7f\u7528APP\u8fdb\u884c\u6d4b\u8bd5\uff0c\u4f7f\u7528\u65b0\u624b\u673a\u53f7\u8fdb\u884c\u767b\u5f55\u6d4b\u8bd5\u3002 \u65b0\u6ce8\u518c\u7684\u7528\u6237\uff1a \u6240\u5bf9\u5e94\u7684\u73af\u4fe1\u7528\u6237\uff1a \u73af\u4fe1\u5e73\u53f0\uff1a \u53ef\u4ee5\u770b\u5230\u5df2\u7ecf\u6ce8\u518c\u5230\u4e86\u73af\u4fe1\u3002 8.3\u3001\u67e5\u8be2\u73af\u4fe1\u7528\u6237\u4fe1\u606f \u00b6 \u5728app\u4e2d\uff0c\u7528\u6237\u767b\u5f55\u540e\u9700\u8981\u6839\u636e\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\u73af\u4fe1\uff0c\u7531\u4e8e\u7528\u6237\u540d\u5bc6\u7801\u4fdd\u5b58\u5728\u540e\u53f0\uff0c\u6240\u4ee5\u9700\u8981\u63d0\u4f9b\u63a5\u53e3\u8fdb\u884c\u8fd4\u56de\u3002 mock\u5730\u5740\uff1a https://mock-java.itheima.net/project/35/interface/api/563 8.3.1\u3001HuanXinUserVo \u00b6 package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class HuanXinUserVo { private String username ; private String password ; } 8.3.2\u3001HuanXinController \u00b6 package com.tanhua.server.controller ; import com.tanhua.server.service.HuanXinService ; import com.tanhua.server.vo.HuanXinUserVo ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RestController ; @RestController @RequestMapping ( \"huanxin\" ) public class HuanXinController { @Autowired private HuanXinService huanXinService ; @GetMapping ( \"user\" ) public HuanXinUserVo queryHuanXinUser (){ return this . huanXinService . queryHuanXinUser (); } } 8.3.3\u3001HuanXinService \u00b6 package com.tanhua.server.service ; import cn.hutool.core.util.ObjectUtil ; import com.alibaba.dubbo.config.annotation.Reference ; import com.tanhua.common.pojo.User ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.dubbo.server.api.HuanXinApi ; import com.tanhua.dubbo.server.pojo.HuanXinUser ; import com.tanhua.server.vo.HuanXinUserVo ; import org.springframework.stereotype.Service ; @Service public class HuanXinService { @Reference ( version = \"1.0.0\" ) private HuanXinApi huanXinApi ; public HuanXinUserVo queryHuanXinUser () { User user = UserThreadLocal . get (); //\u901a\u8fc7dubbo\u670d\u52a1\u67e5\u8be2\u73af\u4fe1\u7528\u6237 HuanXinUser huanXinUser = this . huanXinApi . queryHuanXinUser ( user . getId ()); if ( ObjectUtil . isNotEmpty ( huanXinUser )) { return new HuanXinUserVo ( huanXinUser . getUsername (), huanXinUser . getPassword ()); } return null ; } } 8.3.4\u3001\u6d4b\u8bd5 \u00b6 8.4\u3001\u67e5\u8be2\u4e2a\u4eba\u4fe1\u606f \u00b6 \u5728\u6d88\u606f\u6a21\u5757\u4e2d\uff0c\u9700\u8981\u5b9e\u73b0\u6839\u636e\u73af\u4fe1\u7528\u6237\u540d\u67e5\u8be2\u4e2a\u4eba\u7684\u7528\u6237\u4fe1\u606f\u3002 \u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/2921 8.4.1\u3001dubbo\u670d\u52a1 \u00b6 8.4.1.1\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 //com.tanhua.dubbo.server.api.HuanXinApi /** * \u6839\u636e\u73af\u4fe1\u7528\u6237\u540d\u67e5\u8be2\u7528\u6237\u4fe1\u606f * * @param userName * @return */ HuanXinUser queryUserByUserName ( String userName ); 8.4.1.2\u3001\u7f16\u5199\u5b9e\u73b0 \u00b6 //com.tanhua.dubbo.server.api.HuanXinApiImpl @Override public HuanXinUser queryUserByUserName ( String userName ) { QueryWrapper < HuanXinUser > wrapper = new QueryWrapper <> (); wrapper . eq ( \"username\" , userName ); return this . huanXinUserMapper . selectOne ( wrapper ); } 8.4.2\u3001APP\u63a5\u53e3\u670d\u52a1 \u00b6 8.4.2.1\u3001UserInfoVo \u00b6 package com.tanhua.server.vo ; import cn.hutool.core.annotation.Alias ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @AllArgsConstructor @NoArgsConstructor public class UserInfoVo { @Alias ( \"userId\" ) private Long id ; //\u7528\u6237id @Alias ( \"logo\" ) private String avatar ; //\u5934\u50cf @Alias ( \"nickName\" ) private String nickname ; //\u6635\u79f0 private String birthday ; //\u751f\u65e5 2019-09-11 private String age ; //\u5e74\u9f84 private String gender ; //\u6027\u522b man woman private String city ; //\u57ce\u5e02 @Alias ( \"edu\" ) private String education ; //\u5b66\u5386 private String income ; //\u6708\u6536\u5165 @Alias ( \"industry\" ) private String profession ; //\u884c\u4e1a private Integer marriage ; //\u5a5a\u59fb\u72b6\u6001\uff080\u672a\u5a5a\uff0c1\u5df2\u5a5a\uff09 } 8.4.2.2\u3001IMController \u00b6 //com.tanhua.server.controller.IMController package com.tanhua.server.controller ; import cn.hutool.core.util.ObjectUtil ; import com.tanhua.server.service.IMService ; import com.tanhua.server.vo.UserInfoVo ; import lombok.extern.slf4j.Slf4j ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RequestParam ; import org.springframework.web.bind.annotation.RestController ; @RequestMapping ( \"messages\" ) @RestController @Slf4j public class IMController { @Autowired private IMService imService ; /** * \u6839\u636e\u73af\u4fe1\u7528\u6237\u540d\u67e5\u8be2\u7528\u6237\u4fe1\u606f * * @param userName \u73af\u4fe1\u7528\u6237 * @return */ @GetMapping ( \"userinfo\" ) public ResponseEntity < UserInfoVo > queryUserInfoByUserName ( @RequestParam ( \"huanxinId\" ) String userName ) { try { UserInfoVo userInfoVo = this . imService . queryUserInfoByUserName ( userName ); if ( ObjectUtil . isNotEmpty ( userInfoVo )) { return ResponseEntity . ok ( userInfoVo ); } } catch ( Exception e ) { log . error ( \"\u6839\u636e\u73af\u4fe1id\u67e5\u8be2\u7528\u6237\u4fe1\u606f! userName = \" + userName , e ); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } } 8.4.2.3\u3001IMService \u00b6 //com.tanhua.server.service.IMService package com.tanhua.server.service ; import cn.hutool.core.bean.BeanUtil ; import cn.hutool.core.util.ObjectUtil ; import cn.hutool.core.util.StrUtil ; import com.alibaba.dubbo.config.annotation.Reference ; import com.tanhua.common.pojo.UserInfo ; import com.tanhua.dubbo.server.api.HuanXinApi ; import com.tanhua.dubbo.server.pojo.HuanXinUser ; import com.tanhua.server.vo.UserInfoVo ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; @Service public class IMService { @Reference ( version = \"1.0.0\" ) private HuanXinApi huanXinApi ; @Autowired private UserInfoService userInfoService ; public UserInfoVo queryUserInfoByUserName ( String userName ) { //\u67e5\u8be2\u73af\u4fe1\u8d26\u6237 HuanXinUser huanXinUser = this . huanXinApi . queryUserByUserName ( userName ); if ( ObjectUtil . isEmpty ( huanXinUser )) { return null ; } //\u67e5\u8be2\u7528\u6237\u4fe1\u606f UserInfo userInfo = this . userInfoService . queryUserInfoByUserId ( huanXinUser . getUserId ()); if ( ObjectUtil . isEmpty ( userInfo )) { return null ; } UserInfoVo userInfoVo = BeanUtil . copyProperties ( userInfo , UserInfoVo . class , \"marriage\" ); userInfoVo . setGender ( userInfo . getSex (). toString (). toLowerCase ()); userInfoVo . setMarriage ( StrUtil . equals ( \"\u5df2\u5a5a\" , userInfo . getMarriage ()) ? 1 : 0 ); return userInfoVo ; } } 8.4.2.4\u3001\u6d4b\u8bd5 \u00b6 8.5\u3001\u6839\u636e\u7528\u6237id\u67e5\u8be2\u4e2a\u4eba\u4fe1\u606f \u00b6 \u5728\u6d88\u606f\u6a21\u5757\u4e0e\u6211\u7684\u6a21\u5757\u4e2d\uff0c\u9700\u8981\u6839\u636e\u7528\u6237id\u67e5\u8be2\u4e2a\u4eba\u4fe1\u606f\uff0c\u5176\u54cd\u5e94\u7684\u6570\u636e\u7ed3\u6784\u4e0e\u4e0a\u9762\u4e00\u81f4\uff0c\u5747\u4e3a\uff1aUserInfoVo\u5bf9\u8c61\u3002 \u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/875 8.5.1\u3001MyCenterController \u00b6 package com.tanhua.server.controller ; import cn.hutool.core.util.ObjectUtil ; import com.tanhua.server.service.MyCenterService ; import com.tanhua.server.vo.UserInfoVo ; import lombok.extern.slf4j.Slf4j ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RequestParam ; import org.springframework.web.bind.annotation.RestController ; @RequestMapping ( \"users\" ) @RestController @Slf4j public class MyCenterController { @Autowired private MyCenterService myCenterService ; /** * \u6839\u636e\u7528\u6237id\u67e5\u8be2\u7528\u6237\u4fe1\u606f * * @param userId \u7528\u6237id\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u8868\u793a\u67e5\u8be2\u5f53\u524d\u767b\u5f55\u4eba\u7684\u4fe1\u606f * @return */ @GetMapping public ResponseEntity < UserInfoVo > queryUserInfoByUserId ( @RequestParam ( value = \"userID\" , required = false ) Long userId ) { try { UserInfoVo userInfoVo = this . myCenterService . queryUserInfoByUserId ( userId ); if ( ObjectUtil . isNotEmpty ( userInfoVo )) { return ResponseEntity . ok ( userInfoVo ); } } catch ( Exception e ) { log . error ( \"\u6839\u636e\u7528\u6237id\u67e5\u8be2\u7528\u6237\u4fe1\u606f\u51fa\u9519~ userId = \" + userId , e ); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } } 8.5.2\u3001MyCenterService \u00b6 package com.tanhua.server.service ; import cn.hutool.core.bean.BeanUtil ; import cn.hutool.core.util.ObjectUtil ; import cn.hutool.core.util.StrUtil ; import com.tanhua.common.pojo.UserInfo ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.server.vo.UserInfoVo ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; @Service public class MyCenterService { @Autowired private UserInfoService userInfoService ; public UserInfoVo queryUserInfoByUserId ( Long userId ) { if ( ObjectUtil . isEmpty ( userId )) { //\u5982\u679c\u67e5\u8be2id\u4e3anull\uff0c\u5c31\u8868\u793a\u67e5\u8be2\u5f53\u524d\u7528\u6237\u4fe1\u606f userId = UserThreadLocal . get (). getId (); } //\u67e5\u8be2\u7528\u6237\u4fe1\u606f UserInfo userInfo = this . userInfoService . queryUserInfoByUserId ( userId ); if ( ObjectUtil . isEmpty ( userInfo )) { return null ; } UserInfoVo userInfoVo = BeanUtil . copyProperties ( userInfo , UserInfoVo . class , \"marriage\" ); userInfoVo . setGender ( userInfo . getSex (). toString (). toLowerCase ()); userInfoVo . setMarriage ( StrUtil . equals ( \"\u5df2\u5a5a\" , userInfo . getMarriage ()) ? 1 : 0 ); return userInfoVo ; } } 8.5.3\u3001\u6d4b\u8bd5 \u00b6 8.6\u3001\u53d1\u9001\u6d88\u606f\u7ed9\u5ba2\u6237\u7aef \u00b6 \u76ee\u524d\u5df2\u7ecf\u5b8c\u6210\u4e86\u7528\u6237\u4f53\u7cfb\u7684\u5bf9\u63a5\uff0c\u4e0b\u9762\u6211\u4eec\u8fdb\u884c\u6d4b\u8bd5\u53d1\u9001\u6d88\u606f\uff0c\u573a\u666f\u662f\u8fd9\u6837\u7684\uff1a \u70b9\u51fb\u201c\u804a\u4e00\u4e0b\u201d\uff0c\u5c31\u4f1a\u7ed9\u5bf9\u65b9\u53d1\u9001\u4e00\u6761\u964c\u751f\u4eba\u4fe1\u606f\uff0c\u8fd9\u4e2a\u6d88\u606f\u7531\u7cfb\u7edf\u53d1\u9001\u5b8c\u6210\u3002 \u6211\u4eec\u6682\u65f6\u901a\u8fc7\u73af\u4fe1\u7684\u63a7\u5236\u53f0\u8fdb\u884c\u53d1\u9001\uff1a \u6d88\u606f\u5185\u5bb9\uff1a { \"userId\" :1, \"huanXinId\" : \"HX_1\" , \"nickname\" : \"\u9ed1\u9a6c\u5c0f\u59b9\" , \"strangerQuestion\" : \"\u4f60\u559c\u6b22\u53bb\u770b\u851a\u84dd\u7684\u5927\u6d77\u8fd8\u662f\u53bb\u722c\u5dcd\u5ce8\u7684\u9ad8\u5c71\uff1f\" , \"reply\" : \"\u6211\u559c\u6b22\u79cb\u5929\u7684\u843d\u53f6\uff0c\u590f\u5929\u7684\u6cc9\u6c34\uff0c\u51ac\u5929\u7684\u96ea\u5730\uff0c\u53ea\u8981\u6709\u4f60\u4e00\u5207\u7686\u53ef~\" } \u53ef\u4ee5\u770b\u5230\u5df2\u7ecf\u63a5\u6536\u5230\u4e86\u6d88\u606f\u3002 8.7\u3001\u5c06\u7528\u6237\u6570\u636e\u540c\u6b65\u5230\u73af\u4fe1 \u00b6 \u9700\u8981\u5c061~99\u7528\u6237\u6ce8\u518c\u5230\u73af\u4fe1\uff0c\u56e0\u4e3a\u6211\u4eec\u63d0\u4f9b\u7684\u6570\u636e\u90fd\u662f\u8fd9\u4e9b\u7528\u6237\u7684\u6570\u636e\u3002 //com.tanhua.dubbo.server.TestHuanXinApi @Test public void testRegisterAllUser (){ for ( int i = 1 ; i < 100 ; i ++ ) { this . huanXinApi . register ( Long . valueOf ( i )); } } \u73af\u4fe1\uff1a 9\u3001 \u6dfb\u52a0\u8054\u7cfb\u4eba \u00b6 \u70b9\u51fb\u201c\u804a\u4e00\u4e0b\u201d\uff0c\u5c31\u4f1a\u6210\u4e3a\u8054\u7cfb\u4eba\uff08\u597d\u53cb\uff09\u3002 \u5b9e\u73b0\uff1a \u5c06\u597d\u53cb\u5199\u5165\u5230MongoDB\u4e2d \u5c06\u597d\u53cb\u5173\u7cfb\u6ce8\u518c\u5230\u73af\u4fe1 \u5177\u4f53\u7684\u6d41\u7a0b\u5982\u4e0b\uff1a 9.1\u3001\u597d\u53cbdubbo\u670d\u52a1 \u00b6 9.1.1\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 package com.tanhua.dubbo.server.api ; public interface UsersApi { /** * \u4fdd\u5b58\u597d\u53cb\u5173\u7cfb * * @param userId \u7528\u6237id * @param friendId \u597d\u53cbid * @return */ String saveUsers ( Long userId , Long friendId ); /** * \u5220\u9664\u597d\u53cb\u6570\u636e * * @param userId \u7528\u6237id * @param friendId \u597d\u53cbid * @return */ Boolean removeUsers ( Long userId , Long friendId ); } 9.1.2\u3001\u7f16\u5199\u5b9e\u73b0 \u00b6 package com.tanhua.dubbo.server.api ; import cn.hutool.core.util.ObjectUtil ; import com.alibaba.dubbo.config.annotation.Service ; import com.tanhua.dubbo.server.pojo.Users ; import org.bson.types.ObjectId ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.mongodb.core.MongoTemplate ; import org.springframework.data.mongodb.core.query.Criteria ; import org.springframework.data.mongodb.core.query.Query ; @Service ( version = \"1.0.0\" ) public class UsersApiImpl implements UsersApi { @Autowired private MongoTemplate mongoTemplate ; @Override public String saveUsers ( Long userId , Long friendId ) { if ( ! ObjectUtil . isAllNotEmpty ( userId , friendId )) { return null ; } // \u68c0\u6d4b\u662f\u5426\u8be5\u597d\u53cb\u5173\u7cfb\u662f\u5426\u5b58\u5728 Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId ) . and ( \"friendId\" ). is ( friendId )); long count = this . mongoTemplate . count ( query , Users . class ); if ( count > 0 ) { return null ; } Users users = new Users (); users . setId ( ObjectId . get ()); users . setDate ( System . currentTimeMillis ()); users . setUserId ( userId ); users . setFriendId ( friendId ); //\u6ce8\u518c\u6211\u4e0e\u597d\u53cb\u7684\u5173\u7cfb this . mongoTemplate . save ( users ); //\u6ce8\u518c\u597d\u53cb\u4e0e\u6211\u7684\u5173\u7cfb users . setId ( ObjectId . get ()); users . setUserId ( friendId ); users . setFriendId ( userId ); this . mongoTemplate . save ( users ); return users . getId (). toHexString (); } @Override public Boolean removeUsers ( Long userId , Long friendId ) { Query query1 = Query . query ( Criteria . where ( \"userId\" ). is ( userId ) . and ( \"friendId\" ). is ( friendId )); //\u5220\u9664\u6211\u4e0e\u597d\u53cb\u7684\u5173\u7cfb\u6570\u636e long count1 = this . mongoTemplate . remove ( query1 , Users . class ). getDeletedCount (); Query query2 = Query . query ( Criteria . where ( \"userId\" ). is ( friendId ) . and ( \"friendId\" ). is ( userId )); //\u5220\u9664\u597d\u53cb\u4e0e\u6211\u7684\u5173\u7cfb\u6570\u636e long count2 = this . mongoTemplate . remove ( query2 , Users . class ). getDeletedCount (); return count1 > 0 && count2 > 0 ; } } 9.2\u3001\u73af\u4fe1dubbo\u670d\u52a1 \u00b6 9.2.1\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 \u5728my-tanhua-dubbo-interface\u4e2d\u5b9a\u4e49\u3002 //com.tanhua.dubbo.server.api.HuanXinApi /** * \u6dfb\u52a0\u597d\u53cb\uff08\u53cc\u5411\u597d\u53cb\u5173\u7cfb\uff09 * \u53c2\u89c1\uff1ahttp://docs-im.easemob.com/im/server/ready/user#%E6%B7%BB%E5%8A%A0%E5%A5%BD%E5%8F%8B * * @param userId \u81ea\u5df1\u7684id * @param friendId \u597d\u53cb\u7684id * @return */ Boolean addUserFriend ( Long userId , Long friendId ); /** * \u5220\u9664\u597d\u53cb\u5173\u7cfb\uff08\u53cc\u5411\u5220\u9664\uff09 * \u53c2\u89c1\uff1ahttp://docs-im.easemob.com/im/server/ready/user#%E7%A7%BB%E9%99%A4%E5%A5%BD%E5%8F%8B * * @param userId \u81ea\u5df1\u7684id * @param friendId \u597d\u53cb\u7684id * @return */ Boolean removeUserFriend ( Long userId , Long friendId ); 9.2.2\u3001\u7f16\u5199\u5b9e\u73b0 \u00b6 \u5728my-tanhua-dubbo-huanxin\u4e2d\u5b9e\u73b0\u3002 //com.tanhua.dubbo.server.api.HuanXinApiImpl @Override public Boolean addUserFriend ( Long userId , Long friendId ) { String targetUrl = this . huanXinConfig . getUrl () + this . huanXinConfig . getOrgName () + \"/\" + this . huanXinConfig . getAppName () + \"/users/HX_\" + userId + \"/contacts/users/HX_\" + friendId ; try { // 404 -> \u5bf9\u65b9\u672a\u5728\u73af\u4fe1\u6ce8\u518c return this . requestService . execute ( targetUrl , null , Method . POST ). isOk (); } catch ( Exception e ) { e . printStackTrace (); } // \u6dfb\u52a0\u5931\u8d25 return false ; } @Override public Boolean removeUserFriend ( Long userId , Long friendId ) { String targetUrl = this . huanXinConfig . getUrl () + this . huanXinConfig . getOrgName () + \"/\" + this . huanXinConfig . getAppName () + \"/users/HX_\" + userId + \"/contacts/users/HX_\" + friendId ; try { // 404 -> \u5bf9\u65b9\u672a\u5728\u73af\u4fe1\u6ce8\u518c return this . requestService . execute ( targetUrl , null , Method . DELETE ). isOk (); } catch ( Exception e ) { e . printStackTrace (); } // \u6dfb\u52a0\u5931\u8d25 return false ; } 9.3\u3001APP\u63a5\u53e3\u670d\u52a1 \u00b6 \u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/809 \u5728my-tanhua-server\u4e2d\u5b8c\u6210\u3002 //com.tanhua.server.controller.IMController /** * \u6dfb\u52a0\u597d\u53cb * * @param param * @return */ @PostMapping ( \"contacts\" ) public ResponseEntity < Void > contactUser ( @RequestBody Map < String , Object > param ) { try { Long friendId = Long . valueOf ( param . get ( \"userId\" ). toString ()); boolean result = this . imService . contactUser ( friendId ); if ( result ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { log . error ( \"\u6dfb\u52a0\u8054\u7cfb\u4eba\u5931\u8d25! param = \" + param , e ); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } package com.tanhua.server.service ; import cn.hutool.core.util.StrUtil ; import com.alibaba.dubbo.config.annotation.Reference ; import com.tanhua.common.pojo.User ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.dubbo.server.api.HuanXinApi ; import com.tanhua.dubbo.server.api.UsersApi ; import org.springframework.stereotype.Service ; @Service public class IMService { @Reference ( version = \"1.0.0\" ) private UsersApi usersApi ; @Reference ( version = \"1.0.0\" ) private HuanXinApi huanXinApi ; /** * \u6dfb\u52a0\u597d\u53cb * * @param friendId \u597d\u53cbid */ public boolean contactUser ( Long friendId ) { User user = UserThreadLocal . get (); String id = this . usersApi . saveUsers ( user . getId (), friendId ); if ( StrUtil . isNotEmpty ( id )) { //\u6ce8\u518c\u597d\u53cb\u5173\u7cfb\u5230\u73af\u4fe1 return this . huanXinApi . addUserFriend ( user . getId (), friendId ); } return false ; } } 9.4\u3001\u6d4b\u8bd5 \u00b6 \u63a5\u53e3\u6d4b\u8bd5\uff1a Monodb\u6570\u636e\uff1a \u73af\u4fe1\u5e73\u53f0\u597d\u53cb\u6570\u636e\uff1a 9.5\u3001\u91cd\u65b0\u751f\u6210\u597d\u53cb\u5173\u7cfb\u6570\u636e \u00b6 \u7531\u4e8e\u4e4b\u524d\u7684\u6570\u636e\u5e76\u6ca1\u6709\u5b8c\u6574\u7684\u53cc\u5411\u6570\u636e\uff0c\u6240\u4ee5\u9700\u8981\u91cd\u65b0\u751f\u6210\uff0c\u5982\u4e0b\uff1a package com.tanhua.server ; import cn.hutool.core.convert.Convert ; import cn.hutool.core.util.RandomUtil ; import com.tanhua.common.pojo.User ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.server.service.IMService ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestIMService { @Autowired private IMService imService ; /** * \u6784\u9020\u597d\u53cb\u6570\u636e\uff0c\u4e3a1~99\u7528\u6237\u6784\u902010\u4e2a\u597d\u53cb */ @Test public void testUsers () { for ( int i = 1 ; i <= 99 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { User user = new User (); user . setId ( Convert . toLong ( i )); UserThreadLocal . set ( user ); this . imService . contactUser ( this . getFriendId ( user . getId ())); } } } private Long getFriendId ( Long userId ) { Long friendId = RandomUtil . randomLong ( 1 , 100 ); if ( friendId . intValue () == userId . intValue ()) { getFriendId ( userId ); } return friendId ; } } 10\u3001\u8054\u7cfb\u4eba\u5217\u8868 \u00b6 \u7528\u6237\u5728\u6d88\u606f\u6a21\u5757\u4e2d\uff0c\u53ef\u4ee5\u67e5\u770b\u8054\u7cfb\u4eba\u5217\u8868\uff08\u597d\u53cb\u5217\u8868\uff09\u3002 \u63a5\u53e3\u6587\u6863\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/803 10.1\u3001dubbo\u670d\u52a1 \u00b6 10.1.1\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 //com.tanhua.dubbo.server.api.UsersApi /** * \u6839\u636e\u7528\u6237id\u67e5\u8be2\u5168\u90e8Users\u5217\u8868 * * @param userId * @return */ List < Users > queryAllUsersList ( Long userId ); /** * \u6839\u636e\u7528\u6237id\u67e5\u8be2Users\u5217\u8868(\u5206\u9875\u67e5\u8be2) * * @param userId * @return */ PageInfo < Users > queryUsersList ( Long userId , Integer page , Integer pageSize ); 10.1.2\u3001\u63a5\u53e3\u5b9e\u73b0 \u00b6 //com.tanhua.dubbo.server.api.UsersApiImpl @Override public List < Users > queryAllUsersList ( Long userId ) { Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId )); return this . mongoTemplate . find ( query , Users . class ); } @Override public PageInfo < Users > queryUsersList ( Long userId , Integer page , Integer pageSize ) { PageRequest pageRequest = PageRequest . of ( page - 1 , pageSize , Sort . by ( Sort . Order . desc ( \"created\" ))); Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId )). with ( pageRequest ); List < Users > usersList = this . mongoTemplate . find ( query , Users . class ); PageInfo < Users > pageInfo = new PageInfo <> (); pageInfo . setPageNum ( page ); pageInfo . setPageSize ( pageSize ); pageInfo . setRecords ( usersList ); return pageInfo ; } 10.2\u3001APP\u63a5\u53e3\u670d\u52a1 \u00b6 10.2.1\u3001UsersVo \u00b6 package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class UsersVo { private Long id ; private String userId ; private String avatar ; private String nickname ; private String gender ; private Integer age ; private String city ; } 10.2.2\u3001IMController \u00b6 //com.tanhua.server.controller.IMController /** * \u67e5\u8be2\u8054\u7cfb\u4eba\u5217\u8868 * * @param page * @param pageSize * @param keyword * @return */ @GetMapping ( \"contacts\" ) public ResponseEntity < PageResult > queryContactsList ( @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize , @RequestParam ( value = \"keyword\" , required = false ) String keyword ) { PageResult pageResult = this . imService . queryContactsList ( page , pageSize , keyword ); return ResponseEntity . ok ( pageResult ); } 10.2.3\u3001IMService \u00b6 //com.tanhua.server.service.IMService public PageResult queryContactsList ( Integer page , Integer pageSize , String keyword ) { PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); User user = UserThreadLocal . get (); List < Users > usersList ; if ( StringUtils . isNotEmpty ( keyword )) { //\u5173\u952e\u4e0d\u4e3a\u7a7a\uff0c\u67e5\u8be2\u6240\u6709\u7684\u597d\u53cb\uff0c\u5728\u540e\u9762\u8fdb\u884c\u5173\u952e\u5b57\u8fc7\u6ee4 usersList = this . usersApi . queryAllUsersList ( user . getId ()); } else { //\u5173\u952e\u5b57\u4e3a\u7a7a\uff0c\u8fdb\u884c\u5206\u9875\u67e5\u8be2 PageInfo < Users > usersPageInfo = this . usersApi . queryUsersList ( user . getId (), page , pageSize ); usersList = usersPageInfo . getRecords (); } if ( CollUtil . isEmpty ( usersList )) { return pageResult ; } List < Object > userIds = CollUtil . getFieldValues ( usersList , \"friendId\" ); QueryWrapper < UserInfo > queryWrapper = new QueryWrapper <> (); queryWrapper . in ( \"user_id\" , userIds ); if ( StringUtils . isNotEmpty ( keyword )) { queryWrapper . like ( \"nick_name\" , keyword ); } List < UserInfo > userInfoList = this . userInfoService . queryUserInfoList ( queryWrapper ); List < UsersVo > contactsList = new ArrayList <> (); //\u586b\u5145\u7528\u6237\u4fe1\u606f for ( UserInfo userInfo : userInfoList ) { UsersVo usersVo = new UsersVo (); usersVo . setId ( userInfo . getUserId ()); usersVo . setAge ( userInfo . getAge ()); usersVo . setAvatar ( userInfo . getLogo ()); usersVo . setGender ( userInfo . getSex (). name (). toLowerCase ()); usersVo . setNickname ( userInfo . getNickName ()); //\u73af\u4fe1\u7528\u6237\u8d26\u53f7 usersVo . setUserId ( \"HX_\" + String . valueOf ( userInfo . getUserId ())); usersVo . setCity ( StringUtils . substringBefore ( userInfo . getCity (), \"-\" )); contactsList . add ( usersVo ); } pageResult . setItems ( contactsList ); return pageResult ; } 10.3\u3001\u6d4b\u8bd5 \u00b6","title":"day06"},{"location":"tantan/day06/#_1","text":"\u5b9e\u73b0\u89c6\u9891\u70b9\u8d5e\u3001\u8bc4\u8bba\u3001\u5173\u6ce8\u529f\u80fd \u4e86\u89e3\u4ec0\u4e48\u662f\u5373\u65f6\u901a\u4fe1 \u4e86\u89e3\u63a2\u82b1\u4ea4\u53cb\u7684\u6d88\u606f\u529f\u80fd \u4e86\u89e3\u5373\u65f6\u901a\u4fe1\u7684\u6280\u672f\u65b9\u6848 \u4e86\u89e3\u73af\u4fe1\u7684\u5373\u65f6\u901a\u8baf \u5b9e\u73b0\u73af\u4fe1\u7684\u7528\u6237\u4f53\u7cfb\u96c6\u6210 \u5b9e\u73b0\u6dfb\u52a0\u8054\u7cfb\u4eba\u3001\u8054\u7cfb\u4eba\u5217\u8868\u529f\u80fd","title":"\u8bfe\u7a0b\u8bf4\u660e"},{"location":"tantan/day06/#1","text":"\u70b9\u8d5e\u903b\u8f91\u4e0e\u5708\u5b50\u70b9\u8d5e\u903b\u8f91\u4e00\u81f4\uff0c\u6240\u4ee5\u53ef\u4ee5\u590d\u7528\u5708\u5b50\u70b9\u8d5e\u7684\u903b\u8f91\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u70b9\u8d5e\u5bf9\u8c61\u662fVideo\uff0c\u8bbe\u7f6epublishUserId\u7684\u903b\u8f91\u4e5f\u9700\u8981\u5b8c\u5584\u4e0b\u3002","title":"1\u3001\u89c6\u9891\u70b9\u8d5e"},{"location":"tantan/day06/#11dubbo","text":"\u4fee\u6539\u4fdd\u5b58Comment\u903b\u8f91\uff0c\u5728\u539f\u6709\u903b\u8f91\u4e2d\u589e\u52a0\u5bf9\u5c0f\u89c6\u9891\u7684\u652f\u6301\uff1a //com.tanhua.dubbo.server.api.QuanZiApiImpl /** * \u4fdd\u5b58Comment * * @return */ private Boolean saveComment ( Long userId , String publishId , CommentType commentType , String content ) { try { Comment comment = new Comment (); comment . setId ( ObjectId . get ()); comment . setUserId ( userId ); comment . setPublishId ( new ObjectId ( publishId )); // \u8bc4\u8bba\u7c7b\u578b comment . setCommentType ( commentType . getType ()); // \u5185\u5bb9 comment . setContent ( content ); comment . setCreated ( System . currentTimeMillis ()); Publish publish = this . queryPublishById ( publishId ); if ( ObjectUtil . isNotEmpty ( publish )) { comment . setPublishUserId ( publish . getUserId ()); } else { //\u67e5\u8be2\u8bc4\u8bba Comment myComment = this . queryCommentById ( publishId ); if ( ObjectUtil . isNotEmpty ( myComment )){ comment . setPublishUserId ( myComment . getUserId ()); } else { //\u67e5\u8be2\u5c0f\u89c6\u9891 Video video = this . videoApi . queryVideoById ( publishId ); if ( ObjectUtil . isNotEmpty ( video )){ comment . setPublishUserId ( video . getUserId ()); } else { // \u5176\u4ed6\u60c5\u51b5\uff0c\u76f4\u63a5\u8fd4\u56de return false ; } } } this . mongoTemplate . save ( comment ); return true ; } catch ( Exception e ) { log . error ( \"\u4fdd\u5b58Comment\u51fa\u9519~ userId = \" + userId + \", publishId = \" + publishId + \", commentType = \" + commentType , e ); } return false ; } \u5728VideoApi\u4e2d\u5b9a\u4e49\u6839\u636eid\u67e5\u8be2Video\u7684\u65b9\u6cd5\uff1a // com.tanhua.dubbo.server.api.VideoApi /** * \u6839\u636eid\u67e5\u8be2\u89c6\u9891\u5bf9\u8c61 * * @param videoId \u5c0f\u89c6\u9891id * @return */ Video queryVideoById ( String videoId ); \u7f16\u5199\u5b9e\u73b0\uff1a // com.tanhua.dubbo.server.api.VideoApiImpl @Override public Video queryVideoById ( String videoId ) { return this . mongoTemplate . findById ( new ObjectId ( videoId ), Video . class ); }","title":"1.1\u3001dubbo\u670d\u52a1"},{"location":"tantan/day06/#12app","text":"\u63a5\u53e3\u5730\u5740\uff1a \u70b9\u8d5e https://mock-java.itheima.net/project/35/interface/api/827 \u53d6\u6d88\u70b9\u8d5e\uff1ahttps://mock-java.itheima.net/project/35/interface/api/833","title":"1.2\u3001APP\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day06/#121videocontroller","text":"/** * \u89c6\u9891\u70b9\u8d5e * * @param videoId \u89c6\u9891id * @return */ @PostMapping ( \"/{id}/like\" ) public ResponseEntity < Long > likeComment ( @PathVariable ( \"id\" ) String videoId ) { try { Long likeCount = this . videoService . likeComment ( videoId ); if ( likeCount != null ) { return ResponseEntity . ok ( likeCount ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u53d6\u6d88\u70b9\u8d5e * * @param videoId * @return */ @PostMapping ( \"/{id}/dislike\" ) public ResponseEntity < Long > disLikeComment ( @PathVariable ( \"id\" ) String videoId ) { try { Long likeCount = this . videoService . disLikeComment ( videoId ); if ( null != likeCount ) { return ResponseEntity . ok ( likeCount ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"1.2.1\u3001VideoController"},{"location":"tantan/day06/#122videoservice","text":"//com.tanhua.server.service.VideoService /** * \u70b9\u8d5e * * @param videoId * @return */ public Long likeComment ( String videoId ) { User user = UserThreadLocal . get (); Boolean result = this . quanZiApi . likeComment ( user . getId (), videoId ); if ( result ) { return this . quanZiApi . queryLikeCount ( videoId ); } return null ; } /** * \u53d6\u6d88\u70b9\u8d5e * * @param videoId * @return */ public Long disLikeComment ( String videoId ) { User user = UserThreadLocal . get (); Boolean result = this . quanZiApi . disLikeComment ( user . getId (), videoId ); if ( result ) { return this . quanZiApi . queryLikeCount ( videoId ); } return null ; }","title":"1.2.2\u3001VideoService"},{"location":"tantan/day06/#123","text":"\u5728\u67e5\u8be2\u5c0f\u89c6\u9891\u5217\u8868\u4e2d\uff0c\u9700\u8981\u5b8c\u5584\u4e4b\u524dTODO\u7684\u90e8\u5206\u3002 //com.tanhua.server.service.VideoService public PageResult queryVideoList ( Integer page , Integer pageSize ) { User user = UserThreadLocal . get (); PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); PageInfo < Video > pageInfo = this . videoApi . queryVideoList ( user . getId (), page , pageSize ); List < Video > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )) { return pageResult ; } //\u67e5\u8be2\u7528\u6237\u4fe1\u606f List < Object > userIds = CollUtil . getFieldValues ( records , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIds ); List < VideoVo > videoVoList = new ArrayList <> (); for ( Video record : records ) { VideoVo videoVo = new VideoVo (); videoVo . setUserId ( record . getUserId ()); videoVo . setCover ( record . getPicUrl ()); videoVo . setVideoUrl ( record . getVideoUrl ()); videoVo . setId ( record . getId (). toHexString ()); videoVo . setSignature ( \"\u6211\u5c31\u662f\u6211~\" ); //TODO \u7b7e\u540d videoVo . setCommentCount ( 0 ); //TODO \u8bc4\u8bba\u6570 videoVo . setHasFocus ( 0 ); //TODO \u662f\u5426\u5173\u6ce8 videoVo . setHasLiked ( this . quanZiApi . queryUserIsLike ( user . getId (), videoVo . getId ()) ? 1 : 0 ); //\u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 videoVo . setLikeCount ( Convert . toInt ( this . quanZiApi . queryLikeCount ( videoVo . getId ()))); //\u70b9\u8d5e\u6570 //\u586b\u5145\u7528\u6237\u4fe1\u606f for ( UserInfo userInfo : userInfoList ) { if ( ObjectUtil . equals ( videoVo . getUserId (), userInfo . getUserId ())) { videoVo . setNickname ( userInfo . getNickName ()); videoVo . setAvatar ( userInfo . getLogo ()); break ; } } videoVoList . add ( videoVo ); } pageResult . setItems ( videoVoList ); return pageResult ; }","title":"1.2.3\u3001\u4fee\u6539\u70b9\u8d5e\u6570\u67e5\u8be2"},{"location":"tantan/day06/#2","text":"\u5c0f\u89c6\u9891\u7684\u8bc4\u8bba\u4e0e\u5708\u5b50\u7684\u8bc4\u8bba\u903b\u8f91\u7c7b\u4f3c\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u4f7f\u7528\u540c\u4e00\u5957\u903b\u8f91\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5f00\u53d1APP\u63a5\u53e3\u529f\u80fd\u5373\u53ef\u3002 \u8bc4\u8bba\u76f8\u5173\u7684\u63a5\u53e3\u5b9a\u4e49\uff1a \u53d1\u5e03\u8bc4\u8bba\uff1ahttps://mock-java.itheima.net/project/35/interface/api/857 \u8bc4\u8bba\u5217\u8868\uff1ahttps://mock-java.itheima.net/project/35/interface/api/851 \u8bc4\u8bba\u70b9\u8d5e\uff1ahttps://mock-java.itheima.net/project/35/interface/api/863 \u8bc4\u8bba\u53d6\u6d88\u70b9\u8d5e\uff1ahttps://mock-java.itheima.net/project/35/interface/api/869","title":"2\u3001\u89c6\u9891\u8bc4\u8bba"},{"location":"tantan/day06/#21videocontroller","text":"//com.tanhua.server.controller.VideoController /** * \u8bc4\u8bba\u5217\u8868 */ @GetMapping ( \"/{id}/comments\" ) public ResponseEntity < PageResult > queryCommentsList ( @PathVariable ( \"id\" ) String videoId , @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize ) { try { PageResult pageResult = this . videoService . queryCommentList ( videoId , page , pageSize ); return ResponseEntity . ok ( pageResult ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u63d0\u4ea4\u8bc4\u8bba * * @param param * @param videoId * @return */ @PostMapping ( \"/{id}/comments\" ) public ResponseEntity < Void > saveComments ( @RequestBody Map < String , String > param , @PathVariable ( \"id\" ) String videoId ) { try { String content = param . get ( \"comment\" ); Boolean result = this . videoService . saveComment ( videoId , content ); if ( result ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u8bc4\u8bba\u70b9\u8d5e * * @param videoCommentId \u89c6\u9891\u4e2d\u7684\u8bc4\u8bbaid * @return */ @PostMapping ( \"/comments/{id}/like\" ) public ResponseEntity < Long > commentsLikeComment ( @PathVariable ( \"id\" ) String videoCommentId ) { try { Long likeCount = this . videoService . likeComment ( videoCommentId ); if ( likeCount != null ) { return ResponseEntity . ok ( likeCount ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u8bc4\u8bba\u53d6\u6d88\u70b9\u8d5e * * @param videoCommentId \u89c6\u9891\u4e2d\u7684\u8bc4\u8bbaid * @return */ @PostMapping ( \"/comments/{id}/dislike\" ) public ResponseEntity < Long > disCommentsLikeComment ( @PathVariable ( \"id\" ) String videoCommentId ) { try { Long likeCount = this . videoService . disLikeComment ( videoCommentId ); if ( null != likeCount ) { return ResponseEntity . ok ( likeCount ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"2.1\u3001VideoController"},{"location":"tantan/day06/#22videoservice","text":"// com.tanhua.server.service.VideoService public PageResult queryCommentList ( String videoId , Integer page , Integer pageSize ) { return this . quanZiService . queryCommentList ( videoId , page , pageSize ); } public Boolean saveComment ( String videoId , String content ) { return this . quanZiService . saveComments ( videoId , content ); }","title":"2.2\u3001VideoService"},{"location":"tantan/day06/#23","text":"\u5728\u5c0f\u89c6\u9891\u5217\u8868\u67e5\u8be2\u7ed3\u679c\u4e2d\uff0c\u9700\u8981\u8fd4\u56de\u8be5\u89c6\u9891\u7684\u8bc4\u8bba\u6570\u636e\uff0c\u7531\u4e8e\u4e4b\u524d\u5728dubbo\u670d\u52a1\u4e2d\u6ca1\u6709\u63d0\u4f9b\u67e5\u8be2\u65b9\u6cd5\uff0c\u6240\u4ee5\u9700\u8981\u5148\u5b9e\u73b0\u67e5\u8be2\u65b9\u6cd5\u3002","title":"2.3\u3001\u67e5\u8be2\u8bc4\u8bba\u6570"},{"location":"tantan/day06/#231dubbo","text":"","title":"2.3.1\u3001dubbo\u670d\u52a1"},{"location":"tantan/day06/#2311","text":"//com.tanhua.dubbo.server.api.QuanZiApi /** * \u67e5\u8be2\u8bc4\u8bba\u6570 * * @param publishId * @return */ Long queryCommentCount ( String publishId );","title":"2.3.1.1\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day06/#2312","text":"// com.tanhua.dubbo.server.api.QuanZiApiImpl @Override public Long queryCommentCount ( String publishId ) { return this . queryCommentCount ( publishId , CommentType . COMMENT ); }","title":"2.3.1.2\u3001\u7f16\u5199\u5b9e\u73b0"},{"location":"tantan/day06/#232","text":"//com.tanhua.server.service.VideoService public PageResult queryVideoList ( Integer page , Integer pageSize ) { User user = UserThreadLocal . get (); PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); PageInfo < Video > pageInfo = this . videoApi . queryVideoList ( user . getId (), page , pageSize ); List < Video > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )) { return pageResult ; } //\u67e5\u8be2\u7528\u6237\u4fe1\u606f List < Object > userIds = CollUtil . getFieldValues ( records , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIds ); List < VideoVo > videoVoList = new ArrayList <> (); for ( Video record : records ) { VideoVo videoVo = new VideoVo (); videoVo . setUserId ( record . getUserId ()); videoVo . setCover ( record . getPicUrl ()); videoVo . setVideoUrl ( record . getVideoUrl ()); videoVo . setId ( record . getId (). toHexString ()); videoVo . setSignature ( \"\u6211\u5c31\u662f\u6211~\" ); //TODO \u7b7e\u540d videoVo . setCommentCount ( Convert . toInt ( this . quanZiApi . queryCommentCount ( videoVo . getId ()))); //\u8bc4\u8bba\u6570 videoVo . setHasFocus ( 0 ); //TODO \u662f\u5426\u5173\u6ce8 videoVo . setHasLiked ( this . quanZiApi . queryUserIsLike ( user . getId (), videoVo . getId ()) ? 1 : 0 ); //\u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 videoVo . setLikeCount ( Convert . toInt ( this . quanZiApi . queryLikeCount ( videoVo . getId ()))); //\u70b9\u8d5e\u6570 //\u586b\u5145\u7528\u6237\u4fe1\u606f for ( UserInfo userInfo : userInfoList ) { if ( ObjectUtil . equals ( videoVo . getUserId (), userInfo . getUserId ())) { videoVo . setNickname ( userInfo . getNickName ()); videoVo . setAvatar ( userInfo . getLogo ()); break ; } } videoVoList . add ( videoVo ); } pageResult . setItems ( videoVoList ); return pageResult ; }","title":"2.3.2\u3001\u67e5\u8be2\u8bc4\u8bba\u6570"},{"location":"tantan/day06/#24","text":"","title":"2.4\u3001\u6d4b\u8bd5"},{"location":"tantan/day06/#3","text":"\u5173\u6ce8\u7528\u6237\u662f\u5173\u6ce8\u5c0f\u89c6\u9891\u53d1\u5e03\u7684\u4f5c\u8005\uff0c\u9700\u8981\u5728dubbo\u670d\u52a1\u4e2d\u63d0\u4f9b\u7ed9\u76f8\u5173\u7684\u670d\u52a1\u3002","title":"3\u3001\u5173\u6ce8\u7528\u6237"},{"location":"tantan/day06/#31dubbo","text":"","title":"3.1\u3001dubbo\u670d\u52a1"},{"location":"tantan/day06/#311followuser","text":"package com.tanhua.dubbo.server.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.mongodb.core.mapping.Document ; /** * \u5173\u6ce8\u7528\u6237 */ @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"follow_user\" ) public class FollowUser implements java . io . Serializable { private static final long serialVersionUID = 3148619072405056052L ; private ObjectId id ; //\u4e3b\u952eid private Long userId ; //\u7528\u6237id private Long followUserId ; //\u5173\u6ce8\u7684\u7528\u6237id private Long created ; //\u5173\u6ce8\u65f6\u95f4 }","title":"3.1.1\u3001FollowUser"},{"location":"tantan/day06/#312","text":"//com.tanhua.dubbo.server.api.VideoApi /** * \u5173\u6ce8\u7528\u6237 * * @param userId \u5f53\u524d\u7528\u6237 * @param followUserId \u5173\u6ce8\u7684\u76ee\u6807\u7528\u6237 * @return */ Boolean followUser ( Long userId , Long followUserId ); /** * \u53d6\u6d88\u5173\u6ce8\u7528\u6237 * * @param userId \u5f53\u524d\u7528\u6237 * @param followUserId \u5173\u6ce8\u7684\u76ee\u6807\u7528\u6237 * @return */ Boolean disFollowUser ( Long userId , Long followUserId ); /** * \u67e5\u8be2\u7528\u6237\u662f\u5426\u5173\u6ce8\u67d0\u4e2a\u7528\u6237 * * @param userId \u5f53\u524d\u7528\u6237 * @param followUserId \u5173\u6ce8\u7684\u76ee\u6807\u7528\u6237 * @return */ Boolean isFollowUser ( Long userId , Long followUserId );","title":"3.1.2\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day06/#313","text":"//com.tanhua.dubbo.server.api.VideoApiImpl private static final String VIDEO_FOLLOW_USER_KEY_PREFIX = \"VIDEO_FOLLOW_USER_\" ; @Override public Boolean followUser ( Long userId , Long followUserId ) { if ( ! ObjectUtil . isAllNotEmpty ( userId , followUserId )) { return false ; } try { //\u9700\u8981\u5c06\u7528\u6237\u7684\u5173\u6ce8\u5217\u8868\uff0c\u4fdd\u5b58\u5230redis\u4e2d\uff0c\u65b9\u4fbf\u540e\u7eed\u7684\u67e5\u8be2 //\u4f7f\u7528redis\u7684hash\u7ed3\u6784 if ( this . isFollowUser ( userId , followUserId )) { return false ; } FollowUser followUser = new FollowUser (); followUser . setId ( ObjectId . get ()); followUser . setUserId ( userId ); followUser . setFollowUserId ( followUserId ); followUser . setCreated ( System . currentTimeMillis ()); this . mongoTemplate . save ( followUser ); //\u4fdd\u5b58\u6570\u636e\u5230redis String redisKey = this . getVideoFollowUserKey ( userId ); String hashKey = String . valueOf ( followUserId ); this . redisTemplate . opsForHash (). put ( redisKey , hashKey , \"1\" ); return true ; } catch ( Exception e ) { e . printStackTrace (); } return false ; } @Override public Boolean disFollowUser ( Long userId , Long followUserId ) { if ( ! ObjectUtil . isAllNotEmpty ( userId , followUserId )) { return false ; } if ( ! this . isFollowUser ( userId , followUserId )) { return false ; } //\u53d6\u6d88\u5173\u6ce8\uff0c\u5220\u9664\u5173\u6ce8\u6570\u636e\u5373\u53ef Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId ) . and ( \"followUserId\" ). is ( followUserId ) ); DeleteResult result = this . mongoTemplate . remove ( query , FollowUser . class ); if ( result . getDeletedCount () > 0 ) { //\u540c\u65f6\u5220\u9664redis\u4e2d\u7684\u6570\u636e String redisKey = this . getVideoFollowUserKey ( userId ); String hashKey = String . valueOf ( followUserId ); this . redisTemplate . opsForHash (). delete ( redisKey , hashKey ); return true ; } return false ; } @Override public Boolean isFollowUser ( Long userId , Long followUserId ) { String redisKey = this . getVideoFollowUserKey ( userId ); String hashKey = String . valueOf ( followUserId ); return this . redisTemplate . opsForHash (). hasKey ( redisKey , hashKey ); } private String getVideoFollowUserKey ( Long userId ) { return VIDEO_FOLLOW_USER_KEY_PREFIX + userId ; }","title":"3.1.3\u3001\u7f16\u5199\u5b9e\u73b0"},{"location":"tantan/day06/#32app","text":"\u5173\u6ce8\u7528\u6237\uff1ahttps://mock-java.itheima.net/project/35/interface/api/839 \u53d6\u6d88\u5173\u6ce8\uff1ahttps://mock-java.itheima.net/project/35/interface/api/845","title":"3.2\u3001APP\u670d\u52a1"},{"location":"tantan/day06/#321videocontroller","text":"//com.tanhua.server.controller.VideoController /** * \u89c6\u9891\u7528\u6237\u5173\u6ce8 */ @PostMapping ( \"/{id}/userFocus\" ) public ResponseEntity < Void > saveUserFocusComments ( @PathVariable ( \"id\" ) Long userId ) { try { Boolean bool = this . videoService . followUser ( userId ); if ( bool ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u53d6\u6d88\u89c6\u9891\u7528\u6237\u5173\u6ce8 */ @PostMapping ( \"/{id}/userUnFocus\" ) public ResponseEntity < Void > saveUserUnFocusComments ( @PathVariable ( \"id\" ) Long userId ) { try { Boolean bool = this . videoService . disFollowUser ( userId ); if ( bool ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"3.2.1\u3001VideoController"},{"location":"tantan/day06/#322videoservice","text":"//com.tanhua.server.service.VideoService /** * \u5173\u6ce8\u7528\u6237 * * @param userId * @return */ public Boolean followUser ( Long userId ) { User user = UserThreadLocal . get (); return this . videoApi . followUser ( user . getId (), userId ); } /** * \u53d6\u6d88\u5173\u6ce8 * * @param userId * @return */ public Boolean disFollowUser ( Long userId ) { User user = UserThreadLocal . get (); return this . videoApi . disFollowUser ( user . getId (), userId ); }","title":"3.2.2\u3001VideoService"},{"location":"tantan/day06/#323","text":"//com.tanhua.server.service.VideoService public PageResult queryVideoList ( Integer page , Integer pageSize ) { User user = UserThreadLocal . get (); PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); PageInfo < Video > pageInfo = this . videoApi . queryVideoList ( user . getId (), page , pageSize ); List < Video > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )) { return pageResult ; } //\u67e5\u8be2\u7528\u6237\u4fe1\u606f List < Object > userIds = CollUtil . getFieldValues ( records , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIds ); List < VideoVo > videoVoList = new ArrayList <> (); for ( Video record : records ) { VideoVo videoVo = new VideoVo (); videoVo . setUserId ( record . getUserId ()); videoVo . setCover ( record . getPicUrl ()); videoVo . setVideoUrl ( record . getVideoUrl ()); videoVo . setId ( record . getId (). toHexString ()); videoVo . setSignature ( \"\u6211\u5c31\u662f\u6211~\" ); //TODO \u7b7e\u540d videoVo . setCommentCount ( Convert . toInt ( this . quanZiApi . queryCommentCount ( videoVo . getId ()))); //\u8bc4\u8bba\u6570 videoVo . setHasFocus ( this . videoApi . isFollowUser ( user . getId (), videoVo . getUserId ()) ? 1 : 0 ); //\u662f\u5426\u5173\u6ce8 videoVo . setHasLiked ( this . quanZiApi . queryUserIsLike ( user . getId (), videoVo . getId ()) ? 1 : 0 ); //\u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 videoVo . setLikeCount ( Convert . toInt ( this . quanZiApi . queryLikeCount ( videoVo . getId ()))); //\u70b9\u8d5e\u6570 //\u586b\u5145\u7528\u6237\u4fe1\u606f for ( UserInfo userInfo : userInfoList ) { if ( ObjectUtil . equals ( videoVo . getUserId (), userInfo . getUserId ())) { videoVo . setNickname ( userInfo . getNickName ()); videoVo . setAvatar ( userInfo . getLogo ()); break ; } } videoVoList . add ( videoVo ); } pageResult . setItems ( videoVoList ); return pageResult ; }","title":"3.2.3\u3001\u67e5\u8be2\u662f\u5426\u5173\u6ce8"},{"location":"tantan/day06/#33","text":"\u53ef\u4ee5\u770b\u5230\uff0c\u5df2\u7ecf\u5b8c\u6210\u4e86\u5173\u6ce8\u7528\u6237\u3002","title":"3.3\u3001\u6d4b\u8bd5"},{"location":"tantan/day06/#4","text":"","title":"4\u3001\u5373\u65f6\u901a\u4fe1"},{"location":"tantan/day06/#41","text":"","title":"4.1\u3001\u4ec0\u4e48\u662f\u5373\u65f6\u901a\u4fe1\uff1f"},{"location":"tantan/day06/#42","text":"\u5728\u63a2\u82b1\u4ea4\u53cb\u9879\u76ee\u4e2d\u4e5f\u63d0\u4f9b\u4e86\u7c7b\u4f3c\u5fae\u4fe1\u7684\u804a\u5929\u529f\u80fd\uff0c\u7528\u6237\u53ef\u4ee5\u548c\u597d\u53cb\u6216\u964c\u751f\u4eba\u804a\u5929\u3002 \u5982\u679c\u662f\u964c\u751f\u4eba\uff0c\u901a\u8fc7\u300a\u804a\u4e00\u4e0b\u300b\u529f\u80fd\u8fdb\u884c\u6253\u62db\u547c\uff0c\u5982\u679c\u5bf9\u65b9\u540c\u610f\u540e\uff0c\u5c31\u6210\u4e3a\u4e86\u597d\u53cb\uff0c\u53ef\u4ee5\u8fdb\u884c\u804a\u5929\u4e86\u3002 \u964c\u751f\u4eba\u4e4b\u95f4\u5982\u679c\u76f8\u4e92\u559c\u6b22\uff0c\u90a3\u4e48\u5c31\u4f1a\u6210\u4e3a\u597d\u53cb\uff0c\u4e5f\u5c31\u53ef\u4ee5\u804a\u5929\u4e86\u3002 \u5728\u6d88\u606f\u754c\u9762\u4e2d\u4e5f\u53ef\u4ee5\u67e5\u770b\uff1a\u70b9\u8d5e\u3001\u8bc4\u8bba\u3001\u559c\u6b22\u3001\u516c\u544a\u7b49\u6d88\u606f\u4fe1\u606f\u3002","title":"4.2\u3001\u529f\u80fd\u8bf4\u660e"},{"location":"tantan/day06/#5","text":"\u5bf9\u4e8e\u9ad8\u5e76\u53d1\u7684\u5373\u65f6\u901a\u8baf\u5b9e\u73b0\uff0c\u8fd8\u662f\u5f88\u6709\u6311\u6218\u7684\uff0c\u6240\u9700\u8981\u8003\u8651\u7684\u70b9\u975e\u5e38\u591a\uff0c\u9664\u4e86\u8981\u5b9e\u73b0\u529f\u80fd\uff0c\u8fd8\u8981\u8003\u8651\u5e76\u53d1\u3001\u6d41\u91cf\u3001\u8d1f\u8f7d\u3001\u670d\u52a1\u5668\u3001\u5bb9\u707e\u7b49\u7b49\u3002\u867d\u7136\u6709\u96be\u5ea6\u4e5f\u5e76\u4e0d\u662f\u9ad8\u4e0d\u53ef\u6500\u3002 \u5bf9\u4e8e\u73b0\u5b9e\u5373\u65f6\u901a\u8baf\u5f80\u5f80\u6709\u4e24\u79cd\u65b9\u6848\uff1a \u65b9\u6848\u4e00\uff1a \u81ea\u4e3b\u5b9e\u73b0\uff0c\u4ece\u8bbe\u8ba1\u5230\u67b6\u6784\uff0c\u518d\u5230\u5b9e\u73b0\u3002 \u6280\u672f\u65b9\u9762\u53ef\u4ee5\u91c7\u7528\uff1aNetty + WebSocket + RocketMQ + MongoDB + Redis + ZooKeeper + MySQL \u65b9\u6848\u4e8c\uff1a \u5bf9\u63a5\u7b2c\u4e09\u65b9\u670d\u52a1\u5b8c\u6210\u3002 \u8fd9\u79cd\u65b9\u5f0f\u7b80\u5355\uff0c\u53ea\u9700\u8981\u6309\u7167\u7b2c\u4e09\u65b9\u7684api\u8fdb\u884c\u5bf9\u63a5\u5c31\u53ef\u4ee5\u4e86\u3002 \u5982\uff1a\u73af\u4fe1\u3001\u7f51\u6613\u3001\u5bb9\u8054\u4e91\u901a\u8baf\u7b49\u3002 \u5982\u4f55\u9009\u62e9\u5462\uff1f \u5982\u679c\u662f\u4e2d\u5927\u578b\u4f01\u4e1a\u505a\u9879\u76ee\u53ef\u4ee5\u9009\u62e9\u81ea\u4e3b\u7814\u53d1\uff0c\u5982\u679c\u662f\u4e2d\u5c0f\u578b\u4f01\u4e1a\u7814\u53d1\u4e2d\u5c0f\u578b\u7684\u9879\u76ee\uff0c\u9009\u62e9\u7b2c\u4e8c\u79cd\u65b9\u6848\u5373\u53ef\u3002\u65b9\u6848\u4e00\u9700\u8981\u6709\u5927\u91cf\u7684\u4eba\u529b\u3001\u7269\u529b\u7684\u652f\u6301\uff0c\u5f00\u53d1\u5468\u671f\u957f\uff0c\u6210\u672c\u9ad8\uff0c\u4f46\u53ef\u63a7\u6027\u5f3a\u3002\u65b9\u6848\u4e8c\uff0c\u6210\u672c\u4f4e\uff0c\u5f00\u53d1\u5468\u671f\u77ed\uff0c\u80fd\u591f\u5feb\u901f\u7684\u96c6\u6210\u8d77\u6765\u8fdb\u884c\u529f\u80fd\u7684\u5f00\u53d1\uff0c\u53ea\u662f\u5728\u53ef\u63a7\u6027\u65b9\u9762\u6765\u8bf4\u5c31\u5dee\u4e86\u4e00\u4e9b\u3002 \u63a2\u82b1\u4ea4\u53cb\u9879\u76ee\u9009\u62e9\u65b9\u6848\u4e8c\u8fdb\u884c\u5b9e\u73b0\u3002","title":"5\u3001\u6280\u672f\u65b9\u6848"},{"location":"tantan/day06/#6","text":"\u5b98\u7f51\uff1ahttps://www.easemob.com/ \u7a33\u5b9a\u5065\u58ee\uff0c\u6d88\u606f\u5fc5\u8fbe\uff0c\u4ebf\u7ea7\u5e76\u53d1\u7684\u5373\u65f6\u901a\u8baf\u4e91 \u73af\u4fe1\u5e73\u53f0\u4e3a\u9ed1\u9a6c\u5b66\u5458\u5f00\u8bbe\u7684\u4e13\u7528\u6ce8\u518c\u5730\u5740\uff1ahttps://datayi.cn/w/woVL50vR","title":"6\u3001\u73af\u4fe1"},{"location":"tantan/day06/#61","text":"\u6587\u6863\u5730\u5740\uff1ahttp://docs-im.easemob.com/ \u5e73\u53f0\u67b6\u6784\uff1a \u96c6\u6210\uff1a \u73af\u4fe1\u548c\u7528\u6237\u4f53\u7cfb\u7684\u96c6\u6210\u4e3b\u8981\u53d1\u751f\u57282\u4e2a\u5730\u65b9\uff0c\u670d\u52a1\u5668\u7aef\u96c6\u6210\u548c\u5ba2\u6237\u7aef\u96c6\u6210\u3002 \u63a2\u82b1\u96c6\u6210\uff1a \u63a2\u82b1\u524d\u7aef\u4f7f\u7528AndroidSDK\u8fdb\u884c\u96c6\u6210 \u6587\u6863\uff1ahttp://docs-im.easemob.com/im/android/sdk/import \u540e\u7aef\u96c6\u6210\u7528\u6237\u4f53\u7cfb \u6587\u6863\uff1ahttp://docs-im.easemob.com/im/server/ready/user","title":"6.1\u3001\u5f00\u53d1\u7b80\u4ecb"},{"location":"tantan/day06/#62console","text":"\u9700\u8981\u4f7f\u7528\u73af\u4fe1\u5e73\u53f0\uff0c\u90a3\u4e48\u5fc5\u987b\u8981\u8fdb\u884c\u6ce8\u518c\uff0c\u767b\u5f55\u4e4b\u540e\u5373\u53ef\u521b\u5efa\u5e94\u7528\u3002\u73af\u4fe1100\u4ee5\u5185\u7684\u7528\u6237\u514d\u8d39\u4f7f\u7528\uff0c100\u4ee5\u4e0a\u5c31\u8981\u6ce8\u518c\u4f01\u4e1a\u7248\u4e86\u3002 \u4f01\u4e1a\u7248\u4ef7\u683c\uff1a \u521b\u5efa\u5e94\u7528\uff1a \u521b\u5efa\u5b8c\u6210\uff1a","title":"6.2\u3001\u73af\u4fe1Console"},{"location":"tantan/day06/#63","text":"\u8bf4\u660e\uff1a \u5728APP\u7aef\u4e0e\u540e\u7aef\u7cfb\u7edf\uff0c\u90fd\u9700\u8981\u5b8c\u6210\u4e0e\u73af\u4fe1\u7684\u96c6\u6210\u3002 \u5728APP\u7aef\uff0c\u4f7f\u7528Android\u7684SDK\u4e0e\u73af\u4fe1\u8fdb\u884c\u901a\u4fe1\uff0c\u901a\u4fe1\u65f6\u9700\u8981\u901a\u8fc7\u540e\u53f0\u7cfb\u7edf\u7684\u63a5\u53e3\u67e5\u8be2\u5f53\u524d\u7528\u6237\u7684\u73af\u4fe1\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u8fdb\u884c\u767b\u5f55\u73af\u4fe1\u3002 \u540e\u53f0\u7cfb\u7edf\uff0c\u5728\u7528\u6237\u6ce8\u518c\u540e\uff0c\u540c\u6b65\u6ce8\u518c\u73af\u4fe1\u7528\u6237\u5230\u73af\u4fe1\u5e73\u53f0\uff0c\u5728\u540e\u53f0\u7cfb\u7edf\u4e2d\u4fdd\u5b58\u73af\u4fe1\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 APP\u62ff\u5230\u7528\u6237\u540d\u548c\u5bc6\u7801\u540e\uff0c\u8fdb\u884c\u767b\u5f55\u73af\u4fe1\uff0c\u767b\u5f55\u6210\u529f\u540e\u5373\u53ef\u5411\u73af\u4fe1\u53d1\u9001\u6d88\u606f\u7ed9\u597d\u53cb\u3002 \u540e\u53f0\u7cfb\u7edf\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7ba1\u7406\u5458\u7684\u8eab\u4efd\u7ed9\u7528\u6237\u53d1\u9001\u7cfb\u7edf\u4fe1\u606f\u3002","title":"6.3\u3001\u6574\u4f53\u6d41\u7a0b\u56fe"},{"location":"tantan/day06/#7","text":"\u73af\u4fe1\u63d0\u4f9b\u7684 REST API \u9700\u8981\u6743\u9650\u624d\u80fd\u8bbf\u95ee\uff0c\u6743\u9650\u901a\u8fc7\u53d1\u9001 HTTP \u8bf7\u6c42\u65f6\u643a\u5e26 token \u6765\u4f53\u73b0\u3002 \u5b98\u65b9\u6587\u6863\uff1a \u83b7\u53d6\u7ba1\u7406\u5458\u6743\u9650 \u4e0e\u73af\u4fe1\u7684\u96c6\u6210\uff0c\u6211\u4eec\u5c06\u76f8\u5173\u7684\u4ee3\u7801\u903b\u8f91\u5199\u5165\u5230\u65b0\u7684dubbo\u5de5\u7a0b\u4e2d\uff0c\u540d\u5b57\u53eb\uff1amy-tanhua-dubbo-huanxin\u3002","title":"7\u3001\u83b7\u53d6\u7ba1\u7406\u5458\u6743\u9650"},{"location":"tantan/day06/#71dubbo","text":"pom.xml\uff1a <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> my-tanhua-dubbo </artifactId> <groupId> cn.itcast.tanhua </groupId> <version> 1.0-SNAPSHOT </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> my-tanhua-dubbo-huanxin </artifactId> <dependencies> <!--\u5f15\u5165interface\u4f9d\u8d56--> <dependency> <groupId> cn.itcast.tanhua </groupId> <artifactId> my-tanhua-dubbo-interface </artifactId> <version> 1.0-SNAPSHOT </version> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-redis </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-test </artifactId> <scope> test </scope> </dependency> <dependency> <groupId> com.baomidou </groupId> <artifactId> mybatis-plus </artifactId> </dependency> <dependency> <groupId> com.baomidou </groupId> <artifactId> mybatis-plus-boot-starter </artifactId> </dependency> <dependency> <groupId> mysql </groupId> <artifactId> mysql-connector-java </artifactId> </dependency> <!--dubbo\u7684springboot\u652f\u6301--> <dependency> <groupId> com.alibaba.boot </groupId> <artifactId> dubbo-spring-boot-starter </artifactId> </dependency> <!--dubbo\u6846\u67b6--> <dependency> <groupId> com.alibaba </groupId> <artifactId> dubbo </artifactId> </dependency> <!--zk\u4f9d\u8d56--> <dependency> <groupId> org.apache.zookeeper </groupId> <artifactId> zookeeper </artifactId> </dependency> <dependency> <groupId> com.github.sgroschupf </groupId> <artifactId> zkclient </artifactId> </dependency> <dependency> <groupId> io.netty </groupId> <artifactId> netty-all </artifactId> </dependency> <dependency> <groupId> cn.hutool </groupId> <artifactId> hutool-all </artifactId> </dependency> </dependencies> </project> application.properties: # Spring boot application spring.application.name = itcast-tanhua-dubbo-huanxin # dubbo \u626b\u63cf\u5305\u914d\u7f6e dubbo.scan.basePackages = com.tanhua.dubbo.server dubbo.application.name = dubbo-provider-huanxin #dubbo \u5bf9\u5916\u66b4\u9732\u7684\u7aef\u53e3\u4fe1\u606f dubbo.protocol.name = dubbo dubbo.protocol.port = 20881 #dubbo\u6ce8\u518c\u4e2d\u5fc3\u7684\u914d\u7f6e dubbo.registry.address = zookeeper://192.168.31.81:2181 dubbo.registry.client = zkclient dubbo.registry.timeout = 60000 # Redis\u76f8\u5173\u914d\u7f6e spring.redis.jedis.pool.max-wait = 5000ms spring.redis.jedis.pool.max-Idle = 100 spring.redis.jedis.pool.min-Idle = 10 spring.redis.timeout = 10s spring.redis.cluster.nodes = 192.168.31.81:6379,192.168.31.81:6380,192.168.31.81:6381 spring.redis.cluster.max-redirects = 5 #\u6570\u636e\u5e93\u8fde\u63a5\u4fe1\u606f spring.datasource.driver-class-name = com.mysql.jdbc.Driver spring.datasource.url = jdbc:mysql://192.168.31.81:3306/mytanhua?useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true&useSSL=false spring.datasource.username = root spring.datasource.password = root # \u8868\u540d\u524d\u7f00 mybatis-plus.global-config.db-config.table-prefix = tb_ # id\u7b56\u7565\u4e3a\u81ea\u589e\u957f mybatis-plus.global-config.db-config.id-type = auto \u5165\u53e3\u542f\u52a8\u7c7b\uff1a package com.tanhua.dubbo.server ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration ; import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration ; @SpringBootApplication ( exclude = { MongoAutoConfiguration . class , MongoDataAutoConfiguration . class }) //\u6392\u9664mongo\u7684\u81ea\u52a8\u914d\u7f6e public class HuanXinDubboApplication { public static void main ( String [] args ) { SpringApplication . run ( HuanXinDubboApplication . class , args ); } }","title":"7.1\u3001\u521b\u5efadubbo\u5de5\u7a0b"},{"location":"tantan/day06/#72","text":"\u76f8\u5173\u7684\u914d\u7f6e\uff0c\u5728\u73af\u4fe1\u7ba1\u7406\u63a7\u5236\u53f0\u4e2d\uff0c\u53ef\u4ee5\u627e\u5230\u76f8\u5173\u7684\u53c2\u6570\u3002 #huanxin.properties tanhua.huanxin.url = http://a1.easemob.com/ tanhua.huanxin.orgName = 1105190515097562 tanhua.huanxin.appName = tanhua tanhua.huanxin.clientId = YXA67ZofwHblEems-_Fh-17T2g tanhua.huanxin.clientSecret = YXA60r45rNy2Ux5wQ7YYoEPwynHmUZk \u7f16\u5199\u914d\u7f6e\u7c7b\uff1a package com.tanhua.dubbo.server.config ; import lombok.Data ; import org.springframework.boot.context.properties.ConfigurationProperties ; import org.springframework.context.annotation.Configuration ; import org.springframework.context.annotation.PropertySource ; @Configuration @PropertySource ( \"classpath:huanxin.properties\" ) @ConfigurationProperties ( prefix = \"tanhua.huanxin\" ) @Data public class HuanXinConfig { private String url ; private String orgName ; private String appName ; private String clientId ; private String clientSecret ; }","title":"7.2\u3001\u914d\u7f6e"},{"location":"tantan/day06/#73","text":"\u5177\u4f53\u7684\u83b7\u53d6token\u7684\u4e1a\u52a1\u903b\u8f91\u5728TokenService\u4e2d\u5b8c\u6210\u3002\u5b9e\u73b0\u8981\u70b9\uff1a \u5206\u6790\u5b98\u65b9\u6587\u6863\u4e2d\u7684\u8bf7\u6c42url\u3001\u53c2\u6570\u3001\u54cd\u5e94\u6570\u636e\u7b49\u5185\u5bb9 \u8bf7\u6c42\u5230token\u9700\u8981\u7f13\u5b58\u5230redis\u4e2d\uff0c\u4e0d\u80fd\u9891\u7e41\u7684\u83b7\u53d6token\u64cd\u4f5c\uff0c\u53ef\u80fd\u4f1a\u88ab\u5c01\u53f7 package com.tanhua.dubbo.server.service ; import cn.hutool.core.util.StrUtil ; import cn.hutool.http.HttpRequest ; import cn.hutool.http.HttpResponse ; import cn.hutool.json.JSONObject ; import cn.hutool.json.JSONUtil ; import com.tanhua.dubbo.server.config.HuanXinConfig ; import lombok.extern.slf4j.Slf4j ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.redis.core.RedisTemplate ; import org.springframework.stereotype.Service ; import java.util.HashMap ; import java.util.Map ; import java.util.concurrent.TimeUnit ; @Service @Slf4j public class TokenService { @Autowired private RedisTemplate < String , String > redisTemplate ; private static final String REDIS_KEY = \"HX_TOKEN\" ; @Autowired private HuanXinConfig huanXinConfig ; /** * \u83b7\u53d6token\uff0c\u5148\u4eceredis\u4e2d\u83b7\u53d6\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u518d\u53bb\u73af\u4fe1\u63a5\u53e3\u83b7\u53d6 * * @return */ public String getToken () { String token = this . redisTemplate . opsForValue (). get ( REDIS_KEY ); if ( StrUtil . isNotEmpty ( token )) { return token ; } //\u8bbf\u95ee\u73af\u4fe1\u63a5\u53e3\u83b7\u53d6token return this . refreshToken (); } /** * \u5237\u65b0token\uff0c\u8bf7\u6c42\u73af\u4fe1\u63a5\u53e3\uff0c\u5c06token\u5b58\u50a8\u5230redis\u4e2d * * @return */ public String refreshToken () { String targetUrl = this . huanXinConfig . getUrl () + this . huanXinConfig . getOrgName () + \"/\" + this . huanXinConfig . getAppName () + \"/token\" ; Map < String , Object > param = new HashMap <> (); param . put ( \"grant_type\" , \"client_credentials\" ); param . put ( \"client_id\" , this . huanXinConfig . getClientId ()); param . put ( \"client_secret\" , this . huanXinConfig . getClientSecret ()); HttpResponse response = HttpRequest . post ( targetUrl ) . body ( JSONUtil . toJsonStr ( param )) . timeout ( 20000 ) //\u8bf7\u6c42\u8d85\u65f6\u65f6\u95f4 . execute (); if ( ! response . isOk ()) { log . error ( \"\u5237\u65b0token\u5931\u8d25~~~ \" ); return null ; } String jsonBody = response . body (); JSONObject jsonObject = JSONUtil . parseObj ( jsonBody ); String token = jsonObject . getStr ( \"access_token\" ); if ( StrUtil . isNotEmpty ( token )) { //\u5c06token\u6570\u636e\u7f13\u5b58\u5230redis\u4e2d\uff0c\u7f13\u5b58\u65f6\u95f4\u7531expires_in\u51b3\u5b9a //\u63d0\u524d1\u5c0f\u65f6\u5931\u6548 long timeout = jsonObject . getLong ( \"expires_in\" ) - 3600 ; this . redisTemplate . opsForValue (). set ( REDIS_KEY , token , timeout , TimeUnit . SECONDS ); return token ; } return null ; } }","title":"7.3\u3001\u7f16\u5199\u5b9e\u73b0"},{"location":"tantan/day06/#74","text":"\u63a5\u53e3\u5b9a\u4e49\u5728my-tanhua-dubbo-interface\u5de5\u7a0b\u4e2d\u3002 package com.tanhua.dubbo.server.api ; /** * \u4e0e\u73af\u4fe1\u5e73\u53f0\u96c6\u6210\u7684\u76f8\u5173\u64cd\u4f5c */ public interface HuanXinApi { /** * \u83b7\u53d6\u73af\u4fe1token\uff08\u83b7\u53d6\u7ba1\u7406\u5458\u6743\u9650\uff09 * \u53c2\u89c1\uff1ahttp://docs-im.easemob.com/im/server/ready/user#%E8%8E%B7%E5%8F%96%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90 * * @return */ String getToken (); }","title":"7.4\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day06/#75","text":"\u5728my-tanhua-dubbo-huanxin\u4e2d\u5b8c\u6210\u3002 package com.tanhua.dubbo.server.api ; @Service ( version = \"1.0.0\" ) @Slf4j public class HuanXinApiImpl implements HuanXinApi { @Autowired private TokenService tokenService ; @Override public String getToken () { return this . tokenService . getToken (); } }","title":"7.5\u3001\u5b9e\u73b0\u63a5\u53e3"},{"location":"tantan/day06/#76","text":"package com.tanhua.dubbo.server ; import com.tanhua.dubbo.server.api.HuanXinApi ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @SpringBootTest @RunWith ( SpringRunner . class ) public class TestHuanXinApi { @Autowired private HuanXinApi huanXinApi ; @Test public void testGetToken (){ String token = this . huanXinApi . getToken (); System . out . println ( token ); } } \u6d4b\u8bd5\u7ed3\u679c\uff0c\u5df2\u7ecf\u4fdd\u5b58\u5230redis\u4e2d\u4e86\uff1a","title":"7.6\u3001\u6d4b\u8bd5"},{"location":"tantan/day06/#8","text":"\u4f7f\u7528\u73af\u4fe1\u5e73\u53f0\uff0c\u6700\u91cd\u8981\u7684\u5c31\u662f\u96c6\u6210\u7528\u6237\u4f53\u7cfb\uff0c\u57fa\u672c\u7684\u903b\u8f91\u662f\u8fd9\u6837\u7684\uff1a\u65b0\u7528\u6237\u5728\u6ce8\u518c\u540e\uff0c\u540c\u65f6\u9700\u8981\u6ce8\u518c\u73af\u4fe1\u7528\u6237\u3002 \u6d41\u7a0b\u5982\u4e0b\uff1a \u6d41\u7a0b\u8bf4\u660e\uff1a \u7528\u6237\u5728\u767b\u5f55\u65f6\u5728sso\u7cfb\u7edf\u4e2d\u8fdb\u884c\u5224\u65ad\uff0c\u5982\u679c\u662f\u65b0\u7528\u6237\uff0c\u5728\u6ce8\u518c\u5b8c\u6210\u540e\uff0c\u9700\u8981\u8c03\u7528dubbo\u4e2d\u7684\u73af\u4fe1\u670d\u52a1\u8fdb\u884c\u6ce8\u518c\u73af\u4fe1\u7528\u6237\u3002 dubbo-huanxin\u670d\u52a1\u5728\u6ce8\u518c\u73af\u4fe1\u7528\u6237\u65f6\uff0c\u9700\u8981\u968f\u673a\u751f\u6210\u5bc6\u7801\uff0c\u643a\u5e26token\u8bf7\u6c42\u73af\u4fe1\u7684REST API\u8fdb\u884c\u7528\u6237\u6ce8\u518c\u3002 \u6ce8\u518c\u6210\u529f\u540e\uff0c\u9700\u8981\u5c06\u73af\u4fe1\u7684\u7528\u6237\u4fe1\u606f\u4fdd\u5b58\u5230MySQL\u4e2d\u3002 \u7528\u6237\u5728APP\u7aef\u4f7f\u7528\u5373\u65f6\u901a\u8baf\u529f\u80fd\u65f6\uff0c\u9700\u8981\u901a\u8fc7\u73af\u4fe1\u7528\u6237\u4fe1\u606f\u767b\u5f55\u5230\u73af\u4fe1\u5e73\u53f0\uff0c\u7531\u4e8e\u6570\u636e\u5b58\u50a8\u5230\u670d\u52a1\u7aef\uff0c\u6240\u4ee5\u9700\u8981\u901a\u8fc7dubbo-huanxin\u8fdb\u884c\u67e5\u8be2\u3002 \u5728\u62ff\u5230\u73af\u4fe1\u8d26\u53f7\u4fe1\u606f\u540e\uff0c\u767b\u5f55\u73af\u4fe1\uff0c\u767b\u5f55\u6210\u529f\u540e\u5373\u53ef\u4e0e\u73af\u4fe1\u5e73\u53f0\u8fdb\u884c\u4ea4\u4e92\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cAPP\u7aef\u4e0e\u73af\u4fe1\u5e73\u53f0\u4ea4\u4e92\uff0c\u662f\u4e0d\u8d70\u540e\u7aef\u7cfb\u7edf\u7684\uff0c\u662f\u76f4\u8fde\u64cd\u4f5c\u3002 \u5b98\u65b9\u6587\u6863\uff1a \u300a\u7528\u6237\u7ba1\u7406\u300b","title":"8\u3001\u7528\u6237\u7cfb\u7edf\u96c6\u6210"},{"location":"tantan/day06/#81","text":"\u5728\u4e0e\u73af\u4fe1\u63a5\u53e3\u901a\u4fe1\u65f6\uff0c\u4f7f\u7528\u7684\u662f\u73af\u4fe1\u7684REST\u63a5\u53e3\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c01\u88c5\u4e00\u4e2a\u901a\u7528\u7684\u8bf7\u6c42\u670d\u52a1\uff0c\u5728\u4e0e\u6240\u6709\u73af\u4fe1\u63a5\u53e3\u5bf9\u63a5\u65f6\u4f7f\u7528\u3002 \u53e6\u5916\uff0c\u8bf7\u6c42\u63a5\u53e3\u65f6\u90fd\u9700\u8981\u643a\u5e26token\uff0c\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u5c06token\u5b58\u50a8\u5230redis\u4e2d\uff0c\u4f46\u662f\uff0c\u53ef\u80fd\u5b58\u5728\u8fd9\u6837\u4e00\u79cd\u60c5\u51b5\uff0ctoken\u5728\u6211\u4eecredis\u4e2d\u6709\u6548\uff0c\u4f46\u662f\u5728\u73af\u4fe1\u5e73\u53f0\u5df2\u7ecf\u5931\u6548\uff0c\u8fd9\u6837\u73af\u4fe1\u5e73\u53f0\u4f1a\u7ed9\u6211\u4eec\u54cd\u5e94401\u72b6\u6001\u7801\u3002 \u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5c31\u9700\u8981\u68c0\u6d4b\u72b6\u6001\u7801\u662f\u5426\u4e3a401\uff0c\u5982\u679c\u662f401\u7684\u8bdd\uff0c\u5c31\u9700\u8981\u91cd\u65b0\u5237\u65b0token\uff0c\u518d\u91cd\u65b0\u6267\u884c\u6b64\u6b21\u8bf7\u6c42\u3002 \u4e5f\u5c31\u662f\u8981\u652f\u6301\u8bf7\u6c42\u7684\u91cd\u8bd5\u3002","title":"8.1\u3001\u901a\u7528\u8bf7\u6c42\u903b\u8f91"},{"location":"tantan/day06/#811spring-retry","text":"Spring\u63d0\u4f9b\u4e86\u91cd\u8bd5\u7684\u529f\u80fd\uff0c\u4f7f\u7528\u975e\u5e38\u7684\u7b80\u5355\u3001\u4f18\u96c5\u3002 \u7b2c\u4e00\u6b65\uff0c\u5bfc\u5165\u4f9d\u8d56\uff1a <!--Spring\u91cd\u8bd5\u6a21\u5757--> <dependency> <groupId> org.springframework.retry </groupId> <artifactId> spring-retry </artifactId> </dependency> <dependency> <groupId> org.aspectj </groupId> <artifactId> aspectjweaver </artifactId> </dependency> \u7b2c\u4e8c\u6b65\uff0c\u5728\u542f\u52a8\u7c7b\u4e2d\u6dfb\u52a0@EnableRetry\u6ce8\u89e3\u6765\u6fc0\u6d3b\u91cd\u8bd5\u529f\u80fd\uff1a package com.tanhua.dubbo.server ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration ; import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration ; import org.springframework.retry.annotation.EnableRetry ; @SpringBootApplication ( exclude = { MongoAutoConfiguration . class , MongoDataAutoConfiguration . class }) //\u6392\u9664mongo\u7684\u81ea\u52a8\u914d\u7f6e @EnableRetry public class HuanXinDubboApplication { public static void main ( String [] args ) { SpringApplication . run ( HuanXinDubboApplication . class , args ); } } \u7b2c\u4e09\u6b65\uff0c\u5728\u9700\u8981\u652f\u6301\u91cd\u8bd5\u64cd\u4f5c\u7684Service\u65b9\u6cd5\u4e2d\u6dfb\u52a0@Retryable\u6ce8\u89e3\uff0cdemo\u5982\u4e0b\uff1a //\u5c06\u6b64\u7c7b\u653e\u5230test\u5305\u4e0b\u6d4b\u8bd5\u5373\u53ef package com.tanhua.dubbo.server ; import cn.hutool.core.util.RandomUtil ; import org.springframework.retry.annotation.Backoff ; import org.springframework.retry.annotation.Recover ; import org.springframework.retry.annotation.Retryable ; import org.springframework.stereotype.Service ; @Service public class RetryService { @Retryable ( value = RuntimeException . class , maxAttempts = 3 , backoff = @Backoff ( delay = 2000L , multiplier = 2 )) public int execute ( int max ) { int data = RandomUtil . randomInt ( 1 , 99 ); System . out . println ( \"\u751f\u6210\uff1a\" + data ); if ( data < max ) { throw new RuntimeException (); } return data ; } @Recover //\u5168\u90e8\u91cd\u8bd5\u5931\u8d25\u540e\u6267\u884c public int recover ( Exception e ) { System . out . println ( \"\u5168\u90e8\u91cd\u8bd5\u5b8c\u6210\u3002\u3002\u3002\u3002\u3002\" ); return 88 ; //\u8fd4\u56de\u9ed8\u8ba4 } } @Retryable\u53c2\u6570\u8bf4\u660e\uff1a value\uff1a\u629b\u51fa\u6307\u5b9a\u5f02\u5e38\u624d\u4f1a\u91cd\u8bd5 maxAttempts\uff1a\u6700\u5927\u91cd\u8bd5\u6b21\u6570\uff0c\u9ed8\u8ba43\u6b21 backoff\uff1a\u91cd\u8bd5\u7b49\u5f85\u7b56\u7565\uff0c\u9ed8\u8ba4\u4f7f\u7528@Backoff @Backoff \u7684value\u9ed8\u8ba4\u4e3a1000L\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e3a2000L\uff1b multiplier\uff08\u6307\u5b9a\u5ef6\u8fdf\u500d\u6570\uff09\u9ed8\u8ba4\u4e3a0\uff0c\u8868\u793a\u56fa\u5b9a\u6682\u505c1\u79d2\u540e\u8fdb\u884c\u91cd\u8bd5\uff0c\u5982\u679c\u628amultiplier\u8bbe\u7f6e\u4e3a2\uff0c\u5219\u7b2c\u4e00\u6b21\u91cd\u8bd5\u4e3a2\u79d2\uff0c\u7b2c\u4e8c\u6b21\u4e3a4\u79d2\uff0c\u7b2c\u4e09\u6b21\u4e3a6\u79d2\u3002 @Recover\u6807\u6ce8\u7684\u65b9\u6cd5\uff0c\u662f\u5728\u6240\u6709\u7684\u91cd\u8bd5\u90fd\u5931\u8d25\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u540e\u6267\u884c\u8be5\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u67092\u4e2a\u8981\u6c42\uff1a \u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u662f Throwable \u7c7b\u578b\uff0c\u6700\u597d\u4e0e @Retryable \u4e2d\u7684 value\u4e00\u81f4\u3002 \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u5fc5\u987b\u4e0e@Retryable\u7684\u65b9\u6cd5\u8fd4\u56de\u503c\u4e00\u81f4\uff0c\u5426\u5219\u8be5\u65b9\u6cd5\u4e0d\u80fd\u88ab\u6267\u884c\u3002 \u6d4b\u8bd5\u7c7b\uff1a package com.tanhua.dubbo.server ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @SpringBootTest @RunWith ( SpringRunner . class ) public class TestRetryService { @Autowired private RetryService retryService ; @Test public void testRetry () { System . out . println ( this . retryService . execute ( 90 )); } } \u6d4b\u8bd5\u7ed3\u679c\uff0c\u4f1a\u67093\u6b21\u91cd\u8bd5\u673a\u4f1a\u8fdb\u884c\u751f\u6210\u968f\u673a\u6570\uff0c\u5982\u679c3\u6b21\u968f\u673a\u6570\u90fd\u5c0f\u4e8e90\uff0c\u6700\u540e\u8fd4\u56de88\u3002","title":"8.1.1\u3001Spring-Retry"},{"location":"tantan/day06/#812requestservice","text":"package com.tanhua.dubbo.server.service ; import cn.hutool.http.HttpRequest ; import cn.hutool.http.HttpResponse ; import cn.hutool.http.Method ; import com.tanhua.dubbo.server.exception.UnauthorizedException ; import lombok.extern.slf4j.Slf4j ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.retry.annotation.Backoff ; import org.springframework.retry.annotation.Recover ; import org.springframework.retry.annotation.Retryable ; import org.springframework.stereotype.Service ; /** * \u73af\u4fe1\u63a5\u53e3\u901a\u7528\u8bf7\u6c42\u670d\u52a1 */ @Service @Slf4j public class RequestService { @Autowired private TokenService tokenService ; /** * \u901a\u7528\u7684\u53d1\u9001\u8bf7\u6c42\u65b9\u6cd5 * * @param url \u8bf7\u6c42\u5730\u5740 * @param body \u8bf7\u6c42\u53c2\u6570 * @param method \u8bf7\u6c42\u65b9\u6cd5 * @return */ @Retryable ( value = UnauthorizedException . class , maxAttempts = 5 , backoff = @Backoff ( delay = 2000L , multiplier = 2 )) public HttpResponse execute ( String url , String body , Method method ) { String token = this . tokenService . getToken (); HttpRequest httpRequest ; switch ( method ) { case POST : { httpRequest = HttpRequest . post ( url ); break ; } case DELETE : { httpRequest = HttpRequest . delete ( url ); break ; } case PUT : { httpRequest = HttpRequest . put ( url ); break ; } case GET : { httpRequest = HttpRequest . get ( url ); break ; } default : { return null ; } } HttpResponse response = httpRequest . header ( \"Content-Type\" , \"application/json\" ) //\u8bbe\u7f6e\u8bf7\u6c42\u5185\u5bb9\u7c7b\u578b . header ( \"Authorization\" , \"Bearer \" + token ) //\u8bbe\u7f6etoken . body ( body ) // \u8bbe\u7f6e\u8bf7\u6c42\u6570\u636e . timeout ( 20000 ) // \u8d85\u65f6\u65f6\u95f4 . execute (); // \u6267\u884c\u8bf7\u6c42 if ( response . getStatus () == 401 ) { //token\u5931\u6548\uff0c\u91cd\u65b0\u5237\u65b0token this . tokenService . refreshToken (); //\u629b\u51fa\u5f02\u5e38\uff0c\u9700\u8981\u8fdb\u884c\u91cd\u8bd5 throw new UnauthorizedException ( url , body , method ); } return response ; } @Recover //\u5168\u90e8\u91cd\u8bd5\u5931\u8d25\u540e\u6267\u884c public HttpResponse recover ( UnauthorizedException e ) { log . error ( \"\u83b7\u53d6token\u5931\u8d25\uff01url = \" + e . getUrl () + \", body = \" + e . getBody () + \", method = \" + e . getMethod (). toString ()); //\u5982\u679c\u91cd\u8bd55\u6b21\u540e\uff0c\u4f9d\u7136\u4e0d\u80fd\u83b7\u53d6\u5230token\uff0c\u8bf4\u660e\u7f51\u7edc\u6216\u8d26\u53f7\u51fa\u73b0\u4e86\u95ee\u9898\uff0c\u53ea\u80fd\u8fd4\u56denull\u4e86\uff0c\u540e\u7eed\u7684\u8bf7\u6c42\u5c06\u65e0\u6cd5\u518d\u6267\u884c return null ; } } package com.tanhua.dubbo.server.exception ; import cn.hutool.http.Method ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @AllArgsConstructor @NoArgsConstructor @Data public class UnauthorizedException extends RuntimeException { private String url ; private String body ; private Method method ; } \u6d4b\u8bd5\u7528\u4f8b\uff1a package com.tanhua.dubbo.server ; import cn.hutool.http.HttpResponse ; import cn.hutool.http.Method ; import com.tanhua.dubbo.server.config.HuanXinConfig ; import com.tanhua.dubbo.server.service.RequestService ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @SpringBootTest @RunWith ( SpringRunner . class ) public class TestRequestService { @Autowired private RequestService requestService ; @Autowired private HuanXinConfig huanXinConfig ; @Test public void testQueryHuanXinUser () { String targetUrl = this . huanXinConfig . getUrl () + this . huanXinConfig . getOrgName () + \"/\" + this . huanXinConfig . getAppName () + \"/users/1\" ; HttpResponse response = this . requestService . execute ( targetUrl , null , Method . GET ); System . out . println ( response ); } }","title":"8.1.2\u3001RequestService"},{"location":"tantan/day06/#82","text":"\u6ce8\u518c\u73af\u4fe1\u7528\u6237\u5206\u4e3a2\u79cd\uff0c\u5f00\u653e\u6ce8\u518c\u3001\u6388\u6743\u6ce8\u518c\uff0c\u533a\u522b\u5728\u4e8e\u5f00\u53d1\u6ce8\u518c\u4e0d\u9700\u8981token\uff0c\u6388\u6743\u6ce8\u518c\u9700\u8981token\u3002\u6211\u4eec\u4f7f\u7528\u7684\u6388\u6743\u6ce8\u518c\u3002 \u5b98\u65b9\u6587\u6863\uff1a \u300a\u6ce8\u518c\u5355\u4e2a\u7528\u6237(\u6388\u6743)\u300b \u8bf4\u660e\uff1a\u73af\u4fe1\u7528\u6237\u6570\u636e\u9700\u8981\u4fdd\u5b58\u5230\u6570\u636e\u4e2d\u3002","title":"8.2\u3001\u6ce8\u518c\u73af\u4fe1\u7528\u6237"},{"location":"tantan/day06/#821huanxinuser","text":"\u5728my-tanhua-dubbo-interface\u5de5\u7a0b\u4e2d\u521b\u5efa\u8be5\u7c7b\uff1a \u9700\u8981\u5728\u6b64\u5de5\u7a0b\u4e2d\u6dfb\u52a0MybatisPlus\u4f9d\u8d56\uff1a <dependency> <groupId> com.baomidou </groupId> <artifactId> mybatis-plus </artifactId> </dependency> package com.tanhua.dubbo.server.pojo ; import com.baomidou.mybatisplus.annotation.TableName ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import java.util.Date ; /** * \u73af\u4fe1\u7528\u6237\u5bf9\u8c61 */ @Data @NoArgsConstructor @AllArgsConstructor @TableName ( \"tb_huanxin_user\" ) public class HuanXinUser implements java . io . Serializable { private static final long serialVersionUID = - 6400630011196593976L ; private Long id ; //\u4e3b\u952eId /** * \u73af\u4fe1 ID ;\u4e5f\u5c31\u662f IM \u7528\u6237\u540d\u7684\u552f\u4e00\u767b\u5f55\u8d26\u53f7\uff0c\u957f\u5ea6\u4e0d\u53ef\u8d85\u8fc764\u4e2a\u5b57\u7b26\u957f\u5ea6 */ private String username ; /** * \u767b\u5f55\u5bc6\u7801\uff0c\u957f\u5ea6\u4e0d\u53ef\u8d85\u8fc764\u4e2a\u5b57\u7b26\u957f\u5ea6 */ private String password ; /** * \u6635\u79f0\uff08\u53ef\u9009\uff09\uff0c\u5728 iOS Apns \u63a8\u9001\u65f6\u4f1a\u4f7f\u7528\u7684\u6635\u79f0\uff08\u4ec5\u5728\u63a8\u9001\u901a\u77e5\u680f\u5185\u663e\u793a\u7684\u6635\u79f0\uff09\uff0c * \u5e76\u4e0d\u662f\u7528\u6237\u4e2a\u4eba\u4fe1\u606f\u7684\u6635\u79f0\uff0c\u73af\u4fe1\u662f\u4e0d\u4fdd\u5b58\u7528\u6237\u6635\u79f0\uff0c\u5934\u50cf\u7b49\u4e2a\u4eba\u4fe1\u606f\u7684\uff0c * \u9700\u8981\u81ea\u5df1\u670d\u52a1\u5668\u4fdd\u5b58\u5e76\u4e0e\u7ed9\u81ea\u5df1\u7528\u6237\u6ce8\u518c\u7684IM\u7528\u6237\u540d\u7ed1\u5b9a\uff0c\u957f\u5ea6\u4e0d\u53ef\u8d85\u8fc7100\u4e2a\u5b57\u7b26 */ private String nickname ; private Long userId ; //\u7528\u6237id private Date created ; //\u521b\u5efa\u65f6\u95f4 private Date updated ; //\u66f4\u65b0\u65f6\u95f4 } \u6570\u636e\u5e93\u8868\u7ed3\u6784\uff1a CREATE TABLE ` tb_huanxin_user ` ( ` id ` bigint ( 20 ) NOT NULL AUTO_INCREMENT , ` user_id ` bigint ( 20 ) NOT NULL COMMENT '\u7528\u6237id' , ` username ` varchar ( 32 ) NOT NULL COMMENT '\u73af\u4fe1\u7528\u6237\u540d' , ` password ` varchar ( 32 ) NOT NULL COMMENT '\u73af\u4fe1\u5bc6\u7801' , ` nickname ` varchar ( 100 ) DEFAULT NULL COMMENT '\u6635\u79f0' , ` created ` datetime DEFAULT NULL COMMENT '\u521b\u5efa\u65f6\u95f4' , ` updated ` datetime DEFAULT NULL COMMENT '\u66f4\u65b0\u65f6\u95f4' , PRIMARY KEY ( ` id ` ), KEY ` user_id ` ( ` user_id ` ), KEY ` username ` ( ` username ` ) ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8 ;","title":"8.2.1\u3001HuanXinUser"},{"location":"tantan/day06/#822","text":"//com.tanhua.dubbo.server.api.HuanXinApi /** * \u6ce8\u518c\u73af\u4fe1\u7528\u6237 * \u53c2\u89c1\uff1ahttp://docs-im.easemob.com/im/server/ready/user#%E6%B3%A8%E5%86%8C%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7_%E5%BC%80%E6%94%BE * * @param userId \u7528\u6237id * @return */ Boolean register ( Long userId ); /** * \u6839\u636e\u7528\u6237Id\u8be2\u73af\u4fe1\u8d26\u6237\u4fe1\u606f * * @param userId * @return */ HuanXinUser queryHuanXinUser ( Long userId );","title":"8.2.2\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day06/#823","text":"//com.tanhua.dubbo.server.api.HuanXinApiImpl @Override public Boolean register ( Long userId ) { String targetUrl = this . huanXinConfig . getUrl () + this . huanXinConfig . getOrgName () + \"/\" + this . huanXinConfig . getAppName () + \"/users\" ; HuanXinUser huanXinUser = new HuanXinUser (); huanXinUser . setUsername ( \"HX_\" + userId ); // \u7528\u6237\u540d huanXinUser . setPassword ( IdUtil . simpleUUID ()); //\u968f\u673a\u751f\u6210\u7684\u5bc6\u7801 HttpResponse response = this . requestService . execute ( targetUrl , JSONUtil . toJsonStr ( Arrays . asList ( huanXinUser )), Method . POST ); if ( response . isOk ()) { //\u5c06\u73af\u4fe1\u7684\u8d26\u53f7\u4fe1\u606f\u4fdd\u5b58\u5230\u6570\u636e\u5e93 huanXinUser . setUserId ( userId ); huanXinUser . setCreated ( new Date ()); huanXinUser . setUpdated ( huanXinUser . getCreated ()); this . huanXinUserMapper . insert ( huanXinUser ); return true ; } return false ; } @Override public HuanXinUser queryHuanXinUser ( Long userId ) { QueryWrapper < HuanXinUser > wrapper = new QueryWrapper <> (); wrapper . eq ( \"user_id\" , userId ); return this . huanXinUserMapper . selectOne ( wrapper ); } package com.tanhua.dubbo.server.mapper ; import com.baomidou.mybatisplus.core.mapper.BaseMapper ; import com.tanhua.dubbo.server.pojo.HuanXinUser ; import org.apache.ibatis.annotations.Mapper ; @Mapper public interface HuanXinUserMapper extends BaseMapper < HuanXinUser > { }","title":"8.2.3\u3001\u5b9e\u73b0\u63a5\u53e3"},{"location":"tantan/day06/#824","text":"package com.tanhua.dubbo.server ; import com.tanhua.dubbo.server.api.HuanXinApi ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @SpringBootTest @RunWith ( SpringRunner . class ) public class TestHuanXinApi { @Autowired private HuanXinApi huanXinApi ; @Test public void testRegister (){ //\u6ce8\u518c\u7528\u6237id\u4e3a1\u7684\u7528\u6237\u5230\u73af\u4fe1 System . out . println ( this . huanXinApi . register ( 1L )); } @Test public void testQueryHuanXinUser (){ //\u6839\u636e\u7528\u6237id\u67e5\u8be2\u73af\u4fe1\u7528\u6237\u4fe1\u606f System . out . println ( this . huanXinApi . queryHuanXinUser ( 1L )); } }","title":"8.2.4\u3001\u6d4b\u8bd5\u7528\u4f8b"},{"location":"tantan/day06/#825sso","text":"\u9700\u8981\u5728sso\u7cfb\u7edf\u4e2d\u4f7f\u7528dubbo\u670d\u52a1\u8fdb\u884c\u6ce8\u518c\u73af\u4fe1\u7528\u6237\u3002 \u7b2c\u4e00\u6b65\uff0c\u5bfc\u5165\u4f9d\u8d56\uff1a <dependency> <groupId> cn.itcast.tanhua </groupId> <artifactId> my-tanhua-dubbo-interface </artifactId> <version> 1.0-SNAPSHOT </version> </dependency> <!--dubbo\u7684springboot\u652f\u6301--> <dependency> <groupId> com.alibaba.boot </groupId> <artifactId> dubbo-spring-boot-starter </artifactId> </dependency> <!--dubbo\u6846\u67b6--> <dependency> <groupId> com.alibaba </groupId> <artifactId> dubbo </artifactId> </dependency> <!--zk\u4f9d\u8d56--> <dependency> <groupId> org.apache.zookeeper </groupId> <artifactId> zookeeper </artifactId> </dependency> <dependency> <groupId> com.github.sgroschupf </groupId> <artifactId> zkclient </artifactId> </dependency> \u7b2c\u4e8c\u6b65\uff0c\u589e\u52a0dubbo\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e application.properties\uff1a #dubbo\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e dubbo.application.name = itcast-tanhua-server dubbo.registry.address = zookeeper://192.168.31.81:2181 dubbo.registry.client = zkclient dubbo.registry.timeout = 60000 dubbo.consumer.timeout = 60000 \u7b2c\u4e09\u6b65\uff0c\u5728UserService\u4e2d\u589e\u52a0\u76f8\u5e94\u7684\u903b\u8f91\uff1a @Reference ( version = \"1.0.0\" ) private HuanXinApi huanXinApi ; /** * \u7528\u6237\u767b\u5f55 * * @param phone \u624b\u673a\u53f7 * @param code \u9a8c\u8bc1\u7801 * @return */ public String login ( String phone , String code ) { String redisKey = \"CHECK_CODE_\" + phone ; boolean isNew = false ; //\u6821\u9a8c\u9a8c\u8bc1\u7801 String redisData = this . redisTemplate . opsForValue (). get ( redisKey ); if ( ! StringUtils . equals ( code , redisData )) { return null ; //\u9a8c\u8bc1\u7801\u9519\u8bef } //\u9a8c\u8bc1\u7801\u5728\u6821\u9a8c\u5b8c\u6210\u540e\uff0c\u9700\u8981\u5e9f\u5f03 this . redisTemplate . delete ( redisKey ); QueryWrapper < User > queryWrapper = new QueryWrapper <> (); queryWrapper . eq ( \"mobile\" , phone ); User user = this . userMapper . selectOne ( queryWrapper ); if ( null == user ) { //\u9700\u8981\u6ce8\u518c\u8be5\u7528\u6237 user = new User (); user . setMobile ( phone ); user . setPassword ( DigestUtils . md5Hex ( \"123456\" )); //\u6ce8\u518c\u65b0\u7528\u6237 this . userMapper . insert ( user ); isNew = true ; //\u6ce8\u518c\u73af\u4fe1\u7528\u6237 Boolean result = this . huanXinApi . register ( user . getId ()); if ( ! result ) { //\u6ce8\u518c\u73af\u4fe1\u5931\u8d25\uff0c\u8bb0\u5f55\u65e5\u5fd7 log . error ( \"\u6ce8\u518c\u73af\u4fe1\u7528\u6237\u5931\u8d25~ userId = \" + user . getId ()); } } //\u751f\u6210token Map < String , Object > claims = new HashMap < String , Object > (); claims . put ( \"id\" , user . getId ()); // \u751f\u6210token String token = Jwts . builder () . setClaims ( claims ) //payload\uff0c\u5b58\u653e\u6570\u636e\u7684\u4f4d\u7f6e\uff0c\u4e0d\u80fd\u653e\u7f6e\u654f\u611f\u6570\u636e\uff0c\u5982\uff1a\u5bc6\u7801\u7b49 . signWith ( SignatureAlgorithm . HS256 , secret ) //\u8bbe\u7f6e\u52a0\u5bc6\u65b9\u6cd5\u548c\u52a0\u5bc6\u76d0 . setExpiration ( new DateTime (). plusHours ( 12 ). toDate ()) //\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0c12\u5c0f\u65f6\u540e\u8fc7\u671f . compact (); try { //\u53d1\u9001\u7528\u6237\u767b\u5f55\u6210\u529f\u7684\u6d88\u606f Map < String , Object > msg = new HashMap <> (); msg . put ( \"id\" , user . getId ()); msg . put ( \"date\" , System . currentTimeMillis ()); this . rocketMQTemplate . convertAndSend ( \"tanhua-sso-login\" , msg ); } catch ( MessagingException e ) { log . error ( \"\u53d1\u9001\u6d88\u606f\u5931\u8d25\uff01\" , e ); } return token + \"|\" + isNew ; }","title":"8.2.5\u3001\u5728sso\u4e2d\u6ce8\u518c\u73af\u4fe1\u7528\u6237"},{"location":"tantan/day06/#826","text":"\u5c06\u670d\u52a1\u5168\u90e8\u8dd1\u8d77\u6765\uff0c\u4f7f\u7528APP\u8fdb\u884c\u6d4b\u8bd5\uff0c\u4f7f\u7528\u65b0\u624b\u673a\u53f7\u8fdb\u884c\u767b\u5f55\u6d4b\u8bd5\u3002 \u65b0\u6ce8\u518c\u7684\u7528\u6237\uff1a \u6240\u5bf9\u5e94\u7684\u73af\u4fe1\u7528\u6237\uff1a \u73af\u4fe1\u5e73\u53f0\uff1a \u53ef\u4ee5\u770b\u5230\u5df2\u7ecf\u6ce8\u518c\u5230\u4e86\u73af\u4fe1\u3002","title":"8.2.6\u3001\u6d4b\u8bd5"},{"location":"tantan/day06/#83","text":"\u5728app\u4e2d\uff0c\u7528\u6237\u767b\u5f55\u540e\u9700\u8981\u6839\u636e\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\u73af\u4fe1\uff0c\u7531\u4e8e\u7528\u6237\u540d\u5bc6\u7801\u4fdd\u5b58\u5728\u540e\u53f0\uff0c\u6240\u4ee5\u9700\u8981\u63d0\u4f9b\u63a5\u53e3\u8fdb\u884c\u8fd4\u56de\u3002 mock\u5730\u5740\uff1a https://mock-java.itheima.net/project/35/interface/api/563","title":"8.3\u3001\u67e5\u8be2\u73af\u4fe1\u7528\u6237\u4fe1\u606f"},{"location":"tantan/day06/#831huanxinuservo","text":"package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class HuanXinUserVo { private String username ; private String password ; }","title":"8.3.1\u3001HuanXinUserVo"},{"location":"tantan/day06/#832huanxincontroller","text":"package com.tanhua.server.controller ; import com.tanhua.server.service.HuanXinService ; import com.tanhua.server.vo.HuanXinUserVo ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RestController ; @RestController @RequestMapping ( \"huanxin\" ) public class HuanXinController { @Autowired private HuanXinService huanXinService ; @GetMapping ( \"user\" ) public HuanXinUserVo queryHuanXinUser (){ return this . huanXinService . queryHuanXinUser (); } }","title":"8.3.2\u3001HuanXinController"},{"location":"tantan/day06/#833huanxinservice","text":"package com.tanhua.server.service ; import cn.hutool.core.util.ObjectUtil ; import com.alibaba.dubbo.config.annotation.Reference ; import com.tanhua.common.pojo.User ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.dubbo.server.api.HuanXinApi ; import com.tanhua.dubbo.server.pojo.HuanXinUser ; import com.tanhua.server.vo.HuanXinUserVo ; import org.springframework.stereotype.Service ; @Service public class HuanXinService { @Reference ( version = \"1.0.0\" ) private HuanXinApi huanXinApi ; public HuanXinUserVo queryHuanXinUser () { User user = UserThreadLocal . get (); //\u901a\u8fc7dubbo\u670d\u52a1\u67e5\u8be2\u73af\u4fe1\u7528\u6237 HuanXinUser huanXinUser = this . huanXinApi . queryHuanXinUser ( user . getId ()); if ( ObjectUtil . isNotEmpty ( huanXinUser )) { return new HuanXinUserVo ( huanXinUser . getUsername (), huanXinUser . getPassword ()); } return null ; } }","title":"8.3.3\u3001HuanXinService"},{"location":"tantan/day06/#834","text":"","title":"8.3.4\u3001\u6d4b\u8bd5"},{"location":"tantan/day06/#84","text":"\u5728\u6d88\u606f\u6a21\u5757\u4e2d\uff0c\u9700\u8981\u5b9e\u73b0\u6839\u636e\u73af\u4fe1\u7528\u6237\u540d\u67e5\u8be2\u4e2a\u4eba\u7684\u7528\u6237\u4fe1\u606f\u3002 \u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/2921","title":"8.4\u3001\u67e5\u8be2\u4e2a\u4eba\u4fe1\u606f"},{"location":"tantan/day06/#841dubbo","text":"","title":"8.4.1\u3001dubbo\u670d\u52a1"},{"location":"tantan/day06/#8411","text":"//com.tanhua.dubbo.server.api.HuanXinApi /** * \u6839\u636e\u73af\u4fe1\u7528\u6237\u540d\u67e5\u8be2\u7528\u6237\u4fe1\u606f * * @param userName * @return */ HuanXinUser queryUserByUserName ( String userName );","title":"8.4.1.1\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day06/#8412","text":"//com.tanhua.dubbo.server.api.HuanXinApiImpl @Override public HuanXinUser queryUserByUserName ( String userName ) { QueryWrapper < HuanXinUser > wrapper = new QueryWrapper <> (); wrapper . eq ( \"username\" , userName ); return this . huanXinUserMapper . selectOne ( wrapper ); }","title":"8.4.1.2\u3001\u7f16\u5199\u5b9e\u73b0"},{"location":"tantan/day06/#842app","text":"","title":"8.4.2\u3001APP\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day06/#8421userinfovo","text":"package com.tanhua.server.vo ; import cn.hutool.core.annotation.Alias ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @AllArgsConstructor @NoArgsConstructor public class UserInfoVo { @Alias ( \"userId\" ) private Long id ; //\u7528\u6237id @Alias ( \"logo\" ) private String avatar ; //\u5934\u50cf @Alias ( \"nickName\" ) private String nickname ; //\u6635\u79f0 private String birthday ; //\u751f\u65e5 2019-09-11 private String age ; //\u5e74\u9f84 private String gender ; //\u6027\u522b man woman private String city ; //\u57ce\u5e02 @Alias ( \"edu\" ) private String education ; //\u5b66\u5386 private String income ; //\u6708\u6536\u5165 @Alias ( \"industry\" ) private String profession ; //\u884c\u4e1a private Integer marriage ; //\u5a5a\u59fb\u72b6\u6001\uff080\u672a\u5a5a\uff0c1\u5df2\u5a5a\uff09 }","title":"8.4.2.1\u3001UserInfoVo"},{"location":"tantan/day06/#8422imcontroller","text":"//com.tanhua.server.controller.IMController package com.tanhua.server.controller ; import cn.hutool.core.util.ObjectUtil ; import com.tanhua.server.service.IMService ; import com.tanhua.server.vo.UserInfoVo ; import lombok.extern.slf4j.Slf4j ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RequestParam ; import org.springframework.web.bind.annotation.RestController ; @RequestMapping ( \"messages\" ) @RestController @Slf4j public class IMController { @Autowired private IMService imService ; /** * \u6839\u636e\u73af\u4fe1\u7528\u6237\u540d\u67e5\u8be2\u7528\u6237\u4fe1\u606f * * @param userName \u73af\u4fe1\u7528\u6237 * @return */ @GetMapping ( \"userinfo\" ) public ResponseEntity < UserInfoVo > queryUserInfoByUserName ( @RequestParam ( \"huanxinId\" ) String userName ) { try { UserInfoVo userInfoVo = this . imService . queryUserInfoByUserName ( userName ); if ( ObjectUtil . isNotEmpty ( userInfoVo )) { return ResponseEntity . ok ( userInfoVo ); } } catch ( Exception e ) { log . error ( \"\u6839\u636e\u73af\u4fe1id\u67e5\u8be2\u7528\u6237\u4fe1\u606f! userName = \" + userName , e ); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } }","title":"8.4.2.2\u3001IMController"},{"location":"tantan/day06/#8423imservice","text":"//com.tanhua.server.service.IMService package com.tanhua.server.service ; import cn.hutool.core.bean.BeanUtil ; import cn.hutool.core.util.ObjectUtil ; import cn.hutool.core.util.StrUtil ; import com.alibaba.dubbo.config.annotation.Reference ; import com.tanhua.common.pojo.UserInfo ; import com.tanhua.dubbo.server.api.HuanXinApi ; import com.tanhua.dubbo.server.pojo.HuanXinUser ; import com.tanhua.server.vo.UserInfoVo ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; @Service public class IMService { @Reference ( version = \"1.0.0\" ) private HuanXinApi huanXinApi ; @Autowired private UserInfoService userInfoService ; public UserInfoVo queryUserInfoByUserName ( String userName ) { //\u67e5\u8be2\u73af\u4fe1\u8d26\u6237 HuanXinUser huanXinUser = this . huanXinApi . queryUserByUserName ( userName ); if ( ObjectUtil . isEmpty ( huanXinUser )) { return null ; } //\u67e5\u8be2\u7528\u6237\u4fe1\u606f UserInfo userInfo = this . userInfoService . queryUserInfoByUserId ( huanXinUser . getUserId ()); if ( ObjectUtil . isEmpty ( userInfo )) { return null ; } UserInfoVo userInfoVo = BeanUtil . copyProperties ( userInfo , UserInfoVo . class , \"marriage\" ); userInfoVo . setGender ( userInfo . getSex (). toString (). toLowerCase ()); userInfoVo . setMarriage ( StrUtil . equals ( \"\u5df2\u5a5a\" , userInfo . getMarriage ()) ? 1 : 0 ); return userInfoVo ; } }","title":"8.4.2.3\u3001IMService"},{"location":"tantan/day06/#8424","text":"","title":"8.4.2.4\u3001\u6d4b\u8bd5"},{"location":"tantan/day06/#85id","text":"\u5728\u6d88\u606f\u6a21\u5757\u4e0e\u6211\u7684\u6a21\u5757\u4e2d\uff0c\u9700\u8981\u6839\u636e\u7528\u6237id\u67e5\u8be2\u4e2a\u4eba\u4fe1\u606f\uff0c\u5176\u54cd\u5e94\u7684\u6570\u636e\u7ed3\u6784\u4e0e\u4e0a\u9762\u4e00\u81f4\uff0c\u5747\u4e3a\uff1aUserInfoVo\u5bf9\u8c61\u3002 \u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/875","title":"8.5\u3001\u6839\u636e\u7528\u6237id\u67e5\u8be2\u4e2a\u4eba\u4fe1\u606f"},{"location":"tantan/day06/#851mycentercontroller","text":"package com.tanhua.server.controller ; import cn.hutool.core.util.ObjectUtil ; import com.tanhua.server.service.MyCenterService ; import com.tanhua.server.vo.UserInfoVo ; import lombok.extern.slf4j.Slf4j ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RequestParam ; import org.springframework.web.bind.annotation.RestController ; @RequestMapping ( \"users\" ) @RestController @Slf4j public class MyCenterController { @Autowired private MyCenterService myCenterService ; /** * \u6839\u636e\u7528\u6237id\u67e5\u8be2\u7528\u6237\u4fe1\u606f * * @param userId \u7528\u6237id\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u8868\u793a\u67e5\u8be2\u5f53\u524d\u767b\u5f55\u4eba\u7684\u4fe1\u606f * @return */ @GetMapping public ResponseEntity < UserInfoVo > queryUserInfoByUserId ( @RequestParam ( value = \"userID\" , required = false ) Long userId ) { try { UserInfoVo userInfoVo = this . myCenterService . queryUserInfoByUserId ( userId ); if ( ObjectUtil . isNotEmpty ( userInfoVo )) { return ResponseEntity . ok ( userInfoVo ); } } catch ( Exception e ) { log . error ( \"\u6839\u636e\u7528\u6237id\u67e5\u8be2\u7528\u6237\u4fe1\u606f\u51fa\u9519~ userId = \" + userId , e ); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } }","title":"8.5.1\u3001MyCenterController"},{"location":"tantan/day06/#852mycenterservice","text":"package com.tanhua.server.service ; import cn.hutool.core.bean.BeanUtil ; import cn.hutool.core.util.ObjectUtil ; import cn.hutool.core.util.StrUtil ; import com.tanhua.common.pojo.UserInfo ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.server.vo.UserInfoVo ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; @Service public class MyCenterService { @Autowired private UserInfoService userInfoService ; public UserInfoVo queryUserInfoByUserId ( Long userId ) { if ( ObjectUtil . isEmpty ( userId )) { //\u5982\u679c\u67e5\u8be2id\u4e3anull\uff0c\u5c31\u8868\u793a\u67e5\u8be2\u5f53\u524d\u7528\u6237\u4fe1\u606f userId = UserThreadLocal . get (). getId (); } //\u67e5\u8be2\u7528\u6237\u4fe1\u606f UserInfo userInfo = this . userInfoService . queryUserInfoByUserId ( userId ); if ( ObjectUtil . isEmpty ( userInfo )) { return null ; } UserInfoVo userInfoVo = BeanUtil . copyProperties ( userInfo , UserInfoVo . class , \"marriage\" ); userInfoVo . setGender ( userInfo . getSex (). toString (). toLowerCase ()); userInfoVo . setMarriage ( StrUtil . equals ( \"\u5df2\u5a5a\" , userInfo . getMarriage ()) ? 1 : 0 ); return userInfoVo ; } }","title":"8.5.2\u3001MyCenterService"},{"location":"tantan/day06/#853","text":"","title":"8.5.3\u3001\u6d4b\u8bd5"},{"location":"tantan/day06/#86","text":"\u76ee\u524d\u5df2\u7ecf\u5b8c\u6210\u4e86\u7528\u6237\u4f53\u7cfb\u7684\u5bf9\u63a5\uff0c\u4e0b\u9762\u6211\u4eec\u8fdb\u884c\u6d4b\u8bd5\u53d1\u9001\u6d88\u606f\uff0c\u573a\u666f\u662f\u8fd9\u6837\u7684\uff1a \u70b9\u51fb\u201c\u804a\u4e00\u4e0b\u201d\uff0c\u5c31\u4f1a\u7ed9\u5bf9\u65b9\u53d1\u9001\u4e00\u6761\u964c\u751f\u4eba\u4fe1\u606f\uff0c\u8fd9\u4e2a\u6d88\u606f\u7531\u7cfb\u7edf\u53d1\u9001\u5b8c\u6210\u3002 \u6211\u4eec\u6682\u65f6\u901a\u8fc7\u73af\u4fe1\u7684\u63a7\u5236\u53f0\u8fdb\u884c\u53d1\u9001\uff1a \u6d88\u606f\u5185\u5bb9\uff1a { \"userId\" :1, \"huanXinId\" : \"HX_1\" , \"nickname\" : \"\u9ed1\u9a6c\u5c0f\u59b9\" , \"strangerQuestion\" : \"\u4f60\u559c\u6b22\u53bb\u770b\u851a\u84dd\u7684\u5927\u6d77\u8fd8\u662f\u53bb\u722c\u5dcd\u5ce8\u7684\u9ad8\u5c71\uff1f\" , \"reply\" : \"\u6211\u559c\u6b22\u79cb\u5929\u7684\u843d\u53f6\uff0c\u590f\u5929\u7684\u6cc9\u6c34\uff0c\u51ac\u5929\u7684\u96ea\u5730\uff0c\u53ea\u8981\u6709\u4f60\u4e00\u5207\u7686\u53ef~\" } \u53ef\u4ee5\u770b\u5230\u5df2\u7ecf\u63a5\u6536\u5230\u4e86\u6d88\u606f\u3002","title":"8.6\u3001\u53d1\u9001\u6d88\u606f\u7ed9\u5ba2\u6237\u7aef"},{"location":"tantan/day06/#87","text":"\u9700\u8981\u5c061~99\u7528\u6237\u6ce8\u518c\u5230\u73af\u4fe1\uff0c\u56e0\u4e3a\u6211\u4eec\u63d0\u4f9b\u7684\u6570\u636e\u90fd\u662f\u8fd9\u4e9b\u7528\u6237\u7684\u6570\u636e\u3002 //com.tanhua.dubbo.server.TestHuanXinApi @Test public void testRegisterAllUser (){ for ( int i = 1 ; i < 100 ; i ++ ) { this . huanXinApi . register ( Long . valueOf ( i )); } } \u73af\u4fe1\uff1a","title":"8.7\u3001\u5c06\u7528\u6237\u6570\u636e\u540c\u6b65\u5230\u73af\u4fe1"},{"location":"tantan/day06/#9","text":"\u70b9\u51fb\u201c\u804a\u4e00\u4e0b\u201d\uff0c\u5c31\u4f1a\u6210\u4e3a\u8054\u7cfb\u4eba\uff08\u597d\u53cb\uff09\u3002 \u5b9e\u73b0\uff1a \u5c06\u597d\u53cb\u5199\u5165\u5230MongoDB\u4e2d \u5c06\u597d\u53cb\u5173\u7cfb\u6ce8\u518c\u5230\u73af\u4fe1 \u5177\u4f53\u7684\u6d41\u7a0b\u5982\u4e0b\uff1a","title":"9\u3001 \u6dfb\u52a0\u8054\u7cfb\u4eba"},{"location":"tantan/day06/#91dubbo","text":"","title":"9.1\u3001\u597d\u53cbdubbo\u670d\u52a1"},{"location":"tantan/day06/#911","text":"package com.tanhua.dubbo.server.api ; public interface UsersApi { /** * \u4fdd\u5b58\u597d\u53cb\u5173\u7cfb * * @param userId \u7528\u6237id * @param friendId \u597d\u53cbid * @return */ String saveUsers ( Long userId , Long friendId ); /** * \u5220\u9664\u597d\u53cb\u6570\u636e * * @param userId \u7528\u6237id * @param friendId \u597d\u53cbid * @return */ Boolean removeUsers ( Long userId , Long friendId ); }","title":"9.1.1\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day06/#912","text":"package com.tanhua.dubbo.server.api ; import cn.hutool.core.util.ObjectUtil ; import com.alibaba.dubbo.config.annotation.Service ; import com.tanhua.dubbo.server.pojo.Users ; import org.bson.types.ObjectId ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.mongodb.core.MongoTemplate ; import org.springframework.data.mongodb.core.query.Criteria ; import org.springframework.data.mongodb.core.query.Query ; @Service ( version = \"1.0.0\" ) public class UsersApiImpl implements UsersApi { @Autowired private MongoTemplate mongoTemplate ; @Override public String saveUsers ( Long userId , Long friendId ) { if ( ! ObjectUtil . isAllNotEmpty ( userId , friendId )) { return null ; } // \u68c0\u6d4b\u662f\u5426\u8be5\u597d\u53cb\u5173\u7cfb\u662f\u5426\u5b58\u5728 Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId ) . and ( \"friendId\" ). is ( friendId )); long count = this . mongoTemplate . count ( query , Users . class ); if ( count > 0 ) { return null ; } Users users = new Users (); users . setId ( ObjectId . get ()); users . setDate ( System . currentTimeMillis ()); users . setUserId ( userId ); users . setFriendId ( friendId ); //\u6ce8\u518c\u6211\u4e0e\u597d\u53cb\u7684\u5173\u7cfb this . mongoTemplate . save ( users ); //\u6ce8\u518c\u597d\u53cb\u4e0e\u6211\u7684\u5173\u7cfb users . setId ( ObjectId . get ()); users . setUserId ( friendId ); users . setFriendId ( userId ); this . mongoTemplate . save ( users ); return users . getId (). toHexString (); } @Override public Boolean removeUsers ( Long userId , Long friendId ) { Query query1 = Query . query ( Criteria . where ( \"userId\" ). is ( userId ) . and ( \"friendId\" ). is ( friendId )); //\u5220\u9664\u6211\u4e0e\u597d\u53cb\u7684\u5173\u7cfb\u6570\u636e long count1 = this . mongoTemplate . remove ( query1 , Users . class ). getDeletedCount (); Query query2 = Query . query ( Criteria . where ( \"userId\" ). is ( friendId ) . and ( \"friendId\" ). is ( userId )); //\u5220\u9664\u597d\u53cb\u4e0e\u6211\u7684\u5173\u7cfb\u6570\u636e long count2 = this . mongoTemplate . remove ( query2 , Users . class ). getDeletedCount (); return count1 > 0 && count2 > 0 ; } }","title":"9.1.2\u3001\u7f16\u5199\u5b9e\u73b0"},{"location":"tantan/day06/#92dubbo","text":"","title":"9.2\u3001\u73af\u4fe1dubbo\u670d\u52a1"},{"location":"tantan/day06/#921","text":"\u5728my-tanhua-dubbo-interface\u4e2d\u5b9a\u4e49\u3002 //com.tanhua.dubbo.server.api.HuanXinApi /** * \u6dfb\u52a0\u597d\u53cb\uff08\u53cc\u5411\u597d\u53cb\u5173\u7cfb\uff09 * \u53c2\u89c1\uff1ahttp://docs-im.easemob.com/im/server/ready/user#%E6%B7%BB%E5%8A%A0%E5%A5%BD%E5%8F%8B * * @param userId \u81ea\u5df1\u7684id * @param friendId \u597d\u53cb\u7684id * @return */ Boolean addUserFriend ( Long userId , Long friendId ); /** * \u5220\u9664\u597d\u53cb\u5173\u7cfb\uff08\u53cc\u5411\u5220\u9664\uff09 * \u53c2\u89c1\uff1ahttp://docs-im.easemob.com/im/server/ready/user#%E7%A7%BB%E9%99%A4%E5%A5%BD%E5%8F%8B * * @param userId \u81ea\u5df1\u7684id * @param friendId \u597d\u53cb\u7684id * @return */ Boolean removeUserFriend ( Long userId , Long friendId );","title":"9.2.1\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day06/#922","text":"\u5728my-tanhua-dubbo-huanxin\u4e2d\u5b9e\u73b0\u3002 //com.tanhua.dubbo.server.api.HuanXinApiImpl @Override public Boolean addUserFriend ( Long userId , Long friendId ) { String targetUrl = this . huanXinConfig . getUrl () + this . huanXinConfig . getOrgName () + \"/\" + this . huanXinConfig . getAppName () + \"/users/HX_\" + userId + \"/contacts/users/HX_\" + friendId ; try { // 404 -> \u5bf9\u65b9\u672a\u5728\u73af\u4fe1\u6ce8\u518c return this . requestService . execute ( targetUrl , null , Method . POST ). isOk (); } catch ( Exception e ) { e . printStackTrace (); } // \u6dfb\u52a0\u5931\u8d25 return false ; } @Override public Boolean removeUserFriend ( Long userId , Long friendId ) { String targetUrl = this . huanXinConfig . getUrl () + this . huanXinConfig . getOrgName () + \"/\" + this . huanXinConfig . getAppName () + \"/users/HX_\" + userId + \"/contacts/users/HX_\" + friendId ; try { // 404 -> \u5bf9\u65b9\u672a\u5728\u73af\u4fe1\u6ce8\u518c return this . requestService . execute ( targetUrl , null , Method . DELETE ). isOk (); } catch ( Exception e ) { e . printStackTrace (); } // \u6dfb\u52a0\u5931\u8d25 return false ; }","title":"9.2.2\u3001\u7f16\u5199\u5b9e\u73b0"},{"location":"tantan/day06/#93app","text":"\u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/809 \u5728my-tanhua-server\u4e2d\u5b8c\u6210\u3002 //com.tanhua.server.controller.IMController /** * \u6dfb\u52a0\u597d\u53cb * * @param param * @return */ @PostMapping ( \"contacts\" ) public ResponseEntity < Void > contactUser ( @RequestBody Map < String , Object > param ) { try { Long friendId = Long . valueOf ( param . get ( \"userId\" ). toString ()); boolean result = this . imService . contactUser ( friendId ); if ( result ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { log . error ( \"\u6dfb\u52a0\u8054\u7cfb\u4eba\u5931\u8d25! param = \" + param , e ); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } package com.tanhua.server.service ; import cn.hutool.core.util.StrUtil ; import com.alibaba.dubbo.config.annotation.Reference ; import com.tanhua.common.pojo.User ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.dubbo.server.api.HuanXinApi ; import com.tanhua.dubbo.server.api.UsersApi ; import org.springframework.stereotype.Service ; @Service public class IMService { @Reference ( version = \"1.0.0\" ) private UsersApi usersApi ; @Reference ( version = \"1.0.0\" ) private HuanXinApi huanXinApi ; /** * \u6dfb\u52a0\u597d\u53cb * * @param friendId \u597d\u53cbid */ public boolean contactUser ( Long friendId ) { User user = UserThreadLocal . get (); String id = this . usersApi . saveUsers ( user . getId (), friendId ); if ( StrUtil . isNotEmpty ( id )) { //\u6ce8\u518c\u597d\u53cb\u5173\u7cfb\u5230\u73af\u4fe1 return this . huanXinApi . addUserFriend ( user . getId (), friendId ); } return false ; } }","title":"9.3\u3001APP\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day06/#94","text":"\u63a5\u53e3\u6d4b\u8bd5\uff1a Monodb\u6570\u636e\uff1a \u73af\u4fe1\u5e73\u53f0\u597d\u53cb\u6570\u636e\uff1a","title":"9.4\u3001\u6d4b\u8bd5"},{"location":"tantan/day06/#95","text":"\u7531\u4e8e\u4e4b\u524d\u7684\u6570\u636e\u5e76\u6ca1\u6709\u5b8c\u6574\u7684\u53cc\u5411\u6570\u636e\uff0c\u6240\u4ee5\u9700\u8981\u91cd\u65b0\u751f\u6210\uff0c\u5982\u4e0b\uff1a package com.tanhua.server ; import cn.hutool.core.convert.Convert ; import cn.hutool.core.util.RandomUtil ; import com.tanhua.common.pojo.User ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.server.service.IMService ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestIMService { @Autowired private IMService imService ; /** * \u6784\u9020\u597d\u53cb\u6570\u636e\uff0c\u4e3a1~99\u7528\u6237\u6784\u902010\u4e2a\u597d\u53cb */ @Test public void testUsers () { for ( int i = 1 ; i <= 99 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { User user = new User (); user . setId ( Convert . toLong ( i )); UserThreadLocal . set ( user ); this . imService . contactUser ( this . getFriendId ( user . getId ())); } } } private Long getFriendId ( Long userId ) { Long friendId = RandomUtil . randomLong ( 1 , 100 ); if ( friendId . intValue () == userId . intValue ()) { getFriendId ( userId ); } return friendId ; } }","title":"9.5\u3001\u91cd\u65b0\u751f\u6210\u597d\u53cb\u5173\u7cfb\u6570\u636e"},{"location":"tantan/day06/#10","text":"\u7528\u6237\u5728\u6d88\u606f\u6a21\u5757\u4e2d\uff0c\u53ef\u4ee5\u67e5\u770b\u8054\u7cfb\u4eba\u5217\u8868\uff08\u597d\u53cb\u5217\u8868\uff09\u3002 \u63a5\u53e3\u6587\u6863\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/803","title":"10\u3001\u8054\u7cfb\u4eba\u5217\u8868"},{"location":"tantan/day06/#101dubbo","text":"","title":"10.1\u3001dubbo\u670d\u52a1"},{"location":"tantan/day06/#1011","text":"//com.tanhua.dubbo.server.api.UsersApi /** * \u6839\u636e\u7528\u6237id\u67e5\u8be2\u5168\u90e8Users\u5217\u8868 * * @param userId * @return */ List < Users > queryAllUsersList ( Long userId ); /** * \u6839\u636e\u7528\u6237id\u67e5\u8be2Users\u5217\u8868(\u5206\u9875\u67e5\u8be2) * * @param userId * @return */ PageInfo < Users > queryUsersList ( Long userId , Integer page , Integer pageSize );","title":"10.1.1\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day06/#1012","text":"//com.tanhua.dubbo.server.api.UsersApiImpl @Override public List < Users > queryAllUsersList ( Long userId ) { Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId )); return this . mongoTemplate . find ( query , Users . class ); } @Override public PageInfo < Users > queryUsersList ( Long userId , Integer page , Integer pageSize ) { PageRequest pageRequest = PageRequest . of ( page - 1 , pageSize , Sort . by ( Sort . Order . desc ( \"created\" ))); Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId )). with ( pageRequest ); List < Users > usersList = this . mongoTemplate . find ( query , Users . class ); PageInfo < Users > pageInfo = new PageInfo <> (); pageInfo . setPageNum ( page ); pageInfo . setPageSize ( pageSize ); pageInfo . setRecords ( usersList ); return pageInfo ; }","title":"10.1.2\u3001\u63a5\u53e3\u5b9e\u73b0"},{"location":"tantan/day06/#102app","text":"","title":"10.2\u3001APP\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day06/#1021usersvo","text":"package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class UsersVo { private Long id ; private String userId ; private String avatar ; private String nickname ; private String gender ; private Integer age ; private String city ; }","title":"10.2.1\u3001UsersVo"},{"location":"tantan/day06/#1022imcontroller","text":"//com.tanhua.server.controller.IMController /** * \u67e5\u8be2\u8054\u7cfb\u4eba\u5217\u8868 * * @param page * @param pageSize * @param keyword * @return */ @GetMapping ( \"contacts\" ) public ResponseEntity < PageResult > queryContactsList ( @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize , @RequestParam ( value = \"keyword\" , required = false ) String keyword ) { PageResult pageResult = this . imService . queryContactsList ( page , pageSize , keyword ); return ResponseEntity . ok ( pageResult ); }","title":"10.2.2\u3001IMController"},{"location":"tantan/day06/#1023imservice","text":"//com.tanhua.server.service.IMService public PageResult queryContactsList ( Integer page , Integer pageSize , String keyword ) { PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); User user = UserThreadLocal . get (); List < Users > usersList ; if ( StringUtils . isNotEmpty ( keyword )) { //\u5173\u952e\u4e0d\u4e3a\u7a7a\uff0c\u67e5\u8be2\u6240\u6709\u7684\u597d\u53cb\uff0c\u5728\u540e\u9762\u8fdb\u884c\u5173\u952e\u5b57\u8fc7\u6ee4 usersList = this . usersApi . queryAllUsersList ( user . getId ()); } else { //\u5173\u952e\u5b57\u4e3a\u7a7a\uff0c\u8fdb\u884c\u5206\u9875\u67e5\u8be2 PageInfo < Users > usersPageInfo = this . usersApi . queryUsersList ( user . getId (), page , pageSize ); usersList = usersPageInfo . getRecords (); } if ( CollUtil . isEmpty ( usersList )) { return pageResult ; } List < Object > userIds = CollUtil . getFieldValues ( usersList , \"friendId\" ); QueryWrapper < UserInfo > queryWrapper = new QueryWrapper <> (); queryWrapper . in ( \"user_id\" , userIds ); if ( StringUtils . isNotEmpty ( keyword )) { queryWrapper . like ( \"nick_name\" , keyword ); } List < UserInfo > userInfoList = this . userInfoService . queryUserInfoList ( queryWrapper ); List < UsersVo > contactsList = new ArrayList <> (); //\u586b\u5145\u7528\u6237\u4fe1\u606f for ( UserInfo userInfo : userInfoList ) { UsersVo usersVo = new UsersVo (); usersVo . setId ( userInfo . getUserId ()); usersVo . setAge ( userInfo . getAge ()); usersVo . setAvatar ( userInfo . getLogo ()); usersVo . setGender ( userInfo . getSex (). name (). toLowerCase ()); usersVo . setNickname ( userInfo . getNickName ()); //\u73af\u4fe1\u7528\u6237\u8d26\u53f7 usersVo . setUserId ( \"HX_\" + String . valueOf ( userInfo . getUserId ())); usersVo . setCity ( StringUtils . substringBefore ( userInfo . getCity (), \"-\" )); contactsList . add ( usersVo ); } pageResult . setItems ( contactsList ); return pageResult ; }","title":"10.2.3\u3001IMService"},{"location":"tantan/day06/#103","text":"","title":"10.3\u3001\u6d4b\u8bd5"},{"location":"tantan/day06/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/","text":"\u72ec\u7acb\u5b9e\u73b0\u89c6\u9891\u70b9\u8d5e\u529f\u80fd \u72ec\u7acb\u5b9e\u73b0\u89c6\u9891\u8bc4\u8bba\u529f\u80fd \u72ec\u7acb\u5b9e\u73b0\u89c6\u9891\u5173\u6ce8\u529f\u80fd \u4e86\u89e3\u5373\u65f6\u901a\u8baf\u4ee5\u53ca\u529f\u80fd \u4e86\u89e3\u5373\u65f6\u901a\u4fe1\u7684\u6280\u672f\u65b9\u6848 \u72ec\u7acb\u5b9e\u73b0\u73af\u4fe1\u7684\u7528\u6237\u4f53\u7cfb\u96c6\u6210 \u72ec\u7acb\u5b9e\u73b0\u6dfb\u52a0\u8054\u7cfb\u4eba \u72ec\u7acb\u5b9e\u73b0\u8054\u7cfb\u4eba\u5217\u8868","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"tantan/day07/","text":"\u8bfe\u7a0b\u8bf4\u660e \u00b6 \u70b9\u8d5e\u6d88\u606f\u5217\u8868 \u559c\u6b22\u6d88\u606f\u5217\u8868 \u8bc4\u8bba\u6d88\u606f\u5217\u8868 \u516c\u544a\u5217\u8868 \u4e2a\u4eba\u4e3b\u9875 \u804a\u4e00\u4e0b\u529f\u80fd \u8c01\u770b\u8fc7\u6211\u7684\u529f\u80fd \u200b 1\u3001\u6d88\u606f\u70b9\u8d5e\u3001\u559c\u6b22\u3001\u8bc4\u8bba\u5217\u8868 \u00b6 \u5728\u6d88\u606f\u6a21\u5757\u4e2d\u7684\u70b9\u8d5e\u3001\u559c\u6b22\u3001\u8bc4\u8bba\u5217\u8868\uff0c\u662f\u522b\u4eba\u5bf9\u81ea\u5df1\u53d1\u5e03\u7684\u5185\u5bb9\u7684\u64cd\u4f5c\uff0c\u5176\u5b9e\u73b0\u57fa\u672c\u4e00\u81f4\uff0c\u6240\u4ee5\u5728\u4e00\u8d77\u5b9e\u73b0\u3002 \u6548\u679c\uff1a \u70b9\u8d5e\u5217\u8868\u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/779 \u8bc4\u8bba\u5217\u8868\u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/785 \u559c\u6b22\u5217\u8868\u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/791 1.1\u3001dubbo\u670d\u52a1 \u00b6 1.1.1\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 //com.tanhua.dubbo.server.api.QuanZiApi /** * \u67e5\u8be2\u5bf9\u6211\u7684\u70b9\u8d5e\u6d88\u606f\u5217\u8868 * * @return */ PageInfo < Comment > queryLikeCommentListByUser ( Long userId , Integer page , Integer pageSize ); /** * \u67e5\u8be2\u5bf9\u6211\u7684\u559c\u6b22\u6d88\u606f\u5217\u8868 * * @return */ PageInfo < Comment > queryLoveCommentListByUser ( Long userId , Integer page , Integer pageSize ); /** * \u67e5\u8be2\u5bf9\u6211\u7684\u8bc4\u8bba\u6d88\u606f\u5217\u8868 * * @return */ PageInfo < Comment > queryCommentListByUser ( Long userId , Integer page , Integer pageSize ); 1.1.2\u3001\u7f16\u5199\u5b9e\u73b0 \u00b6 //com.tanhua.dubbo.server.api.QuanziApiImpl @Override public PageInfo < Comment > queryLikeCommentListByUser ( Long userId , Integer page , Integer pageSize ) { return this . queryCommentListByUser ( userId , CommentType . LIKE , page , pageSize ); } @Override public PageInfo < Comment > queryLoveCommentListByUser ( Long userId , Integer page , Integer pageSize ) { return this . queryCommentListByUser ( userId , CommentType . LOVE , page , pageSize ); } @Override public PageInfo < Comment > queryCommentListByUser ( Long userId , Integer page , Integer pageSize ) { return this . queryCommentListByUser ( userId , CommentType . COMMENT , page , pageSize ); } private PageInfo < Comment > queryCommentListByUser ( Long userId , CommentType commentType , Integer page , Integer pageSize ) { PageRequest pageRequest = PageRequest . of ( page - 1 , pageSize , Sort . by ( Sort . Order . desc ( \"created\" ))); Query query = new Query ( Criteria . where ( \"publishUserId\" ). is ( userId ) . and ( \"commentType\" ). is ( commentType . getType ())). with ( pageRequest ); List < Comment > commentList = this . mongoTemplate . find ( query , Comment . class ); PageInfo < Comment > pageInfo = new PageInfo <> (); pageInfo . setPageNum ( page ); pageInfo . setPageSize ( pageSize ); pageInfo . setRecords ( commentList ); return pageInfo ; } 1.2\u3001APP\u63a5\u53e3\u670d\u52a1 \u00b6 1.2.1\u3001MessageCommentVo \u00b6 \u6839\u636e\u63a5\u53e3\u5b9a\u4e49vo\u5bf9\u8c61\u3002 package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class MessageCommentVo { private String id ; private String avatar ; private String nickname ; private String createDate ; //\u683c\u5f0f\uff1a2019-09-08 10:07 } 1.2.3\u3001IMController \u00b6 //com.tanhua.server.controller.IMController /** * \u67e5\u8be2\u6d88\u606f\u70b9\u8d5e\u5217\u8868 * * @param page * @param pageSize * @return */ @GetMapping ( \"likes\" ) public ResponseEntity < PageResult > queryLikeCommentList ( @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize ) { try { PageResult pageResult = this . imService . queryLikeCommentList ( page , pageSize ); return ResponseEntity . ok ( pageResult ); } catch ( Exception e ) { log . error ( \"\u67e5\u8be2\u70b9\u8d5e\u5217\u8868\u5931\u8d25~ \" , e ); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u67e5\u8be2\u6d88\u606f\u8bc4\u8bba\u5217\u8868 * * @param page * @param pageSize * @return */ @GetMapping ( \"comments\" ) public ResponseEntity < PageResult > queryUserCommentList ( @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize ) { try { PageResult pageResult = this . imService . queryUserCommentList ( page , pageSize ); return ResponseEntity . ok ( pageResult ); } catch ( Exception e ) { log . error ( \"\u67e5\u8be2\u8bc4\u8bba\u5217\u8868\u5931\u8d25~ \" , e ); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u67e5\u8be2\u6d88\u606f\u559c\u6b22\u5217\u8868 * * @param page * @param pageSize * @return */ @GetMapping ( \"loves\" ) public ResponseEntity < PageResult > queryLoveCommentList ( @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize ) { try { PageResult pageResult = this . imService . queryLoveCommentList ( page , pageSize ); return ResponseEntity . ok ( pageResult ); } catch ( Exception e ) { log . error ( \"\u67e5\u8be2\u559c\u6b22\u5217\u8868\u5931\u8d25~ \" , e ); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 1.2.4\u3001IMService \u00b6 //com.tanhua.server.service.IMService public PageResult queryLikeCommentList ( Integer page , Integer pageSize ) { User user = UserThreadLocal . get (); PageInfo < Comment > pageInfo = this . quanZiApi . queryLikeCommentListByUser ( user . getId (), page , pageSize ); return this . fillUserCommentList ( pageInfo ); } public PageResult queryLoveCommentList ( Integer page , Integer pageSize ) { User user = UserThreadLocal . get (); PageInfo < Comment > pageInfo = this . quanZiApi . queryLoveCommentListByUser ( user . getId (), page , pageSize ); return this . fillUserCommentList ( pageInfo ); } public PageResult queryUserCommentList ( Integer page , Integer pageSize ) { User user = UserThreadLocal . get (); PageInfo < Comment > pageInfo = this . quanZiApi . queryCommentListByUser ( user . getId (), page , pageSize ); return this . fillUserCommentList ( pageInfo ); } private PageResult fillUserCommentList ( PageInfo < Comment > pageInfo ){ PageResult pageResult = new PageResult (); pageResult . setPage ( pageInfo . getPageNum ()); pageResult . setPagesize ( pageInfo . getPageSize ()); List < Comment > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )){ //\u6ca1\u6709\u67e5\u8be2\u5230\u6570\u636e return pageResult ; } List < Object > userIdList = CollUtil . getFieldValues ( records , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIdList ); List < MessageCommentVo > messageCommentVoList = new ArrayList <> (); for ( Comment comment : records ) { for ( UserInfo userInfo : userInfoList ) { if ( ObjectUtil . equals ( comment . getUserId (), userInfo . getUserId ())){ MessageCommentVo messageCommentVo = new MessageCommentVo (); messageCommentVo . setId ( comment . getId (). toHexString ()); messageCommentVo . setAvatar ( userInfo . getLogo ()); messageCommentVo . setNickname ( userInfo . getNickName ()); messageCommentVo . setCreateDate ( DateUtil . format ( new Date ( comment . getCreated ()), \"yyyy-MM-dd HH:mm\" )); messageCommentVoList . add ( messageCommentVo ); break ; } } } pageResult . setItems ( messageCommentVoList ); return pageResult ; } 1.3\u3001\u6d4b\u8bd5 \u00b6 2\u3001\u516c\u544a\u5217\u8868 \u00b6 \u516c\u544a\u662f\u540e\u53f0\u7cfb\u7edf\u5bf9\u6240\u6709\u7528\u6237\u53d1\u5e03\u7684\u516c\u544a\u6d88\u606f\u3002 \u6548\u679c\uff1a \u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/797 2.1\u3001\u8868\u7ed3\u6784 \u00b6 CREATE TABLE ` tb_announcement ` ( ` id ` bigint ( 20 ) NOT NULL AUTO_INCREMENT , ` title ` varchar ( 200 ) DEFAULT NULL COMMENT '\u6807\u9898' , ` description ` text COMMENT '\u63cf\u8ff0' , ` created ` datetime DEFAULT NULL , ` updated ` datetime DEFAULT NULL , PRIMARY KEY ( ` id ` ), KEY ` created ` ( ` created ` ) ) ENGINE = InnoDB AUTO_INCREMENT = 4 DEFAULT CHARSET = utf8 COMMENT = '\u516c\u544a\u8868' ; --\u63d2\u5165\u6570\u636e INSERT INTO ` tb_announcement ` ( ` id ` , ` title ` , ` description ` , ` created ` , ` updated ` ) VALUES ( '1' , '\u63a2\u82b1\u65b0\u7248\u672c\u4e0a\u7ebf\u53d1\u5e03\u5566\uff5e,\u76db\u590fhigh\u8db4\u5f00\u59cb\u4e86\uff0c\u8d76\u7d27\u6765\u62a5\u540d\u5427\uff01' , '\u63a2\u82b1App2019\u5e747\u670823\u65e5\u8d77\u5728\u82f9\u679c\u5546\u5e97\u2026,\u6d53\u60c5\u590f\u65e5\uff0c\u6e05\u723d\u4e00\u805a\uff0c\u63a2\u82b1\u5c06\u5427\u5927\u5bb6\u805a\u2026' , '2019-10-14 11:06:34' , '2019-10-14 11:06:37' ); INSERT INTO ` tb_announcement ` ( ` id ` , ` title ` , ` description ` , ` created ` , ` updated ` ) VALUES ( '2' , '\u63a2\u82b1\u4ea4\u53cb\u7684\u5708\u5b50\u529f\u80fd\u6b63\u5f0f\u4e0a\u7ebf\u5566~~' , '\u63a2\u82b1\u4ea4\u53cb\u7684\u5708\u5b50\u529f\u80fd\u6b63\u5f0f\u4e0a\u7ebf\u5566\uff0c\u6b22\u8fce\u4f7f\u7528~' , '2019-10-14 11:09:31' , '2019-10-14 11:09:33' ); INSERT INTO ` tb_announcement ` ( ` id ` , ` title ` , ` description ` , ` created ` , ` updated ` ) VALUES ( '3' , '\u56fd\u5e86\u653e\u5047\u671f\u95f4\uff0c\u63a2\u82b1\u4ea4\u53cb\u6b63\u5e38\u4f7f\u7528~' , '\u56fd\u5e86\u653e\u5047\u671f\u95f4\uff0c\u63a2\u82b1\u4ea4\u53cb\u6b63\u5e38\u4f7f\u7528~' , '2019-10-14 11:10:01' , '2019-10-14 11:10:04' ); 2.2\u3001pojo \u00b6 package com.tanhua.common.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class Announcement extends BasePojo { private Long id ; private String title ; private String description ; } 2.3\u3001AnnouncementMapper \u00b6 package com.tanhua.common.mapper ; import com.baomidou.mybatisplus.core.mapper.BaseMapper ; import com.tanhua.common.pojo.Announcement ; public interface AnnouncementMapper extends BaseMapper < Announcement > { } 2.4\u3001AnnouncementService \u00b6 package com.tanhua.server.service ; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper ; import com.baomidou.mybatisplus.core.metadata.IPage ; import com.baomidou.mybatisplus.extension.plugins.pagination.Page ; import com.tanhua.common.mapper.AnnouncementMapper ; import com.tanhua.common.pojo.Announcement ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; @Service public class AnnouncementService { @Autowired private AnnouncementMapper announcementMapper ; public IPage < Announcement > queryList ( Integer page , Integer pageSize ) { QueryWrapper queryWrapper = new QueryWrapper (); queryWrapper . orderByDesc ( \"created\" ); return this . announcementMapper . selectPage ( new Page < Announcement > ( page , pageSize ), queryWrapper ); } } 2.5\u3001\u5b9a\u4e49vo\u5bf9\u8c61 \u00b6 package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class AnnouncementVo { private String id ; private String title ; private String description ; private String createDate ; } 2.6\u3001IMController \u00b6 /** * \u67e5\u8be2\u516c\u544a\u5217\u8868 * * @param page * @param pageSize * @return */ @GetMapping ( \"announcements\" ) @NoAuthorization //\u4f18\u5316\uff0c\u65e0\u9700\u8fdb\u884ctoken\u6821\u9a8c public ResponseEntity < PageResult > queryMessageAnnouncementList ( @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize ) { try { PageResult pageResult = this . imService . queryMessageAnnouncementList ( page , pageSize ); return ResponseEntity . ok ( pageResult ); } catch ( Exception e ) { log . error ( \"\u67e5\u8be2\u516c\u544a\u5217\u8868\u5931\u8d25~ \" , e ); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 2.7\u3001IMService \u00b6 public PageResult queryMessageAnnouncementList ( Integer page , Integer pageSize ) { IPage < Announcement > announcementPage = this . announcementService . queryList ( page , pageSize ); List < AnnouncementVo > announcementVoList = new ArrayList <> (); for ( Announcement record : announcementPage . getRecords ()) { AnnouncementVo announcementVo = new AnnouncementVo (); announcementVo . setId ( record . getId (). toString ()); announcementVo . setTitle ( record . getTitle ()); announcementVo . setDescription ( record . getDescription ()); announcementVo . setCreateDate ( DateUtil . format ( record . getCreated (), \"yyyy-MM-dd HH:mm\" )); announcementVoList . add ( announcementVo ); } PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); pageResult . setItems ( announcementVoList ); return pageResult ; } 2.8\u3001\u6d4b\u8bd5 \u00b6 3\u3001\u4e2a\u4eba\u4e3b\u9875 \u00b6 \u70b9\u51fb\u9996\u9875\u7684\u4eca\u65e5\u4f73\u4eba\u6216\u4efb\u610f\u63a8\u8350\u4eba\u7684\u56fe\u7247\u5c31\u4f1a\u8fdb\u5165\u4e2a\u4eba\u4e3b\u9875\u9875\u9762\uff0c\u6548\u679c\u5982\u4e0b\uff1a \u5728\u4e2a\u4eba\u4e3b\u9875\u7684\u9875\u9762\u4e2d\uff0c\u4f1a\u663e\u793a\u51fa\u4e2a\u4eba\u4fe1\u606f\u3001\u7f18\u5206\u503c\u3001\u4e2a\u4eba\u76f8\u518c\u7b49\u5185\u5bb9\u3002 3.1\u3001\u4e2a\u4eba\u4fe1\u606f \u00b6 3.1.1\u3001dubbo\u670d\u52a1 \u00b6 \u9700\u8981\u5728dubbo\u670d\u52a1\u4e2d\u63d0\u4f9b\u67e5\u8be2\u7f18\u5206\u503c\u7684\u63a5\u53e3\u670d\u52a1\u3002 3.1.1.1\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 //com.tanhua.dubbo.server.api.RecommendUserApi /** * \u67e5\u8be2\u63a8\u8350\u597d\u53cb\u7684\u7f18\u5206\u503c * * @param userId \u597d\u53cb\u7684id * @param toUserId \u6211\u7684id * @return */ Double queryScore ( Long userId , Long toUserId ); 3.1.1.2\u3001\u5b9e\u73b0\u63a5\u53e3 \u00b6 //com.tanhua.dubbo.server.api.RecommendUserApiImpl @Override public Double queryScore ( Long userId , Long toUserId ) { Query query = Query . query ( Criteria . where ( \"toUserId\" ). is ( toUserId ) . and ( \"userId\" ). is ( userId )); RecommendUser recommendUser = this . mongoTemplate . findOne ( query , RecommendUser . class ); if ( null != recommendUser ) { return recommendUser . getScore (); } return null ; } 3.1.2\u3001APP\u63a5\u53e3\u670d\u52a1 \u00b6 \u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/629 \u8bf4\u660e\uff1a\u8be5\u63a5\u53e3\u7684\u8fd4\u56de\u503c\u63a5\u53e3\u4e0e\u4eca\u65e5\u4f73\u4eba\u7684\u7ed3\u6784\u4e00\u81f4\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u7528\u4eca\u65e5\u4f73\u4eba\u7684\u5bf9\u8c61\u3002 3.1.2.1\u3001TanHuaController \u00b6 package com.tanhua.server.controller ; import com.tanhua.server.service.TanHuaService ; import com.tanhua.server.vo.TodayBest ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.bind.annotation.PathVariable ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RestController ; @RequestMapping ( \"tanhua\" ) @RestController public class TanHuaController { @Autowired private TanHuaService tanHuaService ; /** * \u67e5\u8be2\u4e2a\u4eba\u4e3b\u9875\u7684\u4e2a\u4eba\u4fe1\u606f * * @param userId * @return */ @GetMapping ( \"{id}/personalInfo\" ) public ResponseEntity < TodayBest > queryUserInfo ( @PathVariable ( \"id\" ) Long userId ) { try { TodayBest todayBest = this . tanHuaService . queryUserInfo ( userId ); return ResponseEntity . ok ( todayBest ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } } 3.1.2.2\u3001TanHuaService \u00b6 package com.tanhua.server.service ; import cn.hutool.core.convert.Convert ; import cn.hutool.core.util.ObjectUtil ; import cn.hutool.core.util.StrUtil ; import com.tanhua.common.pojo.User ; import com.tanhua.common.pojo.UserInfo ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.server.vo.TodayBest ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; @Service public class TanHuaService { @Autowired private UserInfoService userInfoService ; @Autowired private RecommendUserService recommendUserService ; public TodayBest queryUserInfo ( Long userId ) { UserInfo userInfo = this . userInfoService . queryUserInfoByUserId ( userId ); if ( ObjectUtil . isEmpty ( userInfo )){ return null ; } TodayBest todayBest = new TodayBest (); todayBest . setId ( userId ); todayBest . setAge ( userInfo . getAge ()); todayBest . setGender ( userInfo . getSex (). name (). toLowerCase ()); todayBest . setNickname ( userInfo . getNickName ()); todayBest . setTags ( Convert . toStrArray ( StrUtil . split ( userInfo . getTags (), ',' ))); todayBest . setAvatar ( userInfo . getLogo ()); //\u7f18\u5206\u503c User user = UserThreadLocal . get (); todayBest . setFateValue ( this . recommendUserService . queryScore ( userId , user . getId ()). longValue ()); return todayBest ; } } 3.1.2.3\u3001RecommendUserService \u00b6 //com.tanhua.server.service.RecommendUserService /** * \u67e5\u8be2\u63a8\u8350\u597d\u53cb\u7684\u7f18\u5206\u503c * * @param userId * @param toUserId * @return */ public Double queryScore ( Long userId , Long toUserId ){ Double score = this . recommendUserApi . queryScore ( userId , toUserId ); if ( ObjectUtil . isNotEmpty ( score )){ return score ; } //\u9ed8\u8ba4\u503c return 98 d ; } 3.1.3\u3001\u6d4b\u8bd5 \u00b6 3.2\u3001\u4e2a\u4eba\u76f8\u518c \u00b6 3.2.1\u3001dubbo\u670d\u52a1 \u00b6 3.2.1.1\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 //com.tanhua.dubbo.server.api.QuanZiApi /** * \u67e5\u8be2\u76f8\u518c\u8868 * * @param userId * @param page * @param pageSize * @return */ PageInfo < Publish > queryAlbumList ( Long userId , Integer page , Integer pageSize ); 3.2.1.2\u3001\u5b9e\u73b0\u63a5\u53e3 \u00b6 //com.tanhua.dubbo.server.api.QuanZiApiImpl @Override public PageInfo < Publish > queryAlbumList ( Long userId , Integer page , Integer pageSize ) { PageInfo < Publish > pageInfo = new PageInfo <> (); pageInfo . setPageNum ( page ); pageInfo . setPageSize ( pageSize ); PageRequest pageRequest = PageRequest . of ( page - 1 , pageSize , Sort . by ( Sort . Order . desc ( \"created\" ))); Query query = new Query (). with ( pageRequest ); //\u67e5\u8be2\u81ea\u5df1\u7684\u76f8\u518c\u8868 List < Album > albumList = this . mongoTemplate . find ( query , Album . class , \"quanzi_album_\" + userId ); if ( CollUtil . isEmpty ( albumList )){ return pageInfo ; } List < Object > publishIdList = CollUtil . getFieldValues ( albumList , \"publishId\" ); Query queryPublish = Query . query ( Criteria . where ( \"id\" ). in ( publishIdList )) . with ( Sort . by ( Sort . Order . desc ( \"created\" ))); List < Publish > publishList = this . mongoTemplate . find ( queryPublish , Publish . class ); pageInfo . setRecords ( publishList ); return pageInfo ; } 3.2.2\u3001APP\u63a5\u53e3\u670d\u52a1 \u00b6 \u63a5\u53e3\u6587\u6863\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/689 3.2.2.1\u3001QuanZiController \u00b6 //com.tanhua.server.controller.QuanZiController /** * \u81ea\u5df1\u7684\u6240\u6709\u52a8\u6001 * * @return */ @GetMapping ( \"all\" ) public ResponseEntity < PageResult > queryAlbumList ( @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize , @RequestParam ( value = \"userId\" ) Long userId ) { try { PageResult pageResult = this . quanZiService . queryAlbumList ( userId , page , pageSize ); return ResponseEntity . ok ( pageResult ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 3.2.2.2\u3001QuanZiService \u00b6 //com.tanhua.server.service.QuanZiService public PageResult queryAlbumList ( Long userId , Integer page , Integer pageSize ) { PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); //\u67e5\u8be2\u6570\u636e PageInfo < Publish > pageInfo = this . quanZiApi . queryAlbumList ( userId , page , pageSize ); if ( CollUtil . isEmpty ( pageInfo . getRecords ())){ return pageResult ; } //\u586b\u5145\u6570\u636e pageResult . setItems ( this . fillQuanZiVo ( pageInfo . getRecords ())); return pageResult ; } 3.2.3\u3001\u6d4b\u8bd5 \u00b6 3.3\u3001\u6574\u5408\u6d4b\u8bd5 \u00b6 4\u3001\u804a\u4e00\u4e0b \u00b6 \u5728\u4e2a\u4eba\u4e3b\u9875\u4e2d\uff0c\u70b9\u51fb\u804a\u4e00\u4e0b\u6309\u94ae\uff0c\u4f1a\u5f39\u51fa\u56de\u7b54\u95ee\u9898\u7a97\u53e3\uff0c\u8f93\u5165\u7b54\u6848\u540e\uff0c\u7cfb\u7edf\u4f1a\u5411\u5bf9\u65b9\u53d1\u9001\u4e00\u6761\u964c\u804a\u6d88\u606f\uff0c\u5982\u679c\u5bf9\u65b9\u5728\u964c\u804a\u6d88\u606f\u4e2d\u70b9\u51fb\u804a\u4e00\u4e0b\uff0c\u4ed6\u4eec\u5c31\u4f1a\u6210\u4e3a\u597d\u53cb\u3002 \u7528\u62371\u5728\u7528\u62372\u7684\u4e2a\u4eba\u4e3b\u9875\u4e2d\u70b9\u51fb\u201c\u804a\u4e00\u4e0b\u201d\uff0c\u6d41\u7a0b\u5982\u4e0b\uff1a 4.1\u3001\u964c\u804a\u95ee\u9898 \u00b6 \u70b9\u51fb\u804a\u4e00\u4e0b\u65f6\uff0c\u9700\u8981\u663e\u793a\u51fa\u95ee\u9898\uff0c\u6240\u4ee5\u9700\u8981\u5728mysql\u4e2d\u5b58\u50a8\u7528\u6237\u7684\u95ee\u9898\u3002 4.1.1\u3001\u8868\u7ed3\u6784 \u00b6 CREATE TABLE ` tb_question ` ( ` id ` bigint ( 20 ) NOT NULL AUTO_INCREMENT , ` user_id ` bigint ( 20 ) DEFAULT NULL COMMENT '\u7528\u6237id' , ` txt ` varchar ( 200 ) DEFAULT NULL COMMENT '\u95ee\u9898\u5185\u5bb9' , ` created ` datetime DEFAULT NULL , ` updated ` datetime DEFAULT NULL , PRIMARY KEY ( ` id ` ), KEY ` user_id ` ( ` user_id ` ) ) ENGINE = InnoDB DEFAULT CHARSET = utf8 ; 4.1.2\u3001Question\u5b9e\u4f53\u5bf9\u8c61 \u00b6 \u5728my-tanhua-common\u5de5\u7a0b\u4e2d\u5b8c\u6210\u3002 package com.tanhua.common.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class Question extends BasePojo { private Long id ; private Long userId ; //\u95ee\u9898\u5185\u5bb9 private String txt ; } 4.1.3\u3001QuestionMapper \u00b6 \u5728my-tanhua-common\u5de5\u7a0b\u4e2d\u5b8c\u6210\u3002 package com.tanhua.common.mapper ; import com.baomidou.mybatisplus.core.mapper.BaseMapper ; import com.tanhua.common.pojo.Question ; public interface QuestionMapper extends BaseMapper < Question > { } 4.1.4\u3001QuestionService \u00b6 \u5728my-tanhua-server\u5de5\u7a0b\u4e2d\u5b8c\u6210\u3002 package com.tanhua.server.service ; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper ; import com.tanhua.common.mapper.QuestionMapper ; import com.tanhua.common.pojo.Question ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; @Service public class QuestionService { @Autowired private QuestionMapper questionMapper ; public Question queryQuestion ( Long userId ) { QueryWrapper queryWrapper = new QueryWrapper (); queryWrapper . eq ( \"user_id\" , userId ); return this . questionMapper . selectOne ( queryWrapper ); } } 4.2\u3001APP\u63a5\u53e3\u670d\u52a1 \u00b6 \u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/635 4.2.1\u3001TanHuaController \u00b6 //com.tanhua.server.controller.TanHuaController /** * \u67e5\u8be2\u964c\u751f\u4eba\u95ee\u9898 * * @param userId * @return */ @GetMapping ( \"strangerQuestions\" ) public ResponseEntity < String > queryQuestion ( @RequestParam ( \"userId\" ) Long userId ) { try { String question = this . tanHuaService . queryQuestion ( userId ); return ResponseEntity . ok ( question ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 4.2.2\u3001TanHuaService \u00b6 //com.tanhua.server.service.TanHuaService public String queryQuestion ( Long userId ) { Question question = this . questionService . queryQuestion ( userId ); if ( ObjectUtil . isNotEmpty ( question )){ return question . getTxt (); } //\u9ed8\u8ba4\u7684\u95ee\u9898 return \"\u4f60\u7684\u7231\u597d\u662f\u4ec0\u4e48\uff1f\" ; } 4.2.3\u3001\u6d4b\u8bd5 \u00b6 4.3\u3001\u56de\u590d\u964c\u751f\u4eba\u95ee\u9898 \u00b6 \u70b9\u51fb\u95ee\u9898\u7a97\u53e3\u4e2d\u7684\u201c\u804a\u4e00\u4e0b\u201d\uff0c\u9700\u8981\u901a\u8fc7admin\u6743\u9650\u53d1\u9001\u7cfb\u7edf\u6d88\u606f\u3002 4.3.1\u3001dubbo\u670d\u52a1 \u00b6 4.3.1.1\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 //com.tanhua.dubbo.server.api.HuanXinApi /** * \u4ee5\u7ba1\u7406\u5458\u8eab\u4efd\u53d1\u9001\u6d88\u606f * \u6587\u6863\u5730\u5740\uff1ahttp://docs-im.easemob.com/im/server/basics/messages#%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF * * @param targetUserName \u53d1\u9001\u76ee\u6807\u7684\u7528\u6237\u540d * @param huanXinMessageType \u6d88\u606f\u7c7b\u578b * @param msg * @return */ Boolean sendMsgFromAdmin ( String targetUserName , HuanXinMessageType huanXinMessageType , String msg ); package com.tanhua.dubbo.server.enums ; /** * \u6d88\u606f\u7c7b\u578b\uff1btxt:\u6587\u672c\u6d88\u606f\uff0cimg\uff1a\u56fe\u7247\u6d88\u606f\uff0cloc\uff1a\u4f4d\u7f6e\u6d88\u606f\uff0caudio\uff1a\u8bed\u97f3\u6d88\u606f\uff0cvideo\uff1a\u89c6\u9891\u6d88\u606f\uff0cfile\uff1a\u6587\u4ef6\u6d88\u606f */ public enum HuanXinMessageType { TXT ( \"txt\" ), IMG ( \"img\" ), LOC ( \"loc\" ), AUDIO ( \"audio\" ), VIDEO ( \"video\" ), FILE ( \"file\" ); String type ; HuanXinMessageType ( String type ) { this . type = type ; } public String getType () { return type ; } } 4.3.1.2\u3001\u5b9e\u73b0\u63a5\u53e3 \u00b6 //com.tanhua.dubbo.server.api.HuanXinApiImpl @Override public Boolean sendMsgFromAdmin ( String targetUserName , HuanXinMessageType huanXinMessageType , String msg ) { String targetUrl = this . huanXinConfig . getUrl () + this . huanXinConfig . getOrgName () + \"/\" + this . huanXinConfig . getAppName () + \"/messages\" ; try { //{\"target_type\": \"users\",\"target\": [\"user2\",\"user3\"],\"msg\": {\"type\": \"txt\",\"msg\": \"testmessage\"},\"from\": \"user1\"} String body = JSONUtil . createObj () . set ( \"target_type\" , \"users\" ) . set ( \"target\" , JSONUtil . createArray (). set ( targetUserName )) . set ( \"msg\" , JSONUtil . createObj () . set ( \"type\" , huanXinMessageType . getType ()) . set ( \"msg\" , msg )). toString (); //\u8868\u793a\u6d88\u606f\u53d1\u9001\u8005;\u65e0\u6b64\u5b57\u6bb5Server\u4f1a\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a\u201cfrom\u201d:\u201cadmin\u201d\uff0c\u6709from\u5b57\u6bb5\u4f46\u503c\u4e3a\u7a7a\u4e32(\u201c\u201d)\u65f6\u8bf7\u6c42\u5931\u8d25 // .set(\"from\", \"\") return this . requestService . execute ( targetUrl , body , Method . POST ). isOk (); } catch ( Exception e ) { log . error ( \"\u53d1\u9001\u6d88\u606f\u5931\u8d25~ targetUserName = \" + targetUserName + \", type = \" + huanXinMessageType . getType () + \", msg = \" + msg , e ); } return false ; } 4.3.2\u3001APP\u63a5\u53e3\u670d\u52a1 \u00b6 \u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/641 4.3.2.1\u3001TanHuaController \u00b6 //com.tanhua.server.controller.TanHuaController /** * \u56de\u590d\u964c\u751f\u4eba\u95ee\u9898 * * @return */ @PostMapping ( \"strangerQuestions\" ) public ResponseEntity < Void > replyQuestion ( @RequestBody Map < String , Object > param ) { try { Long userId = Long . valueOf ( param . get ( \"userId\" ). toString ()); String reply = param . get ( \"reply\" ). toString (); Boolean result = this . tanHuaService . replyQuestion ( userId , reply ); if ( result ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 4.3.2.2\u3001TanHuaService \u00b6 //com.tanhua.server.service.TanHuaService @Reference ( version = \"1.0.0\" ) private HuanXinApi huanXinApi ; public Boolean replyQuestion ( Long userId , String reply ) { User user = UserThreadLocal . get (); UserInfo userInfo = this . userInfoService . queryUserInfoByUserId ( user . getId ()); //\u6784\u5efa\u6d88\u606f\u5185\u5bb9 Map < String , Object > msg = new HashMap <> (); msg . put ( \"userId\" , user . getId ()); msg . put ( \"huanXinId\" , \"HX_\" + user . getId ()); msg . put ( \"nickname\" , userInfo . getNickName ()); msg . put ( \"strangerQuestion\" , this . queryQuestion ( userId )); msg . put ( \"reply\" , reply ); //\u53d1\u9001\u73af\u4fe1\u6d88\u606f return this . huanXinApi . sendMsgFromAdmin ( \"HX_\" + userId , HuanXinMessageType . TXT , JSONUtil . toJsonStr ( msg )); } 4.3.3\u3001\u6d4b\u8bd5 \u00b6 \u7528\u6237heima_37\u6536\u5230\u964c\u751f\u4eba\u6d88\u606f\uff1a \u53ef\u4ee5\u770b\u5230\u597d\u53cb\u5df2\u7ecf\u6dfb\u52a0\u5b8c\u6210\uff0c\u53ef\u4ee5\u5728\u901a\u8baf\u5f55\u4e2d\u9009\u62e9\u597d\u53cb\u8fdb\u884c\u804a\u5929\u3002 \u5728\u964c\u804a\u6d88\u606f\u4e2d\u7684\u201c\u786e\u8ba4\u6dfb\u52a0\u201d\u529f\u80fd\uff0c\u5c31\u662f\u524d\u9762\u5b9e\u73b0\u7684\u6dfb\u52a0\u8054\u7cfb\u4eba\u63a5\u53e3\u3002 5\u3001\u8c01\u770b\u8fc7\u6211 \u00b6 \u67e5\u8be2\u522b\u4eba\u6765\u8bbf\u4e86\u6211\u7684\u4e3b\u9875\u7684\u4fe1\u606f\uff0c\u5176\u4ed6\u7528\u6237\u5728\u6d4f\u89c8\u6211\u7684\u4e3b\u9875\u65f6\uff0c\u9700\u8981\u8bb0\u5f55\u8bbf\u5ba2\u6570\u636e\u3002\u8bbf\u5ba2\u5728\u4e00\u5929\u5185\u6bcf\u4e2a\u7528\u6237\u53ea\u8bb0\u5f55\u4e00\u6b21\u3002 \u67e5\u8be2\u6570\u636e\u65f6\uff0c\u5982\u679c\u7528\u6237\u67e5\u8be2\u8fc7\u5217\u8868\uff0c\u5c31\u9700\u8981\u8bb0\u5f55\u8fd9\u6b21\u67e5\u8be2\u6570\u636e\u7684\u65f6\u95f4\uff0c\u4e0b\u6b21\u67e5\u8be2\u65f6\u67e5\u8be2\u5927\u4e8e\u7b49\u4e8e\u8be5\u65f6\u95f4\u7684\u6570\u636e\u3002 \u5982\u679c\uff0c\u7528\u6237\u6ca1\u6709\u8bb0\u5f55\u67e5\u8be2\u65f6\u95f4\uff0c\u5c31\u67e5\u8be2\u6700\u8fd1\u76845\u4e2a\u6765\u8bbf\u7528\u6237\u3002 \u9875\u9762\u6548\u679c\u5982\u4e0b\uff1a 5.1\u3001dubbo\u670d\u52a1 \u00b6 5.1.1\u3001\u5b9e\u4f53\u5bf9\u8c61 \u00b6 package com.tanhua.dubbo.server.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.mongodb.core.mapping.Document ; @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"visitors\" ) public class Visitors implements java . io . Serializable { private static final long serialVersionUID = 2811682148052386573L ; private ObjectId id ; private Long userId ; //\u6211\u7684id private Long visitorUserId ; //\u6765\u8bbf\u7528\u6237id private String from ; //\u6765\u6e90\uff0c\u5982\u9996\u9875\u3001\u5708\u5b50\u7b49 private Long date ; //\u6765\u8bbf\u65f6\u95f4 private Double score ; //\u5f97\u5206 } 5.1.2\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 package com.tanhua.dubbo.server.api ; import com.tanhua.dubbo.server.pojo.Visitors ; import java.util.List ; public interface VisitorsApi { /** * \u4fdd\u5b58\u8bbf\u5ba2\u6570\u636e * * @param userId \u6211\u7684id * @param visitorUserId \u8bbf\u5ba2id * @param from \u6765\u6e90 * @return */ String saveVisitor ( Long userId , Long visitorUserId , String from ); /** * \u67e5\u8be2\u6211\u7684\u8bbf\u5ba2\u6570\u636e\uff0c\u5b58\u57282\u79cd\u60c5\u51b5\uff1a * 1. \u6211\u6ca1\u6709\u770b\u8fc7\u6211\u7684\u8bbf\u5ba2\u6570\u636e\uff0c\u8fd4\u56de\u524d5\u4e2a\u8bbf\u5ba2\u4fe1\u606f * 2. \u4e4b\u524d\u770b\u8fc7\u6211\u7684\u8bbf\u5ba2\uff0c\u4ece\u4e0a\u4e00\u6b21\u67e5\u770b\u7684\u65f6\u95f4\u70b9\u5f80\u540e\u67e5\u8be25\u4e2a\u8bbf\u5ba2\u6570\u636e * * @param userId * @return */ List < Visitors > queryMyVisitor ( Long userId ); } 5.1.3\u3001\u7f16\u5199\u5b9e\u73b0 \u00b6 package com.tanhua.dubbo.server.api ; import cn.hutool.core.convert.Convert ; import cn.hutool.core.date.DateUtil ; import cn.hutool.core.util.ObjectUtil ; import com.alibaba.dubbo.config.annotation.Service ; import com.tanhua.dubbo.server.pojo.RecommendUser ; import com.tanhua.dubbo.server.pojo.Visitors ; import org.bson.types.ObjectId ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.domain.PageRequest ; import org.springframework.data.domain.Sort ; import org.springframework.data.mongodb.core.MongoTemplate ; import org.springframework.data.mongodb.core.query.Criteria ; import org.springframework.data.mongodb.core.query.Query ; import org.springframework.data.redis.core.RedisTemplate ; import java.util.List ; @Service ( version = \"1.0.0\" ) public class VisitorsApiImpl implements VisitorsApi { @Autowired private MongoTemplate mongoTemplate ; private static final String VISITOR_REDIS_KEY = \"VISITOR_USER\" ; @Autowired private RedisTemplate < String , String > redisTemplate ; @Override public String saveVisitor ( Long userId , Long visitorUserId , String from ) { //\u6821\u9a8c if ( ! ObjectUtil . isAllNotEmpty ( userId , visitorUserId , from )) { return null ; } //\u67e5\u8be2\u8bbf\u5ba2\u7528\u6237\u5728\u4eca\u5929\u662f\u5426\u5df2\u7ecf\u8bb0\u5f55\u8fc7\uff0c\u5982\u679c\u5df2\u7ecf\u8bb0\u5f55\u8fc7\uff0c\u4e0d\u518d\u8bb0\u5f55 String today = DateUtil . today (); Long minDate = DateUtil . parseDateTime ( today + \" 00:00:00\" ). getTime (); Long maxDate = DateUtil . parseDateTime ( today + \" 23:59:59\" ). getTime (); Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId ) . and ( \"visitorUserId\" ). is ( visitorUserId ) . andOperator ( Criteria . where ( \"date\" ). gte ( minDate ), Criteria . where ( \"date\" ). lte ( maxDate ) ) ); long count = this . mongoTemplate . count ( query , Visitors . class ); if ( count > 0 ) { //\u4eca\u5929\u5df2\u7ecf\u8bb0\u5f55\u8fc7\u7684 return null ; } Visitors visitors = new Visitors (); visitors . setFrom ( from ); visitors . setVisitorUserId ( visitorUserId ); visitors . setUserId ( userId ); visitors . setDate ( System . currentTimeMillis ()); visitors . setId ( ObjectId . get ()); //\u5b58\u50a8\u6570\u636e this . mongoTemplate . save ( visitors ); return visitors . getId (). toHexString (); } @Override public List < Visitors > queryMyVisitor ( Long userId ) { // \u67e5\u8be2\u524d5\u4e2a\u8bbf\u5ba2\u6570\u636e\uff0c\u6309\u7167\u8bbf\u95ee\u65f6\u95f4\u5012\u5e8f\u6392\u5e8f // \u5982\u679c\u7528\u6237\u5df2\u7ecf\u67e5\u8be2\u8fc7\u5217\u8868\uff0c\u8bb0\u5f55\u67e5\u8be2\u65f6\u95f4\uff0c\u540e\u7eed\u67e5\u8be2\u9700\u8981\u6309\u7167\u8fd9\u4e2a\u65f6\u95f4\u5f80\u540e\u67e5\u8be2 // \u4e0a\u4e00\u6b21\u67e5\u8be2\u5217\u8868\u7684\u65f6\u95f4 Long date = Convert . toLong ( this . redisTemplate . opsForHash (). get ( VISITOR_REDIS_KEY , String . valueOf ( userId ))); PageRequest pageRequest = PageRequest . of ( 0 , 5 , Sort . by ( Sort . Order . desc ( \"date\" ))); Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId )) . with ( pageRequest ); if ( ObjectUtil . isNotEmpty ( date )) { query . addCriteria ( Criteria . where ( \"date\" ). gte ( date )); } List < Visitors > visitorsList = this . mongoTemplate . find ( query , Visitors . class ); //\u67e5\u8be2\u6bcf\u4e2a\u6765\u8bbf\u7528\u6237\u7684\u5f97\u5206 for ( Visitors visitors : visitorsList ) { Query queryScore = Query . query ( Criteria . where ( \"toUserId\" ) . is ( userId ). and ( \"userId\" ). is ( visitors . getVisitorUserId ()) ); RecommendUser recommendUser = this . mongoTemplate . findOne ( queryScore , RecommendUser . class ); if ( ObjectUtil . isNotEmpty ( recommendUser )){ visitors . setScore ( recommendUser . getScore ()); } else { //\u9ed8\u8ba4\u5f97\u5206 visitors . setScore ( 90 d ); } } return visitorsList ; } } 5.1.4\u3001\u5355\u5143\u6d4b\u8bd5 \u00b6 package com.tanhua.dubbo.server.api ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestVisitorsApi { @Autowired private VisitorsApi visitorsApi ; @Test public void testSaveVisitor (){ this . visitorsApi . saveVisitor ( 1L , 2L , \"\u4e2a\u4eba\u4e3b\u9875\" ); this . visitorsApi . saveVisitor ( 1L , 3L , \"\u4e2a\u4eba\u4e3b\u9875\" ); this . visitorsApi . saveVisitor ( 1L , 2L , \"\u4e2a\u4eba\u4e3b\u9875\" ); } @Test public void testQueryMyVisitor (){ this . visitorsApi . queryMyVisitor ( 1L ) . forEach ( visitors -> System . out . println ( visitors )); } } 5.2\u3001APP\u63a5\u53e3\u670d\u52a1 \u00b6 \u6587\u6863\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/743 package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class VisitorsVo { private Long id ; private String avatar ; private String nickname ; private String gender ; private Integer age ; private String [] tags ; private Integer fateValue ; } 5.2.2\u3001QuanZiController \u00b6 //com.tanhua.server.controller.QuanZiController /** * \u8c01\u770b\u8fc7\u6211 * * @return */ @GetMapping ( \"visitors\" ) public ResponseEntity < List < VisitorsVo >> queryVisitorsList (){ try { List < VisitorsVo > list = this . quanZiService . queryVisitorsList (); return ResponseEntity . ok ( list ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 5.2.3\u3001QuanZiService \u00b6 //com.tanhua.server.service.QuanZiService public List < VisitorsVo > queryVisitorsList () { User user = UserThreadLocal . get (); List < Visitors > visitorsList = this . visitorsApi . queryMyVisitor ( user . getId ()); if ( CollUtil . isEmpty ( visitorsList )) { return Collections . emptyList (); } List < Object > userIds = CollUtil . getFieldValues ( visitorsList , \"visitorUserId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIds ); List < VisitorsVo > visitorsVoList = new ArrayList <> (); for ( Visitors visitor : visitorsList ) { for ( UserInfo userInfo : userInfoList ) { if ( ObjectUtil . equals ( visitor . getVisitorUserId (), userInfo . getUserId ())) { VisitorsVo visitorsVo = new VisitorsVo (); visitorsVo . setAge ( userInfo . getAge ()); visitorsVo . setAvatar ( userInfo . getLogo ()); visitorsVo . setGender ( userInfo . getSex (). name (). toLowerCase ()); visitorsVo . setId ( userInfo . getUserId ()); visitorsVo . setNickname ( userInfo . getNickName ()); visitorsVo . setTags ( StringUtils . split ( userInfo . getTags (), ',' )); visitorsVo . setFateValue ( visitor . getScore (). intValue ()); visitorsVoList . add ( visitorsVo ); break ; } } } return visitorsVoList ; } 5.3\u3001\u8bb0\u5f55\u8bbf\u5ba2\u6570\u636e \u00b6 //com.tanhua.server.service.TanHuaService public TodayBest queryUserInfo ( Long userId ) { UserInfo userInfo = this . userInfoService . queryUserInfoByUserId ( userId ); if ( ObjectUtil . isEmpty ( userInfo )){ return null ; } TodayBest todayBest = new TodayBest (); todayBest . setId ( userId ); todayBest . setAge ( userInfo . getAge ()); todayBest . setGender ( userInfo . getSex (). name (). toLowerCase ()); todayBest . setNickname ( userInfo . getNickName ()); todayBest . setTags ( Convert . toStrArray ( StrUtil . split ( userInfo . getTags (), ',' ))); todayBest . setAvatar ( userInfo . getLogo ()); //\u7f18\u5206\u503c User user = UserThreadLocal . get (); todayBest . setFateValue ( this . recommendUserService . queryScore ( userId , user . getId ()). longValue ()); //\u8bb0\u5f55\u6765\u8bbf\u7528\u6237 this . visitorsApi . saveVisitor ( userId , user . getId (), \"\u4e2a\u4eba\u4e3b\u9875\" ); return todayBest ; } 5.4\u3001\u6d4b\u8bd5 \u00b6","title":"day07"},{"location":"tantan/day07/#_1","text":"\u70b9\u8d5e\u6d88\u606f\u5217\u8868 \u559c\u6b22\u6d88\u606f\u5217\u8868 \u8bc4\u8bba\u6d88\u606f\u5217\u8868 \u516c\u544a\u5217\u8868 \u4e2a\u4eba\u4e3b\u9875 \u804a\u4e00\u4e0b\u529f\u80fd \u8c01\u770b\u8fc7\u6211\u7684\u529f\u80fd \u200b","title":"\u8bfe\u7a0b\u8bf4\u660e"},{"location":"tantan/day07/#1","text":"\u5728\u6d88\u606f\u6a21\u5757\u4e2d\u7684\u70b9\u8d5e\u3001\u559c\u6b22\u3001\u8bc4\u8bba\u5217\u8868\uff0c\u662f\u522b\u4eba\u5bf9\u81ea\u5df1\u53d1\u5e03\u7684\u5185\u5bb9\u7684\u64cd\u4f5c\uff0c\u5176\u5b9e\u73b0\u57fa\u672c\u4e00\u81f4\uff0c\u6240\u4ee5\u5728\u4e00\u8d77\u5b9e\u73b0\u3002 \u6548\u679c\uff1a \u70b9\u8d5e\u5217\u8868\u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/779 \u8bc4\u8bba\u5217\u8868\u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/785 \u559c\u6b22\u5217\u8868\u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/791","title":"1\u3001\u6d88\u606f\u70b9\u8d5e\u3001\u559c\u6b22\u3001\u8bc4\u8bba\u5217\u8868"},{"location":"tantan/day07/#11dubbo","text":"","title":"1.1\u3001dubbo\u670d\u52a1"},{"location":"tantan/day07/#111","text":"//com.tanhua.dubbo.server.api.QuanZiApi /** * \u67e5\u8be2\u5bf9\u6211\u7684\u70b9\u8d5e\u6d88\u606f\u5217\u8868 * * @return */ PageInfo < Comment > queryLikeCommentListByUser ( Long userId , Integer page , Integer pageSize ); /** * \u67e5\u8be2\u5bf9\u6211\u7684\u559c\u6b22\u6d88\u606f\u5217\u8868 * * @return */ PageInfo < Comment > queryLoveCommentListByUser ( Long userId , Integer page , Integer pageSize ); /** * \u67e5\u8be2\u5bf9\u6211\u7684\u8bc4\u8bba\u6d88\u606f\u5217\u8868 * * @return */ PageInfo < Comment > queryCommentListByUser ( Long userId , Integer page , Integer pageSize );","title":"1.1.1\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day07/#112","text":"//com.tanhua.dubbo.server.api.QuanziApiImpl @Override public PageInfo < Comment > queryLikeCommentListByUser ( Long userId , Integer page , Integer pageSize ) { return this . queryCommentListByUser ( userId , CommentType . LIKE , page , pageSize ); } @Override public PageInfo < Comment > queryLoveCommentListByUser ( Long userId , Integer page , Integer pageSize ) { return this . queryCommentListByUser ( userId , CommentType . LOVE , page , pageSize ); } @Override public PageInfo < Comment > queryCommentListByUser ( Long userId , Integer page , Integer pageSize ) { return this . queryCommentListByUser ( userId , CommentType . COMMENT , page , pageSize ); } private PageInfo < Comment > queryCommentListByUser ( Long userId , CommentType commentType , Integer page , Integer pageSize ) { PageRequest pageRequest = PageRequest . of ( page - 1 , pageSize , Sort . by ( Sort . Order . desc ( \"created\" ))); Query query = new Query ( Criteria . where ( \"publishUserId\" ). is ( userId ) . and ( \"commentType\" ). is ( commentType . getType ())). with ( pageRequest ); List < Comment > commentList = this . mongoTemplate . find ( query , Comment . class ); PageInfo < Comment > pageInfo = new PageInfo <> (); pageInfo . setPageNum ( page ); pageInfo . setPageSize ( pageSize ); pageInfo . setRecords ( commentList ); return pageInfo ; }","title":"1.1.2\u3001\u7f16\u5199\u5b9e\u73b0"},{"location":"tantan/day07/#12app","text":"","title":"1.2\u3001APP\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day07/#121messagecommentvo","text":"\u6839\u636e\u63a5\u53e3\u5b9a\u4e49vo\u5bf9\u8c61\u3002 package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class MessageCommentVo { private String id ; private String avatar ; private String nickname ; private String createDate ; //\u683c\u5f0f\uff1a2019-09-08 10:07 }","title":"1.2.1\u3001MessageCommentVo"},{"location":"tantan/day07/#123imcontroller","text":"//com.tanhua.server.controller.IMController /** * \u67e5\u8be2\u6d88\u606f\u70b9\u8d5e\u5217\u8868 * * @param page * @param pageSize * @return */ @GetMapping ( \"likes\" ) public ResponseEntity < PageResult > queryLikeCommentList ( @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize ) { try { PageResult pageResult = this . imService . queryLikeCommentList ( page , pageSize ); return ResponseEntity . ok ( pageResult ); } catch ( Exception e ) { log . error ( \"\u67e5\u8be2\u70b9\u8d5e\u5217\u8868\u5931\u8d25~ \" , e ); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u67e5\u8be2\u6d88\u606f\u8bc4\u8bba\u5217\u8868 * * @param page * @param pageSize * @return */ @GetMapping ( \"comments\" ) public ResponseEntity < PageResult > queryUserCommentList ( @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize ) { try { PageResult pageResult = this . imService . queryUserCommentList ( page , pageSize ); return ResponseEntity . ok ( pageResult ); } catch ( Exception e ) { log . error ( \"\u67e5\u8be2\u8bc4\u8bba\u5217\u8868\u5931\u8d25~ \" , e ); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u67e5\u8be2\u6d88\u606f\u559c\u6b22\u5217\u8868 * * @param page * @param pageSize * @return */ @GetMapping ( \"loves\" ) public ResponseEntity < PageResult > queryLoveCommentList ( @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize ) { try { PageResult pageResult = this . imService . queryLoveCommentList ( page , pageSize ); return ResponseEntity . ok ( pageResult ); } catch ( Exception e ) { log . error ( \"\u67e5\u8be2\u559c\u6b22\u5217\u8868\u5931\u8d25~ \" , e ); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"1.2.3\u3001IMController"},{"location":"tantan/day07/#124imservice","text":"//com.tanhua.server.service.IMService public PageResult queryLikeCommentList ( Integer page , Integer pageSize ) { User user = UserThreadLocal . get (); PageInfo < Comment > pageInfo = this . quanZiApi . queryLikeCommentListByUser ( user . getId (), page , pageSize ); return this . fillUserCommentList ( pageInfo ); } public PageResult queryLoveCommentList ( Integer page , Integer pageSize ) { User user = UserThreadLocal . get (); PageInfo < Comment > pageInfo = this . quanZiApi . queryLoveCommentListByUser ( user . getId (), page , pageSize ); return this . fillUserCommentList ( pageInfo ); } public PageResult queryUserCommentList ( Integer page , Integer pageSize ) { User user = UserThreadLocal . get (); PageInfo < Comment > pageInfo = this . quanZiApi . queryCommentListByUser ( user . getId (), page , pageSize ); return this . fillUserCommentList ( pageInfo ); } private PageResult fillUserCommentList ( PageInfo < Comment > pageInfo ){ PageResult pageResult = new PageResult (); pageResult . setPage ( pageInfo . getPageNum ()); pageResult . setPagesize ( pageInfo . getPageSize ()); List < Comment > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )){ //\u6ca1\u6709\u67e5\u8be2\u5230\u6570\u636e return pageResult ; } List < Object > userIdList = CollUtil . getFieldValues ( records , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIdList ); List < MessageCommentVo > messageCommentVoList = new ArrayList <> (); for ( Comment comment : records ) { for ( UserInfo userInfo : userInfoList ) { if ( ObjectUtil . equals ( comment . getUserId (), userInfo . getUserId ())){ MessageCommentVo messageCommentVo = new MessageCommentVo (); messageCommentVo . setId ( comment . getId (). toHexString ()); messageCommentVo . setAvatar ( userInfo . getLogo ()); messageCommentVo . setNickname ( userInfo . getNickName ()); messageCommentVo . setCreateDate ( DateUtil . format ( new Date ( comment . getCreated ()), \"yyyy-MM-dd HH:mm\" )); messageCommentVoList . add ( messageCommentVo ); break ; } } } pageResult . setItems ( messageCommentVoList ); return pageResult ; }","title":"1.2.4\u3001IMService"},{"location":"tantan/day07/#13","text":"","title":"1.3\u3001\u6d4b\u8bd5"},{"location":"tantan/day07/#2","text":"\u516c\u544a\u662f\u540e\u53f0\u7cfb\u7edf\u5bf9\u6240\u6709\u7528\u6237\u53d1\u5e03\u7684\u516c\u544a\u6d88\u606f\u3002 \u6548\u679c\uff1a \u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/797","title":"2\u3001\u516c\u544a\u5217\u8868"},{"location":"tantan/day07/#21","text":"CREATE TABLE ` tb_announcement ` ( ` id ` bigint ( 20 ) NOT NULL AUTO_INCREMENT , ` title ` varchar ( 200 ) DEFAULT NULL COMMENT '\u6807\u9898' , ` description ` text COMMENT '\u63cf\u8ff0' , ` created ` datetime DEFAULT NULL , ` updated ` datetime DEFAULT NULL , PRIMARY KEY ( ` id ` ), KEY ` created ` ( ` created ` ) ) ENGINE = InnoDB AUTO_INCREMENT = 4 DEFAULT CHARSET = utf8 COMMENT = '\u516c\u544a\u8868' ; --\u63d2\u5165\u6570\u636e INSERT INTO ` tb_announcement ` ( ` id ` , ` title ` , ` description ` , ` created ` , ` updated ` ) VALUES ( '1' , '\u63a2\u82b1\u65b0\u7248\u672c\u4e0a\u7ebf\u53d1\u5e03\u5566\uff5e,\u76db\u590fhigh\u8db4\u5f00\u59cb\u4e86\uff0c\u8d76\u7d27\u6765\u62a5\u540d\u5427\uff01' , '\u63a2\u82b1App2019\u5e747\u670823\u65e5\u8d77\u5728\u82f9\u679c\u5546\u5e97\u2026,\u6d53\u60c5\u590f\u65e5\uff0c\u6e05\u723d\u4e00\u805a\uff0c\u63a2\u82b1\u5c06\u5427\u5927\u5bb6\u805a\u2026' , '2019-10-14 11:06:34' , '2019-10-14 11:06:37' ); INSERT INTO ` tb_announcement ` ( ` id ` , ` title ` , ` description ` , ` created ` , ` updated ` ) VALUES ( '2' , '\u63a2\u82b1\u4ea4\u53cb\u7684\u5708\u5b50\u529f\u80fd\u6b63\u5f0f\u4e0a\u7ebf\u5566~~' , '\u63a2\u82b1\u4ea4\u53cb\u7684\u5708\u5b50\u529f\u80fd\u6b63\u5f0f\u4e0a\u7ebf\u5566\uff0c\u6b22\u8fce\u4f7f\u7528~' , '2019-10-14 11:09:31' , '2019-10-14 11:09:33' ); INSERT INTO ` tb_announcement ` ( ` id ` , ` title ` , ` description ` , ` created ` , ` updated ` ) VALUES ( '3' , '\u56fd\u5e86\u653e\u5047\u671f\u95f4\uff0c\u63a2\u82b1\u4ea4\u53cb\u6b63\u5e38\u4f7f\u7528~' , '\u56fd\u5e86\u653e\u5047\u671f\u95f4\uff0c\u63a2\u82b1\u4ea4\u53cb\u6b63\u5e38\u4f7f\u7528~' , '2019-10-14 11:10:01' , '2019-10-14 11:10:04' );","title":"2.1\u3001\u8868\u7ed3\u6784"},{"location":"tantan/day07/#22pojo","text":"package com.tanhua.common.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class Announcement extends BasePojo { private Long id ; private String title ; private String description ; }","title":"2.2\u3001pojo"},{"location":"tantan/day07/#23announcementmapper","text":"package com.tanhua.common.mapper ; import com.baomidou.mybatisplus.core.mapper.BaseMapper ; import com.tanhua.common.pojo.Announcement ; public interface AnnouncementMapper extends BaseMapper < Announcement > { }","title":"2.3\u3001AnnouncementMapper"},{"location":"tantan/day07/#24announcementservice","text":"package com.tanhua.server.service ; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper ; import com.baomidou.mybatisplus.core.metadata.IPage ; import com.baomidou.mybatisplus.extension.plugins.pagination.Page ; import com.tanhua.common.mapper.AnnouncementMapper ; import com.tanhua.common.pojo.Announcement ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; @Service public class AnnouncementService { @Autowired private AnnouncementMapper announcementMapper ; public IPage < Announcement > queryList ( Integer page , Integer pageSize ) { QueryWrapper queryWrapper = new QueryWrapper (); queryWrapper . orderByDesc ( \"created\" ); return this . announcementMapper . selectPage ( new Page < Announcement > ( page , pageSize ), queryWrapper ); } }","title":"2.4\u3001AnnouncementService"},{"location":"tantan/day07/#25vo","text":"package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class AnnouncementVo { private String id ; private String title ; private String description ; private String createDate ; }","title":"2.5\u3001\u5b9a\u4e49vo\u5bf9\u8c61"},{"location":"tantan/day07/#26imcontroller","text":"/** * \u67e5\u8be2\u516c\u544a\u5217\u8868 * * @param page * @param pageSize * @return */ @GetMapping ( \"announcements\" ) @NoAuthorization //\u4f18\u5316\uff0c\u65e0\u9700\u8fdb\u884ctoken\u6821\u9a8c public ResponseEntity < PageResult > queryMessageAnnouncementList ( @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize ) { try { PageResult pageResult = this . imService . queryMessageAnnouncementList ( page , pageSize ); return ResponseEntity . ok ( pageResult ); } catch ( Exception e ) { log . error ( \"\u67e5\u8be2\u516c\u544a\u5217\u8868\u5931\u8d25~ \" , e ); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"2.6\u3001IMController"},{"location":"tantan/day07/#27imservice","text":"public PageResult queryMessageAnnouncementList ( Integer page , Integer pageSize ) { IPage < Announcement > announcementPage = this . announcementService . queryList ( page , pageSize ); List < AnnouncementVo > announcementVoList = new ArrayList <> (); for ( Announcement record : announcementPage . getRecords ()) { AnnouncementVo announcementVo = new AnnouncementVo (); announcementVo . setId ( record . getId (). toString ()); announcementVo . setTitle ( record . getTitle ()); announcementVo . setDescription ( record . getDescription ()); announcementVo . setCreateDate ( DateUtil . format ( record . getCreated (), \"yyyy-MM-dd HH:mm\" )); announcementVoList . add ( announcementVo ); } PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); pageResult . setItems ( announcementVoList ); return pageResult ; }","title":"2.7\u3001IMService"},{"location":"tantan/day07/#28","text":"","title":"2.8\u3001\u6d4b\u8bd5"},{"location":"tantan/day07/#3","text":"\u70b9\u51fb\u9996\u9875\u7684\u4eca\u65e5\u4f73\u4eba\u6216\u4efb\u610f\u63a8\u8350\u4eba\u7684\u56fe\u7247\u5c31\u4f1a\u8fdb\u5165\u4e2a\u4eba\u4e3b\u9875\u9875\u9762\uff0c\u6548\u679c\u5982\u4e0b\uff1a \u5728\u4e2a\u4eba\u4e3b\u9875\u7684\u9875\u9762\u4e2d\uff0c\u4f1a\u663e\u793a\u51fa\u4e2a\u4eba\u4fe1\u606f\u3001\u7f18\u5206\u503c\u3001\u4e2a\u4eba\u76f8\u518c\u7b49\u5185\u5bb9\u3002","title":"3\u3001\u4e2a\u4eba\u4e3b\u9875"},{"location":"tantan/day07/#31","text":"","title":"3.1\u3001\u4e2a\u4eba\u4fe1\u606f"},{"location":"tantan/day07/#311dubbo","text":"\u9700\u8981\u5728dubbo\u670d\u52a1\u4e2d\u63d0\u4f9b\u67e5\u8be2\u7f18\u5206\u503c\u7684\u63a5\u53e3\u670d\u52a1\u3002","title":"3.1.1\u3001dubbo\u670d\u52a1"},{"location":"tantan/day07/#3111","text":"//com.tanhua.dubbo.server.api.RecommendUserApi /** * \u67e5\u8be2\u63a8\u8350\u597d\u53cb\u7684\u7f18\u5206\u503c * * @param userId \u597d\u53cb\u7684id * @param toUserId \u6211\u7684id * @return */ Double queryScore ( Long userId , Long toUserId );","title":"3.1.1.1\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day07/#3112","text":"//com.tanhua.dubbo.server.api.RecommendUserApiImpl @Override public Double queryScore ( Long userId , Long toUserId ) { Query query = Query . query ( Criteria . where ( \"toUserId\" ). is ( toUserId ) . and ( \"userId\" ). is ( userId )); RecommendUser recommendUser = this . mongoTemplate . findOne ( query , RecommendUser . class ); if ( null != recommendUser ) { return recommendUser . getScore (); } return null ; }","title":"3.1.1.2\u3001\u5b9e\u73b0\u63a5\u53e3"},{"location":"tantan/day07/#312app","text":"\u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/629 \u8bf4\u660e\uff1a\u8be5\u63a5\u53e3\u7684\u8fd4\u56de\u503c\u63a5\u53e3\u4e0e\u4eca\u65e5\u4f73\u4eba\u7684\u7ed3\u6784\u4e00\u81f4\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u7528\u4eca\u65e5\u4f73\u4eba\u7684\u5bf9\u8c61\u3002","title":"3.1.2\u3001APP\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day07/#3121tanhuacontroller","text":"package com.tanhua.server.controller ; import com.tanhua.server.service.TanHuaService ; import com.tanhua.server.vo.TodayBest ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.bind.annotation.PathVariable ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RestController ; @RequestMapping ( \"tanhua\" ) @RestController public class TanHuaController { @Autowired private TanHuaService tanHuaService ; /** * \u67e5\u8be2\u4e2a\u4eba\u4e3b\u9875\u7684\u4e2a\u4eba\u4fe1\u606f * * @param userId * @return */ @GetMapping ( \"{id}/personalInfo\" ) public ResponseEntity < TodayBest > queryUserInfo ( @PathVariable ( \"id\" ) Long userId ) { try { TodayBest todayBest = this . tanHuaService . queryUserInfo ( userId ); return ResponseEntity . ok ( todayBest ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } }","title":"3.1.2.1\u3001TanHuaController"},{"location":"tantan/day07/#3122tanhuaservice","text":"package com.tanhua.server.service ; import cn.hutool.core.convert.Convert ; import cn.hutool.core.util.ObjectUtil ; import cn.hutool.core.util.StrUtil ; import com.tanhua.common.pojo.User ; import com.tanhua.common.pojo.UserInfo ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.server.vo.TodayBest ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; @Service public class TanHuaService { @Autowired private UserInfoService userInfoService ; @Autowired private RecommendUserService recommendUserService ; public TodayBest queryUserInfo ( Long userId ) { UserInfo userInfo = this . userInfoService . queryUserInfoByUserId ( userId ); if ( ObjectUtil . isEmpty ( userInfo )){ return null ; } TodayBest todayBest = new TodayBest (); todayBest . setId ( userId ); todayBest . setAge ( userInfo . getAge ()); todayBest . setGender ( userInfo . getSex (). name (). toLowerCase ()); todayBest . setNickname ( userInfo . getNickName ()); todayBest . setTags ( Convert . toStrArray ( StrUtil . split ( userInfo . getTags (), ',' ))); todayBest . setAvatar ( userInfo . getLogo ()); //\u7f18\u5206\u503c User user = UserThreadLocal . get (); todayBest . setFateValue ( this . recommendUserService . queryScore ( userId , user . getId ()). longValue ()); return todayBest ; } }","title":"3.1.2.2\u3001TanHuaService"},{"location":"tantan/day07/#3123recommenduserservice","text":"//com.tanhua.server.service.RecommendUserService /** * \u67e5\u8be2\u63a8\u8350\u597d\u53cb\u7684\u7f18\u5206\u503c * * @param userId * @param toUserId * @return */ public Double queryScore ( Long userId , Long toUserId ){ Double score = this . recommendUserApi . queryScore ( userId , toUserId ); if ( ObjectUtil . isNotEmpty ( score )){ return score ; } //\u9ed8\u8ba4\u503c return 98 d ; }","title":"3.1.2.3\u3001RecommendUserService"},{"location":"tantan/day07/#313","text":"","title":"3.1.3\u3001\u6d4b\u8bd5"},{"location":"tantan/day07/#32","text":"","title":"3.2\u3001\u4e2a\u4eba\u76f8\u518c"},{"location":"tantan/day07/#321dubbo","text":"","title":"3.2.1\u3001dubbo\u670d\u52a1"},{"location":"tantan/day07/#3211","text":"//com.tanhua.dubbo.server.api.QuanZiApi /** * \u67e5\u8be2\u76f8\u518c\u8868 * * @param userId * @param page * @param pageSize * @return */ PageInfo < Publish > queryAlbumList ( Long userId , Integer page , Integer pageSize );","title":"3.2.1.1\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day07/#3212","text":"//com.tanhua.dubbo.server.api.QuanZiApiImpl @Override public PageInfo < Publish > queryAlbumList ( Long userId , Integer page , Integer pageSize ) { PageInfo < Publish > pageInfo = new PageInfo <> (); pageInfo . setPageNum ( page ); pageInfo . setPageSize ( pageSize ); PageRequest pageRequest = PageRequest . of ( page - 1 , pageSize , Sort . by ( Sort . Order . desc ( \"created\" ))); Query query = new Query (). with ( pageRequest ); //\u67e5\u8be2\u81ea\u5df1\u7684\u76f8\u518c\u8868 List < Album > albumList = this . mongoTemplate . find ( query , Album . class , \"quanzi_album_\" + userId ); if ( CollUtil . isEmpty ( albumList )){ return pageInfo ; } List < Object > publishIdList = CollUtil . getFieldValues ( albumList , \"publishId\" ); Query queryPublish = Query . query ( Criteria . where ( \"id\" ). in ( publishIdList )) . with ( Sort . by ( Sort . Order . desc ( \"created\" ))); List < Publish > publishList = this . mongoTemplate . find ( queryPublish , Publish . class ); pageInfo . setRecords ( publishList ); return pageInfo ; }","title":"3.2.1.2\u3001\u5b9e\u73b0\u63a5\u53e3"},{"location":"tantan/day07/#322app","text":"\u63a5\u53e3\u6587\u6863\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/689","title":"3.2.2\u3001APP\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day07/#3221quanzicontroller","text":"//com.tanhua.server.controller.QuanZiController /** * \u81ea\u5df1\u7684\u6240\u6709\u52a8\u6001 * * @return */ @GetMapping ( \"all\" ) public ResponseEntity < PageResult > queryAlbumList ( @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize , @RequestParam ( value = \"userId\" ) Long userId ) { try { PageResult pageResult = this . quanZiService . queryAlbumList ( userId , page , pageSize ); return ResponseEntity . ok ( pageResult ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"3.2.2.1\u3001QuanZiController"},{"location":"tantan/day07/#3222quanziservice","text":"//com.tanhua.server.service.QuanZiService public PageResult queryAlbumList ( Long userId , Integer page , Integer pageSize ) { PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); //\u67e5\u8be2\u6570\u636e PageInfo < Publish > pageInfo = this . quanZiApi . queryAlbumList ( userId , page , pageSize ); if ( CollUtil . isEmpty ( pageInfo . getRecords ())){ return pageResult ; } //\u586b\u5145\u6570\u636e pageResult . setItems ( this . fillQuanZiVo ( pageInfo . getRecords ())); return pageResult ; }","title":"3.2.2.2\u3001QuanZiService"},{"location":"tantan/day07/#323","text":"","title":"3.2.3\u3001\u6d4b\u8bd5"},{"location":"tantan/day07/#33","text":"","title":"3.3\u3001\u6574\u5408\u6d4b\u8bd5"},{"location":"tantan/day07/#4","text":"\u5728\u4e2a\u4eba\u4e3b\u9875\u4e2d\uff0c\u70b9\u51fb\u804a\u4e00\u4e0b\u6309\u94ae\uff0c\u4f1a\u5f39\u51fa\u56de\u7b54\u95ee\u9898\u7a97\u53e3\uff0c\u8f93\u5165\u7b54\u6848\u540e\uff0c\u7cfb\u7edf\u4f1a\u5411\u5bf9\u65b9\u53d1\u9001\u4e00\u6761\u964c\u804a\u6d88\u606f\uff0c\u5982\u679c\u5bf9\u65b9\u5728\u964c\u804a\u6d88\u606f\u4e2d\u70b9\u51fb\u804a\u4e00\u4e0b\uff0c\u4ed6\u4eec\u5c31\u4f1a\u6210\u4e3a\u597d\u53cb\u3002 \u7528\u62371\u5728\u7528\u62372\u7684\u4e2a\u4eba\u4e3b\u9875\u4e2d\u70b9\u51fb\u201c\u804a\u4e00\u4e0b\u201d\uff0c\u6d41\u7a0b\u5982\u4e0b\uff1a","title":"4\u3001\u804a\u4e00\u4e0b"},{"location":"tantan/day07/#41","text":"\u70b9\u51fb\u804a\u4e00\u4e0b\u65f6\uff0c\u9700\u8981\u663e\u793a\u51fa\u95ee\u9898\uff0c\u6240\u4ee5\u9700\u8981\u5728mysql\u4e2d\u5b58\u50a8\u7528\u6237\u7684\u95ee\u9898\u3002","title":"4.1\u3001\u964c\u804a\u95ee\u9898"},{"location":"tantan/day07/#411","text":"CREATE TABLE ` tb_question ` ( ` id ` bigint ( 20 ) NOT NULL AUTO_INCREMENT , ` user_id ` bigint ( 20 ) DEFAULT NULL COMMENT '\u7528\u6237id' , ` txt ` varchar ( 200 ) DEFAULT NULL COMMENT '\u95ee\u9898\u5185\u5bb9' , ` created ` datetime DEFAULT NULL , ` updated ` datetime DEFAULT NULL , PRIMARY KEY ( ` id ` ), KEY ` user_id ` ( ` user_id ` ) ) ENGINE = InnoDB DEFAULT CHARSET = utf8 ;","title":"4.1.1\u3001\u8868\u7ed3\u6784"},{"location":"tantan/day07/#412question","text":"\u5728my-tanhua-common\u5de5\u7a0b\u4e2d\u5b8c\u6210\u3002 package com.tanhua.common.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class Question extends BasePojo { private Long id ; private Long userId ; //\u95ee\u9898\u5185\u5bb9 private String txt ; }","title":"4.1.2\u3001Question\u5b9e\u4f53\u5bf9\u8c61"},{"location":"tantan/day07/#413questionmapper","text":"\u5728my-tanhua-common\u5de5\u7a0b\u4e2d\u5b8c\u6210\u3002 package com.tanhua.common.mapper ; import com.baomidou.mybatisplus.core.mapper.BaseMapper ; import com.tanhua.common.pojo.Question ; public interface QuestionMapper extends BaseMapper < Question > { }","title":"4.1.3\u3001QuestionMapper"},{"location":"tantan/day07/#414questionservice","text":"\u5728my-tanhua-server\u5de5\u7a0b\u4e2d\u5b8c\u6210\u3002 package com.tanhua.server.service ; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper ; import com.tanhua.common.mapper.QuestionMapper ; import com.tanhua.common.pojo.Question ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; @Service public class QuestionService { @Autowired private QuestionMapper questionMapper ; public Question queryQuestion ( Long userId ) { QueryWrapper queryWrapper = new QueryWrapper (); queryWrapper . eq ( \"user_id\" , userId ); return this . questionMapper . selectOne ( queryWrapper ); } }","title":"4.1.4\u3001QuestionService"},{"location":"tantan/day07/#42app","text":"\u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/635","title":"4.2\u3001APP\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day07/#421tanhuacontroller","text":"//com.tanhua.server.controller.TanHuaController /** * \u67e5\u8be2\u964c\u751f\u4eba\u95ee\u9898 * * @param userId * @return */ @GetMapping ( \"strangerQuestions\" ) public ResponseEntity < String > queryQuestion ( @RequestParam ( \"userId\" ) Long userId ) { try { String question = this . tanHuaService . queryQuestion ( userId ); return ResponseEntity . ok ( question ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"4.2.1\u3001TanHuaController"},{"location":"tantan/day07/#422tanhuaservice","text":"//com.tanhua.server.service.TanHuaService public String queryQuestion ( Long userId ) { Question question = this . questionService . queryQuestion ( userId ); if ( ObjectUtil . isNotEmpty ( question )){ return question . getTxt (); } //\u9ed8\u8ba4\u7684\u95ee\u9898 return \"\u4f60\u7684\u7231\u597d\u662f\u4ec0\u4e48\uff1f\" ; }","title":"4.2.2\u3001TanHuaService"},{"location":"tantan/day07/#423","text":"","title":"4.2.3\u3001\u6d4b\u8bd5"},{"location":"tantan/day07/#43","text":"\u70b9\u51fb\u95ee\u9898\u7a97\u53e3\u4e2d\u7684\u201c\u804a\u4e00\u4e0b\u201d\uff0c\u9700\u8981\u901a\u8fc7admin\u6743\u9650\u53d1\u9001\u7cfb\u7edf\u6d88\u606f\u3002","title":"4.3\u3001\u56de\u590d\u964c\u751f\u4eba\u95ee\u9898"},{"location":"tantan/day07/#431dubbo","text":"","title":"4.3.1\u3001dubbo\u670d\u52a1"},{"location":"tantan/day07/#4311","text":"//com.tanhua.dubbo.server.api.HuanXinApi /** * \u4ee5\u7ba1\u7406\u5458\u8eab\u4efd\u53d1\u9001\u6d88\u606f * \u6587\u6863\u5730\u5740\uff1ahttp://docs-im.easemob.com/im/server/basics/messages#%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF * * @param targetUserName \u53d1\u9001\u76ee\u6807\u7684\u7528\u6237\u540d * @param huanXinMessageType \u6d88\u606f\u7c7b\u578b * @param msg * @return */ Boolean sendMsgFromAdmin ( String targetUserName , HuanXinMessageType huanXinMessageType , String msg ); package com.tanhua.dubbo.server.enums ; /** * \u6d88\u606f\u7c7b\u578b\uff1btxt:\u6587\u672c\u6d88\u606f\uff0cimg\uff1a\u56fe\u7247\u6d88\u606f\uff0cloc\uff1a\u4f4d\u7f6e\u6d88\u606f\uff0caudio\uff1a\u8bed\u97f3\u6d88\u606f\uff0cvideo\uff1a\u89c6\u9891\u6d88\u606f\uff0cfile\uff1a\u6587\u4ef6\u6d88\u606f */ public enum HuanXinMessageType { TXT ( \"txt\" ), IMG ( \"img\" ), LOC ( \"loc\" ), AUDIO ( \"audio\" ), VIDEO ( \"video\" ), FILE ( \"file\" ); String type ; HuanXinMessageType ( String type ) { this . type = type ; } public String getType () { return type ; } }","title":"4.3.1.1\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day07/#4312","text":"//com.tanhua.dubbo.server.api.HuanXinApiImpl @Override public Boolean sendMsgFromAdmin ( String targetUserName , HuanXinMessageType huanXinMessageType , String msg ) { String targetUrl = this . huanXinConfig . getUrl () + this . huanXinConfig . getOrgName () + \"/\" + this . huanXinConfig . getAppName () + \"/messages\" ; try { //{\"target_type\": \"users\",\"target\": [\"user2\",\"user3\"],\"msg\": {\"type\": \"txt\",\"msg\": \"testmessage\"},\"from\": \"user1\"} String body = JSONUtil . createObj () . set ( \"target_type\" , \"users\" ) . set ( \"target\" , JSONUtil . createArray (). set ( targetUserName )) . set ( \"msg\" , JSONUtil . createObj () . set ( \"type\" , huanXinMessageType . getType ()) . set ( \"msg\" , msg )). toString (); //\u8868\u793a\u6d88\u606f\u53d1\u9001\u8005;\u65e0\u6b64\u5b57\u6bb5Server\u4f1a\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a\u201cfrom\u201d:\u201cadmin\u201d\uff0c\u6709from\u5b57\u6bb5\u4f46\u503c\u4e3a\u7a7a\u4e32(\u201c\u201d)\u65f6\u8bf7\u6c42\u5931\u8d25 // .set(\"from\", \"\") return this . requestService . execute ( targetUrl , body , Method . POST ). isOk (); } catch ( Exception e ) { log . error ( \"\u53d1\u9001\u6d88\u606f\u5931\u8d25~ targetUserName = \" + targetUserName + \", type = \" + huanXinMessageType . getType () + \", msg = \" + msg , e ); } return false ; }","title":"4.3.1.2\u3001\u5b9e\u73b0\u63a5\u53e3"},{"location":"tantan/day07/#432app","text":"\u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/641","title":"4.3.2\u3001APP\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day07/#4321tanhuacontroller","text":"//com.tanhua.server.controller.TanHuaController /** * \u56de\u590d\u964c\u751f\u4eba\u95ee\u9898 * * @return */ @PostMapping ( \"strangerQuestions\" ) public ResponseEntity < Void > replyQuestion ( @RequestBody Map < String , Object > param ) { try { Long userId = Long . valueOf ( param . get ( \"userId\" ). toString ()); String reply = param . get ( \"reply\" ). toString (); Boolean result = this . tanHuaService . replyQuestion ( userId , reply ); if ( result ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"4.3.2.1\u3001TanHuaController"},{"location":"tantan/day07/#4322tanhuaservice","text":"//com.tanhua.server.service.TanHuaService @Reference ( version = \"1.0.0\" ) private HuanXinApi huanXinApi ; public Boolean replyQuestion ( Long userId , String reply ) { User user = UserThreadLocal . get (); UserInfo userInfo = this . userInfoService . queryUserInfoByUserId ( user . getId ()); //\u6784\u5efa\u6d88\u606f\u5185\u5bb9 Map < String , Object > msg = new HashMap <> (); msg . put ( \"userId\" , user . getId ()); msg . put ( \"huanXinId\" , \"HX_\" + user . getId ()); msg . put ( \"nickname\" , userInfo . getNickName ()); msg . put ( \"strangerQuestion\" , this . queryQuestion ( userId )); msg . put ( \"reply\" , reply ); //\u53d1\u9001\u73af\u4fe1\u6d88\u606f return this . huanXinApi . sendMsgFromAdmin ( \"HX_\" + userId , HuanXinMessageType . TXT , JSONUtil . toJsonStr ( msg )); }","title":"4.3.2.2\u3001TanHuaService"},{"location":"tantan/day07/#433","text":"\u7528\u6237heima_37\u6536\u5230\u964c\u751f\u4eba\u6d88\u606f\uff1a \u53ef\u4ee5\u770b\u5230\u597d\u53cb\u5df2\u7ecf\u6dfb\u52a0\u5b8c\u6210\uff0c\u53ef\u4ee5\u5728\u901a\u8baf\u5f55\u4e2d\u9009\u62e9\u597d\u53cb\u8fdb\u884c\u804a\u5929\u3002 \u5728\u964c\u804a\u6d88\u606f\u4e2d\u7684\u201c\u786e\u8ba4\u6dfb\u52a0\u201d\u529f\u80fd\uff0c\u5c31\u662f\u524d\u9762\u5b9e\u73b0\u7684\u6dfb\u52a0\u8054\u7cfb\u4eba\u63a5\u53e3\u3002","title":"4.3.3\u3001\u6d4b\u8bd5"},{"location":"tantan/day07/#5","text":"\u67e5\u8be2\u522b\u4eba\u6765\u8bbf\u4e86\u6211\u7684\u4e3b\u9875\u7684\u4fe1\u606f\uff0c\u5176\u4ed6\u7528\u6237\u5728\u6d4f\u89c8\u6211\u7684\u4e3b\u9875\u65f6\uff0c\u9700\u8981\u8bb0\u5f55\u8bbf\u5ba2\u6570\u636e\u3002\u8bbf\u5ba2\u5728\u4e00\u5929\u5185\u6bcf\u4e2a\u7528\u6237\u53ea\u8bb0\u5f55\u4e00\u6b21\u3002 \u67e5\u8be2\u6570\u636e\u65f6\uff0c\u5982\u679c\u7528\u6237\u67e5\u8be2\u8fc7\u5217\u8868\uff0c\u5c31\u9700\u8981\u8bb0\u5f55\u8fd9\u6b21\u67e5\u8be2\u6570\u636e\u7684\u65f6\u95f4\uff0c\u4e0b\u6b21\u67e5\u8be2\u65f6\u67e5\u8be2\u5927\u4e8e\u7b49\u4e8e\u8be5\u65f6\u95f4\u7684\u6570\u636e\u3002 \u5982\u679c\uff0c\u7528\u6237\u6ca1\u6709\u8bb0\u5f55\u67e5\u8be2\u65f6\u95f4\uff0c\u5c31\u67e5\u8be2\u6700\u8fd1\u76845\u4e2a\u6765\u8bbf\u7528\u6237\u3002 \u9875\u9762\u6548\u679c\u5982\u4e0b\uff1a","title":"5\u3001\u8c01\u770b\u8fc7\u6211"},{"location":"tantan/day07/#51dubbo","text":"","title":"5.1\u3001dubbo\u670d\u52a1"},{"location":"tantan/day07/#511","text":"package com.tanhua.dubbo.server.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.mongodb.core.mapping.Document ; @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"visitors\" ) public class Visitors implements java . io . Serializable { private static final long serialVersionUID = 2811682148052386573L ; private ObjectId id ; private Long userId ; //\u6211\u7684id private Long visitorUserId ; //\u6765\u8bbf\u7528\u6237id private String from ; //\u6765\u6e90\uff0c\u5982\u9996\u9875\u3001\u5708\u5b50\u7b49 private Long date ; //\u6765\u8bbf\u65f6\u95f4 private Double score ; //\u5f97\u5206 }","title":"5.1.1\u3001\u5b9e\u4f53\u5bf9\u8c61"},{"location":"tantan/day07/#512","text":"package com.tanhua.dubbo.server.api ; import com.tanhua.dubbo.server.pojo.Visitors ; import java.util.List ; public interface VisitorsApi { /** * \u4fdd\u5b58\u8bbf\u5ba2\u6570\u636e * * @param userId \u6211\u7684id * @param visitorUserId \u8bbf\u5ba2id * @param from \u6765\u6e90 * @return */ String saveVisitor ( Long userId , Long visitorUserId , String from ); /** * \u67e5\u8be2\u6211\u7684\u8bbf\u5ba2\u6570\u636e\uff0c\u5b58\u57282\u79cd\u60c5\u51b5\uff1a * 1. \u6211\u6ca1\u6709\u770b\u8fc7\u6211\u7684\u8bbf\u5ba2\u6570\u636e\uff0c\u8fd4\u56de\u524d5\u4e2a\u8bbf\u5ba2\u4fe1\u606f * 2. \u4e4b\u524d\u770b\u8fc7\u6211\u7684\u8bbf\u5ba2\uff0c\u4ece\u4e0a\u4e00\u6b21\u67e5\u770b\u7684\u65f6\u95f4\u70b9\u5f80\u540e\u67e5\u8be25\u4e2a\u8bbf\u5ba2\u6570\u636e * * @param userId * @return */ List < Visitors > queryMyVisitor ( Long userId ); }","title":"5.1.2\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day07/#513","text":"package com.tanhua.dubbo.server.api ; import cn.hutool.core.convert.Convert ; import cn.hutool.core.date.DateUtil ; import cn.hutool.core.util.ObjectUtil ; import com.alibaba.dubbo.config.annotation.Service ; import com.tanhua.dubbo.server.pojo.RecommendUser ; import com.tanhua.dubbo.server.pojo.Visitors ; import org.bson.types.ObjectId ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.domain.PageRequest ; import org.springframework.data.domain.Sort ; import org.springframework.data.mongodb.core.MongoTemplate ; import org.springframework.data.mongodb.core.query.Criteria ; import org.springframework.data.mongodb.core.query.Query ; import org.springframework.data.redis.core.RedisTemplate ; import java.util.List ; @Service ( version = \"1.0.0\" ) public class VisitorsApiImpl implements VisitorsApi { @Autowired private MongoTemplate mongoTemplate ; private static final String VISITOR_REDIS_KEY = \"VISITOR_USER\" ; @Autowired private RedisTemplate < String , String > redisTemplate ; @Override public String saveVisitor ( Long userId , Long visitorUserId , String from ) { //\u6821\u9a8c if ( ! ObjectUtil . isAllNotEmpty ( userId , visitorUserId , from )) { return null ; } //\u67e5\u8be2\u8bbf\u5ba2\u7528\u6237\u5728\u4eca\u5929\u662f\u5426\u5df2\u7ecf\u8bb0\u5f55\u8fc7\uff0c\u5982\u679c\u5df2\u7ecf\u8bb0\u5f55\u8fc7\uff0c\u4e0d\u518d\u8bb0\u5f55 String today = DateUtil . today (); Long minDate = DateUtil . parseDateTime ( today + \" 00:00:00\" ). getTime (); Long maxDate = DateUtil . parseDateTime ( today + \" 23:59:59\" ). getTime (); Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId ) . and ( \"visitorUserId\" ). is ( visitorUserId ) . andOperator ( Criteria . where ( \"date\" ). gte ( minDate ), Criteria . where ( \"date\" ). lte ( maxDate ) ) ); long count = this . mongoTemplate . count ( query , Visitors . class ); if ( count > 0 ) { //\u4eca\u5929\u5df2\u7ecf\u8bb0\u5f55\u8fc7\u7684 return null ; } Visitors visitors = new Visitors (); visitors . setFrom ( from ); visitors . setVisitorUserId ( visitorUserId ); visitors . setUserId ( userId ); visitors . setDate ( System . currentTimeMillis ()); visitors . setId ( ObjectId . get ()); //\u5b58\u50a8\u6570\u636e this . mongoTemplate . save ( visitors ); return visitors . getId (). toHexString (); } @Override public List < Visitors > queryMyVisitor ( Long userId ) { // \u67e5\u8be2\u524d5\u4e2a\u8bbf\u5ba2\u6570\u636e\uff0c\u6309\u7167\u8bbf\u95ee\u65f6\u95f4\u5012\u5e8f\u6392\u5e8f // \u5982\u679c\u7528\u6237\u5df2\u7ecf\u67e5\u8be2\u8fc7\u5217\u8868\uff0c\u8bb0\u5f55\u67e5\u8be2\u65f6\u95f4\uff0c\u540e\u7eed\u67e5\u8be2\u9700\u8981\u6309\u7167\u8fd9\u4e2a\u65f6\u95f4\u5f80\u540e\u67e5\u8be2 // \u4e0a\u4e00\u6b21\u67e5\u8be2\u5217\u8868\u7684\u65f6\u95f4 Long date = Convert . toLong ( this . redisTemplate . opsForHash (). get ( VISITOR_REDIS_KEY , String . valueOf ( userId ))); PageRequest pageRequest = PageRequest . of ( 0 , 5 , Sort . by ( Sort . Order . desc ( \"date\" ))); Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId )) . with ( pageRequest ); if ( ObjectUtil . isNotEmpty ( date )) { query . addCriteria ( Criteria . where ( \"date\" ). gte ( date )); } List < Visitors > visitorsList = this . mongoTemplate . find ( query , Visitors . class ); //\u67e5\u8be2\u6bcf\u4e2a\u6765\u8bbf\u7528\u6237\u7684\u5f97\u5206 for ( Visitors visitors : visitorsList ) { Query queryScore = Query . query ( Criteria . where ( \"toUserId\" ) . is ( userId ). and ( \"userId\" ). is ( visitors . getVisitorUserId ()) ); RecommendUser recommendUser = this . mongoTemplate . findOne ( queryScore , RecommendUser . class ); if ( ObjectUtil . isNotEmpty ( recommendUser )){ visitors . setScore ( recommendUser . getScore ()); } else { //\u9ed8\u8ba4\u5f97\u5206 visitors . setScore ( 90 d ); } } return visitorsList ; } }","title":"5.1.3\u3001\u7f16\u5199\u5b9e\u73b0"},{"location":"tantan/day07/#514","text":"package com.tanhua.dubbo.server.api ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestVisitorsApi { @Autowired private VisitorsApi visitorsApi ; @Test public void testSaveVisitor (){ this . visitorsApi . saveVisitor ( 1L , 2L , \"\u4e2a\u4eba\u4e3b\u9875\" ); this . visitorsApi . saveVisitor ( 1L , 3L , \"\u4e2a\u4eba\u4e3b\u9875\" ); this . visitorsApi . saveVisitor ( 1L , 2L , \"\u4e2a\u4eba\u4e3b\u9875\" ); } @Test public void testQueryMyVisitor (){ this . visitorsApi . queryMyVisitor ( 1L ) . forEach ( visitors -> System . out . println ( visitors )); } }","title":"5.1.4\u3001\u5355\u5143\u6d4b\u8bd5"},{"location":"tantan/day07/#52app","text":"\u6587\u6863\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/743 package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class VisitorsVo { private Long id ; private String avatar ; private String nickname ; private String gender ; private Integer age ; private String [] tags ; private Integer fateValue ; }","title":"5.2\u3001APP\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day07/#522quanzicontroller","text":"//com.tanhua.server.controller.QuanZiController /** * \u8c01\u770b\u8fc7\u6211 * * @return */ @GetMapping ( \"visitors\" ) public ResponseEntity < List < VisitorsVo >> queryVisitorsList (){ try { List < VisitorsVo > list = this . quanZiService . queryVisitorsList (); return ResponseEntity . ok ( list ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"5.2.2\u3001QuanZiController"},{"location":"tantan/day07/#523quanziservice","text":"//com.tanhua.server.service.QuanZiService public List < VisitorsVo > queryVisitorsList () { User user = UserThreadLocal . get (); List < Visitors > visitorsList = this . visitorsApi . queryMyVisitor ( user . getId ()); if ( CollUtil . isEmpty ( visitorsList )) { return Collections . emptyList (); } List < Object > userIds = CollUtil . getFieldValues ( visitorsList , \"visitorUserId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIds ); List < VisitorsVo > visitorsVoList = new ArrayList <> (); for ( Visitors visitor : visitorsList ) { for ( UserInfo userInfo : userInfoList ) { if ( ObjectUtil . equals ( visitor . getVisitorUserId (), userInfo . getUserId ())) { VisitorsVo visitorsVo = new VisitorsVo (); visitorsVo . setAge ( userInfo . getAge ()); visitorsVo . setAvatar ( userInfo . getLogo ()); visitorsVo . setGender ( userInfo . getSex (). name (). toLowerCase ()); visitorsVo . setId ( userInfo . getUserId ()); visitorsVo . setNickname ( userInfo . getNickName ()); visitorsVo . setTags ( StringUtils . split ( userInfo . getTags (), ',' )); visitorsVo . setFateValue ( visitor . getScore (). intValue ()); visitorsVoList . add ( visitorsVo ); break ; } } } return visitorsVoList ; }","title":"5.2.3\u3001QuanZiService"},{"location":"tantan/day07/#53","text":"//com.tanhua.server.service.TanHuaService public TodayBest queryUserInfo ( Long userId ) { UserInfo userInfo = this . userInfoService . queryUserInfoByUserId ( userId ); if ( ObjectUtil . isEmpty ( userInfo )){ return null ; } TodayBest todayBest = new TodayBest (); todayBest . setId ( userId ); todayBest . setAge ( userInfo . getAge ()); todayBest . setGender ( userInfo . getSex (). name (). toLowerCase ()); todayBest . setNickname ( userInfo . getNickName ()); todayBest . setTags ( Convert . toStrArray ( StrUtil . split ( userInfo . getTags (), ',' ))); todayBest . setAvatar ( userInfo . getLogo ()); //\u7f18\u5206\u503c User user = UserThreadLocal . get (); todayBest . setFateValue ( this . recommendUserService . queryScore ( userId , user . getId ()). longValue ()); //\u8bb0\u5f55\u6765\u8bbf\u7528\u6237 this . visitorsApi . saveVisitor ( userId , user . getId (), \"\u4e2a\u4eba\u4e3b\u9875\" ); return todayBest ; }","title":"5.3\u3001\u8bb0\u5f55\u8bbf\u5ba2\u6570\u636e"},{"location":"tantan/day07/#54","text":"","title":"5.4\u3001\u6d4b\u8bd5"},{"location":"tantan/day07/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/","text":"\u72ec\u7acb\u5b9e\u73b0\u70b9\u8d5e\u6d88\u606f\u5217\u8868\u529f\u80fd \u72ec\u7acb\u5b9e\u73b0\u559c\u6b22\u6d88\u606f\u5217\u8868\u529f\u80fd \u72ec\u7acb\u5b9e\u73b0\u8bc4\u8bba\u6d88\u606f\u5217\u8868\u529f\u80fd \u72ec\u7acb\u5b9e\u73b0\u516c\u544a\u5217\u8868\u529f\u80fd \u72ec\u7acb\u5b9e\u73b0\u4e2a\u4eba\u4e3b\u9875\u529f\u80fd \u7406\u89e3\u804a\u4e00\u4e0b\u7684\u6d41\u7a0b \u72ec\u7acb\u5b9e\u73b0\u804a\u4e00\u4e0b\u529f\u80fd \u638c\u63e1\u8c01\u770b\u8fc7\u7684\u529f\u80fd\u5b9e\u73b0","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"tantan/day08/","text":"\u8bfe\u7a0b\u8bf4\u660e \u00b6 \u4e0a\u62a5\u5730\u4f4d\u4f4d\u7f6e \u5b9e\u73b0\u641c\u9644\u8fd1\u529f\u80fd \u5b9e\u73b0\u63a2\u82b1\u529f\u80fd \u7528\u6237\u57fa\u672c\u4fe1\u606f\u7ef4\u62a4 1\u3001\u4e0a\u62a5\u5730\u7406\u4f4d\u7f6e \u00b6 \u5f53\u5ba2\u6237\u7aef\u68c0\u6d4b\u7528\u6237\u7684\u5730\u7406\u4f4d\u7f6e\uff0c\u5f53\u53d8\u5316\u5927\u4e8e500\u7c73\u65f6\u6216\u6bcf\u96945\u5206\u949f\uff0c\u5411\u670d\u52a1\u7aef\u4e0a\u62a5\u5730\u7406\u4f4d\u7f6e\u3002 \u7528\u6237\u7684\u5730\u7406\u4f4d\u7f6e\u5b58\u50a8\u5230Elasticsearch\u4e2d\uff0c\u9700\u8981\u4f7f\u7528\u73af\u5883\u63d0\u4f9b\u7684ES\u96c6\u7fa4\uff0c\u5982\u4e0b\uff1a 1.1\u3001dubbo\u670d\u52a1 \u00b6 \u7528\u6237\u5730\u7406\u4f4d\u7f6e\u7684\u670d\u52a1\u72ec\u7acb\u4e00\u4e2a\u65b0\u7684\u5de5\u7a0b\u6765\u5b9e\u73b0\uff0c\u540d\u5b57\u4e3a\uff1amy-tanhua-dubbo-es\u3002 1.1.1\u3001\u521b\u5efa\u5de5\u7a0b \u00b6 pom.ml\u6587\u4ef6\u5982\u4e0b\uff1a <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> my-tanhua-dubbo </artifactId> <groupId> cn.itcast.tanhua </groupId> <version> 1.0-SNAPSHOT </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> my-tanhua-dubbo-es </artifactId> <dependencies> <!--\u5f15\u5165interface\u4f9d\u8d56--> <dependency> <groupId> cn.itcast.tanhua </groupId> <artifactId> my-tanhua-dubbo-interface </artifactId> <version> 1.0-SNAPSHOT </version> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-test </artifactId> <scope> test </scope> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-elasticsearch </artifactId> </dependency> <!--dubbo\u7684springboot\u652f\u6301--> <dependency> <groupId> com.alibaba.boot </groupId> <artifactId> dubbo-spring-boot-starter </artifactId> </dependency> <!--dubbo\u6846\u67b6--> <dependency> <groupId> com.alibaba </groupId> <artifactId> dubbo </artifactId> </dependency> <!--zk\u4f9d\u8d56--> <dependency> <groupId> org.apache.zookeeper </groupId> <artifactId> zookeeper </artifactId> </dependency> <dependency> <groupId> com.github.sgroschupf </groupId> <artifactId> zkclient </artifactId> </dependency> <dependency> <groupId> io.netty </groupId> <artifactId> netty-all </artifactId> </dependency> <dependency> <groupId> cn.hutool </groupId> <artifactId> hutool-all </artifactId> </dependency> </dependencies> </project> application.properties\u6587\u4ef6\uff1a # Spring boot application spring.application.name = itcast-tanhua-dubbo-es # dubbo \u626b\u63cf\u5305\u914d\u7f6e dubbo.scan.basePackages = com.tanhua.dubbo.es dubbo.application.name = dubbo-provider-es #dubbo \u5bf9\u5916\u66b4\u9732\u7684\u7aef\u53e3\u4fe1\u606f dubbo.protocol.name = dubbo dubbo.protocol.port = 20882 #dubbo\u6ce8\u518c\u4e2d\u5fc3\u7684\u914d\u7f6e dubbo.registry.address = zookeeper://192.168.31.81:2181 dubbo.registry.client = zkclient dubbo.registry.timeout = 60000 #ES\u96c6\u7fa4\u914d\u7f6e spring.data.elasticsearch.cluster-name = es-tanhua-cluster spring.data.elasticsearch.cluster-nodes = 192.168.31.81:9300,192.168.31.81:9301,192.168.31.81:9302 \u542f\u52a8\u7c7b\uff1a package com.tanhua.dubbo.es ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration ; import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration ; @SpringBootApplication ( exclude = { MongoAutoConfiguration . class , MongoDataAutoConfiguration . class }) //\u6392\u9664mongo\u7684\u81ea\u52a8\u914d\u7f6e public class ESApplication { public static void main ( String [] args ) { SpringApplication . run ( ESApplication . class , args ); } } 1.1.2\u3001\u5b9a\u4e49pojo \u00b6 \u5728my-tanhua-dubbo-interface\u4e2d\u521b\u5efa\uff1a package com.tanhua.dubbo.server.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.elasticsearch.common.geo.GeoPoint ; import org.springframework.data.annotation.Id ; import org.springframework.data.elasticsearch.annotations.Document ; import org.springframework.data.elasticsearch.annotations.Field ; import org.springframework.data.elasticsearch.annotations.FieldType ; import org.springframework.data.elasticsearch.annotations.GeoPointField ; @Data @NoArgsConstructor @AllArgsConstructor @Document ( indexName = \"tanhua\" , type = \"user_location\" , shards = 6 , replicas = 2 ) public class UserLocation { @Id private Long userId ; //\u7528\u6237id @GeoPointField private GeoPoint location ; //lon:\u7ecf\u5ea6 lat:\u7eac\u5ea6 @Field ( type = FieldType . Keyword ) private String address ; //\u4f4d\u7f6e\u63cf\u8ff0 @Field ( type = FieldType . Long ) private Long created ; //\u521b\u5efa\u65f6\u95f4 @Field ( type = FieldType . Long ) private Long updated ; //\u66f4\u65b0\u65f6\u95f4 @Field ( type = FieldType . Long ) private Long lastUpdated ; //\u4e0a\u6b21\u66f4\u65b0\u65f6\u95f4 } package com.tanhua.dubbo.server.vo ; import cn.hutool.core.bean.BeanUtil ; import com.tanhua.dubbo.server.pojo.UserLocation ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import java.util.ArrayList ; import java.util.List ; @Data @NoArgsConstructor @AllArgsConstructor public class UserLocationVo implements java . io . Serializable { private static final long serialVersionUID = 4133419501260037769L ; private Long userId ; //\u7528\u6237id private Double longitude ; //\u7ecf\u5ea6 private Double latitude ; //\u7ef4\u5ea6 private String address ; //\u4f4d\u7f6e\u63cf\u8ff0 private Long created ; //\u521b\u5efa\u65f6\u95f4 private Long updated ; //\u66f4\u65b0\u65f6\u95f4 private Long lastUpdated ; //\u4e0a\u6b21\u66f4\u65b0\u65f6\u95f4 public static final UserLocationVo format ( UserLocation userLocation ) { UserLocationVo userLocationVo = BeanUtil . toBean ( userLocation , UserLocationVo . class ); userLocationVo . setLongitude ( userLocation . getLocation (). getLon ()); userLocationVo . setLatitude ( userLocation . getLocation (). getLat ()); return userLocationVo ; } public static final List < UserLocationVo > formatToList ( List < UserLocation > userLocations ) { List < UserLocationVo > list = new ArrayList <> (); for ( UserLocation userLocation : userLocations ) { list . add ( format ( userLocation )); } return list ; } } \u7531\u4e8eUserLocation\u4e0d\u80fd\u5e8f\u5217\u5316\uff0c\u6240\u4ee5\u8981\u518d\u5b9a\u4e49UserLocationVo\u8fdb\u884c\u8fd4\u56de\u6570\u636e\u3002 \u5728my-tanhua-dubbo-interface\u4e2d\u6dfb\u52a0\u4f9d\u8d56\uff1a <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-elasticsearch </artifactId> </dependency> <dependency> <groupId> cn.hutool </groupId> <artifactId> hutool-all </artifactId> </dependency> 1.1.3\u3001\u5b9a\u4e49dubbo\u63a5\u53e3 \u00b6 \u5728my-tanhua-dubbo-interface\u5de5\u7a0b\u4e2d\u3002 package com.tanhua.dubbo.server.api ; public interface UserLocationApi { /** * \u66f4\u65b0\u7528\u6237\u5730\u7406\u4f4d\u7f6e * * @param userId \u7528\u6237id * @param longitude \u7ecf\u5ea6 * @param latitude \u7eac\u5ea6 * @param address \u5730\u5740\u540d\u79f0 * @return */ Boolean updateUserLocation ( Long userId , Double longitude , Double latitude , String address ); } 1.1.4\u3001\u7f16\u5199\u5b9e\u73b0 \u00b6 package com.tanhua.dubbo.es.api ; import cn.hutool.core.util.ObjectUtil ; import com.alibaba.dubbo.config.annotation.Service ; import com.tanhua.dubbo.server.api.UserLocationApi ; import com.tanhua.dubbo.server.pojo.UserLocation ; import lombok.extern.slf4j.Slf4j ; import org.elasticsearch.action.update.UpdateRequest ; import org.elasticsearch.common.geo.GeoPoint ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.elasticsearch.core.ElasticsearchTemplate ; import org.springframework.data.elasticsearch.core.query.* ; import javax.annotation.PostConstruct ; import java.util.HashMap ; import java.util.Map ; @Service ( version = \"1.0.0\" ) @Slf4j public class UserLocationApiImpl implements UserLocationApi { @Autowired private ElasticsearchTemplate elasticsearchTemplate ; /** * \u521d\u59cb\u5316\u7d22\u5f15\u5e93 * */ @PostConstruct public void initIndex (){ //\u5224\u65ad\u7d22\u5f15\u5e93\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u9700\u8981\u521b\u5efa if ( ! this . elasticsearchTemplate . indexExists ( \"tanhua\" )){ this . elasticsearchTemplate . createIndex ( UserLocation . class ); } //\u5224\u65ad\u8868\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u9700\u8981\u521b\u5efa if ( ! this . elasticsearchTemplate . typeExists ( \"tanhua\" , \"user_location\" )){ this . elasticsearchTemplate . putMapping ( UserLocation . class ); } } @Override public Boolean updateUserLocation ( Long userId , Double longitude , Double latitude , String address ) { //\u67e5\u8be2\u4e2a\u4eba\u7684\u5730\u7406\u4f4d\u7f6e\u6570\u636e\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u9700\u8981\u65b0\u589e\uff0c\u5982\u679c\u662f\u5b58\u5728\u6570\u636e\uff0c\u66f4\u65b0\u6570\u636e try { GetQuery getQuery = new GetQuery (); getQuery . setId ( String . valueOf ( userId )); UserLocation userLocation = this . elasticsearchTemplate . queryForObject ( getQuery , UserLocation . class ); if ( ObjectUtil . isEmpty ( userLocation )){ //\u65b0\u589e\u6570\u636e userLocation = new UserLocation (); userLocation . setUserId ( userId ); userLocation . setAddress ( address ); userLocation . setCreated ( System . currentTimeMillis ()); userLocation . setUpdated ( userLocation . getCreated ()); userLocation . setLastUpdated ( userLocation . getCreated ()); userLocation . setLocation ( new GeoPoint ( latitude , longitude )); IndexQuery indexQuery = new IndexQueryBuilder (). withObject ( userLocation ). build (); //\u4fdd\u5b58\u6570\u636e\u5230ES\u4e2d this . elasticsearchTemplate . index ( indexQuery ); } else { //\u66f4\u65b0\u6570\u636e //\u66f4\u65b0\u7684\u5b57\u6bb5 Map < String , Object > map = new HashMap <> (); map . put ( \"location\" , new GeoPoint ( latitude , longitude )); map . put ( \"updated\" , System . currentTimeMillis ()); map . put ( \"lastUpdated\" , userLocation . getUpdated ()); map . put ( \"address\" , address ); UpdateRequest updateRequest = new UpdateRequest (); updateRequest . doc ( map ); UpdateQuery updateQuery = new UpdateQueryBuilder () . withId ( String . valueOf ( userId )) . withClass ( UserLocation . class ) . withUpdateRequest ( updateRequest ). build (); //\u66f4\u65b0\u6570\u636e this . elasticsearchTemplate . update ( updateQuery ); } return true ; } catch ( Exception e ) { log . error ( \"\u66f4\u65b0\u5730\u7406\u4f4d\u7f6e\u5931\u8d25~ userId = \" + userId + \", longitude = \" + longitude + \", latitude = \" + latitude + \", address = \" + address , e ); } return false ; } } 1.1.5\u3001\u5355\u5143\u6d4b\u8bd5 \u00b6 package com.tanhua.dubbo.es ; import com.tanhua.dubbo.server.api.UserLocationApi ; import com.tanhua.dubbo.server.vo.PageInfo ; import com.tanhua.dubbo.server.vo.UserLocationVo ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestUserLocationApi { @Autowired private UserLocationApi userLocationApi ; @Test public void testUpdateUserLocation () { this . userLocationApi . updateUserLocation ( 1L , 121.512253 , 31.24094 , \"\u91d1\u8302\u5927\u53a6\" ); this . userLocationApi . updateUserLocation ( 2L , 121.506377 , 31.245105 , \"\u4e1c\u65b9\u660e\u73e0\u5e7f\u64ad\u7535\u89c6\u5854\" ); this . userLocationApi . updateUserLocation ( 10L , 121.508815 , 31.243844 , \"\u9646\u5bb6\u5634\u5730\u94c1\u7ad9\" ); this . userLocationApi . updateUserLocation ( 12L , 121.511999 , 31.239185 , \"\u4e0a\u6d77\u4e2d\u5fc3\u5927\u53a6\" ); this . userLocationApi . updateUserLocation ( 25L , 121.493444 , 31.240513 , \"\u4e0a\u6d77\u5e02\u516c\u5b89\u5c40\" ); this . userLocationApi . updateUserLocation ( 27L , 121.494108 , 31.247011 , \"\u4e0a\u6d77\u5916\u6ee9\u7f8e\u672f\u9986\" ); this . userLocationApi . updateUserLocation ( 30L , 121.462452 , 31.253463 , \"\u4e0a\u6d77\u706b\u8f66\u7ad9\" ); this . userLocationApi . updateUserLocation ( 32L , 121.81509 , 31.157478 , \"\u4e0a\u6d77\u6d66\u4e1c\u56fd\u9645\u673a\u573a\" ); this . userLocationApi . updateUserLocation ( 34L , 121.327908 , 31.20033 , \"\u8679\u6865\u706b\u8f66\u7ad9\" ); this . userLocationApi . updateUserLocation ( 38L , 121.490155 , 31.277476 , \"\u9c81\u8fc5\u516c\u56ed\" ); this . userLocationApi . updateUserLocation ( 40L , 121.425511 , 31.227831 , \"\u4e2d\u5c71\u516c\u56ed\" ); this . userLocationApi . updateUserLocation ( 43L , 121.594194 , 31.207786 , \"\u5f20\u6c5f\u9ad8\u79d1\" ); } } 1.2\u3001APP\u63a5\u53e3 \u00b6 \u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/557 1.2.1\u3001BaiduController \u00b6 package com.tanhua.server.controller ; import com.tanhua.server.service.BaiduService ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.PostMapping ; import org.springframework.web.bind.annotation.RequestBody ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RestController ; import java.util.Map ; @RestController @RequestMapping ( \"baidu\" ) public class BaiduController { @Autowired private BaiduService baiduService ; /** * \u66f4\u65b0\u4f4d\u7f6e * * @param param * @return */ @PostMapping ( \"location\" ) public ResponseEntity < Void > updateLocation ( @RequestBody Map < String , Object > param ) { try { Double longitude = Double . valueOf ( param . get ( \"longitude\" ). toString ()); Double latitude = Double . valueOf ( param . get ( \"latitude\" ). toString ()); String address = param . get ( \"addrStr\" ). toString (); Boolean bool = this . baiduService . updateLocation ( longitude , latitude , address ); if ( bool ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } } 1.2.2\u3001BaiduService \u00b6 package com.tanhua.server.service ; import com.alibaba.dubbo.config.annotation.Reference ; import com.tanhua.common.pojo.User ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.dubbo.server.api.UserLocationApi ; import lombok.extern.slf4j.Slf4j ; import org.springframework.stereotype.Service ; @Service @Slf4j public class BaiduService { @Reference ( version = \"1.0.0\" ) private UserLocationApi userLocationApi ; public Boolean updateLocation ( Double longitude , Double latitude , String address ) { User user = UserThreadLocal . get (); try { return this . userLocationApi . updateUserLocation ( user . getId (), longitude , latitude , address ); } catch ( Exception e ) { log . error ( \"\u66f4\u65b0\u5730\u7406\u4f4d\u7f6e\u5931\u8d25~ userId = \" + user . getId () + \", longitude = \" + longitude + \", latitude = \" + latitude + \", address = \" + address , e ); } return false ; } } 1.3\u3001\u6d4b\u8bd5 \u00b6 2\u3001\u641c\u9644\u8fd1 \u00b6 \u5728\u9996\u9875\u4e2d\u70b9\u51fb\u201c\u641c\u9644\u8fd1\u201d\u53ef\u4ee5\u641c\u7d22\u9644\u8fd1\u7684\u597d\u53cb\uff0c\u6548\u679c\u5982\u4e0b\uff1a \u5b9e\u73b0\u601d\u8def\uff1a\u6839\u636e\u5f53\u524d\u7528\u6237\u7684\u4f4d\u7f6e\uff0c\u67e5\u8be2\u9644\u8fd1\u8303\u56f4\u5185\u7684\u7528\u6237\u3002\u8303\u56f4\u662f\u53ef\u4ee5\u8bbe\u7f6e\u7684\u3002 2.1\u3001dubbo\u670d\u52a1 \u00b6 2.1.1\u3001\u5b9a\u4e49\u63a5\u53e3\u65b9\u6cd5 \u00b6 //com.tanhua.dubbo.server.api.UserLocationApi /** * \u67e5\u8be2\u7528\u6237\u5730\u7406\u4f4d\u7f6e * * @param userId * @return */ UserLocationVo queryByUserId ( Long userId ); /** * \u6839\u636e\u4f4d\u7f6e\u641c\u7d22 * * @param longitude \u7ecf\u5ea6 * @param latitude \u7eac\u5ea6 * @param distance \u8ddd\u79bb(\u7c73) * @param page \u9875\u6570 * @param pageSize \u9875\u9762\u5927\u5c0f */ PageInfo < UserLocationVo > queryUserFromLocation ( Double longitude , Double latitude , Double distance , Integer page , Integer pageSize ); 2.1.2\u3001\u7f16\u5199\u5b9e\u73b0 \u00b6 //com.tanhua.dubbo.es.api.UserLocationApiImpl /** * \u67e5\u8be2\u7528\u6237\u7684\u4f4d\u7f6e\u4fe1\u606f * * @param userId * @return */ @Override public UserLocationVo queryByUserId ( Long userId ) { GetQuery getQuery = new GetQuery (); getQuery . setId ( String . valueOf ( userId )); UserLocation userLocation = this . elasticsearchTemplate . queryForObject ( getQuery , UserLocation . class ); if ( ObjectUtil . isNotEmpty ( userLocation )){ return UserLocationVo . format ( userLocation ); } return null ; } /** * \u6839\u636e\u4f4d\u7f6e\u641c\u7d22 * * @param longitude \u7ecf\u5ea6 * @param latitude \u7eac\u5ea6 * @param distance \u8ddd\u79bb(\u7c73) * @param page \u9875\u6570 * @param pageSize \u9875\u9762\u5927\u5c0f */ @Override public PageInfo < UserLocationVo > queryUserFromLocation ( Double longitude , Double latitude , Double distance , Integer page , Integer pageSize ) { PageInfo < UserLocationVo > pageInfo = new PageInfo <> (); pageInfo . setPageNum ( page ); pageInfo . setPageSize ( pageSize ); String fieldName = \"location\" ; //\u5b9e\u73b0\u4e86SearchQuery\u63a5\u53e3\uff0c\u6784\u9020\u5206\u9875\u3001\u6392\u5e8f NativeSearchQueryBuilder searchQueryBuilder = new NativeSearchQueryBuilder (); //\u5206\u9875 PageRequest pageRequest = PageRequest . of ( page - 1 , pageSize ); searchQueryBuilder . withPageable ( pageRequest ); BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder (); //\u4ee5\u4e00\u4e2a\u70b9\u4e3a\u4e2d\u5fc3\uff0c\u6307\u5b9a\u8303\u56f4\u67e5\u8be2 GeoDistanceQueryBuilder geoDistanceQueryBuilder = new GeoDistanceQueryBuilder ( fieldName ); //\u4e2d\u5fc3\u70b9 geoDistanceQueryBuilder . point ( new GeoPoint ( latitude , longitude )); //\u8ddd\u79bb\uff08\u753b\u5706\u7684\u534a\u5f84\uff09\u5355\u4f4d\uff1a\u516c\u91cc geoDistanceQueryBuilder . distance ( distance / 1000 , DistanceUnit . KILOMETERS ); boolQueryBuilder . must ( geoDistanceQueryBuilder ); searchQueryBuilder . withQuery ( boolQueryBuilder ); //\u6392\u5e8f\uff0c\u7531\u8fd1\u5230\u8fdc\u6392\u5e8f GeoDistanceSortBuilder geoDistanceSortBuilder = new GeoDistanceSortBuilder ( fieldName , latitude , longitude ); geoDistanceSortBuilder . order ( SortOrder . ASC ); //\u6b63\u5e8f\u6392\u5e8f geoDistanceSortBuilder . unit ( DistanceUnit . KILOMETERS ); //\u8bbe\u7f6e\u5355\u4f4d searchQueryBuilder . withSort ( geoDistanceSortBuilder ); AggregatedPage < UserLocation > aggregatedPage = this . elasticsearchTemplate . queryForPage ( searchQueryBuilder . build (), UserLocation . class ); if ( CollUtil . isEmpty ( aggregatedPage . getContent ())){ return pageInfo ; } pageInfo . setRecords ( UserLocationVo . formatToList ( aggregatedPage . getContent ())); return pageInfo ; } 2.1.3\u3001\u5355\u5143\u6d4b\u8bd5 \u00b6 //com.tanhua.dubbo.es.TestUserLocationApi @Test public void testQueryByUserId (){ UserLocationVo userLocationVo = this . userLocationApi . queryByUserId ( 1L ); System . out . println ( userLocationVo ); } @Test public void testQueryUserFromLocation (){ UserLocationVo userLocationVo = this . userLocationApi . queryByUserId ( 1L ); PageInfo < UserLocationVo > pageInfo = this . userLocationApi . queryUserFromLocation ( userLocationVo . getLongitude (), userLocationVo . getLatitude (), 5000 d , 1 , 10 ); pageInfo . getRecords (). forEach ( vo -> System . out . println ( vo )); } 2.2\u3001APP\u63a5\u53e3\u670d\u52a1 \u00b6 \u6587\u6863\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/611 2.2.1\u3001NearUserVo \u00b6 package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class NearUserVo { private Long userId ; private String avatar ; private String nickname ; } 2.2.2\u3001TanHuaController \u00b6 //com.tanhua.server.controller.TanHuaController /** * \u641c\u9644\u8fd1 * * @param gender * @param distance * @return */ @GetMapping ( \"search\" ) public ResponseEntity < List < NearUserVo >> queryNearUser ( @RequestParam ( value = \"gender\" , required = false ) String gender , @RequestParam ( value = \"distance\" , defaultValue = \"2000\" ) String distance ) { try { List < NearUserVo > list = this . tanHuaService . queryNearUser ( gender , distance ); return ResponseEntity . ok ( list ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 2.2.3\u3001TanHuaService \u00b6 //com.tanhua.server.service.TanHuaService public List < NearUserVo > queryNearUser ( String gender , String distance ) { //\u67e5\u8be2\u5f53\u524d\u7528\u6237\u7684\u4f4d\u7f6e User user = UserThreadLocal . get (); UserLocationVo userLocationVo = this . userLocationApi . queryByUserId ( user . getId ()); if ( ObjectUtil . isEmpty ( userLocationVo )){ return ListUtil . empty (); } PageInfo < UserLocationVo > pageInfo = this . userLocationApi . queryUserFromLocation ( userLocationVo . getLongitude (), userLocationVo . getLatitude (), Convert . toDouble ( distance ), 1 , 50 ); List < UserLocationVo > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )){ return ListUtil . empty (); } //\u6784\u9020\u7b5b\u9009\u6761\u4ef6 List < Object > userIdList = CollUtil . getFieldValues ( records , \"userId\" ); QueryWrapper < UserInfo > queryWrapper = new QueryWrapper <> (); queryWrapper . in ( \"user_id\" , userIdList ); if ( StrUtil . equalsIgnoreCase ( gender , \"man\" )){ queryWrapper . eq ( \"sex\" , SexEnum . MAN ); } else if ( StrUtil . equalsIgnoreCase ( gender , \"woman\" )){ queryWrapper . eq ( \"sex\" , SexEnum . WOMAN ); } List < UserInfo > userInfoList = this . userInfoService . queryUserInfoList ( queryWrapper ); List < NearUserVo > result = new ArrayList <> (); for ( UserLocationVo locationVo : records ) { //\u6392\u9664\u81ea\u5df1 if ( ObjectUtil . equals ( locationVo . getUserId (), user . getId ())){ continue ; } for ( UserInfo userInfo : userInfoList ) { if ( ObjectUtil . equals ( locationVo . getUserId (), userInfo . getUserId ())){ NearUserVo nearUserVo = new NearUserVo (); nearUserVo . setUserId ( userInfo . getUserId ()); nearUserVo . setAvatar ( userInfo . getLogo ()); nearUserVo . setNickname ( userInfo . getNickName ()); result . add ( nearUserVo ); break ; } } } return result ; } 2.2.4\u3001\u6d4b\u8bd5 \u00b6 3\u3001\u63a2\u82b1 \u00b6 \u63a2\u82b1\u529f\u80fd\u662f\u5c06\u63a8\u8350\u7684\u597d\u53cb\u968f\u673a\u7684\u901a\u8fc7\u5361\u7247\u7684\u5f62\u5f0f\u5c55\u73b0\u51fa\u6765\uff0c\u7528\u6237\u53ef\u4ee5\u9009\u62e9\u5de6\u6ed1\u3001\u53f3\u6ed1\u64cd\u4f5c\uff0c\u5de6\u6ed1\uff1a\u201c\u4e0d\u559c\u6b22\u201d\uff0c\u53f3\u6ed1\uff1a\u201c\u559c\u6b22\u201d\u3002 \u559c\u6b22\uff1a\u5982\u679c\u53cc\u65b9\u559c\u6b22\uff0c\u90a3\u4e48\u5c31\u4f1a\u6210\u4e3a\u597d\u53cb\u3002 \u5982\u679c\u5df2\u7ecf\u559c\u6b22\u6216\u4e0d\u559c\u6b22\u7684\u7528\u6237\u5728\u5217\u8868\u4e2d\u4e0d\u518d\u663e\u793a\u3002 3.1\u3001\u559c\u6b22\u7684dubbo\u670d\u52a1 \u00b6 \u7528\u6237\u7684\u559c\u6b22\u4e0e\u4e0d\u559c\u6b22\u5217\u8868\u9700\u8981\u4fdd\u5b58\u5728redis\u4e2d\uff0c\u4e3a\u4e86\u9632\u6b62redis\u4e2d\u7684\u6570\u636e\u4e22\u5931\uff0c\u540c\u65f6\u9700\u8981\u5c06\u6570\u636e\u4fdd\u5b58\u5230mongodb\u8fdb\u884c\u6301\u4e45\u5316\u4fdd\u5b58\u3002 3.1.1\u3001\u5b9e\u4f53\u5bf9\u8c61 \u00b6 package com.tanhua.dubbo.server.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.mongodb.core.index.Indexed ; import org.springframework.data.mongodb.core.mapping.Document ; @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"user_like\" ) public class UserLike implements java . io . Serializable { private static final long serialVersionUID = 6739966698394686523L ; private ObjectId id ; @Indexed private Long userId ; //\u7528\u6237id\uff0c\u81ea\u5df1 @Indexed private Long likeUserId ; //\u559c\u6b22\u7684\u7528\u6237id\uff0c\u5bf9\u65b9 private Long created ; //\u521b\u5efa\u65f6\u95f4 } 3.1.2\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 package com.tanhua.dubbo.server.api ; import java.util.List ; public interface UserLikeApi { /** * \u559c\u6b22 * * @param userId * @param likeUserId * @return */ Boolean likeUser ( Long userId , Long likeUserId ); /** * \u4e0d\u559c\u6b22 * * @param userId * @param likeUserId * @return */ Boolean notLikeUser ( Long userId , Long likeUserId ); /** * \u662f\u5426\u76f8\u4e92\u559c\u6b22 * * @param userId * @param likeUserId * @return */ Boolean isMutualLike ( Long userId , Long likeUserId ); /** * \u67e5\u8be2\u559c\u6b22\u5217\u8868 * * @param userId * @return */ List < Long > queryLikeList ( Long userId ); /** * \u67e5\u8be2\u4e0d\u559c\u6b22\u5217\u8868 * * @param userId * @return */ List < Long > queryNotLikeList ( Long userId ); } 3.1.3\u3001\u7f16\u5199\u5b9e\u73b0 \u00b6 package com.tanhua.dubbo.server.api ; import cn.hutool.core.collection.CollUtil ; import cn.hutool.core.collection.ListUtil ; import cn.hutool.core.convert.Convert ; import com.alibaba.dubbo.config.annotation.Service ; import com.tanhua.dubbo.server.pojo.UserLike ; import org.bson.types.ObjectId ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.mongodb.core.MongoTemplate ; import org.springframework.data.mongodb.core.query.Criteria ; import org.springframework.data.mongodb.core.query.Query ; import org.springframework.data.redis.core.RedisTemplate ; import java.util.ArrayList ; import java.util.List ; import java.util.Set ; @Service ( version = \"1.0.0\" ) public class UserLikeApiImpl implements UserLikeApi { @Autowired private MongoTemplate mongoTemplate ; @Autowired private RedisTemplate < String , String > redisTemplate ; public static final String LIKE_REDIS_KEY_PREFIX = \"USER_LIKE_\" ; public static final String NOT_LIKE_REDIS_KEY_PREFIX = \"USER_NOT_LIKE_\" ; /** * \u559c\u6b22 * * @param userId * @param likeUserId * @return */ @Override public Boolean likeUser ( Long userId , Long likeUserId ) { //\u5224\u65ad\u8be5\u7528\u6237\u662f\u5426\u5df2\u7ecf\u559c\u6b22\uff0c\u5982\u679c\u5df2\u7ecf\u559c\u6b22\u5c31\u8fd4\u56de if ( this . isLike ( userId , likeUserId )){ return false ; } UserLike userLike = new UserLike (); userLike . setId ( ObjectId . get ()); userLike . setUserId ( userId ); userLike . setLikeUserId ( likeUserId ); userLike . setCreated ( System . currentTimeMillis ()); //\u5c06\u6570\u636e\u5b58\u50a8\u5230MongoDB this . mongoTemplate . save ( userLike ); //\u7528\u6237\u7684\u559c\u6b22\u6570\u636e\u4fdd\u5b58\u5230redis //\u7528\u62371\uff1akey -> USER_LIKE_1 , value -> 2, \"1\" //\u7528\u62371\uff1akey -> USER_LIKE_1 , value -> 3, \"1\" //\u7528\u62372\uff1akey -> USER_LIKE_2 , value -> 4, \"1\" String redisKey = this . getLikeRedisKey ( userId ); String hashKey = String . valueOf ( likeUserId ); this . redisTemplate . opsForHash (). put ( redisKey , hashKey , \"1\" ); //\u5224\u65ad\uff0c\u559c\u6b22\u7684\u7528\u6237\u662f\u5426\u5728\u4e0d\u559c\u6b22\u7684\u5217\u8868\u4e2d\uff0c\u5982\u679c\u5728\uff0c\u5c31\u9700\u8981\u5220\u9664\u6570\u636e if ( this . isNotLike ( userId , likeUserId )){ redisKey = this . getNotLikeRedisKey ( userId ); this . redisTemplate . opsForHash (). delete ( redisKey , hashKey ); } return true ; } /** * \u83b7\u53d6\u559c\u6b22\u6570\u636e\u7684redis key * * @param userId * @return */ private String getLikeRedisKey ( Long userId ){ return LIKE_REDIS_KEY_PREFIX + userId ; } /** * \u83b7\u53d6\u4e0d\u559c\u6b22\u6570\u636e\u7684redis key * * @param userId * @return */ private String getNotLikeRedisKey ( Long userId ){ return NOT_LIKE_REDIS_KEY_PREFIX + userId ; } /** * \u662f\u5426\u559c\u6b22 * * @param userId * @param likeUserId * @return */ private Boolean isLike ( Long userId , Long likeUserId ){ String redisKey = this . getLikeRedisKey ( userId ); String hashKey = String . valueOf ( likeUserId ); return this . redisTemplate . opsForHash (). hasKey ( redisKey , hashKey ); } /** * \u662f\u5426\u4e0d\u559c\u6b22 * * @param userId * @param likeUserId * @return */ private Boolean isNotLike ( Long userId , Long likeUserId ){ String redisKey = this . getNotLikeRedisKey ( userId ); String hashKey = String . valueOf ( likeUserId ); return this . redisTemplate . opsForHash (). hasKey ( redisKey , hashKey ); } @Override public Boolean notLikeUser ( Long userId , Long likeUserId ) { //\u5224\u65ad\u7528\u6237\u662f\u5426\u5df2\u7ecf\u4e0d\u559c\u6b22\uff0c\u5982\u679c\u5df2\u7ecf\u4e0d\u559c\u6b22\uff0c\u5c31\u8fd4\u56de if ( this . isNotLike ( userId , likeUserId )){ return false ; } //\u5c06\u7528\u6237\u4fdd\u5b58\u5230\u4e0d\u559c\u6b22\u5217\u8868\u4e2d String redisKey = this . getNotLikeRedisKey ( userId ); String hashKey = String . valueOf ( likeUserId ); this . redisTemplate . opsForHash (). put ( redisKey , hashKey , \"1\" ); //\u5224\u65ad\u7528\u6237\u662f\u5426\u5728\u559c\u6b22\u5217\u8868\u4e2d\uff0c\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff0c\u9700\u8981\u5220\u9664\u6570\u636e if ( this . isLike ( userId , likeUserId )){ //\u5220\u9664MongoDB\u6570\u636e Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId ) . and ( \"likeUserId\" ). is ( likeUserId ) ); this . mongoTemplate . remove ( query , UserLike . class ); //\u5220\u9664redis\u4e2d\u7684\u6570\u636e redisKey = this . getLikeRedisKey ( userId ); this . redisTemplate . opsForHash (). delete ( redisKey , hashKey ); } return true ; } @Override public Boolean isMutualLike ( Long userId , Long likeUserId ) { return this . isLike ( userId , likeUserId ) && this . isLike ( likeUserId , userId ); } @Override public List < Long > queryLikeList ( Long userId ) { // \u67e5\u8be2redis String redisKey = this . getLikeRedisKey ( userId ); Set < Object > keys = this . redisTemplate . opsForHash (). keys ( redisKey ); if ( CollUtil . isEmpty ( keys )){ return ListUtil . empty (); } List < Long > result = new ArrayList <> ( keys . size ()); keys . forEach ( o -> result . add ( Convert . toLong ( o ))); return result ; } @Override public List < Long > queryNotLikeList ( Long userId ) { // \u67e5\u8be2redis String redisKey = this . getNotLikeRedisKey ( userId ); Set < Object > keys = this . redisTemplate . opsForHash (). keys ( redisKey ); if ( CollUtil . isEmpty ( keys )){ return ListUtil . empty (); } List < Long > result = new ArrayList <> ( keys . size ()); keys . forEach ( o -> result . add ( Convert . toLong ( o ))); return result ; } } 3.1.4\u3001\u5355\u5143\u6d4b\u8bd5 \u00b6 package com.tanhua.dubbo.server.api ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestUserLikeApi { @Autowired private UserLikeApi userLikeApi ; @Test public void testUserLike () { System . out . println ( this . userLikeApi . likeUser ( 1L , 2L )); System . out . println ( this . userLikeApi . likeUser ( 1L , 3L )); System . out . println ( this . userLikeApi . likeUser ( 1L , 4L )); System . out . println ( this . userLikeApi . notLikeUser ( 1L , 5L )); System . out . println ( this . userLikeApi . notLikeUser ( 1L , 6L )); System . out . println ( this . userLikeApi . likeUser ( 1L , 5L )); System . out . println ( this . userLikeApi . notLikeUser ( 1L , 2L )); } @Test public void testQueryList (){ this . userLikeApi . queryLikeList ( 1L ). forEach ( a -> System . out . println ( a )); System . out . println ( \"-------\" ); this . userLikeApi . queryNotLikeList ( 1L ). forEach ( a -> System . out . println ( a )); } } 3.2\u3001\u67e5\u8be2\u63a8\u8350\u5217\u8868dubbo\u670d\u52a1 \u00b6 3.2.1\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 //com.tanhua.dubbo.server.api.RecommendUserApi /** * \u67e5\u8be2\u63a2\u82b1\u5217\u8868\uff0c\u67e5\u8be2\u65f6\u9700\u8981\u6392\u9664\u4e0d\u559c\u6b22\u5217\u8868\u7528\u6237 * * @param userId * @param count * @return */ List < RecommendUser > queryCardList ( Long userId , Integer count ); 3.2.2\u3001\u7f16\u5199\u5b9e\u73b0 \u00b6 //com.tanhua.dubbo.server.api.RecommendUserApiImpl @Override public List < RecommendUser > queryCardList ( Long userId , Integer count ) { //\u8bbe\u7f6e\u5206\u9875\u4ee5\u53ca\u6392\u5e8f\uff0c\u6309\u7167\u5f97\u5206\u5012\u5e8f\u6392\u5e8f PageRequest pageRequest = PageRequest . of ( 0 , count , Sort . by ( Sort . Order . desc ( \"score\" ))); //\u6392\u9664\u5df2\u559c\u6b22\u6216\u4e0d\u559c\u6b22\u7684\u7528\u6237 List < Long > userIds = new ArrayList <> (); //\u67e5\u8be2\u559c\u6b22\u5217\u8868 userIds . addAll ( this . userLikeApi . queryLikeList ( userId )); //\u67e5\u8be2\u4e0d\u559c\u6b22\u5217\u8868 userIds . addAll ( this . userLikeApi . queryNotLikeList ( userId )); //\u6784\u9020\u67e5\u8be2\u6761\u4ef6 Criteria criteria = Criteria . where ( \"toUserId\" ). is ( userId ); if ( CollUtil . isNotEmpty ( userIds )){ //\u52a0\u5165\u5230\u67e5\u8be2\u6761\u4ef6\u4e2d\uff0c\u6392\u9664\u8fd9\u4e9b\u7528\u6237 criteria . andOperator ( Criteria . where ( \"userId\" ). nin ( userIds )); } Query query = Query . query ( criteria ). with ( pageRequest ); List < RecommendUser > recommendUserList = this . mongoTemplate . find ( query , RecommendUser . class ); return recommendUserList ; } 3.2.3\u3001\u5355\u5143\u6d4b\u8bd5 \u00b6 //com.tanhua.dubbo.server.api.TestRecommendUserApi @Test public void testQueryCardList (){ this . recommendUserApi . queryCardList ( 2L , 20 ) . forEach ( recommendUser -> System . out . println ( recommendUser )); } 3.3\u3001\u67e5\u8be2\u63a8\u8350\u5217\u8868APP\u63a5\u53e3\u5b9e\u73b0 \u00b6 \u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/593 3.3.1\u3001TanHuaController \u00b6 /** * \u63a2\u82b1 * * @return */ @GetMapping ( \"cards\" ) public ResponseEntity < List < TodayBest >> queryCardsList () { try { List < TodayBest > list = this . tanHuaService . queryCardsList (); return ResponseEntity . ok ( list ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 3.3.2\u3001TanHuaService \u00b6 #\u9ed8\u8ba4\u63a8\u8350\u5217\u8868 tanhua.default.recommend.users = 2,3,8,10,18,20,24,29,27,32,36,37,56,64,75,88 /** * \u67e5\u8be2\u63a8\u8350\u5361\u7247\u5217\u8868\uff0c\u4ece\u63a8\u8350\u5217\u8868\u4e2d\u968f\u673a\u9009\u53d610\u4e2a\u7528\u6237 * * @return */ public List < TodayBest > queryCardsList () { User user = UserThreadLocal . get (); int count = 50 ; //\u67e5\u8be2\u5230\u768450\u6761\u6570\u636e\uff0c\u5e76\u4e0d\u662f\u7528\u6765\u76f4\u63a5\u5c55\u73b0\uff0c\u9700\u8981\u4ece\u8fd950\u6761\u6570\u636e\u4e2d\u968f\u673a\u8fd4\u56de\u4e00\u4e9b\u6570\u636e List < RecommendUser > recommendUserList = this . recommendUserService . queryCardList ( user . getId (), count ); if ( CollUtil . isEmpty ( recommendUserList )) { recommendUserList = new ArrayList <> (); //\u9ed8\u8ba4\u63a8\u8350\u5217\u8868 List < String > list = StrUtil . split ( defaultRecommendUsers , ',' ); for ( String userId : list ) { RecommendUser recommendUser = new RecommendUser (); recommendUser . setToUserId ( user . getId ()); recommendUser . setUserId ( Convert . toLong ( userId )); recommendUserList . add ( recommendUser ); } } //\u8ba1\u7b97\u5c55\u73b0\u7684\u6570\u91cf\uff0c\u9ed8\u8ba4\u5c55\u73b010\u4e2a int showCount = Math . min ( 10 , recommendUserList . size ()); List < RecommendUser > result = new ArrayList <> (); for ( int i = 0 ; i < showCount ; i ++ ) { //TODO \u53ef\u80fd\u91cd\u590d int index = RandomUtil . randomInt ( 0 , recommendUserList . size ()); RecommendUser recommendUser = recommendUserList . get ( index ); result . add ( recommendUser ); } List < Object > userIdList = CollUtil . getFieldValues ( result , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIdList ); List < TodayBest > todayBests = new ArrayList <> (); for ( UserInfo userInfo : userInfoList ) { TodayBest todayBest = new TodayBest (); todayBest . setId ( userInfo . getUserId ()); todayBest . setAge ( userInfo . getAge ()); todayBest . setAvatar ( userInfo . getLogo ()); todayBest . setGender ( userInfo . getSex (). name (). toLowerCase ()); todayBest . setNickname ( userInfo . getNickName ()); todayBest . setTags ( Convert . toStrArray ( StrUtil . split ( userInfo . getTags (), ',' ))); todayBest . setFateValue ( 0 L ); todayBests . add ( todayBest ); } return todayBests ; } 3.3.3\u3001\u6d4b\u8bd5 \u00b6 \u6548\u679c\uff1a 3.4\u3001\u5de6\u6ed1\u53f3\u6ed1 \u00b6 \u5de6\u6ed1\uff1a\u201c\u4e0d\u559c\u6b22\u201d\uff0c\u53f3\u6ed1\uff1a\u201c\u559c\u6b22\u201d\uff0c\u5982\u679c\u53cc\u65b9\u559c\u6b22\uff0c\u90a3\u4e48\u5c31\u4f1a\u6210\u4e3a\u597d\u53cb\u3002 \u559c\u6b22\u7684\u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/599 \u4e0d\u559c\u6b22\u7684\u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/605 3.4.1\u3001TanHuaController \u00b6 /** * \u559c\u6b22 * * @param likeUserId * @return */ @GetMapping ( \"{id}/love\" ) public ResponseEntity < Void > likeUser ( @PathVariable ( \"id\" ) Long likeUserId ) { try { this . tanHuaService . likeUser ( likeUserId ); return ResponseEntity . ok ( null ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u4e0d\u559c\u6b22 * * @param likeUserId * @return */ @GetMapping ( \"{id}/unlove\" ) public ResponseEntity < Void > notLikeUser ( @PathVariable ( \"id\" ) Long likeUserId ) { try { this . tanHuaService . notLikeUser ( likeUserId ); return ResponseEntity . ok ( null ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 3.4.2\u3001TanHuaService \u00b6 //com.tanhua.server.service.TanHuaService public Boolean likeUser ( Long likeUserId ) { User user = UserThreadLocal . get (); Boolean result = this . userLikeApi . likeUser ( user . getId (), likeUserId ); if ( ! result ) { return false ; } if ( this . userLikeApi . isMutualLike ( user . getId (), likeUserId )) { //\u76f8\u4e92\u559c\u6b22\u6210\u4e3a\u597d\u53cb this . imService . contactUser ( likeUserId ); } return true ; } public Boolean notLikeUser ( Long likeUserId ) { User user = UserThreadLocal . get (); return this . userLikeApi . notLikeUser ( user . getId (), likeUserId ); } 3.4.3\u3001\u6d4b\u8bd5 \u00b6 user_like\u8868\uff0c\u53ef\u4ee5\u770b\u5230\u5df2\u7ecf\u76f8\u4e92\u559c\u6b22\u4e86\uff1a tanhua_users\u8868\uff0c\u53ef\u4ee5\u770b\u5230\u76f8\u4e92\u662f\u597d\u53cb\u4e86\uff1a \u73af\u4fe1\u5e73\u53f0\uff1a 4\u3001\u7528\u6237\u8d44\u6599 \u00b6 \u5728\u6211\u7684\u4e2d\u5fc3\u6a21\u5757\u4e2d\uff0c\u53ef\u4ee5\u5bf9\u4e2a\u4eba\u4fe1\u606f\u505a\u4fee\u6539\u3002 4.1\u3001\u57fa\u672c\u4fe1\u606f \u00b6 \u5728\u524d\u9762\u5b9e\u73b0\u7684\u67e5\u8be2\u4e2a\u4eba\u4fe1\u606f\u63a5\u53e3\u4e2d\uff0c\u5df2\u7ecf\u8fd4\u56de\u4e2a\u4eba\u57fa\u672c\u6570\u636e\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u5c55\u73b0\u51fa\u4e2a\u4eba\u4fe1\u606f\uff0c\u4e0b\u9762\u53ea\u9700\u8981\u8fdb\u884c\u5b9e\u73b0\u6570\u636e\u7684\u4fdd\u5b58\u5373\u53ef\u3002 4.4.1\u3001\u63a5\u53e3\u4fe1\u606f \u00b6 \u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/887 \u8bf7\u6c42\u53c2\u6570\uff1a \u00b6 4.4.2\u3001MyCenterController \u00b6 //com.tanhua.server.controller.MyCenterController /** * \u66f4\u65b0\u7528\u6237\u4fe1\u606f * * @param userInfoVo * @return */ @PutMapping public ResponseEntity < Void > updateUserInfo ( @RequestBody UserInfoVo userInfoVo ){ try { Boolean bool = this . myCenterService . updateUserInfo ( userInfoVo ); if ( bool ){ return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 4.4.3\u3001MyCenterService \u00b6 //com.tanhua.server.service.MyCenterService public Boolean updateUserInfo ( UserInfoVo userInfoVo ) { User user = UserThreadLocal . get (); UserInfo userInfo = new UserInfo (); userInfo . setUserId ( user . getId ()); userInfo . setAge ( Integer . valueOf ( userInfoVo . getAge ())); userInfo . setSex ( StringUtils . equalsIgnoreCase ( userInfoVo . getGender (), \"man\" ) ? SexEnum . MAN : SexEnum . WOMAN ); userInfo . setBirthday ( userInfoVo . getBirthday ()); userInfo . setCity ( userInfoVo . getCity ()); userInfo . setEdu ( userInfoVo . getEducation ()); userInfo . setIncome ( StringUtils . replaceAll ( userInfoVo . getIncome (), \"K\" , \"\" )); userInfo . setIndustry ( userInfoVo . getProfession ()); userInfo . setMarriage ( userInfoVo . getMarriage () == 1 ? \"\u5df2\u5a5a\" : \"\u672a\u5a5a\" ); return this . userInfoService . updateUserInfoByUserId ( userInfo ); } 4.4.4\u3001UserInfoService \u00b6 //com.tanhua.server.service.UserInfoService public boolean updateUserInfoByUserId ( UserInfo userInfo ) { QueryWrapper < UserInfo > queryWrapper = new QueryWrapper <> (); queryWrapper . eq ( \"user_id\" , userInfo . getUserId ()); return this . userInfoMapper . update ( userInfo , queryWrapper ) > 0 ; } 4.4.5\u3001bug\u4fee\u590d \u00b6 \u5728\u4e4b\u524d\u7684\u67e5\u8be2\u4e2a\u4eba\u4fe1\u606f\u4e2d\u63a5\u53e3\u4e2d\uff0c\u8fd4\u56de\u6570\u636e\u4e2d\u7684\u6027\u522b\u6570\u636e\u6709\u8bef\uff0c\u9700\u8981\u8fd4\u56deman\u6216woman\u3002 \u5982\u4e0b\uff1a //com.tanhua.server.service.MyCenterService public UserInfoVo queryUserInfoByUserId ( Long userId ) { if ( ObjectUtil . isEmpty ( userId )) { //\u5982\u679c\u67e5\u8be2id\u4e3anull\uff0c\u5c31\u8868\u793a\u67e5\u8be2\u5f53\u524d\u7528\u6237\u4fe1\u606f userId = UserThreadLocal . get (). getId (); } //\u67e5\u8be2\u7528\u6237\u4fe1\u606f UserInfo userInfo = this . userInfoService . queryUserInfoByUserId ( userId ); if ( ObjectUtil . isEmpty ( userInfo )) { return null ; } UserInfoVo userInfoVo = BeanUtil . copyProperties ( userInfo , UserInfoVo . class , \"marriage\" ); userInfoVo . setGender ( userInfo . getSex (). getValue () == 1 ? \"man\" : \"women\" ); userInfoVo . setMarriage ( StrUtil . equals ( \"\u5df2\u5a5a\" , userInfo . getMarriage ()) ? 1 : 0 ); return userInfoVo ; } 4.2\u3001\u66f4\u65b0\u5934\u50cf \u00b6 \u4e0a\u4f20\u5934\u50cf\u4f7f\u7528sso\u4e2d\u7684\u4e0a\u4f20\u903b\u8f91\u5373\u53ef\uff0c\u53ea\u662f\u8def\u5f84\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u4fee\u6539nginx\u914d\u7f6e\u548c\u5728sso\u4e2d\u5b9a\u4e49Controller\u5373\u53ef\u3002 \u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/881 #user nobody; worker_processes 1 ; #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; #pid logs/nginx.pid; events { worker_connections 1024 ; } http { include mime.types ; default_type application/octet-stream ; #log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' # '$status $body_bytes_sent \"$http_referer\" ' # '\"$http_user_agent\" \"$http_x_forwarded_for\"'; #access_log logs/access.log main; sendfile on ; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65 ; #gzip on; server { listen 80 ; server_name localhost ; #charset koi8-r; #access_log logs/host.access.log main; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html ; location = /50x.html { root html ; } location /user/ { #\u8bf7\u6c42\u8def\u5f84\u4e2d\u51e1\u662f\u4ee5/user/\u5f00\u5934\u7684\u8bf7\u6c42\uff0c\u8f6c\u53d1\u5230sso\u7cfb\u7edf client_max_body_size 300m ; #\u8bbe\u7f6e\u6700\u5927\u7684\u8bf7\u6c42\u4f53\u5927\u5c0f\uff0c\u89e3\u51b3\u5927\u6587\u4ef6\u4e0a\u4f20\u4e0d\u4e86\u7684\u95ee\u9898 proxy_connect_timeout 300s ; #\u4ee3\u7406\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4 proxy_send_timeout 300s ; #\u4ee3\u7406\u53d1\u9001\u6570\u636e\u7684\u8d85\u65f6\u65f6\u95f4 proxy_read_timeout 300s ; #\u4ee3\u7406\u8bfb\u53d6\u6570\u636e\u7684\u8d85\u65f6\u65f6\u95f4 proxy_pass http://127.0.0.1:18080 ; #\u8f6c\u53d1\u8bf7\u6c42 } location /users/header { #\u8bf7\u6c42\u8def\u5f84\u4e2d\u51e1\u662f\u4ee5/user/header\u5f00\u5934\u7684\u8bf7\u6c42\uff0c\u8f6c\u53d1\u5230sso\u7cfb\u7edf client_max_body_size 300m ; #\u8bbe\u7f6e\u6700\u5927\u7684\u8bf7\u6c42\u4f53\u5927\u5c0f\uff0c\u89e3\u51b3\u5927\u6587\u4ef6\u4e0a\u4f20\u4e0d\u4e86\u7684\u95ee\u9898 proxy_connect_timeout 300s ; #\u4ee3\u7406\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4 proxy_send_timeout 300s ; #\u4ee3\u7406\u53d1\u9001\u6570\u636e\u7684\u8d85\u65f6\u65f6\u95f4 proxy_read_timeout 300s ; #\u4ee3\u7406\u8bfb\u53d6\u6570\u636e\u7684\u8d85\u65f6\u65f6\u95f4 proxy_pass http://127.0.0.1:18080 ; #\u8f6c\u53d1\u8bf7\u6c42 } location / { #\u4e0a\u9762\u672a\u5339\u914d\u5230\u7684\u5728\u8fd9\u91cc\u5904\u7406 client_max_body_size 300m ; proxy_connect_timeout 300s ; proxy_send_timeout 300s ; proxy_read_timeout 300s ; proxy_pass http://127.0.0.1:18081 ; #\u8f6c\u53d1\u8bf7\u6c42\u5230server\u7cfb\u7edf } } } 4.2.2\u3001MyCenterController \u00b6 \u5728sso\u5de5\u7a0b\u4e2d\u5b9a\u4e49MyCenterController\u3002 package com.tanhua.sso.controller ; import com.tanhua.sso.vo.ErrorResult ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.* ; import org.springframework.web.multipart.MultipartFile ; @RestController @RequestMapping ( \"users\" ) public class MyCenterController { @Autowired private UserInfoController userInfoController ; /** * \u4e0a\u4f20\u5934\u50cf * * @param file * @param token * @return */ @PostMapping ( \"header\" ) public ResponseEntity < Object > saveLogo ( @RequestParam ( \"headPhoto\" ) MultipartFile file , @RequestHeader ( \"Authorization\" ) String token ) { return this . userInfoController . saveUserLogo ( file , token ); } }","title":"day08"},{"location":"tantan/day08/#_1","text":"\u4e0a\u62a5\u5730\u4f4d\u4f4d\u7f6e \u5b9e\u73b0\u641c\u9644\u8fd1\u529f\u80fd \u5b9e\u73b0\u63a2\u82b1\u529f\u80fd \u7528\u6237\u57fa\u672c\u4fe1\u606f\u7ef4\u62a4","title":"\u8bfe\u7a0b\u8bf4\u660e"},{"location":"tantan/day08/#1","text":"\u5f53\u5ba2\u6237\u7aef\u68c0\u6d4b\u7528\u6237\u7684\u5730\u7406\u4f4d\u7f6e\uff0c\u5f53\u53d8\u5316\u5927\u4e8e500\u7c73\u65f6\u6216\u6bcf\u96945\u5206\u949f\uff0c\u5411\u670d\u52a1\u7aef\u4e0a\u62a5\u5730\u7406\u4f4d\u7f6e\u3002 \u7528\u6237\u7684\u5730\u7406\u4f4d\u7f6e\u5b58\u50a8\u5230Elasticsearch\u4e2d\uff0c\u9700\u8981\u4f7f\u7528\u73af\u5883\u63d0\u4f9b\u7684ES\u96c6\u7fa4\uff0c\u5982\u4e0b\uff1a","title":"1\u3001\u4e0a\u62a5\u5730\u7406\u4f4d\u7f6e"},{"location":"tantan/day08/#11dubbo","text":"\u7528\u6237\u5730\u7406\u4f4d\u7f6e\u7684\u670d\u52a1\u72ec\u7acb\u4e00\u4e2a\u65b0\u7684\u5de5\u7a0b\u6765\u5b9e\u73b0\uff0c\u540d\u5b57\u4e3a\uff1amy-tanhua-dubbo-es\u3002","title":"1.1\u3001dubbo\u670d\u52a1"},{"location":"tantan/day08/#111","text":"pom.ml\u6587\u4ef6\u5982\u4e0b\uff1a <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> my-tanhua-dubbo </artifactId> <groupId> cn.itcast.tanhua </groupId> <version> 1.0-SNAPSHOT </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> my-tanhua-dubbo-es </artifactId> <dependencies> <!--\u5f15\u5165interface\u4f9d\u8d56--> <dependency> <groupId> cn.itcast.tanhua </groupId> <artifactId> my-tanhua-dubbo-interface </artifactId> <version> 1.0-SNAPSHOT </version> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-test </artifactId> <scope> test </scope> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-elasticsearch </artifactId> </dependency> <!--dubbo\u7684springboot\u652f\u6301--> <dependency> <groupId> com.alibaba.boot </groupId> <artifactId> dubbo-spring-boot-starter </artifactId> </dependency> <!--dubbo\u6846\u67b6--> <dependency> <groupId> com.alibaba </groupId> <artifactId> dubbo </artifactId> </dependency> <!--zk\u4f9d\u8d56--> <dependency> <groupId> org.apache.zookeeper </groupId> <artifactId> zookeeper </artifactId> </dependency> <dependency> <groupId> com.github.sgroschupf </groupId> <artifactId> zkclient </artifactId> </dependency> <dependency> <groupId> io.netty </groupId> <artifactId> netty-all </artifactId> </dependency> <dependency> <groupId> cn.hutool </groupId> <artifactId> hutool-all </artifactId> </dependency> </dependencies> </project> application.properties\u6587\u4ef6\uff1a # Spring boot application spring.application.name = itcast-tanhua-dubbo-es # dubbo \u626b\u63cf\u5305\u914d\u7f6e dubbo.scan.basePackages = com.tanhua.dubbo.es dubbo.application.name = dubbo-provider-es #dubbo \u5bf9\u5916\u66b4\u9732\u7684\u7aef\u53e3\u4fe1\u606f dubbo.protocol.name = dubbo dubbo.protocol.port = 20882 #dubbo\u6ce8\u518c\u4e2d\u5fc3\u7684\u914d\u7f6e dubbo.registry.address = zookeeper://192.168.31.81:2181 dubbo.registry.client = zkclient dubbo.registry.timeout = 60000 #ES\u96c6\u7fa4\u914d\u7f6e spring.data.elasticsearch.cluster-name = es-tanhua-cluster spring.data.elasticsearch.cluster-nodes = 192.168.31.81:9300,192.168.31.81:9301,192.168.31.81:9302 \u542f\u52a8\u7c7b\uff1a package com.tanhua.dubbo.es ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration ; import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration ; @SpringBootApplication ( exclude = { MongoAutoConfiguration . class , MongoDataAutoConfiguration . class }) //\u6392\u9664mongo\u7684\u81ea\u52a8\u914d\u7f6e public class ESApplication { public static void main ( String [] args ) { SpringApplication . run ( ESApplication . class , args ); } }","title":"1.1.1\u3001\u521b\u5efa\u5de5\u7a0b"},{"location":"tantan/day08/#112pojo","text":"\u5728my-tanhua-dubbo-interface\u4e2d\u521b\u5efa\uff1a package com.tanhua.dubbo.server.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.elasticsearch.common.geo.GeoPoint ; import org.springframework.data.annotation.Id ; import org.springframework.data.elasticsearch.annotations.Document ; import org.springframework.data.elasticsearch.annotations.Field ; import org.springframework.data.elasticsearch.annotations.FieldType ; import org.springframework.data.elasticsearch.annotations.GeoPointField ; @Data @NoArgsConstructor @AllArgsConstructor @Document ( indexName = \"tanhua\" , type = \"user_location\" , shards = 6 , replicas = 2 ) public class UserLocation { @Id private Long userId ; //\u7528\u6237id @GeoPointField private GeoPoint location ; //lon:\u7ecf\u5ea6 lat:\u7eac\u5ea6 @Field ( type = FieldType . Keyword ) private String address ; //\u4f4d\u7f6e\u63cf\u8ff0 @Field ( type = FieldType . Long ) private Long created ; //\u521b\u5efa\u65f6\u95f4 @Field ( type = FieldType . Long ) private Long updated ; //\u66f4\u65b0\u65f6\u95f4 @Field ( type = FieldType . Long ) private Long lastUpdated ; //\u4e0a\u6b21\u66f4\u65b0\u65f6\u95f4 } package com.tanhua.dubbo.server.vo ; import cn.hutool.core.bean.BeanUtil ; import com.tanhua.dubbo.server.pojo.UserLocation ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import java.util.ArrayList ; import java.util.List ; @Data @NoArgsConstructor @AllArgsConstructor public class UserLocationVo implements java . io . Serializable { private static final long serialVersionUID = 4133419501260037769L ; private Long userId ; //\u7528\u6237id private Double longitude ; //\u7ecf\u5ea6 private Double latitude ; //\u7ef4\u5ea6 private String address ; //\u4f4d\u7f6e\u63cf\u8ff0 private Long created ; //\u521b\u5efa\u65f6\u95f4 private Long updated ; //\u66f4\u65b0\u65f6\u95f4 private Long lastUpdated ; //\u4e0a\u6b21\u66f4\u65b0\u65f6\u95f4 public static final UserLocationVo format ( UserLocation userLocation ) { UserLocationVo userLocationVo = BeanUtil . toBean ( userLocation , UserLocationVo . class ); userLocationVo . setLongitude ( userLocation . getLocation (). getLon ()); userLocationVo . setLatitude ( userLocation . getLocation (). getLat ()); return userLocationVo ; } public static final List < UserLocationVo > formatToList ( List < UserLocation > userLocations ) { List < UserLocationVo > list = new ArrayList <> (); for ( UserLocation userLocation : userLocations ) { list . add ( format ( userLocation )); } return list ; } } \u7531\u4e8eUserLocation\u4e0d\u80fd\u5e8f\u5217\u5316\uff0c\u6240\u4ee5\u8981\u518d\u5b9a\u4e49UserLocationVo\u8fdb\u884c\u8fd4\u56de\u6570\u636e\u3002 \u5728my-tanhua-dubbo-interface\u4e2d\u6dfb\u52a0\u4f9d\u8d56\uff1a <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-elasticsearch </artifactId> </dependency> <dependency> <groupId> cn.hutool </groupId> <artifactId> hutool-all </artifactId> </dependency>","title":"1.1.2\u3001\u5b9a\u4e49pojo"},{"location":"tantan/day08/#113dubbo","text":"\u5728my-tanhua-dubbo-interface\u5de5\u7a0b\u4e2d\u3002 package com.tanhua.dubbo.server.api ; public interface UserLocationApi { /** * \u66f4\u65b0\u7528\u6237\u5730\u7406\u4f4d\u7f6e * * @param userId \u7528\u6237id * @param longitude \u7ecf\u5ea6 * @param latitude \u7eac\u5ea6 * @param address \u5730\u5740\u540d\u79f0 * @return */ Boolean updateUserLocation ( Long userId , Double longitude , Double latitude , String address ); }","title":"1.1.3\u3001\u5b9a\u4e49dubbo\u63a5\u53e3"},{"location":"tantan/day08/#114","text":"package com.tanhua.dubbo.es.api ; import cn.hutool.core.util.ObjectUtil ; import com.alibaba.dubbo.config.annotation.Service ; import com.tanhua.dubbo.server.api.UserLocationApi ; import com.tanhua.dubbo.server.pojo.UserLocation ; import lombok.extern.slf4j.Slf4j ; import org.elasticsearch.action.update.UpdateRequest ; import org.elasticsearch.common.geo.GeoPoint ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.elasticsearch.core.ElasticsearchTemplate ; import org.springframework.data.elasticsearch.core.query.* ; import javax.annotation.PostConstruct ; import java.util.HashMap ; import java.util.Map ; @Service ( version = \"1.0.0\" ) @Slf4j public class UserLocationApiImpl implements UserLocationApi { @Autowired private ElasticsearchTemplate elasticsearchTemplate ; /** * \u521d\u59cb\u5316\u7d22\u5f15\u5e93 * */ @PostConstruct public void initIndex (){ //\u5224\u65ad\u7d22\u5f15\u5e93\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u9700\u8981\u521b\u5efa if ( ! this . elasticsearchTemplate . indexExists ( \"tanhua\" )){ this . elasticsearchTemplate . createIndex ( UserLocation . class ); } //\u5224\u65ad\u8868\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u9700\u8981\u521b\u5efa if ( ! this . elasticsearchTemplate . typeExists ( \"tanhua\" , \"user_location\" )){ this . elasticsearchTemplate . putMapping ( UserLocation . class ); } } @Override public Boolean updateUserLocation ( Long userId , Double longitude , Double latitude , String address ) { //\u67e5\u8be2\u4e2a\u4eba\u7684\u5730\u7406\u4f4d\u7f6e\u6570\u636e\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u9700\u8981\u65b0\u589e\uff0c\u5982\u679c\u662f\u5b58\u5728\u6570\u636e\uff0c\u66f4\u65b0\u6570\u636e try { GetQuery getQuery = new GetQuery (); getQuery . setId ( String . valueOf ( userId )); UserLocation userLocation = this . elasticsearchTemplate . queryForObject ( getQuery , UserLocation . class ); if ( ObjectUtil . isEmpty ( userLocation )){ //\u65b0\u589e\u6570\u636e userLocation = new UserLocation (); userLocation . setUserId ( userId ); userLocation . setAddress ( address ); userLocation . setCreated ( System . currentTimeMillis ()); userLocation . setUpdated ( userLocation . getCreated ()); userLocation . setLastUpdated ( userLocation . getCreated ()); userLocation . setLocation ( new GeoPoint ( latitude , longitude )); IndexQuery indexQuery = new IndexQueryBuilder (). withObject ( userLocation ). build (); //\u4fdd\u5b58\u6570\u636e\u5230ES\u4e2d this . elasticsearchTemplate . index ( indexQuery ); } else { //\u66f4\u65b0\u6570\u636e //\u66f4\u65b0\u7684\u5b57\u6bb5 Map < String , Object > map = new HashMap <> (); map . put ( \"location\" , new GeoPoint ( latitude , longitude )); map . put ( \"updated\" , System . currentTimeMillis ()); map . put ( \"lastUpdated\" , userLocation . getUpdated ()); map . put ( \"address\" , address ); UpdateRequest updateRequest = new UpdateRequest (); updateRequest . doc ( map ); UpdateQuery updateQuery = new UpdateQueryBuilder () . withId ( String . valueOf ( userId )) . withClass ( UserLocation . class ) . withUpdateRequest ( updateRequest ). build (); //\u66f4\u65b0\u6570\u636e this . elasticsearchTemplate . update ( updateQuery ); } return true ; } catch ( Exception e ) { log . error ( \"\u66f4\u65b0\u5730\u7406\u4f4d\u7f6e\u5931\u8d25~ userId = \" + userId + \", longitude = \" + longitude + \", latitude = \" + latitude + \", address = \" + address , e ); } return false ; } }","title":"1.1.4\u3001\u7f16\u5199\u5b9e\u73b0"},{"location":"tantan/day08/#115","text":"package com.tanhua.dubbo.es ; import com.tanhua.dubbo.server.api.UserLocationApi ; import com.tanhua.dubbo.server.vo.PageInfo ; import com.tanhua.dubbo.server.vo.UserLocationVo ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestUserLocationApi { @Autowired private UserLocationApi userLocationApi ; @Test public void testUpdateUserLocation () { this . userLocationApi . updateUserLocation ( 1L , 121.512253 , 31.24094 , \"\u91d1\u8302\u5927\u53a6\" ); this . userLocationApi . updateUserLocation ( 2L , 121.506377 , 31.245105 , \"\u4e1c\u65b9\u660e\u73e0\u5e7f\u64ad\u7535\u89c6\u5854\" ); this . userLocationApi . updateUserLocation ( 10L , 121.508815 , 31.243844 , \"\u9646\u5bb6\u5634\u5730\u94c1\u7ad9\" ); this . userLocationApi . updateUserLocation ( 12L , 121.511999 , 31.239185 , \"\u4e0a\u6d77\u4e2d\u5fc3\u5927\u53a6\" ); this . userLocationApi . updateUserLocation ( 25L , 121.493444 , 31.240513 , \"\u4e0a\u6d77\u5e02\u516c\u5b89\u5c40\" ); this . userLocationApi . updateUserLocation ( 27L , 121.494108 , 31.247011 , \"\u4e0a\u6d77\u5916\u6ee9\u7f8e\u672f\u9986\" ); this . userLocationApi . updateUserLocation ( 30L , 121.462452 , 31.253463 , \"\u4e0a\u6d77\u706b\u8f66\u7ad9\" ); this . userLocationApi . updateUserLocation ( 32L , 121.81509 , 31.157478 , \"\u4e0a\u6d77\u6d66\u4e1c\u56fd\u9645\u673a\u573a\" ); this . userLocationApi . updateUserLocation ( 34L , 121.327908 , 31.20033 , \"\u8679\u6865\u706b\u8f66\u7ad9\" ); this . userLocationApi . updateUserLocation ( 38L , 121.490155 , 31.277476 , \"\u9c81\u8fc5\u516c\u56ed\" ); this . userLocationApi . updateUserLocation ( 40L , 121.425511 , 31.227831 , \"\u4e2d\u5c71\u516c\u56ed\" ); this . userLocationApi . updateUserLocation ( 43L , 121.594194 , 31.207786 , \"\u5f20\u6c5f\u9ad8\u79d1\" ); } }","title":"1.1.5\u3001\u5355\u5143\u6d4b\u8bd5"},{"location":"tantan/day08/#12app","text":"\u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/557","title":"1.2\u3001APP\u63a5\u53e3"},{"location":"tantan/day08/#121baiducontroller","text":"package com.tanhua.server.controller ; import com.tanhua.server.service.BaiduService ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.PostMapping ; import org.springframework.web.bind.annotation.RequestBody ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RestController ; import java.util.Map ; @RestController @RequestMapping ( \"baidu\" ) public class BaiduController { @Autowired private BaiduService baiduService ; /** * \u66f4\u65b0\u4f4d\u7f6e * * @param param * @return */ @PostMapping ( \"location\" ) public ResponseEntity < Void > updateLocation ( @RequestBody Map < String , Object > param ) { try { Double longitude = Double . valueOf ( param . get ( \"longitude\" ). toString ()); Double latitude = Double . valueOf ( param . get ( \"latitude\" ). toString ()); String address = param . get ( \"addrStr\" ). toString (); Boolean bool = this . baiduService . updateLocation ( longitude , latitude , address ); if ( bool ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } }","title":"1.2.1\u3001BaiduController"},{"location":"tantan/day08/#122baiduservice","text":"package com.tanhua.server.service ; import com.alibaba.dubbo.config.annotation.Reference ; import com.tanhua.common.pojo.User ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.dubbo.server.api.UserLocationApi ; import lombok.extern.slf4j.Slf4j ; import org.springframework.stereotype.Service ; @Service @Slf4j public class BaiduService { @Reference ( version = \"1.0.0\" ) private UserLocationApi userLocationApi ; public Boolean updateLocation ( Double longitude , Double latitude , String address ) { User user = UserThreadLocal . get (); try { return this . userLocationApi . updateUserLocation ( user . getId (), longitude , latitude , address ); } catch ( Exception e ) { log . error ( \"\u66f4\u65b0\u5730\u7406\u4f4d\u7f6e\u5931\u8d25~ userId = \" + user . getId () + \", longitude = \" + longitude + \", latitude = \" + latitude + \", address = \" + address , e ); } return false ; } }","title":"1.2.2\u3001BaiduService"},{"location":"tantan/day08/#13","text":"","title":"1.3\u3001\u6d4b\u8bd5"},{"location":"tantan/day08/#2","text":"\u5728\u9996\u9875\u4e2d\u70b9\u51fb\u201c\u641c\u9644\u8fd1\u201d\u53ef\u4ee5\u641c\u7d22\u9644\u8fd1\u7684\u597d\u53cb\uff0c\u6548\u679c\u5982\u4e0b\uff1a \u5b9e\u73b0\u601d\u8def\uff1a\u6839\u636e\u5f53\u524d\u7528\u6237\u7684\u4f4d\u7f6e\uff0c\u67e5\u8be2\u9644\u8fd1\u8303\u56f4\u5185\u7684\u7528\u6237\u3002\u8303\u56f4\u662f\u53ef\u4ee5\u8bbe\u7f6e\u7684\u3002","title":"2\u3001\u641c\u9644\u8fd1"},{"location":"tantan/day08/#21dubbo","text":"","title":"2.1\u3001dubbo\u670d\u52a1"},{"location":"tantan/day08/#211","text":"//com.tanhua.dubbo.server.api.UserLocationApi /** * \u67e5\u8be2\u7528\u6237\u5730\u7406\u4f4d\u7f6e * * @param userId * @return */ UserLocationVo queryByUserId ( Long userId ); /** * \u6839\u636e\u4f4d\u7f6e\u641c\u7d22 * * @param longitude \u7ecf\u5ea6 * @param latitude \u7eac\u5ea6 * @param distance \u8ddd\u79bb(\u7c73) * @param page \u9875\u6570 * @param pageSize \u9875\u9762\u5927\u5c0f */ PageInfo < UserLocationVo > queryUserFromLocation ( Double longitude , Double latitude , Double distance , Integer page , Integer pageSize );","title":"2.1.1\u3001\u5b9a\u4e49\u63a5\u53e3\u65b9\u6cd5"},{"location":"tantan/day08/#212","text":"//com.tanhua.dubbo.es.api.UserLocationApiImpl /** * \u67e5\u8be2\u7528\u6237\u7684\u4f4d\u7f6e\u4fe1\u606f * * @param userId * @return */ @Override public UserLocationVo queryByUserId ( Long userId ) { GetQuery getQuery = new GetQuery (); getQuery . setId ( String . valueOf ( userId )); UserLocation userLocation = this . elasticsearchTemplate . queryForObject ( getQuery , UserLocation . class ); if ( ObjectUtil . isNotEmpty ( userLocation )){ return UserLocationVo . format ( userLocation ); } return null ; } /** * \u6839\u636e\u4f4d\u7f6e\u641c\u7d22 * * @param longitude \u7ecf\u5ea6 * @param latitude \u7eac\u5ea6 * @param distance \u8ddd\u79bb(\u7c73) * @param page \u9875\u6570 * @param pageSize \u9875\u9762\u5927\u5c0f */ @Override public PageInfo < UserLocationVo > queryUserFromLocation ( Double longitude , Double latitude , Double distance , Integer page , Integer pageSize ) { PageInfo < UserLocationVo > pageInfo = new PageInfo <> (); pageInfo . setPageNum ( page ); pageInfo . setPageSize ( pageSize ); String fieldName = \"location\" ; //\u5b9e\u73b0\u4e86SearchQuery\u63a5\u53e3\uff0c\u6784\u9020\u5206\u9875\u3001\u6392\u5e8f NativeSearchQueryBuilder searchQueryBuilder = new NativeSearchQueryBuilder (); //\u5206\u9875 PageRequest pageRequest = PageRequest . of ( page - 1 , pageSize ); searchQueryBuilder . withPageable ( pageRequest ); BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder (); //\u4ee5\u4e00\u4e2a\u70b9\u4e3a\u4e2d\u5fc3\uff0c\u6307\u5b9a\u8303\u56f4\u67e5\u8be2 GeoDistanceQueryBuilder geoDistanceQueryBuilder = new GeoDistanceQueryBuilder ( fieldName ); //\u4e2d\u5fc3\u70b9 geoDistanceQueryBuilder . point ( new GeoPoint ( latitude , longitude )); //\u8ddd\u79bb\uff08\u753b\u5706\u7684\u534a\u5f84\uff09\u5355\u4f4d\uff1a\u516c\u91cc geoDistanceQueryBuilder . distance ( distance / 1000 , DistanceUnit . KILOMETERS ); boolQueryBuilder . must ( geoDistanceQueryBuilder ); searchQueryBuilder . withQuery ( boolQueryBuilder ); //\u6392\u5e8f\uff0c\u7531\u8fd1\u5230\u8fdc\u6392\u5e8f GeoDistanceSortBuilder geoDistanceSortBuilder = new GeoDistanceSortBuilder ( fieldName , latitude , longitude ); geoDistanceSortBuilder . order ( SortOrder . ASC ); //\u6b63\u5e8f\u6392\u5e8f geoDistanceSortBuilder . unit ( DistanceUnit . KILOMETERS ); //\u8bbe\u7f6e\u5355\u4f4d searchQueryBuilder . withSort ( geoDistanceSortBuilder ); AggregatedPage < UserLocation > aggregatedPage = this . elasticsearchTemplate . queryForPage ( searchQueryBuilder . build (), UserLocation . class ); if ( CollUtil . isEmpty ( aggregatedPage . getContent ())){ return pageInfo ; } pageInfo . setRecords ( UserLocationVo . formatToList ( aggregatedPage . getContent ())); return pageInfo ; }","title":"2.1.2\u3001\u7f16\u5199\u5b9e\u73b0"},{"location":"tantan/day08/#213","text":"//com.tanhua.dubbo.es.TestUserLocationApi @Test public void testQueryByUserId (){ UserLocationVo userLocationVo = this . userLocationApi . queryByUserId ( 1L ); System . out . println ( userLocationVo ); } @Test public void testQueryUserFromLocation (){ UserLocationVo userLocationVo = this . userLocationApi . queryByUserId ( 1L ); PageInfo < UserLocationVo > pageInfo = this . userLocationApi . queryUserFromLocation ( userLocationVo . getLongitude (), userLocationVo . getLatitude (), 5000 d , 1 , 10 ); pageInfo . getRecords (). forEach ( vo -> System . out . println ( vo )); }","title":"2.1.3\u3001\u5355\u5143\u6d4b\u8bd5"},{"location":"tantan/day08/#22app","text":"\u6587\u6863\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/611","title":"2.2\u3001APP\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day08/#221nearuservo","text":"package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class NearUserVo { private Long userId ; private String avatar ; private String nickname ; }","title":"2.2.1\u3001NearUserVo"},{"location":"tantan/day08/#222tanhuacontroller","text":"//com.tanhua.server.controller.TanHuaController /** * \u641c\u9644\u8fd1 * * @param gender * @param distance * @return */ @GetMapping ( \"search\" ) public ResponseEntity < List < NearUserVo >> queryNearUser ( @RequestParam ( value = \"gender\" , required = false ) String gender , @RequestParam ( value = \"distance\" , defaultValue = \"2000\" ) String distance ) { try { List < NearUserVo > list = this . tanHuaService . queryNearUser ( gender , distance ); return ResponseEntity . ok ( list ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"2.2.2\u3001TanHuaController"},{"location":"tantan/day08/#223tanhuaservice","text":"//com.tanhua.server.service.TanHuaService public List < NearUserVo > queryNearUser ( String gender , String distance ) { //\u67e5\u8be2\u5f53\u524d\u7528\u6237\u7684\u4f4d\u7f6e User user = UserThreadLocal . get (); UserLocationVo userLocationVo = this . userLocationApi . queryByUserId ( user . getId ()); if ( ObjectUtil . isEmpty ( userLocationVo )){ return ListUtil . empty (); } PageInfo < UserLocationVo > pageInfo = this . userLocationApi . queryUserFromLocation ( userLocationVo . getLongitude (), userLocationVo . getLatitude (), Convert . toDouble ( distance ), 1 , 50 ); List < UserLocationVo > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )){ return ListUtil . empty (); } //\u6784\u9020\u7b5b\u9009\u6761\u4ef6 List < Object > userIdList = CollUtil . getFieldValues ( records , \"userId\" ); QueryWrapper < UserInfo > queryWrapper = new QueryWrapper <> (); queryWrapper . in ( \"user_id\" , userIdList ); if ( StrUtil . equalsIgnoreCase ( gender , \"man\" )){ queryWrapper . eq ( \"sex\" , SexEnum . MAN ); } else if ( StrUtil . equalsIgnoreCase ( gender , \"woman\" )){ queryWrapper . eq ( \"sex\" , SexEnum . WOMAN ); } List < UserInfo > userInfoList = this . userInfoService . queryUserInfoList ( queryWrapper ); List < NearUserVo > result = new ArrayList <> (); for ( UserLocationVo locationVo : records ) { //\u6392\u9664\u81ea\u5df1 if ( ObjectUtil . equals ( locationVo . getUserId (), user . getId ())){ continue ; } for ( UserInfo userInfo : userInfoList ) { if ( ObjectUtil . equals ( locationVo . getUserId (), userInfo . getUserId ())){ NearUserVo nearUserVo = new NearUserVo (); nearUserVo . setUserId ( userInfo . getUserId ()); nearUserVo . setAvatar ( userInfo . getLogo ()); nearUserVo . setNickname ( userInfo . getNickName ()); result . add ( nearUserVo ); break ; } } } return result ; }","title":"2.2.3\u3001TanHuaService"},{"location":"tantan/day08/#224","text":"","title":"2.2.4\u3001\u6d4b\u8bd5"},{"location":"tantan/day08/#3","text":"\u63a2\u82b1\u529f\u80fd\u662f\u5c06\u63a8\u8350\u7684\u597d\u53cb\u968f\u673a\u7684\u901a\u8fc7\u5361\u7247\u7684\u5f62\u5f0f\u5c55\u73b0\u51fa\u6765\uff0c\u7528\u6237\u53ef\u4ee5\u9009\u62e9\u5de6\u6ed1\u3001\u53f3\u6ed1\u64cd\u4f5c\uff0c\u5de6\u6ed1\uff1a\u201c\u4e0d\u559c\u6b22\u201d\uff0c\u53f3\u6ed1\uff1a\u201c\u559c\u6b22\u201d\u3002 \u559c\u6b22\uff1a\u5982\u679c\u53cc\u65b9\u559c\u6b22\uff0c\u90a3\u4e48\u5c31\u4f1a\u6210\u4e3a\u597d\u53cb\u3002 \u5982\u679c\u5df2\u7ecf\u559c\u6b22\u6216\u4e0d\u559c\u6b22\u7684\u7528\u6237\u5728\u5217\u8868\u4e2d\u4e0d\u518d\u663e\u793a\u3002","title":"3\u3001\u63a2\u82b1"},{"location":"tantan/day08/#31dubbo","text":"\u7528\u6237\u7684\u559c\u6b22\u4e0e\u4e0d\u559c\u6b22\u5217\u8868\u9700\u8981\u4fdd\u5b58\u5728redis\u4e2d\uff0c\u4e3a\u4e86\u9632\u6b62redis\u4e2d\u7684\u6570\u636e\u4e22\u5931\uff0c\u540c\u65f6\u9700\u8981\u5c06\u6570\u636e\u4fdd\u5b58\u5230mongodb\u8fdb\u884c\u6301\u4e45\u5316\u4fdd\u5b58\u3002","title":"3.1\u3001\u559c\u6b22\u7684dubbo\u670d\u52a1"},{"location":"tantan/day08/#311","text":"package com.tanhua.dubbo.server.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.mongodb.core.index.Indexed ; import org.springframework.data.mongodb.core.mapping.Document ; @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"user_like\" ) public class UserLike implements java . io . Serializable { private static final long serialVersionUID = 6739966698394686523L ; private ObjectId id ; @Indexed private Long userId ; //\u7528\u6237id\uff0c\u81ea\u5df1 @Indexed private Long likeUserId ; //\u559c\u6b22\u7684\u7528\u6237id\uff0c\u5bf9\u65b9 private Long created ; //\u521b\u5efa\u65f6\u95f4 }","title":"3.1.1\u3001\u5b9e\u4f53\u5bf9\u8c61"},{"location":"tantan/day08/#312","text":"package com.tanhua.dubbo.server.api ; import java.util.List ; public interface UserLikeApi { /** * \u559c\u6b22 * * @param userId * @param likeUserId * @return */ Boolean likeUser ( Long userId , Long likeUserId ); /** * \u4e0d\u559c\u6b22 * * @param userId * @param likeUserId * @return */ Boolean notLikeUser ( Long userId , Long likeUserId ); /** * \u662f\u5426\u76f8\u4e92\u559c\u6b22 * * @param userId * @param likeUserId * @return */ Boolean isMutualLike ( Long userId , Long likeUserId ); /** * \u67e5\u8be2\u559c\u6b22\u5217\u8868 * * @param userId * @return */ List < Long > queryLikeList ( Long userId ); /** * \u67e5\u8be2\u4e0d\u559c\u6b22\u5217\u8868 * * @param userId * @return */ List < Long > queryNotLikeList ( Long userId ); }","title":"3.1.2\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day08/#313","text":"package com.tanhua.dubbo.server.api ; import cn.hutool.core.collection.CollUtil ; import cn.hutool.core.collection.ListUtil ; import cn.hutool.core.convert.Convert ; import com.alibaba.dubbo.config.annotation.Service ; import com.tanhua.dubbo.server.pojo.UserLike ; import org.bson.types.ObjectId ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.mongodb.core.MongoTemplate ; import org.springframework.data.mongodb.core.query.Criteria ; import org.springframework.data.mongodb.core.query.Query ; import org.springframework.data.redis.core.RedisTemplate ; import java.util.ArrayList ; import java.util.List ; import java.util.Set ; @Service ( version = \"1.0.0\" ) public class UserLikeApiImpl implements UserLikeApi { @Autowired private MongoTemplate mongoTemplate ; @Autowired private RedisTemplate < String , String > redisTemplate ; public static final String LIKE_REDIS_KEY_PREFIX = \"USER_LIKE_\" ; public static final String NOT_LIKE_REDIS_KEY_PREFIX = \"USER_NOT_LIKE_\" ; /** * \u559c\u6b22 * * @param userId * @param likeUserId * @return */ @Override public Boolean likeUser ( Long userId , Long likeUserId ) { //\u5224\u65ad\u8be5\u7528\u6237\u662f\u5426\u5df2\u7ecf\u559c\u6b22\uff0c\u5982\u679c\u5df2\u7ecf\u559c\u6b22\u5c31\u8fd4\u56de if ( this . isLike ( userId , likeUserId )){ return false ; } UserLike userLike = new UserLike (); userLike . setId ( ObjectId . get ()); userLike . setUserId ( userId ); userLike . setLikeUserId ( likeUserId ); userLike . setCreated ( System . currentTimeMillis ()); //\u5c06\u6570\u636e\u5b58\u50a8\u5230MongoDB this . mongoTemplate . save ( userLike ); //\u7528\u6237\u7684\u559c\u6b22\u6570\u636e\u4fdd\u5b58\u5230redis //\u7528\u62371\uff1akey -> USER_LIKE_1 , value -> 2, \"1\" //\u7528\u62371\uff1akey -> USER_LIKE_1 , value -> 3, \"1\" //\u7528\u62372\uff1akey -> USER_LIKE_2 , value -> 4, \"1\" String redisKey = this . getLikeRedisKey ( userId ); String hashKey = String . valueOf ( likeUserId ); this . redisTemplate . opsForHash (). put ( redisKey , hashKey , \"1\" ); //\u5224\u65ad\uff0c\u559c\u6b22\u7684\u7528\u6237\u662f\u5426\u5728\u4e0d\u559c\u6b22\u7684\u5217\u8868\u4e2d\uff0c\u5982\u679c\u5728\uff0c\u5c31\u9700\u8981\u5220\u9664\u6570\u636e if ( this . isNotLike ( userId , likeUserId )){ redisKey = this . getNotLikeRedisKey ( userId ); this . redisTemplate . opsForHash (). delete ( redisKey , hashKey ); } return true ; } /** * \u83b7\u53d6\u559c\u6b22\u6570\u636e\u7684redis key * * @param userId * @return */ private String getLikeRedisKey ( Long userId ){ return LIKE_REDIS_KEY_PREFIX + userId ; } /** * \u83b7\u53d6\u4e0d\u559c\u6b22\u6570\u636e\u7684redis key * * @param userId * @return */ private String getNotLikeRedisKey ( Long userId ){ return NOT_LIKE_REDIS_KEY_PREFIX + userId ; } /** * \u662f\u5426\u559c\u6b22 * * @param userId * @param likeUserId * @return */ private Boolean isLike ( Long userId , Long likeUserId ){ String redisKey = this . getLikeRedisKey ( userId ); String hashKey = String . valueOf ( likeUserId ); return this . redisTemplate . opsForHash (). hasKey ( redisKey , hashKey ); } /** * \u662f\u5426\u4e0d\u559c\u6b22 * * @param userId * @param likeUserId * @return */ private Boolean isNotLike ( Long userId , Long likeUserId ){ String redisKey = this . getNotLikeRedisKey ( userId ); String hashKey = String . valueOf ( likeUserId ); return this . redisTemplate . opsForHash (). hasKey ( redisKey , hashKey ); } @Override public Boolean notLikeUser ( Long userId , Long likeUserId ) { //\u5224\u65ad\u7528\u6237\u662f\u5426\u5df2\u7ecf\u4e0d\u559c\u6b22\uff0c\u5982\u679c\u5df2\u7ecf\u4e0d\u559c\u6b22\uff0c\u5c31\u8fd4\u56de if ( this . isNotLike ( userId , likeUserId )){ return false ; } //\u5c06\u7528\u6237\u4fdd\u5b58\u5230\u4e0d\u559c\u6b22\u5217\u8868\u4e2d String redisKey = this . getNotLikeRedisKey ( userId ); String hashKey = String . valueOf ( likeUserId ); this . redisTemplate . opsForHash (). put ( redisKey , hashKey , \"1\" ); //\u5224\u65ad\u7528\u6237\u662f\u5426\u5728\u559c\u6b22\u5217\u8868\u4e2d\uff0c\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff0c\u9700\u8981\u5220\u9664\u6570\u636e if ( this . isLike ( userId , likeUserId )){ //\u5220\u9664MongoDB\u6570\u636e Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId ) . and ( \"likeUserId\" ). is ( likeUserId ) ); this . mongoTemplate . remove ( query , UserLike . class ); //\u5220\u9664redis\u4e2d\u7684\u6570\u636e redisKey = this . getLikeRedisKey ( userId ); this . redisTemplate . opsForHash (). delete ( redisKey , hashKey ); } return true ; } @Override public Boolean isMutualLike ( Long userId , Long likeUserId ) { return this . isLike ( userId , likeUserId ) && this . isLike ( likeUserId , userId ); } @Override public List < Long > queryLikeList ( Long userId ) { // \u67e5\u8be2redis String redisKey = this . getLikeRedisKey ( userId ); Set < Object > keys = this . redisTemplate . opsForHash (). keys ( redisKey ); if ( CollUtil . isEmpty ( keys )){ return ListUtil . empty (); } List < Long > result = new ArrayList <> ( keys . size ()); keys . forEach ( o -> result . add ( Convert . toLong ( o ))); return result ; } @Override public List < Long > queryNotLikeList ( Long userId ) { // \u67e5\u8be2redis String redisKey = this . getNotLikeRedisKey ( userId ); Set < Object > keys = this . redisTemplate . opsForHash (). keys ( redisKey ); if ( CollUtil . isEmpty ( keys )){ return ListUtil . empty (); } List < Long > result = new ArrayList <> ( keys . size ()); keys . forEach ( o -> result . add ( Convert . toLong ( o ))); return result ; } }","title":"3.1.3\u3001\u7f16\u5199\u5b9e\u73b0"},{"location":"tantan/day08/#314","text":"package com.tanhua.dubbo.server.api ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringRunner ; @RunWith ( SpringRunner . class ) @SpringBootTest public class TestUserLikeApi { @Autowired private UserLikeApi userLikeApi ; @Test public void testUserLike () { System . out . println ( this . userLikeApi . likeUser ( 1L , 2L )); System . out . println ( this . userLikeApi . likeUser ( 1L , 3L )); System . out . println ( this . userLikeApi . likeUser ( 1L , 4L )); System . out . println ( this . userLikeApi . notLikeUser ( 1L , 5L )); System . out . println ( this . userLikeApi . notLikeUser ( 1L , 6L )); System . out . println ( this . userLikeApi . likeUser ( 1L , 5L )); System . out . println ( this . userLikeApi . notLikeUser ( 1L , 2L )); } @Test public void testQueryList (){ this . userLikeApi . queryLikeList ( 1L ). forEach ( a -> System . out . println ( a )); System . out . println ( \"-------\" ); this . userLikeApi . queryNotLikeList ( 1L ). forEach ( a -> System . out . println ( a )); } }","title":"3.1.4\u3001\u5355\u5143\u6d4b\u8bd5"},{"location":"tantan/day08/#32dubbo","text":"","title":"3.2\u3001\u67e5\u8be2\u63a8\u8350\u5217\u8868dubbo\u670d\u52a1"},{"location":"tantan/day08/#321","text":"//com.tanhua.dubbo.server.api.RecommendUserApi /** * \u67e5\u8be2\u63a2\u82b1\u5217\u8868\uff0c\u67e5\u8be2\u65f6\u9700\u8981\u6392\u9664\u4e0d\u559c\u6b22\u5217\u8868\u7528\u6237 * * @param userId * @param count * @return */ List < RecommendUser > queryCardList ( Long userId , Integer count );","title":"3.2.1\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day08/#322","text":"//com.tanhua.dubbo.server.api.RecommendUserApiImpl @Override public List < RecommendUser > queryCardList ( Long userId , Integer count ) { //\u8bbe\u7f6e\u5206\u9875\u4ee5\u53ca\u6392\u5e8f\uff0c\u6309\u7167\u5f97\u5206\u5012\u5e8f\u6392\u5e8f PageRequest pageRequest = PageRequest . of ( 0 , count , Sort . by ( Sort . Order . desc ( \"score\" ))); //\u6392\u9664\u5df2\u559c\u6b22\u6216\u4e0d\u559c\u6b22\u7684\u7528\u6237 List < Long > userIds = new ArrayList <> (); //\u67e5\u8be2\u559c\u6b22\u5217\u8868 userIds . addAll ( this . userLikeApi . queryLikeList ( userId )); //\u67e5\u8be2\u4e0d\u559c\u6b22\u5217\u8868 userIds . addAll ( this . userLikeApi . queryNotLikeList ( userId )); //\u6784\u9020\u67e5\u8be2\u6761\u4ef6 Criteria criteria = Criteria . where ( \"toUserId\" ). is ( userId ); if ( CollUtil . isNotEmpty ( userIds )){ //\u52a0\u5165\u5230\u67e5\u8be2\u6761\u4ef6\u4e2d\uff0c\u6392\u9664\u8fd9\u4e9b\u7528\u6237 criteria . andOperator ( Criteria . where ( \"userId\" ). nin ( userIds )); } Query query = Query . query ( criteria ). with ( pageRequest ); List < RecommendUser > recommendUserList = this . mongoTemplate . find ( query , RecommendUser . class ); return recommendUserList ; }","title":"3.2.2\u3001\u7f16\u5199\u5b9e\u73b0"},{"location":"tantan/day08/#323","text":"//com.tanhua.dubbo.server.api.TestRecommendUserApi @Test public void testQueryCardList (){ this . recommendUserApi . queryCardList ( 2L , 20 ) . forEach ( recommendUser -> System . out . println ( recommendUser )); }","title":"3.2.3\u3001\u5355\u5143\u6d4b\u8bd5"},{"location":"tantan/day08/#33app","text":"\u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/593","title":"3.3\u3001\u67e5\u8be2\u63a8\u8350\u5217\u8868APP\u63a5\u53e3\u5b9e\u73b0"},{"location":"tantan/day08/#331tanhuacontroller","text":"/** * \u63a2\u82b1 * * @return */ @GetMapping ( \"cards\" ) public ResponseEntity < List < TodayBest >> queryCardsList () { try { List < TodayBest > list = this . tanHuaService . queryCardsList (); return ResponseEntity . ok ( list ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"3.3.1\u3001TanHuaController"},{"location":"tantan/day08/#332tanhuaservice","text":"#\u9ed8\u8ba4\u63a8\u8350\u5217\u8868 tanhua.default.recommend.users = 2,3,8,10,18,20,24,29,27,32,36,37,56,64,75,88 /** * \u67e5\u8be2\u63a8\u8350\u5361\u7247\u5217\u8868\uff0c\u4ece\u63a8\u8350\u5217\u8868\u4e2d\u968f\u673a\u9009\u53d610\u4e2a\u7528\u6237 * * @return */ public List < TodayBest > queryCardsList () { User user = UserThreadLocal . get (); int count = 50 ; //\u67e5\u8be2\u5230\u768450\u6761\u6570\u636e\uff0c\u5e76\u4e0d\u662f\u7528\u6765\u76f4\u63a5\u5c55\u73b0\uff0c\u9700\u8981\u4ece\u8fd950\u6761\u6570\u636e\u4e2d\u968f\u673a\u8fd4\u56de\u4e00\u4e9b\u6570\u636e List < RecommendUser > recommendUserList = this . recommendUserService . queryCardList ( user . getId (), count ); if ( CollUtil . isEmpty ( recommendUserList )) { recommendUserList = new ArrayList <> (); //\u9ed8\u8ba4\u63a8\u8350\u5217\u8868 List < String > list = StrUtil . split ( defaultRecommendUsers , ',' ); for ( String userId : list ) { RecommendUser recommendUser = new RecommendUser (); recommendUser . setToUserId ( user . getId ()); recommendUser . setUserId ( Convert . toLong ( userId )); recommendUserList . add ( recommendUser ); } } //\u8ba1\u7b97\u5c55\u73b0\u7684\u6570\u91cf\uff0c\u9ed8\u8ba4\u5c55\u73b010\u4e2a int showCount = Math . min ( 10 , recommendUserList . size ()); List < RecommendUser > result = new ArrayList <> (); for ( int i = 0 ; i < showCount ; i ++ ) { //TODO \u53ef\u80fd\u91cd\u590d int index = RandomUtil . randomInt ( 0 , recommendUserList . size ()); RecommendUser recommendUser = recommendUserList . get ( index ); result . add ( recommendUser ); } List < Object > userIdList = CollUtil . getFieldValues ( result , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIdList ); List < TodayBest > todayBests = new ArrayList <> (); for ( UserInfo userInfo : userInfoList ) { TodayBest todayBest = new TodayBest (); todayBest . setId ( userInfo . getUserId ()); todayBest . setAge ( userInfo . getAge ()); todayBest . setAvatar ( userInfo . getLogo ()); todayBest . setGender ( userInfo . getSex (). name (). toLowerCase ()); todayBest . setNickname ( userInfo . getNickName ()); todayBest . setTags ( Convert . toStrArray ( StrUtil . split ( userInfo . getTags (), ',' ))); todayBest . setFateValue ( 0 L ); todayBests . add ( todayBest ); } return todayBests ; }","title":"3.3.2\u3001TanHuaService"},{"location":"tantan/day08/#333","text":"\u6548\u679c\uff1a","title":"3.3.3\u3001\u6d4b\u8bd5"},{"location":"tantan/day08/#34","text":"\u5de6\u6ed1\uff1a\u201c\u4e0d\u559c\u6b22\u201d\uff0c\u53f3\u6ed1\uff1a\u201c\u559c\u6b22\u201d\uff0c\u5982\u679c\u53cc\u65b9\u559c\u6b22\uff0c\u90a3\u4e48\u5c31\u4f1a\u6210\u4e3a\u597d\u53cb\u3002 \u559c\u6b22\u7684\u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/599 \u4e0d\u559c\u6b22\u7684\u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/605","title":"3.4\u3001\u5de6\u6ed1\u53f3\u6ed1"},{"location":"tantan/day08/#341tanhuacontroller","text":"/** * \u559c\u6b22 * * @param likeUserId * @return */ @GetMapping ( \"{id}/love\" ) public ResponseEntity < Void > likeUser ( @PathVariable ( \"id\" ) Long likeUserId ) { try { this . tanHuaService . likeUser ( likeUserId ); return ResponseEntity . ok ( null ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } /** * \u4e0d\u559c\u6b22 * * @param likeUserId * @return */ @GetMapping ( \"{id}/unlove\" ) public ResponseEntity < Void > notLikeUser ( @PathVariable ( \"id\" ) Long likeUserId ) { try { this . tanHuaService . notLikeUser ( likeUserId ); return ResponseEntity . ok ( null ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"3.4.1\u3001TanHuaController"},{"location":"tantan/day08/#342tanhuaservice","text":"//com.tanhua.server.service.TanHuaService public Boolean likeUser ( Long likeUserId ) { User user = UserThreadLocal . get (); Boolean result = this . userLikeApi . likeUser ( user . getId (), likeUserId ); if ( ! result ) { return false ; } if ( this . userLikeApi . isMutualLike ( user . getId (), likeUserId )) { //\u76f8\u4e92\u559c\u6b22\u6210\u4e3a\u597d\u53cb this . imService . contactUser ( likeUserId ); } return true ; } public Boolean notLikeUser ( Long likeUserId ) { User user = UserThreadLocal . get (); return this . userLikeApi . notLikeUser ( user . getId (), likeUserId ); }","title":"3.4.2\u3001TanHuaService"},{"location":"tantan/day08/#343","text":"user_like\u8868\uff0c\u53ef\u4ee5\u770b\u5230\u5df2\u7ecf\u76f8\u4e92\u559c\u6b22\u4e86\uff1a tanhua_users\u8868\uff0c\u53ef\u4ee5\u770b\u5230\u76f8\u4e92\u662f\u597d\u53cb\u4e86\uff1a \u73af\u4fe1\u5e73\u53f0\uff1a","title":"3.4.3\u3001\u6d4b\u8bd5"},{"location":"tantan/day08/#4","text":"\u5728\u6211\u7684\u4e2d\u5fc3\u6a21\u5757\u4e2d\uff0c\u53ef\u4ee5\u5bf9\u4e2a\u4eba\u4fe1\u606f\u505a\u4fee\u6539\u3002","title":"4\u3001\u7528\u6237\u8d44\u6599"},{"location":"tantan/day08/#41","text":"\u5728\u524d\u9762\u5b9e\u73b0\u7684\u67e5\u8be2\u4e2a\u4eba\u4fe1\u606f\u63a5\u53e3\u4e2d\uff0c\u5df2\u7ecf\u8fd4\u56de\u4e2a\u4eba\u57fa\u672c\u6570\u636e\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u5c55\u73b0\u51fa\u4e2a\u4eba\u4fe1\u606f\uff0c\u4e0b\u9762\u53ea\u9700\u8981\u8fdb\u884c\u5b9e\u73b0\u6570\u636e\u7684\u4fdd\u5b58\u5373\u53ef\u3002","title":"4.1\u3001\u57fa\u672c\u4fe1\u606f"},{"location":"tantan/day08/#441","text":"\u63a5\u53e3\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/887 \u8bf7\u6c42\u53c2\u6570\uff1a","title":"4.4.1\u3001\u63a5\u53e3\u4fe1\u606f"},{"location":"tantan/day08/#_2","text":"","title":""},{"location":"tantan/day08/#442mycentercontroller","text":"//com.tanhua.server.controller.MyCenterController /** * \u66f4\u65b0\u7528\u6237\u4fe1\u606f * * @param userInfoVo * @return */ @PutMapping public ResponseEntity < Void > updateUserInfo ( @RequestBody UserInfoVo userInfoVo ){ try { Boolean bool = this . myCenterService . updateUserInfo ( userInfoVo ); if ( bool ){ return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"4.4.2\u3001MyCenterController"},{"location":"tantan/day08/#443mycenterservice","text":"//com.tanhua.server.service.MyCenterService public Boolean updateUserInfo ( UserInfoVo userInfoVo ) { User user = UserThreadLocal . get (); UserInfo userInfo = new UserInfo (); userInfo . setUserId ( user . getId ()); userInfo . setAge ( Integer . valueOf ( userInfoVo . getAge ())); userInfo . setSex ( StringUtils . equalsIgnoreCase ( userInfoVo . getGender (), \"man\" ) ? SexEnum . MAN : SexEnum . WOMAN ); userInfo . setBirthday ( userInfoVo . getBirthday ()); userInfo . setCity ( userInfoVo . getCity ()); userInfo . setEdu ( userInfoVo . getEducation ()); userInfo . setIncome ( StringUtils . replaceAll ( userInfoVo . getIncome (), \"K\" , \"\" )); userInfo . setIndustry ( userInfoVo . getProfession ()); userInfo . setMarriage ( userInfoVo . getMarriage () == 1 ? \"\u5df2\u5a5a\" : \"\u672a\u5a5a\" ); return this . userInfoService . updateUserInfoByUserId ( userInfo ); }","title":"4.4.3\u3001MyCenterService"},{"location":"tantan/day08/#444userinfoservice","text":"//com.tanhua.server.service.UserInfoService public boolean updateUserInfoByUserId ( UserInfo userInfo ) { QueryWrapper < UserInfo > queryWrapper = new QueryWrapper <> (); queryWrapper . eq ( \"user_id\" , userInfo . getUserId ()); return this . userInfoMapper . update ( userInfo , queryWrapper ) > 0 ; }","title":"4.4.4\u3001UserInfoService"},{"location":"tantan/day08/#445bug","text":"\u5728\u4e4b\u524d\u7684\u67e5\u8be2\u4e2a\u4eba\u4fe1\u606f\u4e2d\u63a5\u53e3\u4e2d\uff0c\u8fd4\u56de\u6570\u636e\u4e2d\u7684\u6027\u522b\u6570\u636e\u6709\u8bef\uff0c\u9700\u8981\u8fd4\u56deman\u6216woman\u3002 \u5982\u4e0b\uff1a //com.tanhua.server.service.MyCenterService public UserInfoVo queryUserInfoByUserId ( Long userId ) { if ( ObjectUtil . isEmpty ( userId )) { //\u5982\u679c\u67e5\u8be2id\u4e3anull\uff0c\u5c31\u8868\u793a\u67e5\u8be2\u5f53\u524d\u7528\u6237\u4fe1\u606f userId = UserThreadLocal . get (). getId (); } //\u67e5\u8be2\u7528\u6237\u4fe1\u606f UserInfo userInfo = this . userInfoService . queryUserInfoByUserId ( userId ); if ( ObjectUtil . isEmpty ( userInfo )) { return null ; } UserInfoVo userInfoVo = BeanUtil . copyProperties ( userInfo , UserInfoVo . class , \"marriage\" ); userInfoVo . setGender ( userInfo . getSex (). getValue () == 1 ? \"man\" : \"women\" ); userInfoVo . setMarriage ( StrUtil . equals ( \"\u5df2\u5a5a\" , userInfo . getMarriage ()) ? 1 : 0 ); return userInfoVo ; }","title":"4.4.5\u3001bug\u4fee\u590d"},{"location":"tantan/day08/#42","text":"\u4e0a\u4f20\u5934\u50cf\u4f7f\u7528sso\u4e2d\u7684\u4e0a\u4f20\u903b\u8f91\u5373\u53ef\uff0c\u53ea\u662f\u8def\u5f84\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u4fee\u6539nginx\u914d\u7f6e\u548c\u5728sso\u4e2d\u5b9a\u4e49Controller\u5373\u53ef\u3002 \u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/881 #user nobody; worker_processes 1 ; #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; #pid logs/nginx.pid; events { worker_connections 1024 ; } http { include mime.types ; default_type application/octet-stream ; #log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' # '$status $body_bytes_sent \"$http_referer\" ' # '\"$http_user_agent\" \"$http_x_forwarded_for\"'; #access_log logs/access.log main; sendfile on ; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65 ; #gzip on; server { listen 80 ; server_name localhost ; #charset koi8-r; #access_log logs/host.access.log main; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html ; location = /50x.html { root html ; } location /user/ { #\u8bf7\u6c42\u8def\u5f84\u4e2d\u51e1\u662f\u4ee5/user/\u5f00\u5934\u7684\u8bf7\u6c42\uff0c\u8f6c\u53d1\u5230sso\u7cfb\u7edf client_max_body_size 300m ; #\u8bbe\u7f6e\u6700\u5927\u7684\u8bf7\u6c42\u4f53\u5927\u5c0f\uff0c\u89e3\u51b3\u5927\u6587\u4ef6\u4e0a\u4f20\u4e0d\u4e86\u7684\u95ee\u9898 proxy_connect_timeout 300s ; #\u4ee3\u7406\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4 proxy_send_timeout 300s ; #\u4ee3\u7406\u53d1\u9001\u6570\u636e\u7684\u8d85\u65f6\u65f6\u95f4 proxy_read_timeout 300s ; #\u4ee3\u7406\u8bfb\u53d6\u6570\u636e\u7684\u8d85\u65f6\u65f6\u95f4 proxy_pass http://127.0.0.1:18080 ; #\u8f6c\u53d1\u8bf7\u6c42 } location /users/header { #\u8bf7\u6c42\u8def\u5f84\u4e2d\u51e1\u662f\u4ee5/user/header\u5f00\u5934\u7684\u8bf7\u6c42\uff0c\u8f6c\u53d1\u5230sso\u7cfb\u7edf client_max_body_size 300m ; #\u8bbe\u7f6e\u6700\u5927\u7684\u8bf7\u6c42\u4f53\u5927\u5c0f\uff0c\u89e3\u51b3\u5927\u6587\u4ef6\u4e0a\u4f20\u4e0d\u4e86\u7684\u95ee\u9898 proxy_connect_timeout 300s ; #\u4ee3\u7406\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4 proxy_send_timeout 300s ; #\u4ee3\u7406\u53d1\u9001\u6570\u636e\u7684\u8d85\u65f6\u65f6\u95f4 proxy_read_timeout 300s ; #\u4ee3\u7406\u8bfb\u53d6\u6570\u636e\u7684\u8d85\u65f6\u65f6\u95f4 proxy_pass http://127.0.0.1:18080 ; #\u8f6c\u53d1\u8bf7\u6c42 } location / { #\u4e0a\u9762\u672a\u5339\u914d\u5230\u7684\u5728\u8fd9\u91cc\u5904\u7406 client_max_body_size 300m ; proxy_connect_timeout 300s ; proxy_send_timeout 300s ; proxy_read_timeout 300s ; proxy_pass http://127.0.0.1:18081 ; #\u8f6c\u53d1\u8bf7\u6c42\u5230server\u7cfb\u7edf } } }","title":"4.2\u3001\u66f4\u65b0\u5934\u50cf"},{"location":"tantan/day08/#422mycentercontroller","text":"\u5728sso\u5de5\u7a0b\u4e2d\u5b9a\u4e49MyCenterController\u3002 package com.tanhua.sso.controller ; import com.tanhua.sso.vo.ErrorResult ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.* ; import org.springframework.web.multipart.MultipartFile ; @RestController @RequestMapping ( \"users\" ) public class MyCenterController { @Autowired private UserInfoController userInfoController ; /** * \u4e0a\u4f20\u5934\u50cf * * @param file * @param token * @return */ @PostMapping ( \"header\" ) public ResponseEntity < Object > saveLogo ( @RequestParam ( \"headPhoto\" ) MultipartFile file , @RequestHeader ( \"Authorization\" ) String token ) { return this . userInfoController . saveUserLogo ( file , token ); } }","title":"4.2.2\u3001MyCenterController"},{"location":"tantan/day08/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/","text":"\u72ec\u7acb\u5b9e\u73b0\u4e0a\u62a5\u5730\u7406\u4f4d\u7f6e\u7684\u529f\u80fd \u7406\u89e3\u641c\u9644\u8fd1\u7684\u529f\u80fd \u72ec\u7acb\u5b9e\u73b0\u641c\u9644\u8fd1\u7684\u529f\u80fd \u7406\u89e3\u63a2\u82b1\u529f\u80fd \u72ec\u7acb\u5b8c\u6210\u559c\u6b22\u7684dubbo\u670d\u52a1 \u72ec\u7acb\u5b8c\u6210\u67e5\u8be2\u63a8\u8350\u5217\u8868\u7684dubbo\u670d\u52a1 \u80fd\u591f\u6574\u5408APP\u5b8c\u6210\u63a2\u82b1\u529f\u80fd \u72ec\u7acb\u5b8c\u6210\u7528\u6237\u8d44\u6599\u7ef4\u62a4\u66f4\u65b0\u7684\u529f\u80fd","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"tantan/day09/","text":"\u8bfe\u7a0b\u8bf4\u660e \u00b6 \u5b9e\u73b0\u6211\u7684\u559c\u6b22\u529f\u80fd \u5b9e\u73b0\u7528\u6237\u901a\u7528\u8bbe\u7f6e \u5b9e\u73b0\u9ed1\u540d\u5355\u529f\u80fd \u5b9e\u73b0\u4fee\u6539\u624b\u673a\u53f7\u529f\u80fd 1\u3001\u6211\u7684\u559c\u6b22\u7edf\u8ba1\u6570 \u00b6 \u5728\u6211\u7684\u6a21\u5757\u4e2d\uff0c\u5c06\u8be6\u7ec6\u5c55\u73b0\u201c\u559c\u6b22\u201d\u76f8\u5173\u7684\u6570\u636e\uff0c\u5982\u4e0b\uff1a 1.1\u3001\u6982\u5ff5\u8bf4\u660e \u00b6 \u559c\u6b22 \u6211\u559c\u6b22\u522b\u4eba\uff0c\u5982\uff1a\u5f20\u4e09\u559c\u6b22\u674e\u56db\uff0c\u5c31\u662f\u559c\u6b22\u7684\u6570\u636e\uff0c\u5e76\u4e0d\u4ee3\u8868\u674e\u56db\u4e5f\u559c\u6b22\u5f20\u4e09\u3002 \u7c89\u4e1d \u5bf9\u4e8e\u674e\u56db\u800c\u8a00\uff0c\u5f20\u4e09\u5c31\u662f\u4ed6\u7684\u7c89\u4e1d\u3002 \u76f8\u4e92\u5173\u6ce8\uff08\u559c\u6b22\uff09 \u5982\u679c\u674e\u56db\u4e5f\u559c\u6b22\u5f20\u4e09\uff0c\u90a3\u4e48\uff0c\u5f20\u4e09\u548c\u674e\u56db\u5c31\u662f\u76f8\u4e92\u559c\u6b22\u3002 1.2\u3001dubbo\u670d\u52a1 \u00b6 1.2.1\u3001UserLikeApi \u00b6 //com.tanhua.dubbo.server.api.UserLikeApi /** * \u76f8\u4e92\u559c\u6b22\u7684\u6570\u91cf * * @return */ Long queryMutualLikeCount ( Long userId ); /** * \u559c\u6b22\u6570 * * @return */ Long queryLikeCount ( Long userId ); /** * \u7c89\u4e1d\u6570 * * @return */ Long queryFanCount ( Long userId ); 1.2.2\u3001UserLikeApiImpl \u00b6 //com.tanhua.dubbo.server.api.UserLikeApiImpl /** * \u67e5\u8be2\u76f8\u4e92\u559c\u6b22\u6570 * \u5b9e\u73b02\u79cd\u65b9\u5f0f\uff1a\u7b2c\u4e00\u79cd\uff1a\u67e5\u8be2redis\uff0c\u7b2c\u4e8c\u79cd\uff1a\u67e5\u8be2MongoDB * \u5efa\u8bae\uff1a\u4f18\u5148\u4f7f\u7528redis\u67e5\u8be2\uff0c\u5176\u6b21\u8003\u8651\u4f7f\u7528Mongodb * * @param userId * @return */ @Override public Long queryMutualLikeCount ( Long userId ) { //\u67e5\u8be2\u6211\u7684\u559c\u6b22\u5217\u8868 List < Long > likeUserIdList = this . queryLikeList ( userId ); Long count = 0 L ; for ( Long likeUserId : likeUserIdList ) { String redisKey = this . getLikeRedisKey ( likeUserId ); String hashKey = String . valueOf ( userId ); //\u201c\u522b\u4eba\u201d \u7684\u559c\u6b22\u5217\u8868\u4e2d\u662f\u5426\u6709 \u201c\u6211\u201d if ( this . redisTemplate . opsForHash (). hasKey ( redisKey , hashKey )) { count ++ ; } } return count ; } @Override public Long queryLikeCount ( Long userId ) { String redisKey = this . getLikeRedisKey ( userId ); return this . redisTemplate . opsForHash (). size ( redisKey ); } @Override public Long queryFanCount ( Long userId ) { //\u65e0\u6cd5\u901a\u8fc7redis\u67e5\u8be2\u5b8c\u6210\uff0c\u5fc5\u987b\u4eceMongodb\u4e2d\u67e5\u8be2 Query query = Query . query ( Criteria . where ( \"likeUserId\" ). is ( userId )); return this . mongoTemplate . count ( query , UserLike . class ); } 1.2.3\u3001\u5355\u5143\u6d4b\u8bd5 \u00b6 package com.tanhua.dubbo.server.api ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner ; @RunWith ( SpringJUnit4ClassRunner . class ) @SpringBootTest public class TestUserLikeApiImpl { @Autowired private UserLikeApi userLikeApi ; @Test public void testQueryCounts (){ System . out . println ( this . userLikeApi . queryEachLikeCount ( 1L )); System . out . println ( this . userLikeApi . queryFanCount ( 1L )); System . out . println ( this . userLikeApi . queryLikeCount ( 1L )); } } 1.3\u3001APP\u63a5\u53e3\u670d\u52a1 \u00b6 \u6587\u6863\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/899 1.3.1\u3001CountsVo \u00b6 package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class CountsVo { private Long eachLoveCount ; //\u4e92\u76f8\u559c\u6b22 private Long loveCount ; //\u559c\u6b22 private Long fanCount ; //\u7c89\u4e1d } 1.3.2\u3001UsersController \u00b6 //com.tanhua.server.controller.MyCenterController /** * \u4e92\u76f8\u559c\u6b22\uff0c\u559c\u6b22\uff0c\u7c89\u4e1d - \u7edf\u8ba1 * * @return */ @GetMapping ( \"counts\" ) public ResponseEntity < CountsVo > queryCounts (){ try { CountsVo countsVo = this . myCenterService . queryCounts (); if ( null != countsVo ){ return ResponseEntity . ok ( countsVo ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 1.3.3\u3001UsersService \u00b6 //com.tanhua.server.service.MyCenterService public CountsVo queryCounts () { User user = UserThreadLocal . get (); CountsVo countsVo = new CountsVo (); countsVo . setEachLoveCount ( this . userLikeApi . queryMutualLikeCount ( user . getId ())); countsVo . setFanCount ( this . userLikeApi . queryFanCount ( user . getId ())); countsVo . setLoveCount ( this . userLikeApi . queryLikeCount ( user . getId ())); return countsVo ; } 1.3.4\u3001\u6d4b\u8bd5 \u00b6 2\u3001\u559c\u6b22\u5217\u8868 \u00b6 \u63a5\u53e3\u670d\u52a1\uff1ahttps://mock-java.itheima.net/project/35/interface/api/905 \u8be5\u63a5\u53e3\u96c6\u6210\u4e864\u4e2a\u63a5\u53e3\uff0c\u7528type\u505a\u4e86\u533a\u5206\uff1a 1 \u4e92\u76f8\u5173\u6ce8 2 \u6211\u5173\u6ce8 3 \u7c89\u4e1d 4 \u8c01\u770b\u8fc7\u6211 2.1\u3001\u559c\u6b22dubbo\u63a5\u53e3\u670d\u52a1 \u00b6 2.1.1\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 \u5728dubbo\u63a5\u53e3\u4e2d\u5b9a\u4e49\u65b9\u6cd5\uff1a //com.tanhua.dubbo.server.api.UserLikeApi /** * \u67e5\u8be2\u76f8\u4e92\u559c\u6b22\u5217\u8868 * * @param userId * @param page * @param pageSize * @return */ PageInfo < UserLike > queryMutualLikeList ( Long userId , Integer page , Integer pageSize ); /** * \u67e5\u8be2\u6211\u559c\u6b22\u7684\u5217\u8868 * * @param userId * @param page * @param pageSize * @return */ PageInfo < UserLike > queryLikeList ( Long userId , Integer page , Integer pageSize ); /** * \u67e5\u8be2\u7c89\u4e1d\u5217\u8868 * * @param userId * @param page * @param pageSize * @return */ PageInfo < UserLike > queryFanList ( Long userId , Integer page , Integer pageSize ); 2.1.2\u3001\u5b9e\u73b0\u63a5\u53e3 \u00b6 //com.tanhua.dubbo.server.api.UserLikeApiImpl @Override public PageInfo < UserLike > queryMutualLikeList ( Long userId , Integer page , Integer pageSize ) { //\u67e5\u8be2\u6211\u7684\u559c\u6b22\u5217\u8868 List < Long > userLikeIdList = this . queryLikeList ( userId ); //\u67e5\u8be2\u559c\u6b22\u6211\u7684\u4eba Query query = Query . query ( Criteria . where ( \"userId\" ). in ( userLikeIdList ) . and ( \"likeUserId\" ). is ( userId ) ); return this . queryList ( query , page , pageSize ); } @Override public PageInfo < UserLike > queryLikeList ( Long userId , Integer page , Integer pageSize ) { Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId )); return this . queryList ( query , page , pageSize ); } @Override public PageInfo < UserLike > queryFanList ( Long userId , Integer page , Integer pageSize ) { Query query = Query . query ( Criteria . where ( \"likeUserId\" ). is ( userId )); return this . queryList ( query , page , pageSize ); } private PageInfo < UserLike > queryList ( Query query , Integer page , Integer pageSize ) { //\u8bbe\u7f6e\u5206\u9875 PageRequest pageRequest = PageRequest . of ( page - 1 , pageSize , Sort . by ( Sort . Order . desc ( \"created\" ))); query . with ( pageRequest ); List < UserLike > userLikeList = this . mongoTemplate . find ( query , UserLike . class ); PageInfo < UserLike > pageInfo = new PageInfo <> (); pageInfo . setPageNum ( page ); pageInfo . setPageSize ( pageSize ); pageInfo . setRecords ( userLikeList ); return pageInfo ; } 2.2\u3001\u6700\u8fd1\u8bbf\u5ba2dubbo\u670d\u52a1 \u00b6 2.2.1\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 //com.tanhua.dubbo.server.api.VisitorsApi /** * \u6309\u7167\u65f6\u95f4\u5012\u5e8f\u6392\u5e8f\uff0c\u67e5\u8be2\u6700\u8fd1\u7684\u8bbf\u5ba2\u4fe1\u606f * * @param userId * @param page * @param pageSize * @return */ PageInfo < Visitors > topVisitor ( Long userId , Integer page , Integer pageSize ); 2.2.2\u3001\u7f16\u5199\u5b9e\u73b0 \u00b6 //com.tanhua.dubbo.server.api.VisitorsApiImpl @Override public List < Visitors > queryMyVisitor ( Long userId ) { // \u67e5\u8be2\u524d5\u4e2a\u8bbf\u5ba2\u6570\u636e\uff0c\u6309\u7167\u8bbf\u95ee\u65f6\u95f4\u5012\u5e8f\u6392\u5e8f // \u5982\u679c\u7528\u6237\u5df2\u7ecf\u67e5\u8be2\u8fc7\u5217\u8868\uff0c\u8bb0\u5f55\u67e5\u8be2\u65f6\u95f4\uff0c\u540e\u7eed\u67e5\u8be2\u9700\u8981\u6309\u7167\u8fd9\u4e2a\u65f6\u95f4\u5f80\u540e\u67e5\u8be2 // \u4e0a\u4e00\u6b21\u67e5\u8be2\u5217\u8868\u7684\u65f6\u95f4 Long date = Convert . toLong ( this . redisTemplate . opsForHash (). get ( VISITOR_REDIS_KEY , String . valueOf ( userId ))); PageRequest pageRequest = PageRequest . of ( 0 , 5 , Sort . by ( Sort . Order . desc ( \"date\" ))); Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId )) . with ( pageRequest ); if ( ObjectUtil . isNotEmpty ( date )) { query . addCriteria ( Criteria . where ( \"date\" ). gte ( date )); } return this . queryList ( query , userId ); } private List < Visitors > queryList ( Query query , Long userId ){ List < Visitors > visitorsList = this . mongoTemplate . find ( query , Visitors . class ); //\u67e5\u8be2\u6bcf\u4e2a\u6765\u8bbf\u7528\u6237\u7684\u5f97\u5206 for ( Visitors visitors : visitorsList ) { Query queryScore = Query . query ( Criteria . where ( \"toUserId\" ) . is ( userId ). and ( \"userId\" ). is ( visitors . getVisitorUserId ()) ); RecommendUser recommendUser = this . mongoTemplate . findOne ( queryScore , RecommendUser . class ); if ( ObjectUtil . isNotEmpty ( recommendUser )){ visitors . setScore ( recommendUser . getScore ()); } else { //\u9ed8\u8ba4\u5f97\u5206 visitors . setScore ( 90 d ); } } return visitorsList ; } @Override public PageInfo < Visitors > topVisitor ( Long userId , Integer page , Integer pageSize ) { PageRequest pageRequest = PageRequest . of ( page - 1 , pageSize , Sort . by ( Sort . Order . desc ( \"date\" ))); Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId )). with ( pageRequest ); List < Visitors > visitorsList = this . queryList ( query , userId ); PageInfo < Visitors > pageInfo = new PageInfo <> (); pageInfo . setPageNum ( page ); pageInfo . setPageSize ( pageSize ); pageInfo . setRecords ( visitorsList ); //\u8bb0\u5f55\u5f53\u524d\u7684\u65f6\u95f4\u5230redis\u4e2d\uff0c\u5728\u9996\u9875\u67e5\u8be2\u65f6\uff0c\u5c31\u53ef\u4ee5\u5728\u8fd9\u4e2a\u65f6\u95f4\u4e4b\u540e\u67e5\u8be2\u4e86 String redisKey = VISITOR_REDIS_KEY ; String hashKey = String . valueOf ( userId ); String value = String . valueOf ( System . currentTimeMillis ()); this . redisTemplate . opsForHash (). put ( redisKey , hashKey , value ); return pageInfo ; } 2.3\u3001APP\u63a5\u53e3\u670d\u52a1 \u00b6 \u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/905 2.3.1\u3001UserLikeListVo \u00b6 package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class UserLikeListVo { private Long id ; private String avatar ; private String nickname ; private String gender ; private Integer age ; private String city ; private String education ; private Integer marriage ; //\u5a5a\u59fb\u72b6\u6001\uff080\u672a\u5a5a\uff0c1\u5df2\u5a5a\uff09 private Integer matchRate ; //\u5339\u914d\u5ea6 private Boolean alreadyLove ; //\u662f\u5426\u559c\u6b22ta } 2.3.2\u3001MyCenterController \u00b6 //com.tanhua.server.controller.MyCenterController /** * \u4e92\u76f8\u5173\u6ce8\u3001\u6211\u5173\u6ce8\u3001\u7c89\u4e1d\u3001\u8c01\u770b\u8fc7\u6211 - \u7ffb\u9875\u5217\u8868 * * @param type 1 \u4e92\u76f8\u5173\u6ce8 2 \u6211\u5173\u6ce8 3 \u7c89\u4e1d 4 \u8c01\u770b\u8fc7\u6211 * @param page * @param pageSize * @param nickname * @return */ @GetMapping ( \"friends/{type}\" ) public ResponseEntity < PageResult > queryLikeList ( @PathVariable ( \"type\" ) String type , @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize , @RequestParam ( value = \"nickname\" , required = false ) String nickname ) { try { page = Math . max ( 1 , page ); PageResult pageResult = this . myCenterService . queryLikeList ( Integer . valueOf ( type ), page , pageSize , nickname ); return ResponseEntity . ok ( pageResult ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 2.3.3\u3001MyCenterService \u00b6 //com.tanhua.server.service.MyCenterService public PageResult queryLikeList ( Integer type , Integer page , Integer pageSize , String nickname ) { PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); Long userId = UserThreadLocal . get (). getId (); List < Object > userIdList = null ; //1 \u4e92\u76f8\u5173\u6ce8 2 \u6211\u5173\u6ce8 3 \u7c89\u4e1d 4 \u8c01\u770b\u8fc7\u6211 switch ( type ){ case 1 :{ PageInfo < UserLike > pageInfo = this . userLikeApi . queryMutualLikeList ( userId , page , pageSize ); userIdList = CollUtil . getFieldValues ( pageInfo . getRecords (), \"userId\" ); break ; } case 2 :{ PageInfo < UserLike > pageInfo = this . userLikeApi . queryLikeList ( userId , page , pageSize ); userIdList = CollUtil . getFieldValues ( pageInfo . getRecords (), \"likeUserId\" ); break ; } case 3 :{ PageInfo < UserLike > pageInfo = this . userLikeApi . queryFanList ( userId , page , pageSize ); userIdList = CollUtil . getFieldValues ( pageInfo . getRecords (), \"userId\" ); break ; } case 4 :{ PageInfo < Visitors > pageInfo = this . visitorsApi . topVisitor ( userId , page , pageSize ); userIdList = CollUtil . getFieldValues ( pageInfo . getRecords (), \"visitorUserId\" ); break ; } default : return pageResult ; } if ( CollUtil . isEmpty ( userIdList )){ return pageResult ; } QueryWrapper < UserInfo > queryWrapper = new QueryWrapper <> (); queryWrapper . in ( \"user_id\" , userIdList ); if ( StrUtil . isNotEmpty ( nickname )){ queryWrapper . like ( \"nick_name\" , nickname ); } List < UserInfo > userInfoList = this . userInfoService . queryUserInfoList ( queryWrapper ); List < UserLikeListVo > userLikeListVos = new ArrayList <> (); for ( UserInfo userInfo : userInfoList ) { UserLikeListVo userLikeListVo = new UserLikeListVo (); userLikeListVo . setAge ( userInfo . getAge ()); userLikeListVo . setAvatar ( userInfo . getLogo ()); userLikeListVo . setCity ( userInfo . getCity ()); userLikeListVo . setEducation ( userInfo . getEdu ()); userLikeListVo . setGender ( userInfo . getSex (). name (). toLowerCase ()); userLikeListVo . setId ( userInfo . getUserId ()); userLikeListVo . setMarriage ( StringUtils . equals ( userInfo . getMarriage (), \"\u5df2\u5a5a\" ) ? 1 : 0 ); userLikeListVo . setNickname ( userInfo . getNickName ()); //\u662f\u5426\u559c\u6b22 userLikeApi\u4e2d\u7684isLike\u5f00\u653e\u51fa\u6765 userLikeListVo . setAlreadyLove ( this . userLikeApi . isLike ( userId , userInfo . getUserId ())); Double score = this . recommendUserService . queryScore ( userId , userInfo . getUserId ()); userLikeListVo . setMatchRate ( Convert . toInt ( score )); userLikeListVos . add ( userLikeListVo ); } pageResult . setItems ( userLikeListVos ); return pageResult ; } 2.3.4\u3001\u6d4b\u8bd5 \u00b6 2.4\u3001\u53d6\u6d88\u559c\u6b22 \u00b6 \u5728\u5217\u8868\u4e2d\u53ef\u4ee5\u8fdb\u884c\u201c\u53d6\u6d88\u559c\u6b22\u201d\u64cd\u4f5c\u3002 \u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/923 2.4.1\u3001MyCenterController \u00b6 //com.tanhua.server.controller.MyCenterController /** * \u53d6\u6d88\u559c\u6b22 * * @param userId * @return */ @DeleteMapping ( \"like/{uid}\" ) public ResponseEntity < Void > disLike ( @PathVariable ( \"uid\" ) Long userId ) { try { this . myCenterService . disLike ( userId ); return ResponseEntity . ok ( null ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 2.4.2\u3001MyCenterService \u00b6 //com.tanhua.server.service.MyCenterService /** * \u53d6\u6d88\u559c\u6b22 * * @param userId */ public void disLike ( Long userId ) { //\u5224\u65ad\u5f53\u524d\u7528\u6237\u4e0e\u6b64\u7528\u6237\u662f\u5426\u76f8\u4e92\u559c\u6b22 User user = UserThreadLocal . get (); Boolean mutualLike = this . userLikeApi . isMutualLike ( user . getId (), userId ); //\u53d6\u6d88\u559c\u6b22 this . userLikeApi . notLikeUser ( user . getId (), userId ); if ( mutualLike ){ //\u53d6\u6d88\u597d\u53cb\u5173\u7cfb\uff0c\u89e3\u9664\u5728\u73af\u4fe1\u5e73\u53f0\u7684\u597d\u53cb\u5173\u7cfb this . imService . removeUser ( userId ); } } 2.4.3\u3001IMService \u00b6 //com.tanhua.server.service.IMService /** * \u5220\u9664\u597d\u53cb * * @param userId \u597d\u53cbid */ public void removeUser ( Long userId ) { //\u5220\u9664\u597d\u53cb\u5173\u7cfb User user = UserThreadLocal . get (); Boolean result = this . usersApi . removeUsers ( user . getId (), userId ); if ( result ){ //\u5c06\u73af\u4fe1\u5e73\u53f0\u7684\u597d\u53cb\u5173\u7cfb\u89e3\u9664 this . huanXinApi . removeUserFriend ( user . getId (), userId ); } } 2.4.4\u3001\u6d4b\u8bd5 \u00b6 \u6d4b\u8bd5\u65f6\uff0c\u9700\u8981\u5c06MongoDB\u4e2d\u7684user_like\u8868\u6570\u636e\u6e05\u7a7a\u4ee5\u53ca\u5c06Redis\u4e2d\u559c\u6b22\u548c\u4e0d\u559c\u6b22\u6570\u636e\u5220\u9664\u3002 \u4f7f\u7528\u7528\u62372\u8fdb\u884c\u6d4b\u8bd5\uff0c\u73b0\u5728\u548c\u7528\u62371\u662f\u597d\u53cb\uff1a \u53d6\u6d88\u559c\u6b22\uff1a 2.5\u3001 \u559c\u6b22\u7c89\u4e1d \u00b6 \u5728\u67e5\u770b\u7c89\u4e1d\u5217\u8868\u4e2d\uff0c\u53ef\u4ee5\u5bf9\u7c89\u4e1d\u8fdb\u884c\u201c\u559c\u6b22\u64cd\u4f5c\u201d\u3002 \u6587\u6863\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/917 2.5.1\u3001MyCenterController \u00b6 //com.tanhua.server.controller.MyCenterController /** * \u5173\u6ce8\u7c89\u4e1d * * @param userId * @return */ @PostMapping ( \"fans/{uid}\" ) public ResponseEntity < Void > likeFan ( @PathVariable ( \"uid\" ) Long userId ){ try { this . myCenterService . likeFan ( userId ); return ResponseEntity . ok ( null ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 2.5.2\u3001MyCenterService \u00b6 //com.tanhua.server.service.MyCenterService @Autowired private TanHuaService tanHuaService ; /** * \u559c\u6b22 * * @param userId */ public void likeFan ( Long userId ) { //\u559c\u6b22\u7528\u6237\uff0c\u5982\u679c\u7528\u6237\u662f\u76f8\u4e92\u559c\u6b22\u7684\u8bdd\u5c31\u4f1a\u6210\u4e3a\u597d\u53cb this . tanHuaService . likeUser ( userId ); } 2.5.3\u3001\u6d4b\u8bd5 \u00b6 3\u3001\u7528\u6237\u901a\u7528\u8bbe\u7f6e \u00b6 3.1\u3001\u8868\u7ed3\u6784 \u00b6 CREATE TABLE ` tb_settings ` ( ` id ` bigint ( 20 ) NOT NULL AUTO_INCREMENT , ` user_id ` bigint ( 20 ) DEFAULT NULL , ` like_notification ` tinyint ( 4 ) DEFAULT '1' COMMENT '\u63a8\u9001\u559c\u6b22\u901a\u77e5' , ` pinglun_notification ` tinyint ( 4 ) DEFAULT '1' COMMENT '\u63a8\u9001\u8bc4\u8bba\u901a\u77e5' , ` gonggao_notification ` tinyint ( 4 ) DEFAULT '1' COMMENT '\u63a8\u9001\u516c\u544a\u901a\u77e5' , ` created ` datetime DEFAULT NULL , ` updated ` datetime DEFAULT NULL , PRIMARY KEY ( ` id ` ) ) ENGINE = InnoDB DEFAULT CHARSET = utf8 COMMENT = '\u8bbe\u7f6e\u8868' ; 3.2\u3001pojo \u00b6 my-tanhua-common\u5de5\u7a0b\uff1a package com.tanhua.common.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class Settings extends BasePojo { private Long id ; private Long userId ; private Boolean likeNotification = true ; private Boolean pinglunNotification = true ; private Boolean gonggaoNotification = true ; } 3.3\u3001SettingsMapper \u00b6 package com.tanhua.common.mapper ; import com.baomidou.mybatisplus.core.mapper.BaseMapper ; import com.tanhua.common.pojo.Settings ; public interface SettingsMapper extends BaseMapper < Settings > { } 3.4\u3001SettingsService \u00b6 package com.tanhua.server.service ; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper ; import com.tanhua.common.mapper.SettingsMapper ; import com.tanhua.common.pojo.Settings ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; @Service public class SettingsService { @Autowired private SettingsMapper settingsMapper ; /** * \u6839\u636e\u7528\u6237id\u67e5\u8be2\u914d\u7f6e * * @param userId * @return */ public Settings querySettings ( Long userId ) { QueryWrapper < Settings > queryWrapper = new QueryWrapper <> (); queryWrapper . eq ( \"user_id\" , userId ); return this . settingsMapper . selectOne ( queryWrapper ); } } 3.5\u3001\u67e5\u8be2\u914d\u7f6e \u00b6 \u6587\u6863\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/893 3.5.1\u3001SettingsVo \u00b6 package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class SettingsVo { private Long id ; //\u964c\u751f\u4eba\u95ee\u9898 private String strangerQuestion = \"\" ; //\u624b\u673a\u53f7 private String phone ; //\u63a8\u9001\u559c\u6b22\u901a\u77e5 private Boolean likeNotification = true ; //\u63a8\u9001\u8bc4\u8bba\u901a\u77e5 private Boolean pinglunNotification = true ; //\u63a8\u9001\u516c\u544a\u901a\u77e5 private Boolean gonggaoNotification = true ; } 3.5.2\u3001MyCenterController \u00b6 //com.tanhua.server.controller.MyCenterController /** * \u67e5\u8be2\u914d\u7f6e * * @return */ @GetMapping ( \"settings\" ) public ResponseEntity < SettingsVo > querySettings () { try { SettingsVo settingsVo = this . myCenterService . querySettings (); if ( null != settingsVo ) { return ResponseEntity . ok ( settingsVo ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 3.5.3\u3001MyCenterService \u00b6 //com.tanhua.server.service.MyCenterService public SettingsVo querySettings () { SettingsVo settingsVo = new SettingsVo (); User user = UserThreadLocal . get (); //\u8bbe\u7f6e\u7528\u6237\u7684\u57fa\u672c\u4fe1\u606f settingsVo . setId ( user . getId ()); settingsVo . setPhone ( user . getMobile ()); //\u67e5\u8be2\u7528\u6237\u7684\u914d\u7f6e\u6570\u636e Settings settings = this . settingsService . querySettings ( user . getId ()); if ( ObjectUtil . isNotEmpty ( settings )){ settingsVo . setGonggaoNotification ( settings . getGonggaoNotification ()); settingsVo . setLikeNotification ( settings . getLikeNotification ()); settingsVo . setPinglunNotification ( settings . getPinglunNotification ()); } //\u67e5\u8be2\u964c\u751f\u4eba\u95ee\u9898 settingsVo . setStrangerQuestion ( this . tanHuaService . queryQuestion ( user . getId ())); return settingsVo ; } 2.5.4\u3001\u6d4b\u8bd5 \u00b6 3.6\u3001\u4fdd\u5b58\u964c\u751f\u4eba\u95ee\u9898 \u00b6 \u6587\u6863\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/929 3.6.1\u3001MyCenterController \u00b6 //com.tanhua.server.controller.MyCenterController /** * \u8bbe\u7f6e\u964c\u751f\u4eba\u95ee\u9898 * * @return */ @PostMapping ( \"questions\" ) public ResponseEntity < Void > saveQuestions ( @RequestBody Map < String , String > param ) { try { String content = param . get ( \"content\" ); this . myCenterService . saveQuestions ( content ); return ResponseEntity . ok ( null ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 3.6.2\u3001MyCenterService \u00b6 //com.tanhua.server.service.MyCenterService public void saveQuestions ( String content ) { User user = UserThreadLocal . get (); this . questionService . save ( user . getId (), content ); } 3.6.3\u3001QuestionService \u00b6 //com.tanhua.server.service.QuestionService public void save ( Long userId , String content ) { Question question = this . queryQuestion ( userId ); if ( null != question ){ question . setTxt ( content ); this . questionMapper . updateById ( question ); } else { question = new Question (); question . setUserId ( userId ); question . setTxt ( content ); question . setCreated ( new Date ()); question . setUpdated ( question . getCreated ()); this . questionMapper . insert ( question ); } } 3.7\u3001\u9ed1\u540d\u5355\u5217\u8868 \u00b6 \u9ed1\u540d\u5355\u529f\u80fd\u53ef\u4ee5\u7528\u5728\u964c\u751f\u4eba\u6253\u62db\u547c\u65f6\uff0c\u8fdb\u884c\u5224\u65ad\uff0c\u5982\u679c\u662f\u9ed1\u540d\u5355\u7684\u5219\u4e0d\u80fd\u6253\u62db\u547c\u3002 \u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/935 3.7.1\u3001\u8868\u7ed3\u6784 \u00b6 CREATE TABLE ` tb_black_list ` ( ` id ` bigint ( 20 ) NOT NULL AUTO_INCREMENT , ` user_id ` bigint ( 20 ) DEFAULT NULL , ` black_user_id ` bigint ( 20 ) DEFAULT NULL , ` created ` datetime DEFAULT NULL , ` updated ` datetime DEFAULT NULL , PRIMARY KEY ( ` id ` ), KEY ` user_id ` ( ` user_id ` ) ) ENGINE = InnoDB DEFAULT CHARSET = utf8 COMMENT = '\u9ed1\u540d\u5355' ; --\u6d4b\u8bd5\u6570\u636e INSERT INTO ` tb_black_list ` ( ` id ` , ` user_id ` , ` black_user_id ` , ` created ` , ` updated ` ) VALUES ( '1' , '1' , '22' , '2019-11-01 15:47:22' , '2019-11-01 15:47:24' ); INSERT INTO ` tb_black_list ` ( ` id ` , ` user_id ` , ` black_user_id ` , ` created ` , ` updated ` ) VALUES ( '2' , '1' , '23' , '2019-11-01 15:47:39' , '2019-11-01 15:47:42' ); INSERT INTO ` tb_black_list ` ( ` id ` , ` user_id ` , ` black_user_id ` , ` created ` , ` updated ` ) VALUES ( '3' , '1' , '24' , '2019-11-01 15:47:51' , '2019-11-01 15:47:56' ); 3.7.2\u3001pojo \u00b6 package com.tanhua.common.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class BlackList extends BasePojo { private Long id ; private Long userId ; private Long blackUserId ; } 3.7.3\u3001BlackListMapper \u00b6 package com.tanhua.common.mapper ; import com.baomidou.mybatisplus.core.mapper.BaseMapper ; import com.tanhua.common.pojo.BlackList ; public interface BlackListMapper extends BaseMapper < BlackList > { } 3.7.4\u3001BlackListService \u00b6 package com.tanhua.server.service ; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper ; import com.baomidou.mybatisplus.core.metadata.IPage ; import com.baomidou.mybatisplus.extension.plugins.pagination.Page ; import com.tanhua.common.mapper.BlackListMapper ; import com.tanhua.common.pojo.BlackList ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; @Service public class BlackListService { @Autowired private BlackListMapper blackListMapper ; public IPage < BlackList > queryBlacklist ( Long userId , Integer page , Integer pageSize ) { QueryWrapper < BlackList > wrapper = new QueryWrapper < BlackList > (); wrapper . eq ( \"user_id\" , userId ); wrapper . orderByDesc ( \"created\" ); Page < BlackList > pager = new Page <> ( page , pageSize ); return this . blackListMapper . selectPage ( pager , wrapper ); } } \u914d\u7f6e\u5206\u9875\u63d2\u4ef6\uff1a package com.tanhua.server.config ; import com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor ; import org.springframework.context.annotation.Bean ; import org.springframework.context.annotation.Configuration ; @Configuration public class MybatisPlusConfig { /** * \u5206\u9875\u63d2\u4ef6 */ @Bean public PaginationInterceptor paginationInterceptor () { return new PaginationInterceptor (); } } 3.7.5\u3001BlackListVo \u00b6 package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @AllArgsConstructor @NoArgsConstructor public class BlackListVo { private Long id ; private String avatar ; private String nickname ; private String gender ; private Integer age ; } 3.7.6\u3001MyCenterController \u00b6 //com.tanhua.server.controller.MyCenterController /** * \u67e5\u8be2\u9ed1\u540d\u5355 * * @param page * @param pagesize * @return */ @GetMapping ( \"blacklist\" ) public ResponseEntity < PageResult > queryBlacklist ( @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pagesize ) { try { PageResult pageResult = this . myCenterService . queryBlacklist ( page , pagesize ); return ResponseEntity . ok ( pageResult ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 3.7.7\u3001MyCenterService \u00b6 //com.tanhua.server.service.MyCenterService public PageResult queryBlacklist ( Integer page , Integer pageSize ) { User user = UserThreadLocal . get (); IPage < BlackList > blackListIPage = this . blackListService . queryBlacklist ( user . getId (), page , pageSize ); PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); pageResult . setCounts ( Convert . toInt ( blackListIPage . getTotal ())); pageResult . setPages ( Convert . toInt ( blackListIPage . getPages ())); List < BlackList > records = blackListIPage . getRecords (); if ( CollUtil . isEmpty ( records )){ return pageResult ; } List < Object > userIds = CollUtil . getFieldValues ( records , \"blackUserId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIds ); List < BlackListVo > blackListVos = new ArrayList <> (); for ( UserInfo userInfo : userInfoList ) { BlackListVo blackListVo = new BlackListVo (); blackListVo . setAge ( userInfo . getAge ()); blackListVo . setAvatar ( userInfo . getLogo ()); blackListVo . setGender ( userInfo . getSex (). name (). toLowerCase ()); blackListVo . setId ( userInfo . getUserId ()); blackListVo . setNickname ( userInfo . getNickName ()); blackListVos . add ( blackListVo ); } pageResult . setItems ( blackListVos ); return pageResult ; } 3.7.8\u3001\u6d4b\u8bd5 \u00b6 3.8\u3001\u79fb\u9664\u9ed1\u540d\u5355 \u00b6 \u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/941 3.8.1\u3001MyCenterController \u00b6 /** * \u79fb\u9664\u9ed1\u540d\u5355 * * @return */ @DeleteMapping ( \"blacklist/{uid}\" ) public ResponseEntity < Void > delBlacklist ( @PathVariable ( \"uid\" ) Long userId ) { try { this . myCenterService . delBlacklist ( userId ); return ResponseEntity . ok ( null ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 3.8.2\u3001MyCenterService \u00b6 public void delBlacklist ( Long userId ) { User user = UserThreadLocal . get (); this . blackListService . delBlacklist ( user . getId (), userId ); } 3.8.3\u3001BlackListService \u00b6 public Boolean delBlacklist ( Long userId , Long blackUserId ) { QueryWrapper < BlackList > wrapper = new QueryWrapper < BlackList > (); wrapper . eq ( \"user_id\" , userId ). eq ( \"black_user_id\" , blackUserId ); return this . blackListMapper . delete ( wrapper ) > 0 ; } 3.9\u3001\u66f4\u65b0\u901a\u77e5 \u00b6 \u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/965 3.9.1\u3001MyCenterController \u00b6 //com.tanhua.server.controller.MyCenterController /** * \u66f4\u65b0\u901a\u77e5\u8bbe\u7f6e * * @param param * @return */ @PostMapping ( \"notifications/setting\" ) public ResponseEntity < Void > updateNotification ( @RequestBody Map < String , Boolean > param ) { try { Boolean likeNotification = param . get ( \"likeNotification\" ); Boolean pinglunNotification = param . get ( \"pinglunNotification\" ); Boolean gonggaoNotification = param . get ( \"gonggaoNotification\" ); this . usersService . updateNotification ( likeNotification , pinglunNotification , gonggaoNotification ); return ResponseEntity . ok ( null ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } 2.9.2\u3001MyCenterService \u00b6 //com.tanhua.server.service.MyCenterService public void updateNotification ( Boolean likeNotification , Boolean pinglunNotification , Boolean gonggaoNotification ) { User user = UserThreadLocal . get (); this . settingsService . updateNotification ( user . getId (), likeNotification , pinglunNotification , gonggaoNotification ); } 2.9.3\u3001SettingsService \u00b6 //com.tanhua.server.service.SettingsService public void updateNotification ( Long userId , Boolean likeNotification , Boolean pinglunNotification , Boolean gonggaoNotification ) { QueryWrapper < Settings > queryWrapper = new QueryWrapper <> (); queryWrapper . eq ( \"user_id\" , userId ); Settings settings = this . settingsMapper . selectOne ( queryWrapper ); if ( null == settings ){ //\u5982\u679c\u6ca1\u6709\u6570\u636e\u7684\u8bdd\uff0c\u63d2\u5165\u4e00\u6761\u6570\u636e settings = new Settings (); settings . setUserId ( userId ); this . settingsMapper . insert ( settings ); } else { //\u66f4\u65b0 settings . setLikeNotification ( likeNotification ); settings . setPinglunNotification ( pinglunNotification ); settings . setGonggaoNotification ( gonggaoNotification ); this . settingsMapper . update ( settings , queryWrapper ); } } 3.10\u3001\u66f4\u65b0\u624b\u673a\u53f7 \u00b6 \u66f4\u65b0\u624b\u673a\u53f7\u7684\u903b\u8f91\u5728sso\u7cfb\u7edf\u4e2d\u5b8c\u6210\uff0c\u5176\u6d41\u7a0b\u662f\uff1a\u65e7\u624b\u673a\u53f7\u83b7\u53d6\u9a8c\u8bc1\u7801\uff0c\u9a8c\u8bc1\u7801\u6821\u9a8c\u901a\u8fc7\u540e\uff0c\u8bbe\u7f6e\u65b0\u624b\u673a\u53f7\uff0c\u6700\u540e\u4fdd\u5b58\u65b0\u7684\u624b\u673a\u53f7\u3002 \u6b65\u9aa41\uff0c\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801\uff1ahttps://mock-java.itheima.net/project/35/interface/api/947 \u6b65\u9aa42\uff0c\u6821\u9a8c\u9a8c\u8bc1\u7801\uff1ahttps://mock-java.itheima.net/project/35/interface/api/953 \u6b65\u9aa43\uff0c\u4fdd\u5b58\u65b0\u624b\u673a\u53f7\uff1ahttps://mock-java.itheima.net/project/35/interface/api/959 \u914d\u7f6enginx\uff1a location /users/phone { #\u8bf7\u6c42\u8def\u5f84\u4e2d\u51e1\u662f\u4ee5/user/phone\u5f00\u5934\u7684\u8bf7\u6c42\uff0c\u8f6c\u53d1\u5230sso\u7cfb\u7edf client_max_body_size 300m ; #\u8bbe\u7f6e\u6700\u5927\u7684\u8bf7\u6c42\u4f53\u5927\u5c0f\uff0c\u89e3\u51b3\u5927\u6587\u4ef6\u4e0a\u4f20\u4e0d\u4e86\u7684\u95ee\u9898 proxy_connect_timeout 300s ; #\u4ee3\u7406\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4 proxy_send_timeout 300s ; #\u4ee3\u7406\u53d1\u9001\u6570\u636e\u7684\u8d85\u65f6\u65f6\u95f4 proxy_read_timeout 300s ; #\u4ee3\u7406\u8bfb\u53d6\u6570\u636e\u7684\u8d85\u65f6\u65f6\u95f4 proxy_pass http://127.0.0.1:18080 ; #\u8f6c\u53d1\u8bf7\u6c42 } 3.10.1\u3001 \u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801 \u00b6 MyCenterController: //com.tanhua.sso.controller.MyCenterController /** * \u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801 * * @return */ @PostMapping ( \"phone/sendVerificationCode\" ) public ResponseEntity < Void > sendVerificationCode ( @RequestHeader ( \"Authorization\" ) String token ) { try { boolean bool = this . myCenterService . sendVerificationCode ( token ); if ( bool ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } MyCenterService: //com.tanhua.sso.service.MyCenterService package com.tanhua.sso.service ; import com.tanhua.common.pojo.User ; import com.tanhua.sso.vo.ErrorResult ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; @Service public class MyCenterService { @Autowired private UserService userService ; @Autowired private SmsService smsService ; public Boolean sendVerificationCode ( String token ) { //\u6821\u9a8ctoken User user = this . userService . queryUserByToken ( token ); if ( ObjectUtil . isEmpty ( user )){ return false ; } ErrorResult errorResult = this . smsService . sendCheckCode ( user . getMobile ()); return errorResult == null ; } } 3.10.2\u3001 \u6821\u9a8c\u9a8c\u8bc1\u7801 \u00b6 MyCenterController\uff1a //com.tanhua.sso.controller.MyCenterController /** * \u6821\u9a8c\u9a8c\u8bc1\u7801 * * @param param * @param token * @return */ @PostMapping ( \"phone/checkVerificationCode\" ) public ResponseEntity < Map < String , Object >> checkVerificationCode ( @RequestBody Map < String , String > param , @RequestHeader ( \"Authorization\" ) String token ) { try { String code = param . get ( \"verificationCode\" ); Boolean bool = this . myCenterService . checkVerificationCode ( code , token ); Map < String , Object > result = new HashMap <> (); result . put ( \"verification\" , bool ); return ResponseEntity . ok ( result ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } MyCenterService\uff1a //com.tanhua.sso.service.MyCenterService public Boolean checkVerificationCode ( String code , String token ) { //\u6821\u9a8ctoken User user = this . userService . queryUserByToken ( token ); if ( ObjectUtil . isEmpty ( user )){ return false ; } //\u6821\u9a8c\u9a8c\u8bc1\u7801\uff0c\u5148\u67e5\u8be2redis\u4e2d\u7684\u9a8c\u8bc1\u7801 String redisKey = \"CHECK_CODE_\" + user . getMobile (); String value = this . redisTemplate . opsForValue (). get ( redisKey ); if ( StrUtil . equals ( code , value )){ //\u5c06\u9a8c\u8bc1\u7801\u5220\u9664 this . redisTemplate . delete ( redisKey ); return true ; } return false ; } 3.10.3\u3001\u4fdd\u5b58\u65b0\u624b\u673a\u53f7 \u00b6 MyCenterController\uff1a //com.tanhua.sso.controller.MyCenterController /** * \u4fdd\u5b58\u65b0\u624b\u673a\u53f7 * * @return */ @PostMapping ( \"phone\" ) public ResponseEntity < Void > updatePhone ( @RequestBody Map < String , String > param , @RequestHeader ( \"Authorization\" ) String token ) { try { String newPhone = param . get ( \"phone\" ); boolean bool = this . myCenterService . updatePhone ( token , newPhone ); if ( bool ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } MyCenterService\uff1a //com.tanhua.sso.service.MyCenterService public Boolean updatePhone ( String token , String newPhone ) { //\u6821\u9a8ctoken User user = this . userService . queryUserByToken ( token ); if ( ObjectUtil . isEmpty ( user )){ return false ; } Boolean result = this . userService . updatePhone ( user . getId (), newPhone ); if ( result ){ String redisKey = \"TANHUA_USER_MOBILE_\" + user . getId (); this . redisTemplate . delete ( redisKey ); } return result ; } UserService\uff1a //com.tanhua.sso.service.UserService public Boolean updatePhone ( Long userId , String newPhone ) { //\u5148\u67e5\u8be2\u65b0\u624b\u673a\u53f7\u662f\u5426\u5df2\u7ecf\u6ce8\u518c\uff0c\u5982\u679c\u5df2\u7ecf\u6ce8\u518c\uff0c\u5c31\u4e0d\u80fd\u4fee\u6539 QueryWrapper < User > queryWrapper = new QueryWrapper <> (); queryWrapper . eq ( \"mobile\" , newPhone ); User user = this . userMapper . selectOne ( queryWrapper ); if ( ObjectUtil . isNotEmpty ( user )){ //\u65b0\u624b\u673a\u53f7\u5df2\u7ecf\u88ab\u6ce8\u518c return false ; } user = new User (); user . setId ( userId ); user . setMobile ( newPhone ); return this . userMapper . updateById ( user ) > 0 ; }","title":"day09"},{"location":"tantan/day09/#_1","text":"\u5b9e\u73b0\u6211\u7684\u559c\u6b22\u529f\u80fd \u5b9e\u73b0\u7528\u6237\u901a\u7528\u8bbe\u7f6e \u5b9e\u73b0\u9ed1\u540d\u5355\u529f\u80fd \u5b9e\u73b0\u4fee\u6539\u624b\u673a\u53f7\u529f\u80fd","title":"\u8bfe\u7a0b\u8bf4\u660e"},{"location":"tantan/day09/#1","text":"\u5728\u6211\u7684\u6a21\u5757\u4e2d\uff0c\u5c06\u8be6\u7ec6\u5c55\u73b0\u201c\u559c\u6b22\u201d\u76f8\u5173\u7684\u6570\u636e\uff0c\u5982\u4e0b\uff1a","title":"1\u3001\u6211\u7684\u559c\u6b22\u7edf\u8ba1\u6570"},{"location":"tantan/day09/#11","text":"\u559c\u6b22 \u6211\u559c\u6b22\u522b\u4eba\uff0c\u5982\uff1a\u5f20\u4e09\u559c\u6b22\u674e\u56db\uff0c\u5c31\u662f\u559c\u6b22\u7684\u6570\u636e\uff0c\u5e76\u4e0d\u4ee3\u8868\u674e\u56db\u4e5f\u559c\u6b22\u5f20\u4e09\u3002 \u7c89\u4e1d \u5bf9\u4e8e\u674e\u56db\u800c\u8a00\uff0c\u5f20\u4e09\u5c31\u662f\u4ed6\u7684\u7c89\u4e1d\u3002 \u76f8\u4e92\u5173\u6ce8\uff08\u559c\u6b22\uff09 \u5982\u679c\u674e\u56db\u4e5f\u559c\u6b22\u5f20\u4e09\uff0c\u90a3\u4e48\uff0c\u5f20\u4e09\u548c\u674e\u56db\u5c31\u662f\u76f8\u4e92\u559c\u6b22\u3002","title":"1.1\u3001\u6982\u5ff5\u8bf4\u660e"},{"location":"tantan/day09/#12dubbo","text":"","title":"1.2\u3001dubbo\u670d\u52a1"},{"location":"tantan/day09/#121userlikeapi","text":"//com.tanhua.dubbo.server.api.UserLikeApi /** * \u76f8\u4e92\u559c\u6b22\u7684\u6570\u91cf * * @return */ Long queryMutualLikeCount ( Long userId ); /** * \u559c\u6b22\u6570 * * @return */ Long queryLikeCount ( Long userId ); /** * \u7c89\u4e1d\u6570 * * @return */ Long queryFanCount ( Long userId );","title":"1.2.1\u3001UserLikeApi"},{"location":"tantan/day09/#122userlikeapiimpl","text":"//com.tanhua.dubbo.server.api.UserLikeApiImpl /** * \u67e5\u8be2\u76f8\u4e92\u559c\u6b22\u6570 * \u5b9e\u73b02\u79cd\u65b9\u5f0f\uff1a\u7b2c\u4e00\u79cd\uff1a\u67e5\u8be2redis\uff0c\u7b2c\u4e8c\u79cd\uff1a\u67e5\u8be2MongoDB * \u5efa\u8bae\uff1a\u4f18\u5148\u4f7f\u7528redis\u67e5\u8be2\uff0c\u5176\u6b21\u8003\u8651\u4f7f\u7528Mongodb * * @param userId * @return */ @Override public Long queryMutualLikeCount ( Long userId ) { //\u67e5\u8be2\u6211\u7684\u559c\u6b22\u5217\u8868 List < Long > likeUserIdList = this . queryLikeList ( userId ); Long count = 0 L ; for ( Long likeUserId : likeUserIdList ) { String redisKey = this . getLikeRedisKey ( likeUserId ); String hashKey = String . valueOf ( userId ); //\u201c\u522b\u4eba\u201d \u7684\u559c\u6b22\u5217\u8868\u4e2d\u662f\u5426\u6709 \u201c\u6211\u201d if ( this . redisTemplate . opsForHash (). hasKey ( redisKey , hashKey )) { count ++ ; } } return count ; } @Override public Long queryLikeCount ( Long userId ) { String redisKey = this . getLikeRedisKey ( userId ); return this . redisTemplate . opsForHash (). size ( redisKey ); } @Override public Long queryFanCount ( Long userId ) { //\u65e0\u6cd5\u901a\u8fc7redis\u67e5\u8be2\u5b8c\u6210\uff0c\u5fc5\u987b\u4eceMongodb\u4e2d\u67e5\u8be2 Query query = Query . query ( Criteria . where ( \"likeUserId\" ). is ( userId )); return this . mongoTemplate . count ( query , UserLike . class ); }","title":"1.2.2\u3001UserLikeApiImpl"},{"location":"tantan/day09/#123","text":"package com.tanhua.dubbo.server.api ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner ; @RunWith ( SpringJUnit4ClassRunner . class ) @SpringBootTest public class TestUserLikeApiImpl { @Autowired private UserLikeApi userLikeApi ; @Test public void testQueryCounts (){ System . out . println ( this . userLikeApi . queryEachLikeCount ( 1L )); System . out . println ( this . userLikeApi . queryFanCount ( 1L )); System . out . println ( this . userLikeApi . queryLikeCount ( 1L )); } }","title":"1.2.3\u3001\u5355\u5143\u6d4b\u8bd5"},{"location":"tantan/day09/#13app","text":"\u6587\u6863\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/899","title":"1.3\u3001APP\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day09/#131countsvo","text":"package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class CountsVo { private Long eachLoveCount ; //\u4e92\u76f8\u559c\u6b22 private Long loveCount ; //\u559c\u6b22 private Long fanCount ; //\u7c89\u4e1d }","title":"1.3.1\u3001CountsVo"},{"location":"tantan/day09/#132userscontroller","text":"//com.tanhua.server.controller.MyCenterController /** * \u4e92\u76f8\u559c\u6b22\uff0c\u559c\u6b22\uff0c\u7c89\u4e1d - \u7edf\u8ba1 * * @return */ @GetMapping ( \"counts\" ) public ResponseEntity < CountsVo > queryCounts (){ try { CountsVo countsVo = this . myCenterService . queryCounts (); if ( null != countsVo ){ return ResponseEntity . ok ( countsVo ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"1.3.2\u3001UsersController"},{"location":"tantan/day09/#133usersservice","text":"//com.tanhua.server.service.MyCenterService public CountsVo queryCounts () { User user = UserThreadLocal . get (); CountsVo countsVo = new CountsVo (); countsVo . setEachLoveCount ( this . userLikeApi . queryMutualLikeCount ( user . getId ())); countsVo . setFanCount ( this . userLikeApi . queryFanCount ( user . getId ())); countsVo . setLoveCount ( this . userLikeApi . queryLikeCount ( user . getId ())); return countsVo ; }","title":"1.3.3\u3001UsersService"},{"location":"tantan/day09/#134","text":"","title":"1.3.4\u3001\u6d4b\u8bd5"},{"location":"tantan/day09/#2","text":"\u63a5\u53e3\u670d\u52a1\uff1ahttps://mock-java.itheima.net/project/35/interface/api/905 \u8be5\u63a5\u53e3\u96c6\u6210\u4e864\u4e2a\u63a5\u53e3\uff0c\u7528type\u505a\u4e86\u533a\u5206\uff1a 1 \u4e92\u76f8\u5173\u6ce8 2 \u6211\u5173\u6ce8 3 \u7c89\u4e1d 4 \u8c01\u770b\u8fc7\u6211","title":"2\u3001\u559c\u6b22\u5217\u8868"},{"location":"tantan/day09/#21dubbo","text":"","title":"2.1\u3001\u559c\u6b22dubbo\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day09/#211","text":"\u5728dubbo\u63a5\u53e3\u4e2d\u5b9a\u4e49\u65b9\u6cd5\uff1a //com.tanhua.dubbo.server.api.UserLikeApi /** * \u67e5\u8be2\u76f8\u4e92\u559c\u6b22\u5217\u8868 * * @param userId * @param page * @param pageSize * @return */ PageInfo < UserLike > queryMutualLikeList ( Long userId , Integer page , Integer pageSize ); /** * \u67e5\u8be2\u6211\u559c\u6b22\u7684\u5217\u8868 * * @param userId * @param page * @param pageSize * @return */ PageInfo < UserLike > queryLikeList ( Long userId , Integer page , Integer pageSize ); /** * \u67e5\u8be2\u7c89\u4e1d\u5217\u8868 * * @param userId * @param page * @param pageSize * @return */ PageInfo < UserLike > queryFanList ( Long userId , Integer page , Integer pageSize );","title":"2.1.1\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day09/#212","text":"//com.tanhua.dubbo.server.api.UserLikeApiImpl @Override public PageInfo < UserLike > queryMutualLikeList ( Long userId , Integer page , Integer pageSize ) { //\u67e5\u8be2\u6211\u7684\u559c\u6b22\u5217\u8868 List < Long > userLikeIdList = this . queryLikeList ( userId ); //\u67e5\u8be2\u559c\u6b22\u6211\u7684\u4eba Query query = Query . query ( Criteria . where ( \"userId\" ). in ( userLikeIdList ) . and ( \"likeUserId\" ). is ( userId ) ); return this . queryList ( query , page , pageSize ); } @Override public PageInfo < UserLike > queryLikeList ( Long userId , Integer page , Integer pageSize ) { Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId )); return this . queryList ( query , page , pageSize ); } @Override public PageInfo < UserLike > queryFanList ( Long userId , Integer page , Integer pageSize ) { Query query = Query . query ( Criteria . where ( \"likeUserId\" ). is ( userId )); return this . queryList ( query , page , pageSize ); } private PageInfo < UserLike > queryList ( Query query , Integer page , Integer pageSize ) { //\u8bbe\u7f6e\u5206\u9875 PageRequest pageRequest = PageRequest . of ( page - 1 , pageSize , Sort . by ( Sort . Order . desc ( \"created\" ))); query . with ( pageRequest ); List < UserLike > userLikeList = this . mongoTemplate . find ( query , UserLike . class ); PageInfo < UserLike > pageInfo = new PageInfo <> (); pageInfo . setPageNum ( page ); pageInfo . setPageSize ( pageSize ); pageInfo . setRecords ( userLikeList ); return pageInfo ; }","title":"2.1.2\u3001\u5b9e\u73b0\u63a5\u53e3"},{"location":"tantan/day09/#22dubbo","text":"","title":"2.2\u3001\u6700\u8fd1\u8bbf\u5ba2dubbo\u670d\u52a1"},{"location":"tantan/day09/#221","text":"//com.tanhua.dubbo.server.api.VisitorsApi /** * \u6309\u7167\u65f6\u95f4\u5012\u5e8f\u6392\u5e8f\uff0c\u67e5\u8be2\u6700\u8fd1\u7684\u8bbf\u5ba2\u4fe1\u606f * * @param userId * @param page * @param pageSize * @return */ PageInfo < Visitors > topVisitor ( Long userId , Integer page , Integer pageSize );","title":"2.2.1\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"tantan/day09/#222","text":"//com.tanhua.dubbo.server.api.VisitorsApiImpl @Override public List < Visitors > queryMyVisitor ( Long userId ) { // \u67e5\u8be2\u524d5\u4e2a\u8bbf\u5ba2\u6570\u636e\uff0c\u6309\u7167\u8bbf\u95ee\u65f6\u95f4\u5012\u5e8f\u6392\u5e8f // \u5982\u679c\u7528\u6237\u5df2\u7ecf\u67e5\u8be2\u8fc7\u5217\u8868\uff0c\u8bb0\u5f55\u67e5\u8be2\u65f6\u95f4\uff0c\u540e\u7eed\u67e5\u8be2\u9700\u8981\u6309\u7167\u8fd9\u4e2a\u65f6\u95f4\u5f80\u540e\u67e5\u8be2 // \u4e0a\u4e00\u6b21\u67e5\u8be2\u5217\u8868\u7684\u65f6\u95f4 Long date = Convert . toLong ( this . redisTemplate . opsForHash (). get ( VISITOR_REDIS_KEY , String . valueOf ( userId ))); PageRequest pageRequest = PageRequest . of ( 0 , 5 , Sort . by ( Sort . Order . desc ( \"date\" ))); Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId )) . with ( pageRequest ); if ( ObjectUtil . isNotEmpty ( date )) { query . addCriteria ( Criteria . where ( \"date\" ). gte ( date )); } return this . queryList ( query , userId ); } private List < Visitors > queryList ( Query query , Long userId ){ List < Visitors > visitorsList = this . mongoTemplate . find ( query , Visitors . class ); //\u67e5\u8be2\u6bcf\u4e2a\u6765\u8bbf\u7528\u6237\u7684\u5f97\u5206 for ( Visitors visitors : visitorsList ) { Query queryScore = Query . query ( Criteria . where ( \"toUserId\" ) . is ( userId ). and ( \"userId\" ). is ( visitors . getVisitorUserId ()) ); RecommendUser recommendUser = this . mongoTemplate . findOne ( queryScore , RecommendUser . class ); if ( ObjectUtil . isNotEmpty ( recommendUser )){ visitors . setScore ( recommendUser . getScore ()); } else { //\u9ed8\u8ba4\u5f97\u5206 visitors . setScore ( 90 d ); } } return visitorsList ; } @Override public PageInfo < Visitors > topVisitor ( Long userId , Integer page , Integer pageSize ) { PageRequest pageRequest = PageRequest . of ( page - 1 , pageSize , Sort . by ( Sort . Order . desc ( \"date\" ))); Query query = Query . query ( Criteria . where ( \"userId\" ). is ( userId )). with ( pageRequest ); List < Visitors > visitorsList = this . queryList ( query , userId ); PageInfo < Visitors > pageInfo = new PageInfo <> (); pageInfo . setPageNum ( page ); pageInfo . setPageSize ( pageSize ); pageInfo . setRecords ( visitorsList ); //\u8bb0\u5f55\u5f53\u524d\u7684\u65f6\u95f4\u5230redis\u4e2d\uff0c\u5728\u9996\u9875\u67e5\u8be2\u65f6\uff0c\u5c31\u53ef\u4ee5\u5728\u8fd9\u4e2a\u65f6\u95f4\u4e4b\u540e\u67e5\u8be2\u4e86 String redisKey = VISITOR_REDIS_KEY ; String hashKey = String . valueOf ( userId ); String value = String . valueOf ( System . currentTimeMillis ()); this . redisTemplate . opsForHash (). put ( redisKey , hashKey , value ); return pageInfo ; }","title":"2.2.2\u3001\u7f16\u5199\u5b9e\u73b0"},{"location":"tantan/day09/#23app","text":"\u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/905","title":"2.3\u3001APP\u63a5\u53e3\u670d\u52a1"},{"location":"tantan/day09/#231userlikelistvo","text":"package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class UserLikeListVo { private Long id ; private String avatar ; private String nickname ; private String gender ; private Integer age ; private String city ; private String education ; private Integer marriage ; //\u5a5a\u59fb\u72b6\u6001\uff080\u672a\u5a5a\uff0c1\u5df2\u5a5a\uff09 private Integer matchRate ; //\u5339\u914d\u5ea6 private Boolean alreadyLove ; //\u662f\u5426\u559c\u6b22ta }","title":"2.3.1\u3001UserLikeListVo"},{"location":"tantan/day09/#232mycentercontroller","text":"//com.tanhua.server.controller.MyCenterController /** * \u4e92\u76f8\u5173\u6ce8\u3001\u6211\u5173\u6ce8\u3001\u7c89\u4e1d\u3001\u8c01\u770b\u8fc7\u6211 - \u7ffb\u9875\u5217\u8868 * * @param type 1 \u4e92\u76f8\u5173\u6ce8 2 \u6211\u5173\u6ce8 3 \u7c89\u4e1d 4 \u8c01\u770b\u8fc7\u6211 * @param page * @param pageSize * @param nickname * @return */ @GetMapping ( \"friends/{type}\" ) public ResponseEntity < PageResult > queryLikeList ( @PathVariable ( \"type\" ) String type , @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pageSize , @RequestParam ( value = \"nickname\" , required = false ) String nickname ) { try { page = Math . max ( 1 , page ); PageResult pageResult = this . myCenterService . queryLikeList ( Integer . valueOf ( type ), page , pageSize , nickname ); return ResponseEntity . ok ( pageResult ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"2.3.2\u3001MyCenterController"},{"location":"tantan/day09/#233mycenterservice","text":"//com.tanhua.server.service.MyCenterService public PageResult queryLikeList ( Integer type , Integer page , Integer pageSize , String nickname ) { PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); Long userId = UserThreadLocal . get (). getId (); List < Object > userIdList = null ; //1 \u4e92\u76f8\u5173\u6ce8 2 \u6211\u5173\u6ce8 3 \u7c89\u4e1d 4 \u8c01\u770b\u8fc7\u6211 switch ( type ){ case 1 :{ PageInfo < UserLike > pageInfo = this . userLikeApi . queryMutualLikeList ( userId , page , pageSize ); userIdList = CollUtil . getFieldValues ( pageInfo . getRecords (), \"userId\" ); break ; } case 2 :{ PageInfo < UserLike > pageInfo = this . userLikeApi . queryLikeList ( userId , page , pageSize ); userIdList = CollUtil . getFieldValues ( pageInfo . getRecords (), \"likeUserId\" ); break ; } case 3 :{ PageInfo < UserLike > pageInfo = this . userLikeApi . queryFanList ( userId , page , pageSize ); userIdList = CollUtil . getFieldValues ( pageInfo . getRecords (), \"userId\" ); break ; } case 4 :{ PageInfo < Visitors > pageInfo = this . visitorsApi . topVisitor ( userId , page , pageSize ); userIdList = CollUtil . getFieldValues ( pageInfo . getRecords (), \"visitorUserId\" ); break ; } default : return pageResult ; } if ( CollUtil . isEmpty ( userIdList )){ return pageResult ; } QueryWrapper < UserInfo > queryWrapper = new QueryWrapper <> (); queryWrapper . in ( \"user_id\" , userIdList ); if ( StrUtil . isNotEmpty ( nickname )){ queryWrapper . like ( \"nick_name\" , nickname ); } List < UserInfo > userInfoList = this . userInfoService . queryUserInfoList ( queryWrapper ); List < UserLikeListVo > userLikeListVos = new ArrayList <> (); for ( UserInfo userInfo : userInfoList ) { UserLikeListVo userLikeListVo = new UserLikeListVo (); userLikeListVo . setAge ( userInfo . getAge ()); userLikeListVo . setAvatar ( userInfo . getLogo ()); userLikeListVo . setCity ( userInfo . getCity ()); userLikeListVo . setEducation ( userInfo . getEdu ()); userLikeListVo . setGender ( userInfo . getSex (). name (). toLowerCase ()); userLikeListVo . setId ( userInfo . getUserId ()); userLikeListVo . setMarriage ( StringUtils . equals ( userInfo . getMarriage (), \"\u5df2\u5a5a\" ) ? 1 : 0 ); userLikeListVo . setNickname ( userInfo . getNickName ()); //\u662f\u5426\u559c\u6b22 userLikeApi\u4e2d\u7684isLike\u5f00\u653e\u51fa\u6765 userLikeListVo . setAlreadyLove ( this . userLikeApi . isLike ( userId , userInfo . getUserId ())); Double score = this . recommendUserService . queryScore ( userId , userInfo . getUserId ()); userLikeListVo . setMatchRate ( Convert . toInt ( score )); userLikeListVos . add ( userLikeListVo ); } pageResult . setItems ( userLikeListVos ); return pageResult ; }","title":"2.3.3\u3001MyCenterService"},{"location":"tantan/day09/#234","text":"","title":"2.3.4\u3001\u6d4b\u8bd5"},{"location":"tantan/day09/#24","text":"\u5728\u5217\u8868\u4e2d\u53ef\u4ee5\u8fdb\u884c\u201c\u53d6\u6d88\u559c\u6b22\u201d\u64cd\u4f5c\u3002 \u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/923","title":"2.4\u3001\u53d6\u6d88\u559c\u6b22"},{"location":"tantan/day09/#241mycentercontroller","text":"//com.tanhua.server.controller.MyCenterController /** * \u53d6\u6d88\u559c\u6b22 * * @param userId * @return */ @DeleteMapping ( \"like/{uid}\" ) public ResponseEntity < Void > disLike ( @PathVariable ( \"uid\" ) Long userId ) { try { this . myCenterService . disLike ( userId ); return ResponseEntity . ok ( null ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"2.4.1\u3001MyCenterController"},{"location":"tantan/day09/#242mycenterservice","text":"//com.tanhua.server.service.MyCenterService /** * \u53d6\u6d88\u559c\u6b22 * * @param userId */ public void disLike ( Long userId ) { //\u5224\u65ad\u5f53\u524d\u7528\u6237\u4e0e\u6b64\u7528\u6237\u662f\u5426\u76f8\u4e92\u559c\u6b22 User user = UserThreadLocal . get (); Boolean mutualLike = this . userLikeApi . isMutualLike ( user . getId (), userId ); //\u53d6\u6d88\u559c\u6b22 this . userLikeApi . notLikeUser ( user . getId (), userId ); if ( mutualLike ){ //\u53d6\u6d88\u597d\u53cb\u5173\u7cfb\uff0c\u89e3\u9664\u5728\u73af\u4fe1\u5e73\u53f0\u7684\u597d\u53cb\u5173\u7cfb this . imService . removeUser ( userId ); } }","title":"2.4.2\u3001MyCenterService"},{"location":"tantan/day09/#243imservice","text":"//com.tanhua.server.service.IMService /** * \u5220\u9664\u597d\u53cb * * @param userId \u597d\u53cbid */ public void removeUser ( Long userId ) { //\u5220\u9664\u597d\u53cb\u5173\u7cfb User user = UserThreadLocal . get (); Boolean result = this . usersApi . removeUsers ( user . getId (), userId ); if ( result ){ //\u5c06\u73af\u4fe1\u5e73\u53f0\u7684\u597d\u53cb\u5173\u7cfb\u89e3\u9664 this . huanXinApi . removeUserFriend ( user . getId (), userId ); } }","title":"2.4.3\u3001IMService"},{"location":"tantan/day09/#244","text":"\u6d4b\u8bd5\u65f6\uff0c\u9700\u8981\u5c06MongoDB\u4e2d\u7684user_like\u8868\u6570\u636e\u6e05\u7a7a\u4ee5\u53ca\u5c06Redis\u4e2d\u559c\u6b22\u548c\u4e0d\u559c\u6b22\u6570\u636e\u5220\u9664\u3002 \u4f7f\u7528\u7528\u62372\u8fdb\u884c\u6d4b\u8bd5\uff0c\u73b0\u5728\u548c\u7528\u62371\u662f\u597d\u53cb\uff1a \u53d6\u6d88\u559c\u6b22\uff1a","title":"2.4.4\u3001\u6d4b\u8bd5"},{"location":"tantan/day09/#25","text":"\u5728\u67e5\u770b\u7c89\u4e1d\u5217\u8868\u4e2d\uff0c\u53ef\u4ee5\u5bf9\u7c89\u4e1d\u8fdb\u884c\u201c\u559c\u6b22\u64cd\u4f5c\u201d\u3002 \u6587\u6863\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/917","title":"2.5\u3001 \u559c\u6b22\u7c89\u4e1d"},{"location":"tantan/day09/#251mycentercontroller","text":"//com.tanhua.server.controller.MyCenterController /** * \u5173\u6ce8\u7c89\u4e1d * * @param userId * @return */ @PostMapping ( \"fans/{uid}\" ) public ResponseEntity < Void > likeFan ( @PathVariable ( \"uid\" ) Long userId ){ try { this . myCenterService . likeFan ( userId ); return ResponseEntity . ok ( null ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"2.5.1\u3001MyCenterController"},{"location":"tantan/day09/#252mycenterservice","text":"//com.tanhua.server.service.MyCenterService @Autowired private TanHuaService tanHuaService ; /** * \u559c\u6b22 * * @param userId */ public void likeFan ( Long userId ) { //\u559c\u6b22\u7528\u6237\uff0c\u5982\u679c\u7528\u6237\u662f\u76f8\u4e92\u559c\u6b22\u7684\u8bdd\u5c31\u4f1a\u6210\u4e3a\u597d\u53cb this . tanHuaService . likeUser ( userId ); }","title":"2.5.2\u3001MyCenterService"},{"location":"tantan/day09/#253","text":"","title":"2.5.3\u3001\u6d4b\u8bd5"},{"location":"tantan/day09/#3","text":"","title":"3\u3001\u7528\u6237\u901a\u7528\u8bbe\u7f6e"},{"location":"tantan/day09/#31","text":"CREATE TABLE ` tb_settings ` ( ` id ` bigint ( 20 ) NOT NULL AUTO_INCREMENT , ` user_id ` bigint ( 20 ) DEFAULT NULL , ` like_notification ` tinyint ( 4 ) DEFAULT '1' COMMENT '\u63a8\u9001\u559c\u6b22\u901a\u77e5' , ` pinglun_notification ` tinyint ( 4 ) DEFAULT '1' COMMENT '\u63a8\u9001\u8bc4\u8bba\u901a\u77e5' , ` gonggao_notification ` tinyint ( 4 ) DEFAULT '1' COMMENT '\u63a8\u9001\u516c\u544a\u901a\u77e5' , ` created ` datetime DEFAULT NULL , ` updated ` datetime DEFAULT NULL , PRIMARY KEY ( ` id ` ) ) ENGINE = InnoDB DEFAULT CHARSET = utf8 COMMENT = '\u8bbe\u7f6e\u8868' ;","title":"3.1\u3001\u8868\u7ed3\u6784"},{"location":"tantan/day09/#32pojo","text":"my-tanhua-common\u5de5\u7a0b\uff1a package com.tanhua.common.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class Settings extends BasePojo { private Long id ; private Long userId ; private Boolean likeNotification = true ; private Boolean pinglunNotification = true ; private Boolean gonggaoNotification = true ; }","title":"3.2\u3001pojo"},{"location":"tantan/day09/#33settingsmapper","text":"package com.tanhua.common.mapper ; import com.baomidou.mybatisplus.core.mapper.BaseMapper ; import com.tanhua.common.pojo.Settings ; public interface SettingsMapper extends BaseMapper < Settings > { }","title":"3.3\u3001SettingsMapper"},{"location":"tantan/day09/#34settingsservice","text":"package com.tanhua.server.service ; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper ; import com.tanhua.common.mapper.SettingsMapper ; import com.tanhua.common.pojo.Settings ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; @Service public class SettingsService { @Autowired private SettingsMapper settingsMapper ; /** * \u6839\u636e\u7528\u6237id\u67e5\u8be2\u914d\u7f6e * * @param userId * @return */ public Settings querySettings ( Long userId ) { QueryWrapper < Settings > queryWrapper = new QueryWrapper <> (); queryWrapper . eq ( \"user_id\" , userId ); return this . settingsMapper . selectOne ( queryWrapper ); } }","title":"3.4\u3001SettingsService"},{"location":"tantan/day09/#35","text":"\u6587\u6863\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/893","title":"3.5\u3001\u67e5\u8be2\u914d\u7f6e"},{"location":"tantan/day09/#351settingsvo","text":"package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class SettingsVo { private Long id ; //\u964c\u751f\u4eba\u95ee\u9898 private String strangerQuestion = \"\" ; //\u624b\u673a\u53f7 private String phone ; //\u63a8\u9001\u559c\u6b22\u901a\u77e5 private Boolean likeNotification = true ; //\u63a8\u9001\u8bc4\u8bba\u901a\u77e5 private Boolean pinglunNotification = true ; //\u63a8\u9001\u516c\u544a\u901a\u77e5 private Boolean gonggaoNotification = true ; }","title":"3.5.1\u3001SettingsVo"},{"location":"tantan/day09/#352mycentercontroller","text":"//com.tanhua.server.controller.MyCenterController /** * \u67e5\u8be2\u914d\u7f6e * * @return */ @GetMapping ( \"settings\" ) public ResponseEntity < SettingsVo > querySettings () { try { SettingsVo settingsVo = this . myCenterService . querySettings (); if ( null != settingsVo ) { return ResponseEntity . ok ( settingsVo ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"3.5.2\u3001MyCenterController"},{"location":"tantan/day09/#353mycenterservice","text":"//com.tanhua.server.service.MyCenterService public SettingsVo querySettings () { SettingsVo settingsVo = new SettingsVo (); User user = UserThreadLocal . get (); //\u8bbe\u7f6e\u7528\u6237\u7684\u57fa\u672c\u4fe1\u606f settingsVo . setId ( user . getId ()); settingsVo . setPhone ( user . getMobile ()); //\u67e5\u8be2\u7528\u6237\u7684\u914d\u7f6e\u6570\u636e Settings settings = this . settingsService . querySettings ( user . getId ()); if ( ObjectUtil . isNotEmpty ( settings )){ settingsVo . setGonggaoNotification ( settings . getGonggaoNotification ()); settingsVo . setLikeNotification ( settings . getLikeNotification ()); settingsVo . setPinglunNotification ( settings . getPinglunNotification ()); } //\u67e5\u8be2\u964c\u751f\u4eba\u95ee\u9898 settingsVo . setStrangerQuestion ( this . tanHuaService . queryQuestion ( user . getId ())); return settingsVo ; }","title":"3.5.3\u3001MyCenterService"},{"location":"tantan/day09/#254","text":"","title":"2.5.4\u3001\u6d4b\u8bd5"},{"location":"tantan/day09/#36","text":"\u6587\u6863\u5730\u5740\uff1ahttps://mock-java.itheima.net/project/35/interface/api/929","title":"3.6\u3001\u4fdd\u5b58\u964c\u751f\u4eba\u95ee\u9898"},{"location":"tantan/day09/#361mycentercontroller","text":"//com.tanhua.server.controller.MyCenterController /** * \u8bbe\u7f6e\u964c\u751f\u4eba\u95ee\u9898 * * @return */ @PostMapping ( \"questions\" ) public ResponseEntity < Void > saveQuestions ( @RequestBody Map < String , String > param ) { try { String content = param . get ( \"content\" ); this . myCenterService . saveQuestions ( content ); return ResponseEntity . ok ( null ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"3.6.1\u3001MyCenterController"},{"location":"tantan/day09/#362mycenterservice","text":"//com.tanhua.server.service.MyCenterService public void saveQuestions ( String content ) { User user = UserThreadLocal . get (); this . questionService . save ( user . getId (), content ); }","title":"3.6.2\u3001MyCenterService"},{"location":"tantan/day09/#363questionservice","text":"//com.tanhua.server.service.QuestionService public void save ( Long userId , String content ) { Question question = this . queryQuestion ( userId ); if ( null != question ){ question . setTxt ( content ); this . questionMapper . updateById ( question ); } else { question = new Question (); question . setUserId ( userId ); question . setTxt ( content ); question . setCreated ( new Date ()); question . setUpdated ( question . getCreated ()); this . questionMapper . insert ( question ); } }","title":"3.6.3\u3001QuestionService"},{"location":"tantan/day09/#37","text":"\u9ed1\u540d\u5355\u529f\u80fd\u53ef\u4ee5\u7528\u5728\u964c\u751f\u4eba\u6253\u62db\u547c\u65f6\uff0c\u8fdb\u884c\u5224\u65ad\uff0c\u5982\u679c\u662f\u9ed1\u540d\u5355\u7684\u5219\u4e0d\u80fd\u6253\u62db\u547c\u3002 \u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/935","title":"3.7\u3001\u9ed1\u540d\u5355\u5217\u8868"},{"location":"tantan/day09/#371","text":"CREATE TABLE ` tb_black_list ` ( ` id ` bigint ( 20 ) NOT NULL AUTO_INCREMENT , ` user_id ` bigint ( 20 ) DEFAULT NULL , ` black_user_id ` bigint ( 20 ) DEFAULT NULL , ` created ` datetime DEFAULT NULL , ` updated ` datetime DEFAULT NULL , PRIMARY KEY ( ` id ` ), KEY ` user_id ` ( ` user_id ` ) ) ENGINE = InnoDB DEFAULT CHARSET = utf8 COMMENT = '\u9ed1\u540d\u5355' ; --\u6d4b\u8bd5\u6570\u636e INSERT INTO ` tb_black_list ` ( ` id ` , ` user_id ` , ` black_user_id ` , ` created ` , ` updated ` ) VALUES ( '1' , '1' , '22' , '2019-11-01 15:47:22' , '2019-11-01 15:47:24' ); INSERT INTO ` tb_black_list ` ( ` id ` , ` user_id ` , ` black_user_id ` , ` created ` , ` updated ` ) VALUES ( '2' , '1' , '23' , '2019-11-01 15:47:39' , '2019-11-01 15:47:42' ); INSERT INTO ` tb_black_list ` ( ` id ` , ` user_id ` , ` black_user_id ` , ` created ` , ` updated ` ) VALUES ( '3' , '1' , '24' , '2019-11-01 15:47:51' , '2019-11-01 15:47:56' );","title":"3.7.1\u3001\u8868\u7ed3\u6784"},{"location":"tantan/day09/#372pojo","text":"package com.tanhua.common.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @NoArgsConstructor @AllArgsConstructor public class BlackList extends BasePojo { private Long id ; private Long userId ; private Long blackUserId ; }","title":"3.7.2\u3001pojo"},{"location":"tantan/day09/#373blacklistmapper","text":"package com.tanhua.common.mapper ; import com.baomidou.mybatisplus.core.mapper.BaseMapper ; import com.tanhua.common.pojo.BlackList ; public interface BlackListMapper extends BaseMapper < BlackList > { }","title":"3.7.3\u3001BlackListMapper"},{"location":"tantan/day09/#374blacklistservice","text":"package com.tanhua.server.service ; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper ; import com.baomidou.mybatisplus.core.metadata.IPage ; import com.baomidou.mybatisplus.extension.plugins.pagination.Page ; import com.tanhua.common.mapper.BlackListMapper ; import com.tanhua.common.pojo.BlackList ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; @Service public class BlackListService { @Autowired private BlackListMapper blackListMapper ; public IPage < BlackList > queryBlacklist ( Long userId , Integer page , Integer pageSize ) { QueryWrapper < BlackList > wrapper = new QueryWrapper < BlackList > (); wrapper . eq ( \"user_id\" , userId ); wrapper . orderByDesc ( \"created\" ); Page < BlackList > pager = new Page <> ( page , pageSize ); return this . blackListMapper . selectPage ( pager , wrapper ); } } \u914d\u7f6e\u5206\u9875\u63d2\u4ef6\uff1a package com.tanhua.server.config ; import com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor ; import org.springframework.context.annotation.Bean ; import org.springframework.context.annotation.Configuration ; @Configuration public class MybatisPlusConfig { /** * \u5206\u9875\u63d2\u4ef6 */ @Bean public PaginationInterceptor paginationInterceptor () { return new PaginationInterceptor (); } }","title":"3.7.4\u3001BlackListService"},{"location":"tantan/day09/#375blacklistvo","text":"package com.tanhua.server.vo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @Data @AllArgsConstructor @NoArgsConstructor public class BlackListVo { private Long id ; private String avatar ; private String nickname ; private String gender ; private Integer age ; }","title":"3.7.5\u3001BlackListVo"},{"location":"tantan/day09/#376mycentercontroller","text":"//com.tanhua.server.controller.MyCenterController /** * \u67e5\u8be2\u9ed1\u540d\u5355 * * @param page * @param pagesize * @return */ @GetMapping ( \"blacklist\" ) public ResponseEntity < PageResult > queryBlacklist ( @RequestParam ( value = \"page\" , defaultValue = \"1\" ) Integer page , @RequestParam ( value = \"pagesize\" , defaultValue = \"10\" ) Integer pagesize ) { try { PageResult pageResult = this . myCenterService . queryBlacklist ( page , pagesize ); return ResponseEntity . ok ( pageResult ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"3.7.6\u3001MyCenterController"},{"location":"tantan/day09/#377mycenterservice","text":"//com.tanhua.server.service.MyCenterService public PageResult queryBlacklist ( Integer page , Integer pageSize ) { User user = UserThreadLocal . get (); IPage < BlackList > blackListIPage = this . blackListService . queryBlacklist ( user . getId (), page , pageSize ); PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); pageResult . setCounts ( Convert . toInt ( blackListIPage . getTotal ())); pageResult . setPages ( Convert . toInt ( blackListIPage . getPages ())); List < BlackList > records = blackListIPage . getRecords (); if ( CollUtil . isEmpty ( records )){ return pageResult ; } List < Object > userIds = CollUtil . getFieldValues ( records , \"blackUserId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIds ); List < BlackListVo > blackListVos = new ArrayList <> (); for ( UserInfo userInfo : userInfoList ) { BlackListVo blackListVo = new BlackListVo (); blackListVo . setAge ( userInfo . getAge ()); blackListVo . setAvatar ( userInfo . getLogo ()); blackListVo . setGender ( userInfo . getSex (). name (). toLowerCase ()); blackListVo . setId ( userInfo . getUserId ()); blackListVo . setNickname ( userInfo . getNickName ()); blackListVos . add ( blackListVo ); } pageResult . setItems ( blackListVos ); return pageResult ; }","title":"3.7.7\u3001MyCenterService"},{"location":"tantan/day09/#378","text":"","title":"3.7.8\u3001\u6d4b\u8bd5"},{"location":"tantan/day09/#38","text":"\u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/941","title":"3.8\u3001\u79fb\u9664\u9ed1\u540d\u5355"},{"location":"tantan/day09/#381mycentercontroller","text":"/** * \u79fb\u9664\u9ed1\u540d\u5355 * * @return */ @DeleteMapping ( \"blacklist/{uid}\" ) public ResponseEntity < Void > delBlacklist ( @PathVariable ( \"uid\" ) Long userId ) { try { this . myCenterService . delBlacklist ( userId ); return ResponseEntity . ok ( null ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"3.8.1\u3001MyCenterController"},{"location":"tantan/day09/#382mycenterservice","text":"public void delBlacklist ( Long userId ) { User user = UserThreadLocal . get (); this . blackListService . delBlacklist ( user . getId (), userId ); }","title":"3.8.2\u3001MyCenterService"},{"location":"tantan/day09/#383blacklistservice","text":"public Boolean delBlacklist ( Long userId , Long blackUserId ) { QueryWrapper < BlackList > wrapper = new QueryWrapper < BlackList > (); wrapper . eq ( \"user_id\" , userId ). eq ( \"black_user_id\" , blackUserId ); return this . blackListMapper . delete ( wrapper ) > 0 ; }","title":"3.8.3\u3001BlackListService"},{"location":"tantan/day09/#39","text":"\u63a5\u53e3\u6587\u6863\uff1ahttps://mock-java.itheima.net/project/35/interface/api/965","title":"3.9\u3001\u66f4\u65b0\u901a\u77e5"},{"location":"tantan/day09/#391mycentercontroller","text":"//com.tanhua.server.controller.MyCenterController /** * \u66f4\u65b0\u901a\u77e5\u8bbe\u7f6e * * @param param * @return */ @PostMapping ( \"notifications/setting\" ) public ResponseEntity < Void > updateNotification ( @RequestBody Map < String , Boolean > param ) { try { Boolean likeNotification = param . get ( \"likeNotification\" ); Boolean pinglunNotification = param . get ( \"pinglunNotification\" ); Boolean gonggaoNotification = param . get ( \"gonggaoNotification\" ); this . usersService . updateNotification ( likeNotification , pinglunNotification , gonggaoNotification ); return ResponseEntity . ok ( null ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); }","title":"3.9.1\u3001MyCenterController"},{"location":"tantan/day09/#292mycenterservice","text":"//com.tanhua.server.service.MyCenterService public void updateNotification ( Boolean likeNotification , Boolean pinglunNotification , Boolean gonggaoNotification ) { User user = UserThreadLocal . get (); this . settingsService . updateNotification ( user . getId (), likeNotification , pinglunNotification , gonggaoNotification ); }","title":"2.9.2\u3001MyCenterService"},{"location":"tantan/day09/#293settingsservice","text":"//com.tanhua.server.service.SettingsService public void updateNotification ( Long userId , Boolean likeNotification , Boolean pinglunNotification , Boolean gonggaoNotification ) { QueryWrapper < Settings > queryWrapper = new QueryWrapper <> (); queryWrapper . eq ( \"user_id\" , userId ); Settings settings = this . settingsMapper . selectOne ( queryWrapper ); if ( null == settings ){ //\u5982\u679c\u6ca1\u6709\u6570\u636e\u7684\u8bdd\uff0c\u63d2\u5165\u4e00\u6761\u6570\u636e settings = new Settings (); settings . setUserId ( userId ); this . settingsMapper . insert ( settings ); } else { //\u66f4\u65b0 settings . setLikeNotification ( likeNotification ); settings . setPinglunNotification ( pinglunNotification ); settings . setGonggaoNotification ( gonggaoNotification ); this . settingsMapper . update ( settings , queryWrapper ); } }","title":"2.9.3\u3001SettingsService"},{"location":"tantan/day09/#310","text":"\u66f4\u65b0\u624b\u673a\u53f7\u7684\u903b\u8f91\u5728sso\u7cfb\u7edf\u4e2d\u5b8c\u6210\uff0c\u5176\u6d41\u7a0b\u662f\uff1a\u65e7\u624b\u673a\u53f7\u83b7\u53d6\u9a8c\u8bc1\u7801\uff0c\u9a8c\u8bc1\u7801\u6821\u9a8c\u901a\u8fc7\u540e\uff0c\u8bbe\u7f6e\u65b0\u624b\u673a\u53f7\uff0c\u6700\u540e\u4fdd\u5b58\u65b0\u7684\u624b\u673a\u53f7\u3002 \u6b65\u9aa41\uff0c\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801\uff1ahttps://mock-java.itheima.net/project/35/interface/api/947 \u6b65\u9aa42\uff0c\u6821\u9a8c\u9a8c\u8bc1\u7801\uff1ahttps://mock-java.itheima.net/project/35/interface/api/953 \u6b65\u9aa43\uff0c\u4fdd\u5b58\u65b0\u624b\u673a\u53f7\uff1ahttps://mock-java.itheima.net/project/35/interface/api/959 \u914d\u7f6enginx\uff1a location /users/phone { #\u8bf7\u6c42\u8def\u5f84\u4e2d\u51e1\u662f\u4ee5/user/phone\u5f00\u5934\u7684\u8bf7\u6c42\uff0c\u8f6c\u53d1\u5230sso\u7cfb\u7edf client_max_body_size 300m ; #\u8bbe\u7f6e\u6700\u5927\u7684\u8bf7\u6c42\u4f53\u5927\u5c0f\uff0c\u89e3\u51b3\u5927\u6587\u4ef6\u4e0a\u4f20\u4e0d\u4e86\u7684\u95ee\u9898 proxy_connect_timeout 300s ; #\u4ee3\u7406\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4 proxy_send_timeout 300s ; #\u4ee3\u7406\u53d1\u9001\u6570\u636e\u7684\u8d85\u65f6\u65f6\u95f4 proxy_read_timeout 300s ; #\u4ee3\u7406\u8bfb\u53d6\u6570\u636e\u7684\u8d85\u65f6\u65f6\u95f4 proxy_pass http://127.0.0.1:18080 ; #\u8f6c\u53d1\u8bf7\u6c42 }","title":"3.10\u3001\u66f4\u65b0\u624b\u673a\u53f7"},{"location":"tantan/day09/#3101","text":"MyCenterController: //com.tanhua.sso.controller.MyCenterController /** * \u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801 * * @return */ @PostMapping ( \"phone/sendVerificationCode\" ) public ResponseEntity < Void > sendVerificationCode ( @RequestHeader ( \"Authorization\" ) String token ) { try { boolean bool = this . myCenterService . sendVerificationCode ( token ); if ( bool ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } MyCenterService: //com.tanhua.sso.service.MyCenterService package com.tanhua.sso.service ; import com.tanhua.common.pojo.User ; import com.tanhua.sso.vo.ErrorResult ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; @Service public class MyCenterService { @Autowired private UserService userService ; @Autowired private SmsService smsService ; public Boolean sendVerificationCode ( String token ) { //\u6821\u9a8ctoken User user = this . userService . queryUserByToken ( token ); if ( ObjectUtil . isEmpty ( user )){ return false ; } ErrorResult errorResult = this . smsService . sendCheckCode ( user . getMobile ()); return errorResult == null ; } }","title":"3.10.1\u3001 \u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801"},{"location":"tantan/day09/#3102","text":"MyCenterController\uff1a //com.tanhua.sso.controller.MyCenterController /** * \u6821\u9a8c\u9a8c\u8bc1\u7801 * * @param param * @param token * @return */ @PostMapping ( \"phone/checkVerificationCode\" ) public ResponseEntity < Map < String , Object >> checkVerificationCode ( @RequestBody Map < String , String > param , @RequestHeader ( \"Authorization\" ) String token ) { try { String code = param . get ( \"verificationCode\" ); Boolean bool = this . myCenterService . checkVerificationCode ( code , token ); Map < String , Object > result = new HashMap <> (); result . put ( \"verification\" , bool ); return ResponseEntity . ok ( result ); } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } MyCenterService\uff1a //com.tanhua.sso.service.MyCenterService public Boolean checkVerificationCode ( String code , String token ) { //\u6821\u9a8ctoken User user = this . userService . queryUserByToken ( token ); if ( ObjectUtil . isEmpty ( user )){ return false ; } //\u6821\u9a8c\u9a8c\u8bc1\u7801\uff0c\u5148\u67e5\u8be2redis\u4e2d\u7684\u9a8c\u8bc1\u7801 String redisKey = \"CHECK_CODE_\" + user . getMobile (); String value = this . redisTemplate . opsForValue (). get ( redisKey ); if ( StrUtil . equals ( code , value )){ //\u5c06\u9a8c\u8bc1\u7801\u5220\u9664 this . redisTemplate . delete ( redisKey ); return true ; } return false ; }","title":"3.10.2\u3001 \u6821\u9a8c\u9a8c\u8bc1\u7801"},{"location":"tantan/day09/#3103","text":"MyCenterController\uff1a //com.tanhua.sso.controller.MyCenterController /** * \u4fdd\u5b58\u65b0\u624b\u673a\u53f7 * * @return */ @PostMapping ( \"phone\" ) public ResponseEntity < Void > updatePhone ( @RequestBody Map < String , String > param , @RequestHeader ( \"Authorization\" ) String token ) { try { String newPhone = param . get ( \"phone\" ); boolean bool = this . myCenterService . updatePhone ( token , newPhone ); if ( bool ) { return ResponseEntity . ok ( null ); } } catch ( Exception e ) { e . printStackTrace (); } return ResponseEntity . status ( HttpStatus . INTERNAL_SERVER_ERROR ). build (); } MyCenterService\uff1a //com.tanhua.sso.service.MyCenterService public Boolean updatePhone ( String token , String newPhone ) { //\u6821\u9a8ctoken User user = this . userService . queryUserByToken ( token ); if ( ObjectUtil . isEmpty ( user )){ return false ; } Boolean result = this . userService . updatePhone ( user . getId (), newPhone ); if ( result ){ String redisKey = \"TANHUA_USER_MOBILE_\" + user . getId (); this . redisTemplate . delete ( redisKey ); } return result ; } UserService\uff1a //com.tanhua.sso.service.UserService public Boolean updatePhone ( Long userId , String newPhone ) { //\u5148\u67e5\u8be2\u65b0\u624b\u673a\u53f7\u662f\u5426\u5df2\u7ecf\u6ce8\u518c\uff0c\u5982\u679c\u5df2\u7ecf\u6ce8\u518c\uff0c\u5c31\u4e0d\u80fd\u4fee\u6539 QueryWrapper < User > queryWrapper = new QueryWrapper <> (); queryWrapper . eq ( \"mobile\" , newPhone ); User user = this . userMapper . selectOne ( queryWrapper ); if ( ObjectUtil . isNotEmpty ( user )){ //\u65b0\u624b\u673a\u53f7\u5df2\u7ecf\u88ab\u6ce8\u518c return false ; } user = new User (); user . setId ( userId ); user . setMobile ( newPhone ); return this . userMapper . updateById ( user ) > 0 ; }","title":"3.10.3\u3001\u4fdd\u5b58\u65b0\u624b\u673a\u53f7"},{"location":"tantan/day09/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/","text":"\u72ec\u7acb\u5b9e\u73b0\u6211\u7684\u559c\u6b22\u529f\u80fd \u72ec\u7acb\u5b9e\u73b0\u7528\u6237\u901a\u7528\u8bbe\u7f6e \u72ec\u7acb\u5b9e\u73b0\u9ed1\u540d\u5355\u529f\u80fd \u72ec\u7acb\u5b9e\u73b0\u4fee\u6539\u624b\u673a\u53f7\u529f\u80fd","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"tantan/day10/","text":"\u8bfe\u7a0b\u8bf4\u660e \u00b6 \u4e86\u89e3\u63a8\u8350\u7cfb\u7edf \u5b9e\u73b0\u597d\u53cb\u7684\u63a8\u8350 \u5708\u5b50\u63a8\u8350\u529f\u80fd\u8bf4\u660e \u5708\u5b50\u63a8\u8350\u529f\u80fd\u6d41\u7a0b \u5708\u5b50\u63a8\u8350\u529f\u80fd\u7684\u5b9e\u73b0 \u5c0f\u89c6\u9891\u63a8\u8350\u529f\u80fd\u7684\u5b9e\u73b0 1\u3001\u4e86\u89e3\u63a8\u8350\u7cfb\u7edf \u00b6 1.1\u3001\u4ec0\u4e48\u662f\u63a8\u8350\u7cfb\u7edf\uff1f \u00b6 \u4e3a\u4e86\u89e3\u51b3\u4fe1\u606f\u8fc7\u8f7d\u548c\u7528\u6237\u65e0\u660e\u786e\u9700\u6c42\u7684\u95ee\u9898\uff0c\u627e\u5230\u7528\u6237\u611f\u5174\u8da3\u7684\u7269\u54c1\uff0c\u624d\u6709\u4e86\u4e2a\u6027\u5316\u63a8\u8350\u7cfb\u7edf\u3002 \u5176\u5b9e\uff0c\u89e3\u51b3\u4fe1\u606f\u8fc7\u8f7d\u7684\u95ee\u9898\uff0c\u4ee3\u8868\u6027\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5206\u7c7b\u76ee\u5f55\u548c\u641c\u7d22\u5f15\u64ce\uff0c\u5982hao123\uff0c\u7535\u5546\u9996\u9875\u7684\u5206\u7c7b\u76ee\u5f55\u4ee5\u53ca\u767e\u5ea6\uff0c360\u641c\u7d22\u7b49\u3002 \u4e0d\u8fc7\u5206\u7c7b\u76ee\u5f55\u548c\u641c\u7d22\u5f15\u64ce\u53ea\u80fd\u89e3\u51b3\u7528\u6237\u4e3b\u52a8\u67e5\u627e\u4fe1\u606f\u7684\u9700\u6c42\uff0c\u5373\u7528\u6237\u77e5\u9053\u81ea\u5df1\u60f3\u8981\u4ec0\u4e48\uff0c\u5e76\u4e0d\u80fd\u89e3\u51b3\u7528\u6237\u6ca1\u7528\u660e\u786e\u9700\u6c42\u5f88\u968f\u4fbf\u7684\u95ee\u9898\u3002 \u7ecf\u5178\u8bed\u5f55\u662f\uff1a\u4f60\u60f3\u5403\u4ec0\u4e48\uff0c\u968f\u4fbf\uff01\u9762\u5bf9\u8fd9\u79cd\u5f88\u968f\u4fbf\u53c8\u5f97\u7f6a\u4e0d\u8d77\u7684\u7528\u6237\uff08\u5973\u53cb\u548c\u4e0a\u5e1d\uff09\uff0c\u53ea\u80fd \u901a\u8fc7\u5206\u6790\u7528\u6237\u7684\u5386\u53f2\u884c\u4e3a\u7ed9\u7528\u6237\u7684\u5174\u8da3\u5efa\u6a21 \uff0c\u4ece\u800c\u4e3b\u52a8\u7ed9\u7528\u6237\u63a8\u8350\u80fd\u591f\u6ee1\u8db3\u4ed6\u4eec\u5174\u8da3\u548c\u9700\u6c42\u7684\u4fe1\u606f\u3002\u6bd4\u5982\u95ee\u95ee\u5973\u53cb\u7684\u95fa\u871c\uff0c\u5979\u4e00\u822c\u4ec0\u4e48\u65f6\u5019\u559c\u6b22\u5403\u4ec0\u4e48\u3002 1.2\u3001\u7535\u5546\u662f\u63a8\u8350\u7cfb\u7edf\u7684\u5148\u884c\u8005 \u00b6 [ ] \u7535\u5b50\u5546\u52a1\u7f51\u7ad9\u662f\u4e2a\u6027\u5316\u63a8\u8350\u7cfb\u7edf\u91cd\u8981\u5730\u5e94\u7528\u7684\u9886\u57df\u4e4b\u4e00\uff0c\u4e9a\u9a6c\u900a\u5c31\u662f\u4e2a\u6027\u5316\u63a8\u8350\u7cfb\u7edf\u7684\u79ef\u6781\u5e94\u7528\u8005\u548c\u63a8\u5e7f\u8005\uff0c\u4e9a\u9a6c\u900a\u7684\u63a8\u8350\u7cfb\u7edf\u6df1\u5165\u5230\u7f51\u7ad9\u7684\u5404\u7c7b\u5546\u54c1\uff0c\u4e3a\u4e9a\u9a6c\u900a\u5e26\u6765\u4e86\u81f3\u5c1130%\u7684\u9500\u552e\u989d\u3002 [ ] \u4e0d\u5149\u662f\u7535\u5546\u7c7b\uff0c\u63a8\u8350\u7cfb\u7edf\u65e0\u5904\u4e0d\u5728\u3002QQ\uff0c\u5fae\u4fe1\u7684\u597d\u53cb\u63a8\u8350\uff1b\u65b0\u6d6a\u5fae\u535a\u7684\u4f60\u53ef\u80fd\u611f\u5174\u8da3\u7684\u4eba\uff1b\u4f18\u9177\uff0c\u571f\u8c46\u7684\u7535\u5f71\u63a8\u8350\uff1b\u8c46\u74e3\u7684\u56fe\u4e66\u63a8\u8350\uff1b\u5927\u4ece\u70b9\u8bc4\u7684\u9910\u996e\u63a8\u8350\uff1b\u8109\u8109\u7684\u540c\u4e8b\u63a8\u8350\u7b49\u3002 [ ] \u63a8\u8350\u5f15\u64ce\u7684\u9f3b\u7956\u601d\u60f3\u6e90\u6cc9\uff1ahttp://portal.acm.org/citation.cfm?id=1070751 [ ] \u4e9a\u9a6c\u900a\u6700\u65e9\u63d0\u51fa\u57fa\u4e8d\u7269\u54c1\u7684\u534f\u540c\u8fc7\u6ee4\u63a8\u8350\u7b97\u6cd5\uff1ahttp://portal.acm.org/citation.cfm?id=372071 \u4eac\u4e1c\u7684\u63a8\u8350\uff1a 1.3\u3001\u63a8\u8350\u7cfb\u7edf\u4e1a\u52a1\u6d41\u7a0b \u00b6 \u63a8\u8350\u7cfb\u7edf\u5e7f\u6cdb\u5b58\u5728\u4e8e\u5404\u7c7b\u7f51\u7ad9\u4e2d\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u5e94\u7528\u4e3a\u7528\u6237\u63d0\u4f9b\u4e2a\u6027\u5316\u7684\u63a8\u8350\u3002\u5b83\u9700\u8981\u4e00\u4e9b\u7528\u6237\u7684\u5386\u53f2\u6570\u636e\uff0c\u4e00\u822c\u7531\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a\u57fa\u7840\u6570\u636e\u3001\u63a8\u8350\u7b97\u6cd5\u7cfb\u7edf\u3001\u524d\u53f0\u5c55\u793a\u3002 \u57fa\u7840\u6570\u636e\u5305\u62ec\u5f88\u591a\u7ef4\u5ea6\uff0c\u5305\u62ec\u7528\u6237\u7684\u8bbf\u95ee\u3001\u6d4f\u89c8\u3001\u4e0b\u5355\u3001\u6536\u85cf\uff0c\u7528\u6237\u7684\u5386\u53f2\u8ba2\u5355\u4fe1\u606f\uff0c\u8bc4\u4ef7\u4fe1\u606f\u7b49\u5f88\u591a\u4fe1\u606f\uff1b \u63a8\u8350\u7b97\u6cd5\u7cfb\u7edf\u4e3b\u8981\u662f\u6839\u636e\u4e0d\u540c\u7684\u63a8\u8350\u8bc9\u6c42\u7531\u591a\u4e2a\u7b97\u6cd5\u7ec4\u6210\u7684\u63a8\u8350\u6a21\u578b\uff1b \u524d\u53f0\u5c55\u793a\u4e3b\u8981\u662f\u5bf9\u5ba2\u6237\u7aef\u7cfb\u7edf\u8fdb\u884c\u54cd\u5e94\uff0c\u8fd4\u56de\u76f8\u5173\u7684\u63a8\u8350\u4fe1\u606f\u4ee5\u4f9b\u5c55\u793a\u3002 1.4\u3001\u534f\u540c\u8fc7\u6ee4\u63a8\u8350\u7b97\u6cd5 \u00b6 \u8fc4\u4eca\u4e3a\u6b62\uff0c\u5728\u4e2a\u6027\u5316\u63a8\u8350\u7cfb\u7edf\u4e2d\uff0c\u534f\u540c\u8fc7\u6ee4\u6280\u672f\u662f\u5e94\u7528\u6700\u6210\u529f\u7684\u6280\u672f\u3002\u76ee\u524d\u56fd\u5185\u5916\u6709\u8bb8\u591a\u5927\u578b\u7f51\u7ad9\u5e94\u7528\u8fd9\u9879\u6280\u672f\u4e3a\u7528\u6237\u66f4\u52a0\u667a\u80fd\uff08\u4e2a\u6027\u5316\u3001\u5343\u4eba\u5343\u9762\uff09\u7684\u63a8\u8350\u5185\u5bb9\u3002 \u6838\u5fc3\u601d\u60f3\uff1a \u534f\u540c\u8fc7\u6ee4\u4e00\u822c\u662f\u5728\u6d77\u91cf\u7684\u7528\u6237\u4e2d\u53d1\u6398\u51fa\u4e00\u5c0f\u90e8\u5206\u548c\u4f60\u54c1\u4f4d\u6bd4\u8f83\u7c7b\u4f3c\u7684\uff0c\u5728\u534f\u540c\u8fc7\u6ee4\u4e2d\uff0c\u8fd9\u4e9b\u7528\u6237\u6210\u4e3a\u90bb\u5c45\uff0c\u7136\u540e\u6839\u636e\u4ed6\u4eec\u559c\u6b22\u7684\u5176\u4ed6\u4e1c\u897f\u7ec4\u7ec7\u6210\u4e00\u4e2a\u6392\u5e8f\u7684\u76ee\u5f54\u4f5c\u4e3a\u63a8\u8350\u7ed9\u4f60\u3002 1.4.1\u3001\u57fa\u4e8e\u7528\u6237\u7684\u63a8\u8350 UserCF \u00b6 \u5bf9\u4e8e\u7528\u6237A\uff0c\u6839\u636e\u7528\u6237\u7684\u5386\u53f2\u504f\u597d\uff0c\u8fd9\u91cc\u53ea\u8ba1\u7b97\u5f97\u5230\u4e00\u4e2a\u90bb\u5c45\u2013\u7528\u6237C\uff0c\u7136\u540e\u5c06\u7528\u6237C \u559c\u6b22\u7684\u7269\u54c1D \u63a8\u8350\u7ed9\u7528\u6237A\u3002 \u57fa\u4e8e\u7528\u6237\u7684\u534f\u540c\u8fc7\u6ee4\u7b97\u6cd5\u5148\u8ba1\u7b97\u7684\u662f\u7528\u6237\u4e0e\u7528\u6237\u7684\u76f8\u4f3c\u5ea6\uff08\u5174\u8da3\u76f8\u6295\uff0c\u7269\u4ee5\u7c7b\u805a\u4eba\u4ee5\u7fa4\u5206\uff09\uff0c\u7136\u540e\u5c06\u76f8\u4f3c\u5ea6\u6bd4\u8f83\u63a5\u8fd1\u7684\u7528\u6237A\u8d2d\u4e70\u7684\u7269\u54c1\u63a8\u8350\u7ed9\u7528\u6237B\uff0c\u4e13\u4e1a\u7684\u8bf4\u6cd5\u662f\u8be5\u7b97\u6cd5\u7528\u6700\u8fd1\u90bb\u5c45\uff08nearest-neighbor\uff09\u7b97\u6cd5\u627e\u51fa\u4e00\u4e2a\u7528\u6237\u7684\u90bb\u5c45\u96c6\u5408\uff0c\u8be5\u96c6\u5408\u7684\u7528\u6237\u548c\u8be5\u7528\u6237\u6709\u76f8\u4f3c\u7684\u559c\u597d\uff0c\u7b97\u6cd5\u6839\u636e\u90bb\u5c45\u7684\u504f\u597d\u5bf9\u8be5\u7528\u6237\u8fdb\u884c\u9884\u6d4b\u3002 1.4.2\u3001\u57fa\u4e8e\u5546\u54c1\u7684\u63a8\u8350 ItemCF \u00b6 \u57fa\u4e8eItemCF\u7684\u539f\u7406\u548c\u57fa\u4e8eUserCF\u7c7b\u4f3c\uff0c\u53ea\u662f\u5728\u8ba1\u7b97\u90bb\u5c45\u65f6\u91c7\u7528\u7269\u54c1\u672c\u8eab\uff0c\u800c\u4e0d\u662f\u4ece\u7528\u6237\u7684\u89d2\u5ea6\uff0c\u5373\u57fa\u4e8e\u7528\u6237\u5bf9\u7269\u54c1\u7684\u504f\u597d\u627e\u5230\u76f8\u4f3c\u7684\u7269\u54c1\uff0c\u7136\u540e\u6839\u636e\u7528\u6237\u7684\u5386\u53f2\u504f\u597d\uff0c\u63a8\u8350\u76f8\u4f3c\u7684\u7269\u54c1\u7ed9\u4ed6\u3002 \u4ece\u8ba1\u7b97\u7684\u89d2\u5ea6\u770b\uff0c\u5c31\u662f\u5c06\u6240\u6709\u7528\u6237\u5bf9\u67d0\u4e2a\u7269\u54c1\u7684\u504f\u597d\u4f5c\u4e3a\u4e00\u4e2a\u5411\u91cf\u6765\u8ba1\u7b97\u7269\u54c1\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\uff0c\u5f97\u5230\u7269\u54c1\u7684\u76f8\u4f3c\u7269\u54c1\u540e\uff0c\u6839\u636e\u7528\u6237\u5386\u53f2\u7684\u504f\u597d\u9884\u6d4b\u5f53\u524d\u7528\u6237\u8fd8\u6ca1\u6709\u8868\u793a\u504f\u597d\u7684\u7269\u54c1\uff0c\u8ba1\u7b97\u5f97\u5230\u4e00\u4e2a\u6392\u5e8f\u7684\u7269\u54c1\u5217\u8868\u4f5c\u4e3a\u63a8\u8350\u3002 \u89e3\u91ca\uff1a\u5bf9\u4e8e\u7269\u54c1A\uff0c\u6839\u636e\u6240\u6709\u7528\u6237\u7684\u5386\u53f2\u504f\u597d\uff0c\u559c\u6b22\u7269\u54c1A \u7684\u7528\u6237\u90fd\u559c\u6b22\u7269\u54c1C\uff0c\u5f97\u51fa\u7269\u54c1A \u548c\u7269\u54c1C \u6bd4\u8f83\u76f8\u4f3c\uff0c\u800c\u7528\u6237C \u559c\u6b22\u7269\u54c1A\uff0c\u90a3\u4e48\u53ef\u4ee5\u63a8\u65ad\u51fa\u7528\u6237C \u53ef\u80fd\u4e5f\u559c\u6b22\u7269\u54c1C\u3002 1.5\u3001ALS\u7b97\u6cd5 \u00b6 ALS \u662f\u4ea4\u66ff\u6700\u5c0f\u4e8c\u4e58 \uff08alternating least squares\uff09\u7684\u7b80\u79f0\u3002\u5728\u673a\u5668\u5b66\u4e60\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0cALS \u7279\u6307\u4f7f\u7528\u4ea4\u66ff\u6700\u5c0f\u4e8c\u4e58\u6c42\u89e3\u7684\u4e00\u4e2a\u534f\u540c\u63a8\u8350\u7b97\u6cd5\u3002\u5b83\u901a\u8fc7\u89c2\u5bdf\u5230\u7684\u6240\u6709\u7528\u6237\u7ed9\u4ea7\u54c1\u7684\u6253\u5206\uff0c\u6765\u63a8\u65ad\u6bcf\u4e2a\u7528\u6237\u7684\u559c\u597d\u5e76\u5411\u7528\u6237\u63a8\u8350\u9002\u5408\u7684\u4ea7\u54c1\u3002\u4ece\u534f\u540c\u8fc7\u6ee4\u7684\u5206\u7c7b\u6765\u8bf4\uff0cALS\u7b97\u6cd5\u5c5e\u4e8eUser-Item CF\uff0c\u4e5f\u53eb\u505a\u6df7\u5408CF\u3002\u5b83\u540c\u65f6\u8003\u8651\u4e86User\u548cItem\u4e24\u4e2a\u65b9\u9762\u3002 \u7528\u6237\u548c\u5546\u54c1\u7684\u5173\u7cfb\uff0c\u53ef\u4ee5\u62bd\u8c61\u4e3a\u5982\u4e0b\u7684\u4e09\u5143\u7ec4\uff1a \u3002\u5176\u4e2d\uff0cRating\u662f\u7528\u6237\u5bf9\u5546\u54c1\u7684\u8bc4\u5206\uff0c\u8868\u5f81\u7528\u6237\u5bf9\u8be5\u5546\u54c1\u7684\u559c\u597d\u7a0b\u5ea6\u3002\u5982\u4e0b\uff1a 196 242 3 881250949 186 302 3 891717742 22 377 1 878887116 244 51 2 880606923 166 346 1 886397596 298 474 4 884182806 115 265 2 881171488 253 465 5 891628467 305 451 3 886324817 6 86 3 883603013 62 257 2 879372434 286 1014 5 879781125 200 222 5 876042340 210 40 3 891035994 ................ 2\u3001\u597d\u53cb\u63a8\u8350 \u00b6 \u5bf9\u4e8e\u597d\u53cb\u7684\u63a8\u8350\uff0c\u9700\u8981\u627e\u51fa\u6bcf\u4e2a\u7528\u6237\u4e4b\u95f4\u7684\u76f8\u4f3c\u6027\uff0c\u5177\u4f53\u89c4\u5219\u5982\u4e0b\uff1a \u5b57\u6bb5 \u6743\u91cd\u5206 \u5e74\u9f84\u5dee 0-2\u5c81 30\u5206 3-5 20\u5206 5-10\u5c81 10\u5206 10\u5c81\u4ee5\u4e0a 0\u5206 \u6027\u522b \u5f02\u6027 30\u5206 \u540c\u6027 0\u5206 \u4f4d\u7f6e \u540c\u57ce 20\u5206 \u4e0d\u540c 0\u5206 \u5b66\u5386 \u76f8\u540c 20\u5206 \u4e0d\u540c 0\u5206 2.1\u3001\u6d41\u7a0b \u00b6 2.2\u3001\u90e8\u7f72\u597d\u53cb\u63a8\u8350\u670d\u52a1 \u00b6 #\u62c9\u53d6\u955c\u50cf docker pull registry.cn-hangzhou.aliyuncs.com/itcast/tanhua-spark-recommend-user:1.0.1 #\u521b\u5efa\u5bb9\u5668 docker create --name tanhua-spark-recommend-user \\ --env MONGODB_HOST = 192 .168.31.81 \\ --env MONGODB_PORT = 27017 \\ --env MONGODB_USERNAME = tanhua \\ --env MONGODB_PASSWORD = l3SCjl0HvmSkTtiSbN0Swv40spYnHhDV \\ --env MONGODB_DATABASE = tanhua \\ --env MONGODB_COLLECTION = recommend_user \\ --env JDBC_URL = \"jdbc:mysql://192.168.31.81:3306/mytanhua?useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true&useSSL=false\" \\ --env JDBC_DRIVER = com.mysql.jdbc.Driver \\ --env JDBC_USER = root \\ --env JDBC_PASSWORD = root \\ --env JDBC_TABLE = tb_user_info \\ --env SCHEDULE_PERIOD = 30 \\ registry.cn-hangzhou.aliyuncs.com/itcast/tanhua-spark-recommend-user:1.0.1 #\u53c2\u6570\u8bf4\u660e #MONGODB_HOST mongodb\u670d\u52a1\u7684\u5730\u5740 #MONGODB_PORT mongodb\u670d\u52a1\u7684\u7aef\u53e3 #MONGODB_USERNAME mongodb\u670d\u52a1\u7684\u8ba4\u8bc1\u7528\u6237\u540d #MONGODB_PASSWORD mongodb\u670d\u52a1\u7684\u8ba4\u8bc1\u5bc6\u7801 #MONGODB_DATABASE mongodb\u8fde\u63a5\u7684\u6570\u636e\u5e93 #MONGODB_COLLECTION \u64cd\u4f5c\u8868 #JDBC_URL mysql\u6570\u636e\u5e93\u8fde\u63a5\u5730\u5740 #JDBC_DRIVER jdbc\u9a71\u52a8 #JDBC_USER \u6570\u636e\u5e93\u8fde\u63a5\u7528\u6237\u540d #JDBC_PASSWORD \u6570\u636e\u5e93\u8fde\u63a5\u5bc6\u7801 #JDBC_TABLE \u6570\u636e\u5e93\u8868\u540d #SCHEDULE_PERIOD \u4e0b\u6b21\u6267\u884c\u65f6\u95f4\u95f4\u9694\uff0c\u4f46\u662f\u4e3a\u5206\uff0c\u9ed8\u8ba4\u4e3a10\u5206\u949f #\u542f\u52a8\u670d\u52a1 docker start tanhua-spark-recommend-user #\u67e5\u770b\u65e5\u5fd7 docker logs -f tanhua-spark-recommend-user \u6267\u884c\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u770b\u5230MongoDB\u4e2d\u7684recommend_user\u8868\u4e2d\u6570\u636e\u5df2\u7ecf\u91cd\u65b0\u751f\u6210\u4e86\u3002 3\u3001\u5708\u5b50\u63a8\u8350 \u00b6 3.1\u3001\u529f\u80fd\u8bf4\u660e \u00b6 \u5728\u5708\u5b50\u529f\u80fd\u4e2d\uff0c\u9488\u5bf9\u4e8e\u7528\u6237\u53d1\u5e03\u7684\u52a8\u6001\u4fe1\u606f\uff0c\u7cfb\u7edf\u53ef\u4ee5\u6839\u636e\u7528\u6237\u7684\u53d1\u5e03\u3001\u6d4f\u89c8\u3001\u70b9\u8d5e\u7b49\u64cd\u4f5c\uff0c\u5bf9\u52a8\u6001\u4fe1\u606f\u505a\u8ba1\u7b97\uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a\u7528\u6237\u8fdb\u884c\u4e0d\u540c\u7684\u63a8\u8350\u3002 3.2\u3001\u6d41\u7a0b\u8bf4\u660e \u00b6 \u6d41\u7a0b\u8bf4\u660e\uff1a \u7528\u6237\u5bf9\u5708\u5b50\u7684\u52a8\u6001\u64cd\u4f5c\uff0c\u5982\uff1a\u53d1\u5e03\u3001\u6d4f\u89c8\u3001\u70b9\u8d5e\u3001\u559c\u6b22\u7b49\uff0c\u5c31\u4f1a\u7ed9RocketMQ\u8fdb\u884c\u53d1\u9001\u6d88\u606f\uff1b \u63a8\u8350\u7cfb\u7edf\u63a5\u6536\u6d88\u606f\uff0c\u5e76\u4e14\u5904\u7406\u6d88\u606f\u6570\u636e\uff0c\u5904\u7406\u4e4b\u540e\u5c06\u7ed3\u679c\u6570\u636e\u5199\u5165\u5230MongoDB\u4e2d\uff1b Spark\u7cfb\u7edf\u62c9\u53d6\u6570\u636e\uff0c\u7136\u540e\u8fdb\u884c\u63a8\u8350\u8ba1\u7b97\uff1b \u8ba1\u7b97\u4e4b\u540e\u7684\u7ed3\u679c\u6570\u636e\u5199\u5165\u5230Redis\u4e2d\uff0c\u4e3a\u6bcf\u4e2a\u7528\u6237\u90fd\u8fdb\u884c\u4e2a\u6027\u5316\u63a8\u8350\uff1b 3.3\u3001\u52a8\u6001\u8ba1\u5206\u89c4\u5219 \u00b6 \u6d4f\u89c8 +1 \u70b9\u8d5e +5 \u559c\u6b22 +8 \u8bc4\u8bba + 10 \u53d1\u5e03\u52a8\u6001 \u6587\u5b57\u957f\u5ea6\uff1a50\u4ee5\u51851\u5206\uff0c50~100\u4e4b\u95f42\u5206\uff0c100\u4ee5\u4e0a3\u5206 \u56fe\u7247\u4e2a\u6570\uff1a\u6bcf\u4e2a\u56fe\u7247\u4e00\u5206 \u6838\u5fc3\u63a8\u8350\u903b\u8f91\uff1a \u63a8\u8350\u6a21\u578b\uff1a\u7528\u6237 | \u52a8\u6001 | \u8bc4\u5206 \u5176\u4e2d\uff0c\u8bc4\u5206\u662f\u7528\u6237\u5bf9\u52a8\u6001\u64cd\u4f5c\u7684\u5f97\u5206\u5408\u8ba1 \u4e3a\u4ec0\u4e48\u81ea\u5df1\u53d1\u5e03\u52a8\u6001\u8fd8\u8981\u8ba1\u5206\uff1f \u662f\u56e0\u4e3a\uff0c\u81ea\u5df1\u53d1\u5e03\u5c31\u76f8\u5f53\u4e8e\u81ea\u5df1\u5bf9\u6b64\u52a8\u6001\u4e5f\u611f\u5174\u8da3\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u76f8\u4f3c\u7684\u4eba\u4e4b\u95f4\u8fdb\u884c\u63a8\u8350\u4e86\u3002 3.4\u3001\u53d1\u9001\u6d88\u606f \u00b6 3.4.1\u3001QuanziMQService \u00b6 my-tanhua-server\u589e\u52a0\u4f9d\u8d56\uff1a <!--RocketMQ\u76f8\u5173--> <dependency> <groupId> org.apache.rocketmq </groupId> <artifactId> rocketmq-spring-boot-starter </artifactId> </dependency> <dependency> <groupId> org.apache.rocketmq </groupId> <artifactId> rocketmq-client </artifactId> </dependency> \u914d\u7f6e\u6587\u4ef6\uff1a # RocketMQ\u76f8\u5173\u914d\u7f6e rocketmq.name-server = 192.168.31.81:9876 rocketmq.producer.group = tanhua package com.tanhua.server.service ; import com.alibaba.dubbo.config.annotation.Reference ; import com.tanhua.common.pojo.User ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.dubbo.server.api.QuanZiApi ; import com.tanhua.dubbo.server.pojo.Publish ; import lombok.extern.slf4j.Slf4j ; import org.apache.rocketmq.spring.core.RocketMQTemplate ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import java.util.HashMap ; import java.util.Map ; @Service @Slf4j public class QuanziMQService { @Autowired private RocketMQTemplate rocketMQTemplate ; @Reference ( version = \"1.0.0\" ) private QuanZiApi quanZiApi ; /** * \u53d1\u5e03\u52a8\u6001\u6d88\u606f * * @param publishId * @return */ public Boolean publishMsg ( String publishId ) { return this . sendMsg ( publishId , 1 ); } /** * \u6d4f\u89c8\u52a8\u6001\u6d88\u606f * * @param publishId * @return */ public Boolean queryPublishMsg ( String publishId ) { return this . sendMsg ( publishId , 2 ); } /** * \u70b9\u8d5e\u52a8\u6001\u6d88\u606f * * @param publishId * @return */ public Boolean likePublishMsg ( String publishId ) { return this . sendMsg ( publishId , 3 ); } /** * \u53d6\u6d88\u70b9\u8d5e\u52a8\u6001\u6d88\u606f * * @param publishId * @return */ public Boolean disLikePublishMsg ( String publishId ) { return this . sendMsg ( publishId , 6 ); } /** * \u559c\u6b22\u52a8\u6001\u6d88\u606f * * @param publishId * @return */ public Boolean lovePublishMsg ( String publishId ) { return this . sendMsg ( publishId , 4 ); } /** * \u53d6\u6d88\u559c\u6b22\u52a8\u6001\u6d88\u606f * * @param publishId * @return */ public Boolean disLovePublishMsg ( String publishId ) { return this . sendMsg ( publishId , 7 ); } /** * \u8bc4\u8bba\u52a8\u6001\u6d88\u606f * * @param publishId * @return */ public Boolean commentPublishMsg ( String publishId ) { return this . sendMsg ( publishId , 5 ); } /** * \u53d1\u9001\u5708\u5b50\u64cd\u4f5c\u76f8\u5173\u7684\u6d88\u606f * * @param publishId * @param type 1-\u53d1\u52a8\u6001\uff0c2-\u6d4f\u89c8\u52a8\u6001\uff0c 3-\u70b9\u8d5e\uff0c 4-\u559c\u6b22\uff0c 5-\u8bc4\u8bba\uff0c6-\u53d6\u6d88\u70b9\u8d5e\uff0c7-\u53d6\u6d88\u559c\u6b22 * @return */ private Boolean sendMsg ( String publishId , Integer type ) { try { User user = UserThreadLocal . get (); Publish publish = this . quanZiApi . queryPublishById ( publishId ); //\u6784\u5efa\u6d88\u606f Map < String , Object > msg = new HashMap <> (); msg . put ( \"userId\" , user . getId ()); msg . put ( \"date\" , System . currentTimeMillis ()); msg . put ( \"publishId\" , publishId ); msg . put ( \"pid\" , publish . getPid ()); msg . put ( \"type\" , type ); this . rocketMQTemplate . convertAndSend ( \"tanhua-quanzi\" , msg ); } catch ( Exception e ) { log . error ( \"\u53d1\u9001\u6d88\u606f\u5931\u8d25! publishId = \" + publishId + \", type = \" + type , e ); return false ; } return true ; } } 3.4.2\u3001\u4fee\u6539QuanZiService \u00b6 \u5728QuanZiService\u5b8c\u6210\u53d1\u9001\u6d88\u606f\u65b9\u6cd5\u8c03\u7528\u3002 package com.tanhua.server.service ; import cn.hutool.core.bean.BeanUtil ; import cn.hutool.core.collection.CollUtil ; import cn.hutool.core.convert.Convert ; import cn.hutool.core.date.DateUtil ; import cn.hutool.core.util.ObjectUtil ; import cn.hutool.core.util.StrUtil ; import com.alibaba.dubbo.config.annotation.Reference ; import com.tanhua.common.pojo.User ; import com.tanhua.common.pojo.UserInfo ; import com.tanhua.common.service.PicUploadService ; import com.tanhua.common.utils.RelativeDateFormat ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.common.vo.PicUploadResult ; import com.tanhua.dubbo.server.api.QuanZiApi ; import com.tanhua.dubbo.server.api.VisitorsApi ; import com.tanhua.dubbo.server.pojo.Comment ; import com.tanhua.dubbo.server.pojo.Publish ; import com.tanhua.dubbo.server.pojo.Visitors ; import com.tanhua.dubbo.server.vo.PageInfo ; import com.tanhua.server.vo.CommentVo ; import com.tanhua.server.vo.PageResult ; import com.tanhua.server.vo.QuanZiVo ; import com.tanhua.server.vo.VisitorsVo ; import org.apache.commons.lang3.StringUtils ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import org.springframework.web.multipart.MultipartFile ; import java.util.* ; @Service public class QuanZiService { @Reference ( version = \"1.0.0\" ) private QuanZiApi quanZiApi ; @Reference ( version = \"1.0.0\" ) private VisitorsApi visitorsApi ; @Autowired private UserService userService ; @Autowired private UserInfoService userInfoService ; @Autowired private PicUploadService picUploadService ; @Autowired private QuanziMQService quanziMQService ; public PageResult queryPublishList ( Integer page , Integer pageSize ) { //\u5206\u6790\uff1a\u901a\u8fc7dubbo\u4e2d\u7684\u670d\u52a1\u67e5\u8be2\u7528\u6237\u7684\u597d\u53cb\u52a8\u6001 //\u901a\u8fc7mysql\u67e5\u8be2\u7528\u6237\u7684\u4fe1\u606f\uff0c\u56de\u5199\u5230\u7ed3\u679c\u5bf9\u8c61\u4e2d\uff08QuanZiVo\uff09 PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); //\u76f4\u63a5\u4eceThreadLocal\u4e2d\u83b7\u53d6\u5bf9\u8c61 User user = UserThreadLocal . get (); //\u901a\u8fc7dubbo\u67e5\u8be2\u6570\u636e PageInfo < Publish > pageInfo = this . quanZiApi . queryPublishList ( user . getId (), page , pageSize ); List < Publish > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )) { return pageResult ; } pageResult . setItems ( this . fillQuanZiVo ( records )); return pageResult ; } /** * \u586b\u5145\u7528\u6237\u4fe1\u606f * * @param userInfo * @param quanZiVo */ private void fillUserInfoToQuanZiVo ( UserInfo userInfo , QuanZiVo quanZiVo ) { BeanUtil . copyProperties ( userInfo , quanZiVo , \"id\" ); quanZiVo . setGender ( userInfo . getSex (). name (). toLowerCase ()); quanZiVo . setTags ( StringUtils . split ( userInfo . getTags (), ',' )); //\u5f53\u524d\u7528\u6237 User user = UserThreadLocal . get (); quanZiVo . setCommentCount ( 0 ); //TODO \u8bc4\u8bba\u6570 quanZiVo . setDistance ( \"1.2\u516c\u91cc\" ); //TODO \u8ddd\u79bb quanZiVo . setHasLiked ( this . quanZiApi . queryUserIsLike ( user . getId (), quanZiVo . getId ()) ? 1 : 0 ); //\u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 quanZiVo . setLikeCount ( Convert . toInt ( this . quanZiApi . queryLikeCount ( quanZiVo . getId ()))); //\u70b9\u8d5e\u6570 quanZiVo . setHasLoved ( this . quanZiApi . queryUserIsLove ( user . getId (), quanZiVo . getId ()) ? 1 : 0 ); //\u662f\u5426\u559c\u6b22\uff081\u662f\uff0c0\u5426\uff09 quanZiVo . setLoveCount ( Convert . toInt ( this . quanZiApi . queryLoveCount ( quanZiVo . getId ()))); //\u559c\u6b22\u6570 } /** * \u6839\u636e\u67e5\u8be2\u5230\u7684publish\u96c6\u5408\u586b\u5145QuanZiVo\u5bf9\u8c61 * * @param records * @return */ private List < QuanZiVo > fillQuanZiVo ( List < Publish > records ) { List < QuanZiVo > quanZiVoList = new ArrayList <> (); records . forEach ( publish -> { QuanZiVo quanZiVo = new QuanZiVo (); quanZiVo . setId ( publish . getId (). toHexString ()); quanZiVo . setTextContent ( publish . getText ()); quanZiVo . setImageContent ( publish . getMedias (). toArray ( new String [] {})); quanZiVo . setUserId ( publish . getUserId ()); quanZiVo . setCreateDate ( RelativeDateFormat . format ( new Date ( publish . getCreated ()))); quanZiVoList . add ( quanZiVo ); }); //\u67e5\u8be2\u7528\u6237\u4fe1\u606f List < Object > userIds = CollUtil . getFieldValues ( records , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIds ); for ( QuanZiVo quanZiVo : quanZiVoList ) { //\u627e\u5230\u5bf9\u5e94\u7684\u7528\u6237\u4fe1\u606f for ( UserInfo userInfo : userInfoList ) { if ( quanZiVo . getUserId (). longValue () == userInfo . getUserId (). longValue ()) { this . fillUserInfoToQuanZiVo ( userInfo , quanZiVo ); break ; } } } return quanZiVoList ; } /** * \u53d1\u5e03\u52a8\u6001 * * @param textContent * @param location * @param latitude * @param longitude * @param multipartFile * @return */ public String savePublish ( String textContent , String location , String latitude , String longitude , MultipartFile [] multipartFile ) { //\u67e5\u8be2\u5f53\u524d\u7684\u767b\u5f55\u4fe1\u606f User user = UserThreadLocal . get (); Publish publish = new Publish (); publish . setUserId ( user . getId ()); publish . setText ( textContent ); publish . setLocationName ( location ); publish . setLatitude ( latitude ); publish . setLongitude ( longitude ); publish . setSeeType ( 1 ); List < String > picUrls = new ArrayList <> (); //\u56fe\u7247\u4e0a\u4f20 for ( MultipartFile file : multipartFile ) { PicUploadResult picUploadResult = this . picUploadService . upload ( file ); picUrls . add ( picUploadResult . getName ()); } publish . setMedias ( picUrls ); String publishId = this . quanZiApi . savePublish ( publish ); if ( StrUtil . isNotEmpty ( publishId )){ //\u53d1\u9001\u6d88\u606f this . quanziMQService . publishMsg ( publishId ); } return publishId ; } public PageResult queryRecommendPublishList ( Integer page , Integer pageSize ) { //\u5206\u6790\uff1a\u901a\u8fc7dubbo\u4e2d\u7684\u670d\u52a1\u67e5\u8be2\u7cfb\u7edf\u63a8\u8350\u52a8\u6001 //\u901a\u8fc7mysql\u67e5\u8be2\u7528\u6237\u7684\u4fe1\u606f\uff0c\u56de\u5199\u5230\u7ed3\u679c\u5bf9\u8c61\u4e2d\uff08QuanZiVo\uff09 PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); //\u76f4\u63a5\u4eceThreadLocal\u4e2d\u83b7\u53d6\u5bf9\u8c61 User user = UserThreadLocal . get (); //\u901a\u8fc7dubbo\u67e5\u8be2\u6570\u636e PageInfo < Publish > pageInfo = this . quanZiApi . queryRecommendPublishList ( user . getId (), page , pageSize ); List < Publish > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )) { return pageResult ; } pageResult . setItems ( this . fillQuanZiVo ( records )); return pageResult ; } /** * \u52a8\u6001\u70b9\u8d5e * @param publishId * @return */ public Long likeComment ( String publishId ) { User user = UserThreadLocal . get (); Boolean result = this . quanZiApi . likeComment ( user . getId (), publishId ); if ( result ) { //\u53d1\u6d88\u606f this . quanziMQService . likePublishMsg ( publishId ); //\u67e5\u8be2\u70b9\u8d5e\u6570 return this . quanZiApi . queryLikeCount ( publishId ); } return null ; } /** * \u52a8\u6001\u7684\u53d6\u6d88\u70b9\u8d5e * * @param publishId * @return */ public Long disLikeComment ( String publishId ) { User user = UserThreadLocal . get (); Boolean result = this . quanZiApi . disLikeComment ( user . getId (), publishId ); if ( result ) { //\u53d1\u6d88\u606f this . quanziMQService . disLikePublishMsg ( publishId ); //\u67e5\u8be2\u70b9\u8d5e\u6570 return this . quanZiApi . queryLikeCount ( publishId ); } return null ; } public Long loveComment ( String publishId ) { User user = UserThreadLocal . get (); //\u559c\u6b22 Boolean result = this . quanZiApi . loveComment ( user . getId (), publishId ); if ( result ){ //\u53d1\u6d88\u606f this . quanziMQService . lovePublishMsg ( publishId ); //\u67e5\u8be2\u559c\u6b22\u6570 return this . quanZiApi . queryLoveCount ( publishId ); } return null ; } public Long disLoveComment ( String publishId ) { User user = UserThreadLocal . get (); //\u53d6\u6d88\u559c\u6b22 Boolean result = this . quanZiApi . disLoveComment ( user . getId (), publishId ); if ( result ){ //\u53d1\u6d88\u606f this . quanziMQService . disLovePublishMsg ( publishId ); //\u67e5\u8be2\u559c\u6b22\u6570 return this . quanZiApi . queryLoveCount ( publishId ); } return null ; } public QuanZiVo queryById ( String publishId ) { Publish publish = this . quanZiApi . queryPublishById ( publishId ); if ( publish == null ) { return null ; } //\u53d1\u6d88\u606f this . quanziMQService . queryPublishMsg ( publishId ); return this . fillQuanZiVo ( Arrays . asList ( publish )). get ( 0 ); } /** * \u67e5\u8be2\u8bc4\u8bba\u5217\u8868 * * @param publishId * @param page * @param pageSize * @return */ public PageResult queryCommentList ( String publishId , Integer page , Integer pageSize ) { PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); User user = UserThreadLocal . get (); //\u67e5\u8be2\u8bc4\u8bba\u5217\u8868\u6570\u636e PageInfo < Comment > pageInfo = this . quanZiApi . queryCommentList ( publishId , page , pageSize ); List < Comment > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )){ return pageResult ; } //\u67e5\u8be2\u7528\u6237\u4fe1\u606f List < Object > userIdList = CollUtil . getFieldValues ( records , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIdList ); List < CommentVo > result = new ArrayList <> (); for ( Comment record : records ) { CommentVo commentVo = new CommentVo (); commentVo . setContent ( record . getContent ()); commentVo . setId ( record . getId (). toHexString ()); commentVo . setCreateDate ( DateUtil . format ( new Date ( record . getCreated ()), \"HH:mm\" )); //\u662f\u5426\u70b9\u8d5e commentVo . setHasLiked ( this . quanZiApi . queryUserIsLike ( user . getId (), commentVo . getId ()) ? 1 : 0 ); //\u70b9\u8d5e\u6570 commentVo . setLikeCount ( Convert . toInt ( this . quanZiApi . queryLikeCount ( commentVo . getId ()))); for ( UserInfo userInfo : userInfoList ) { if ( ObjectUtil . equals ( record . getUserId (), userInfo . getUserId ())){ commentVo . setAvatar ( userInfo . getLogo ()); commentVo . setNickname ( userInfo . getNickName ()); break ; } } result . add ( commentVo ); } pageResult . setItems ( result ); return pageResult ; } /** * \u53d1\u8868\u8bc4\u8bba * @param publishId * @param content * @return */ public Boolean saveComments ( String publishId , String content ) { User user = UserThreadLocal . get (); Boolean result = this . quanZiApi . saveComment ( user . getId (), publishId , content ); if ( result ){ //\u53d1\u6d88\u606f this . quanziMQService . commentPublishMsg ( publishId ); } return result ; } public PageResult queryAlbumList ( Long userId , Integer page , Integer pageSize ) { PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); //\u67e5\u8be2\u6570\u636e PageInfo < Publish > pageInfo = this . quanZiApi . queryAlbumList ( userId , page , pageSize ); if ( CollUtil . isEmpty ( pageInfo . getRecords ())){ return pageResult ; } //\u586b\u5145\u6570\u636e pageResult . setItems ( this . fillQuanZiVo ( pageInfo . getRecords ())); return pageResult ; } public List < VisitorsVo > queryVisitorsList () { User user = UserThreadLocal . get (); List < Visitors > visitorsList = this . visitorsApi . queryMyVisitor ( user . getId ()); if ( CollUtil . isEmpty ( visitorsList )) { return Collections . emptyList (); } List < Object > userIds = CollUtil . getFieldValues ( visitorsList , \"visitorUserId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIds ); List < VisitorsVo > visitorsVoList = new ArrayList <> (); for ( Visitors visitor : visitorsList ) { for ( UserInfo userInfo : userInfoList ) { if ( ObjectUtil . equals ( visitor . getVisitorUserId (), userInfo . getUserId ())) { VisitorsVo visitorsVo = new VisitorsVo (); visitorsVo . setAge ( userInfo . getAge ()); visitorsVo . setAvatar ( userInfo . getLogo ()); visitorsVo . setGender ( userInfo . getSex (). name (). toLowerCase ()); visitorsVo . setId ( userInfo . getUserId ()); visitorsVo . setNickname ( userInfo . getNickName ()); visitorsVo . setTags ( StringUtils . split ( userInfo . getTags (), ',' )); visitorsVo . setFateValue ( visitor . getScore (). intValue ()); visitorsVoList . add ( visitorsVo ); break ; } } } return visitorsVoList ; } } 3.5\u3001\u63a5\u6536\u6d88\u606f \u00b6 \u63a5\u6536\u6d88\u606f\u7684\u5de5\u4f5c\u9700\u8981\u65b0\u521b\u5efamy-tanhua-recommend\u5de5\u7a0b\uff0c\u5728\u6b64\u5de5\u7a0b\u4e2d\u5b8c\u6210\u76f8\u5173\u7684\u64cd\u4f5c\u3002 3.5.1\u3001\u521b\u5efamy-tanhua-recommend\u5de5\u7a0b \u00b6 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> my-tanhua </artifactId> <groupId> cn.itcast.tanhua </groupId> <version> 1.0-SNAPSHOT </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> my-tanhua-recommend </artifactId> <dependencies> <!--\u5f15\u5165interface\u4f9d\u8d56--> <dependency> <groupId> cn.itcast.tanhua </groupId> <artifactId> my-tanhua-dubbo-interface </artifactId> <version> 1.0-SNAPSHOT </version> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-test </artifactId> <scope> test </scope> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-redis </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-mongodb </artifactId> </dependency> <!--RocketMQ\u76f8\u5173--> <dependency> <groupId> org.apache.rocketmq </groupId> <artifactId> rocketmq-spring-boot-starter </artifactId> </dependency> <dependency> <groupId> org.apache.rocketmq </groupId> <artifactId> rocketmq-client </artifactId> </dependency> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> </dependency> <dependency> <groupId> joda-time </groupId> <artifactId> joda-time </artifactId> </dependency> <dependency> <groupId> cn.hutool </groupId> <artifactId> hutool-all </artifactId> </dependency> </dependencies> </project> 3.5.2\u3001\u914d\u7f6e\u6587\u4ef6 \u00b6 application.properties spring.application.name = itcast-rocketmq server.port = 18082 # RocketMQ\u76f8\u5173\u914d\u7f6e rocketmq.name-server = 192.168.31.81:9876 rocketmq.producer.group = tanhua # mongodb\u76f8\u5173\u914d\u7f6e spring.data.mongodb.username = tanhua spring.data.mongodb.password = l3SCjl0HvmSkTtiSbN0Swv40spYnHhDV spring.data.mongodb.authentication-database = admin spring.data.mongodb.database = tanhua spring.data.mongodb.port = 27017 spring.data.mongodb.host = 192.168.31.81 3.5.3\u3001\u542f\u52a8\u7c7b \u00b6 package com.tanhua.recommend ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @SpringBootApplication public class RecommendApplication { public static void main ( String [] args ) { SpringApplication . run ( RecommendApplication . class , args ); } } 3.5.4\u3001RecommendQuanZi \u00b6 \u5b58\u50a8\u5230MongoDB\u7684\u4e2d\u7684\u5b9e\u4f53\u7ed3\u6784\u3002 package com.tanhua.recommend.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.mongodb.core.mapping.Document ; @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"recommend_quanzi\" ) public class RecommendQuanZi { private ObjectId id ; private Long userId ; // \u7528\u6237id private Long publishId ; //\u52a8\u6001id\uff0c\u9700\u8981\u8f6c\u5316\u4e3aLong\u7c7b\u578b private Double score ; //\u5f97\u5206 private Long date ; //\u65f6\u95f4\u6233 } 3.5.5\u3001QuanZiMsgConsumer \u00b6 package com.tanhua.recommend.msg ; import cn.hutool.core.collection.CollUtil ; import cn.hutool.core.util.ObjectUtil ; import cn.hutool.core.util.StrUtil ; import cn.hutool.json.JSONObject ; import cn.hutool.json.JSONUtil ; import com.tanhua.dubbo.server.pojo.Publish ; import com.tanhua.recommend.pojo.RecommendQuanZi ; import lombok.extern.slf4j.Slf4j ; import org.apache.rocketmq.spring.annotation.RocketMQMessageListener ; import org.apache.rocketmq.spring.core.RocketMQListener ; import org.bson.types.ObjectId ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.mongodb.core.MongoTemplate ; import org.springframework.stereotype.Component ; @Component @RocketMQMessageListener ( topic = \"tanhua-quanzi\" , consumerGroup = \"tanhua-quanzi-consumer\" ) @Slf4j public class QuanZiMsgConsumer implements RocketMQListener < String > { @Autowired private MongoTemplate mongoTemplate ; @Override public void onMessage ( String msg ) { try { JSONObject jsonObject = JSONUtil . parseObj ( msg ); Long userId = jsonObject . getLong ( \"userId\" ); Long date = jsonObject . getLong ( \"date\" ); String publishId = jsonObject . getStr ( \"publishId\" ); Long pid = jsonObject . getLong ( \"pid\" ); Integer type = jsonObject . getInt ( \"type\" ); RecommendQuanZi recommendQuanZi = new RecommendQuanZi (); recommendQuanZi . setUserId ( userId ); recommendQuanZi . setId ( ObjectId . get ()); recommendQuanZi . setDate ( date ); recommendQuanZi . setPublishId ( pid ); //1-\u53d1\u52a8\u6001\uff0c2-\u6d4f\u89c8\u52a8\u6001\uff0c 3-\u70b9\u8d5e\uff0c 4-\u559c\u6b22\uff0c 5-\u8bc4\u8bba\uff0c6-\u53d6\u6d88\u70b9\u8d5e\uff0c7-\u53d6\u6d88\u559c\u6b22 switch ( type ) { case 1 : { Publish publish = this . mongoTemplate . findById ( new ObjectId ( publishId ), Publish . class ); if ( ObjectUtil . isNotEmpty ( publish )) { double score = 0d ; //\u83b7\u53d6\u56fe\u7247\u6570 score += CollUtil . size ( publish . getMedias ()); //\u83b7\u53d6\u6587\u672c\u7684\u957f\u5ea6 //\u6587\u5b57\u957f\u5ea6\uff1a50\u4ee5\u51851\u5206\uff0c50~100\u4e4b\u95f42\u5206\uff0c100\u4ee5\u4e0a3\u5206 int length = StrUtil . length ( publish . getText ()); if ( length >= 0 && length < 50 ) { score += 1 ; } else if ( length < 100 ) { score += 2 ; } else { score += 3 ; } recommendQuanZi . setScore ( score ); } break ; } case 2 : { recommendQuanZi . setScore ( 1d ); break ; } case 3 : { recommendQuanZi . setScore ( 5d ); break ; } case 4 : { recommendQuanZi . setScore ( 8d ); break ; } case 5 : { recommendQuanZi . setScore ( 10 d ); break ; } case 6 : { recommendQuanZi . setScore ( - 5d ); break ; } case 7 : { recommendQuanZi . setScore ( - 8d ); break ; } default : { recommendQuanZi . setScore ( 0d ); break ; } } //\u6570\u636e\u4fdd\u5b58\u5230MongoDB\u4e2d this . mongoTemplate . save ( recommendQuanZi ); } catch ( Exception e ) { log . error ( \"\u5904\u7406\u6d88\u606f\u51fa\u9519\uff01msg = \" + msg , e ); } } } 1.7\u3001\u6d4b\u8bd5 \u00b6 \u6d4b\u8bd5\u65b9\u6cd5\uff1a\u4f7f\u7528APP\u8fdb\u884c\u64cd\u4f5c\uff0c\u53ef\u4ee5\u770b\u5230\u5728MongoDB\u4e2d\u5df2\u7ecf\u6709\u6570\u636e\u5199\u5165\u3002 4\u3001\u90e8\u7f72\u63a8\u8350\u7cfb\u7edf \u00b6 \u5728\u63a8\u8350\u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u5c06\u57fa\u4e8e\u524d\u9762\u5199\u5165\u5230\u63a8\u8350\u8868\u4e2d\u7684\u6570\u636e\u901a\u8fc7Spark\u8fdb\u884c\u8ba1\u7b97\uff0c\u5728Spark\u8ba1\u7b97\u5b8c\u6210\u540e\u5c06\u7ed3\u679c\u5199\u5165\u5230Redis\u4e2d\uff0c\u4ee5\u4f9b\u5728\u4e1a\u52a1\u7cfb\u7edf\u4e2d\u8fdb\u884c\u67e5\u8be2\u3002 \u63a8\u8350\u670d\u52a1\u6211\u4eec\u5c06\u57fa\u4e8edocker\u7684\u5f62\u5f0f\u8fdb\u884c\u90e8\u7f72\uff1a #\u62c9\u53d6\u955c\u50cf docker pull registry.cn-hangzhou.aliyuncs.com/itcast/tanhua-spark-quanzi:1.0 #\u521b\u5efa\u5bb9\u5668 docker create --name tanhua-spark-quanzi \\ --env MONGODB_HOST = 192 .168.31.81 \\ --env MONGODB_PORT = 27017 \\ --env MONGODB_USERNAME = tanhua \\ --env MONGODB_PASSWORD = l3SCjl0HvmSkTtiSbN0Swv40spYnHhDV \\ --env MONGODB_DATABASE = tanhua \\ --env MONGODB_COLLECTION = recommend_quanzi \\ --env SCHEDULE_PERIOD = 10 \\ --env REDIS_NODES = \"192.168.31.81:6379,192.168.31.81:6380,192.168.31.81:6381\" \\ registry.cn-hangzhou.aliyuncs.com/itcast/tanhua-spark-quanzi:1.0 #\u53c2\u6570\u8bf4\u660e #MONGODB_HOST mongodb\u670d\u52a1\u7684\u5730\u5740 #MONGODB_PORT mongodb\u670d\u52a1\u7684\u7aef\u53e3 #MONGODB_USERNAME mongodb\u670d\u52a1\u7684\u8ba4\u8bc1\u7528\u6237\u540d #MONGODB_PASSWORD mongodb\u670d\u52a1\u7684\u8ba4\u8bc1\u5bc6\u7801 #MONGODB_DATABASE mongodb\u8fde\u63a5\u7684\u6570\u636e\u5e93 #MONGODB_COLLECTION \u64cd\u4f5c\u8868 #SCHEDULE_PERIOD \u4e0b\u6b21\u6267\u884c\u65f6\u95f4\u95f4\u9694\uff0c\u4f46\u662f\u4e3a\u5206\uff0c\u9ed8\u8ba4\u4e3a10\u5206\u949f #REDIS_NODES redis\u96c6\u7fa4\u5730\u5740\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5355\u8282\u70b9 #mongodb\u5f00\u542f\u8ba4\u8bc1\u670d\u52a1 #docker create --name mongodb --restart=always -p 27017:27017 -v mongodb:/data/db mongo:4.0.3 --auth #\u542f\u52a8\u670d\u52a1\uff0c\u542f\u52a8\u4e4b\u540e\u5c31\u4f1a\u8fdb\u884c\u6267\u884c\uff0c\u5728SCHEDULE_PERIOD\u65f6\u95f4\u540e\u518d\u6b21\u6267\u884c docker start tanhua-spark-quanzi #\u67e5\u770b\u65e5\u5fd7 docker logs -f tanhua-spark-quanzi #\u6267\u884c\u5b8c\u6210\u540e\u4f1a\u5c06\u6570\u636e\u5199\u5165\u5230redis\u4e2d \u8fdb\u5165redis\u67e5\u770b\u662f\u5426\u5df2\u7ecf\u6709\u6570\u636e\uff1a 5\u3001\u5c0f\u89c6\u9891\u63a8\u8350 \u00b6 \u5c0f\u89c6\u9891\u7684\u63a8\u8350\u548c\u52a8\u6001\u63a8\u8350\u7684\u5b9e\u73b0\u903b\u8f91\u975e\u5e38\u7684\u7c7b\u4f3c\u3002 5.1\u3001\u52a8\u6001\u8ba1\u5206\u89c4\u5219 \u00b6 \u53d1\u5e03+2 \u70b9\u8d5e +5 \u8bc4\u8bba + 10 5.2\u3001\u53d1\u9001\u6d88\u606f \u00b6 5.2.1\u3001VideoMQService \u00b6 package com.tanhua.server.service ; import com.alibaba.dubbo.config.annotation.Reference ; import com.tanhua.common.pojo.User ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.dubbo.server.api.VideoApi ; import com.tanhua.dubbo.server.pojo.Video ; import lombok.extern.slf4j.Slf4j ; import org.apache.rocketmq.spring.core.RocketMQTemplate ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import java.util.HashMap ; import java.util.Map ; @Service @Slf4j public class VideoMQService { @Autowired private RocketMQTemplate rocketMQTemplate ; @Reference ( version = \"1.0.0\" ) private VideoApi videoApi ; /** * \u53d1\u5e03\u5c0f\u89c6\u9891\u6d88\u606f * * @return */ public Boolean videoMsg ( String videoId ) { return this . sendMsg ( videoId , 1 ); } /** * \u70b9\u8d5e\u5c0f\u89c6\u9891 * * @return */ public Boolean likeVideoMsg ( String videoId ) { return this . sendMsg ( videoId , 2 ); } /** * \u53d6\u6d88\u70b9\u8d5e\u5c0f\u89c6\u9891 * * @return */ public Boolean disLikeVideoMsg ( String videoId ) { return this . sendMsg ( videoId , 3 ); } /** * \u8bc4\u8bba\u5c0f\u89c6\u9891 * * @return */ public Boolean commentVideoMsg ( String videoId ) { return this . sendMsg ( videoId , 4 ); } /** * \u53d1\u9001\u5c0f\u89c6\u9891\u64cd\u4f5c\u76f8\u5173\u7684\u6d88\u606f * * @param videoId * @param type 1-\u53d1\u52a8\u6001\uff0c2-\u70b9\u8d5e\uff0c 3-\u53d6\u6d88\u70b9\u8d5e\uff0c4-\u8bc4\u8bba * @return */ private Boolean sendMsg ( String videoId , Integer type ) { try { User user = UserThreadLocal . get (); Video video = this . videoApi . queryVideoById ( videoId ); //\u6784\u5efa\u6d88\u606f Map < String , Object > msg = new HashMap <> (); msg . put ( \"userId\" , user . getId ()); msg . put ( \"date\" , System . currentTimeMillis ()); msg . put ( \"videoId\" , videoId ); msg . put ( \"vid\" , video . getVid ()); msg . put ( \"type\" , type ); this . rocketMQTemplate . convertAndSend ( \"tanhua-video\" , msg ); } catch ( Exception e ) { log . error ( \"\u53d1\u9001\u6d88\u606f\u5931\u8d25! videoId = \" + videoId + \", type = \" + type , e ); return false ; } return true ; } } 4.3.2\u3001VideoService \u00b6 package com.tanhua.server.service ; import cn.hutool.core.collection.CollUtil ; import cn.hutool.core.convert.Convert ; import cn.hutool.core.util.ObjectUtil ; import cn.hutool.core.util.StrUtil ; import com.alibaba.dubbo.config.annotation.Reference ; import com.github.tobato.fastdfs.domain.conn.FdfsWebServer ; import com.github.tobato.fastdfs.domain.fdfs.StorePath ; import com.github.tobato.fastdfs.service.FastFileStorageClient ; import com.tanhua.common.pojo.User ; import com.tanhua.common.pojo.UserInfo ; import com.tanhua.common.service.PicUploadService ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.common.vo.PicUploadResult ; import com.tanhua.dubbo.server.api.QuanZiApi ; import com.tanhua.dubbo.server.api.VideoApi ; import com.tanhua.dubbo.server.pojo.Video ; import com.tanhua.dubbo.server.vo.PageInfo ; import com.tanhua.server.vo.PageResult ; import com.tanhua.server.vo.VideoVo ; import lombok.extern.slf4j.Slf4j ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import org.springframework.web.multipart.MultipartFile ; import java.io.IOException ; import java.util.ArrayList ; import java.util.List ; @Service @Slf4j public class VideoService { @Reference ( version = \"1.0.0\" ) private VideoApi videoApi ; @Autowired private PicUploadService picUploadService ; @Autowired protected FastFileStorageClient storageClient ; @Autowired private FdfsWebServer fdfsWebServer ; @Autowired private UserInfoService userInfoService ; @Reference ( version = \"1.0.0\" ) private QuanZiApi quanZiApi ; @Autowired private QuanZiService quanZiService ; @Autowired private VideoMQService videoMQService ; /** * \u5c0f\u89c6\u9891\u4e0a\u4f20 * * @param picFile \u5c01\u9762\u56fe\u7247 * @param videoFile \u89c6\u9891\u6587\u4ef6 * @return */ public Boolean saveVideo ( MultipartFile picFile , MultipartFile videoFile ) { User user = UserThreadLocal . get (); Video video = new Video (); video . setUserId ( user . getId ()); video . setSeeType ( 1 ); try { //\u4e0a\u4f20\u56fe\u7247\u5230\u963f\u91cc\u4e91oss PicUploadResult uploadResult = this . picUploadService . upload ( picFile ); video . setPicUrl ( uploadResult . getName ()); //\u4e0a\u4f20\u89c6\u9891\u5230FastDFS\u4e2d StorePath storePath = this . storageClient . uploadFile ( videoFile . getInputStream (), videoFile . getSize (), StrUtil . subAfter ( videoFile . getOriginalFilename (), '.' , true ), null ); video . setVideoUrl ( fdfsWebServer . getWebServerUrl () + storePath . getFullPath ()); String videoId = this . videoApi . saveVideo ( video ); if ( StrUtil . isNotEmpty ( videoId )){ //\u53d1\u9001\u6d88\u606f this . videoMQService . videoMsg ( videoId ); } return StrUtil . isNotEmpty ( videoId ); } catch ( IOException e ) { log . error ( \"\u4e0a\u4f20\u5c0f\u89c6\u9891\u51fa\u9519~ userId = \" + user . getId () + \", file = \" + videoFile . getOriginalFilename (), e ); } return null ; } public PageResult queryVideoList ( Integer page , Integer pageSize ) { User user = UserThreadLocal . get (); PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); PageInfo < Video > pageInfo = this . videoApi . queryVideoList ( user . getId (), page , pageSize ); List < Video > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )) { return pageResult ; } //\u67e5\u8be2\u7528\u6237\u4fe1\u606f List < Object > userIds = CollUtil . getFieldValues ( records , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIds ); List < VideoVo > videoVoList = new ArrayList <> (); for ( Video record : records ) { VideoVo videoVo = new VideoVo (); videoVo . setUserId ( record . getUserId ()); videoVo . setCover ( record . getPicUrl ()); videoVo . setVideoUrl ( record . getVideoUrl ()); videoVo . setId ( record . getId (). toHexString ()); videoVo . setSignature ( \"\u6211\u5c31\u662f\u6211~\" ); //TODO \u7b7e\u540d videoVo . setCommentCount ( Convert . toInt ( this . quanZiApi . queryCommentCount ( videoVo . getId ()))); //\u8bc4\u8bba\u6570 videoVo . setHasFocus ( this . videoApi . isFollowUser ( user . getId (), videoVo . getUserId ()) ? 1 : 0 ); //\u662f\u5426\u5173\u6ce8 videoVo . setHasLiked ( this . quanZiApi . queryUserIsLike ( user . getId (), videoVo . getId ()) ? 1 : 0 ); //\u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 videoVo . setLikeCount ( Convert . toInt ( this . quanZiApi . queryLikeCount ( videoVo . getId ()))); //\u70b9\u8d5e\u6570 //\u586b\u5145\u7528\u6237\u4fe1\u606f for ( UserInfo userInfo : userInfoList ) { if ( ObjectUtil . equals ( videoVo . getUserId (), userInfo . getUserId ())) { videoVo . setNickname ( userInfo . getNickName ()); videoVo . setAvatar ( userInfo . getLogo ()); break ; } } videoVoList . add ( videoVo ); } pageResult . setItems ( videoVoList ); return pageResult ; } /** * \u70b9\u8d5e * * @param videoId * @return */ public Long likeComment ( String videoId ) { User user = UserThreadLocal . get (); Boolean result = this . quanZiApi . likeComment ( user . getId (), videoId ); if ( result ) { //\u53d1\u9001\u6d88\u606f this . videoMQService . likeVideoMsg ( videoId ); return this . quanZiApi . queryLikeCount ( videoId ); } return null ; } /** * \u53d6\u6d88\u70b9\u8d5e * * @param videoId * @return */ public Long disLikeComment ( String videoId ) { User user = UserThreadLocal . get (); Boolean result = this . quanZiApi . disLikeComment ( user . getId (), videoId ); if ( result ) { //\u53d1\u9001\u6d88\u606f this . videoMQService . disLikeVideoMsg ( videoId ); return this . quanZiApi . queryLikeCount ( videoId ); } return null ; } public Boolean saveComment ( String videoId , String content ) { Boolean result = this . quanZiService . saveComments ( videoId , content ); if ( result ){ //\u53d1\u9001\u6d88\u606f this . videoMQService . commentVideoMsg ( videoId ); } return result ; } public PageResult queryCommentList ( String videoId , Integer page , Integer pageSize ) { return this . quanZiService . queryCommentList ( videoId , page , pageSize ); } /** * \u5173\u6ce8\u7528\u6237 * * @param userId * @return */ public Boolean followUser ( Long userId ) { User user = UserThreadLocal . get (); return this . videoApi . followUser ( user . getId (), userId ); } /** * \u53d6\u6d88\u5173\u6ce8 * * @param userId * @return */ public Boolean disFollowUser ( Long userId ) { User user = UserThreadLocal . get (); return this . videoApi . disFollowUser ( user . getId (), userId ); } } 5.3\u3001\u63a5\u6536\u6d88\u606f \u00b6 5.3.1\u3001RecommendVideo \u00b6 package com.tanhua.recommend.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.mongodb.core.mapping.Document ; @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"recommend_video\" ) public class RecommendVideo { private ObjectId id ; private Long userId ; // \u7528\u6237id private Long videoId ; //\u89c6\u9891id\uff0c\u9700\u8981\u8f6c\u5316\u4e3aLong\u7c7b\u578b private Double score ; //\u5f97\u5206 private Long date ; //\u65f6\u95f4\u6233 } 5.3.2\u3001VideoMsgConsumer \u00b6 package com.tanhua.recommend.msg ; import cn.hutool.json.JSONObject ; import cn.hutool.json.JSONUtil ; import com.tanhua.recommend.pojo.RecommendVideo ; import lombok.extern.slf4j.Slf4j ; import org.apache.rocketmq.spring.annotation.RocketMQMessageListener ; import org.apache.rocketmq.spring.core.RocketMQListener ; import org.bson.types.ObjectId ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.mongodb.core.MongoTemplate ; import org.springframework.stereotype.Component ; @Component @RocketMQMessageListener ( topic = \"tanhua-video\" , consumerGroup = \"tanhua-video-consumer\" ) @Slf4j public class VideoMsgConsumer implements RocketMQListener < String > { @Autowired private MongoTemplate mongoTemplate ; @Override public void onMessage ( String msg ) { try { JSONObject jsonObject = JSONUtil . parseObj ( msg ); Long userId = jsonObject . getLong ( \"userId\" ); Long vid = jsonObject . getLong ( \"vid\" ); Integer type = jsonObject . getInt ( \"type\" ); //1-\u53d1\u52a8\u6001\uff0c2-\u70b9\u8d5e\uff0c 3-\u53d6\u6d88\u70b9\u8d5e\uff0c4-\u8bc4\u8bba RecommendVideo recommendVideo = new RecommendVideo (); recommendVideo . setUserId ( userId ); recommendVideo . setId ( ObjectId . get ()); recommendVideo . setDate ( System . currentTimeMillis ()); recommendVideo . setVideoId ( vid ); switch ( type ) { case 1 : { recommendVideo . setScore ( 2d ); break ; } case 2 : { recommendVideo . setScore ( 5d ); break ; } case 3 : { recommendVideo . setScore ( - 5d ); break ; } case 4 : { recommendVideo . setScore ( 10 d ); break ; } default : { recommendVideo . setScore ( 0d ); break ; } } this . mongoTemplate . save ( recommendVideo ); } catch ( Exception e ) { log . error ( \"\u5904\u7406\u5c0f\u89c6\u9891\u6d88\u606f\u5931\u8d25~\" + msg , e ); } } } 5.3.3\u3001\u6d4b\u8bd5 \u00b6 \u53ef\u4ee5\u770b\u5230\uff0c\u7528\u62371\u5bf9\u4e8e\u89c6\u9891\u6709\u70b9\u8d5e\u3001\u53d6\u6d88\u70b9\u8d5e\u3001\u8bc4\u8bba\u7b49\u64cd\u4f5c\u3002 5.4\u3001\u90e8\u7f72\u63a8\u8350\u670d\u52a1 \u00b6 #\u62c9\u53d6\u955c\u50cf docker pull registry.cn-hangzhou.aliyuncs.com/itcast/tanhua-spark-video:1.0 #\u521b\u5efa\u5bb9\u5668 docker create --name tanhua-spark-video \\ --env MONGODB_HOST = 192 .168.31.81 \\ --env MONGODB_PORT = 27017 \\ --env MONGODB_USERNAME = tanhua \\ --env MONGODB_PASSWORD = l3SCjl0HvmSkTtiSbN0Swv40spYnHhDV \\ --env MONGODB_DATABASE = tanhua \\ --env MONGODB_COLLECTION = recommend_video \\ --env SCHEDULE_PERIOD = 10 \\ --env REDIS_NODES = \"192.168.31.81:6379,192.168.31.81:6380,192.168.31.81:6381\" \\ registry.cn-hangzhou.aliyuncs.com/itcast/tanhua-spark-video:1.0 #\u542f\u52a8\u670d\u52a1 docker start tanhua-spark-video #\u67e5\u770b\u65e5\u5fd7 docker logs -f tanhua-spark-video \u6d4b\u8bd5\uff1a","title":"day10"},{"location":"tantan/day10/#_1","text":"\u4e86\u89e3\u63a8\u8350\u7cfb\u7edf \u5b9e\u73b0\u597d\u53cb\u7684\u63a8\u8350 \u5708\u5b50\u63a8\u8350\u529f\u80fd\u8bf4\u660e \u5708\u5b50\u63a8\u8350\u529f\u80fd\u6d41\u7a0b \u5708\u5b50\u63a8\u8350\u529f\u80fd\u7684\u5b9e\u73b0 \u5c0f\u89c6\u9891\u63a8\u8350\u529f\u80fd\u7684\u5b9e\u73b0","title":"\u8bfe\u7a0b\u8bf4\u660e"},{"location":"tantan/day10/#1","text":"","title":"1\u3001\u4e86\u89e3\u63a8\u8350\u7cfb\u7edf"},{"location":"tantan/day10/#11","text":"\u4e3a\u4e86\u89e3\u51b3\u4fe1\u606f\u8fc7\u8f7d\u548c\u7528\u6237\u65e0\u660e\u786e\u9700\u6c42\u7684\u95ee\u9898\uff0c\u627e\u5230\u7528\u6237\u611f\u5174\u8da3\u7684\u7269\u54c1\uff0c\u624d\u6709\u4e86\u4e2a\u6027\u5316\u63a8\u8350\u7cfb\u7edf\u3002 \u5176\u5b9e\uff0c\u89e3\u51b3\u4fe1\u606f\u8fc7\u8f7d\u7684\u95ee\u9898\uff0c\u4ee3\u8868\u6027\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5206\u7c7b\u76ee\u5f55\u548c\u641c\u7d22\u5f15\u64ce\uff0c\u5982hao123\uff0c\u7535\u5546\u9996\u9875\u7684\u5206\u7c7b\u76ee\u5f55\u4ee5\u53ca\u767e\u5ea6\uff0c360\u641c\u7d22\u7b49\u3002 \u4e0d\u8fc7\u5206\u7c7b\u76ee\u5f55\u548c\u641c\u7d22\u5f15\u64ce\u53ea\u80fd\u89e3\u51b3\u7528\u6237\u4e3b\u52a8\u67e5\u627e\u4fe1\u606f\u7684\u9700\u6c42\uff0c\u5373\u7528\u6237\u77e5\u9053\u81ea\u5df1\u60f3\u8981\u4ec0\u4e48\uff0c\u5e76\u4e0d\u80fd\u89e3\u51b3\u7528\u6237\u6ca1\u7528\u660e\u786e\u9700\u6c42\u5f88\u968f\u4fbf\u7684\u95ee\u9898\u3002 \u7ecf\u5178\u8bed\u5f55\u662f\uff1a\u4f60\u60f3\u5403\u4ec0\u4e48\uff0c\u968f\u4fbf\uff01\u9762\u5bf9\u8fd9\u79cd\u5f88\u968f\u4fbf\u53c8\u5f97\u7f6a\u4e0d\u8d77\u7684\u7528\u6237\uff08\u5973\u53cb\u548c\u4e0a\u5e1d\uff09\uff0c\u53ea\u80fd \u901a\u8fc7\u5206\u6790\u7528\u6237\u7684\u5386\u53f2\u884c\u4e3a\u7ed9\u7528\u6237\u7684\u5174\u8da3\u5efa\u6a21 \uff0c\u4ece\u800c\u4e3b\u52a8\u7ed9\u7528\u6237\u63a8\u8350\u80fd\u591f\u6ee1\u8db3\u4ed6\u4eec\u5174\u8da3\u548c\u9700\u6c42\u7684\u4fe1\u606f\u3002\u6bd4\u5982\u95ee\u95ee\u5973\u53cb\u7684\u95fa\u871c\uff0c\u5979\u4e00\u822c\u4ec0\u4e48\u65f6\u5019\u559c\u6b22\u5403\u4ec0\u4e48\u3002","title":"1.1\u3001\u4ec0\u4e48\u662f\u63a8\u8350\u7cfb\u7edf\uff1f"},{"location":"tantan/day10/#12","text":"[ ] \u7535\u5b50\u5546\u52a1\u7f51\u7ad9\u662f\u4e2a\u6027\u5316\u63a8\u8350\u7cfb\u7edf\u91cd\u8981\u5730\u5e94\u7528\u7684\u9886\u57df\u4e4b\u4e00\uff0c\u4e9a\u9a6c\u900a\u5c31\u662f\u4e2a\u6027\u5316\u63a8\u8350\u7cfb\u7edf\u7684\u79ef\u6781\u5e94\u7528\u8005\u548c\u63a8\u5e7f\u8005\uff0c\u4e9a\u9a6c\u900a\u7684\u63a8\u8350\u7cfb\u7edf\u6df1\u5165\u5230\u7f51\u7ad9\u7684\u5404\u7c7b\u5546\u54c1\uff0c\u4e3a\u4e9a\u9a6c\u900a\u5e26\u6765\u4e86\u81f3\u5c1130%\u7684\u9500\u552e\u989d\u3002 [ ] \u4e0d\u5149\u662f\u7535\u5546\u7c7b\uff0c\u63a8\u8350\u7cfb\u7edf\u65e0\u5904\u4e0d\u5728\u3002QQ\uff0c\u5fae\u4fe1\u7684\u597d\u53cb\u63a8\u8350\uff1b\u65b0\u6d6a\u5fae\u535a\u7684\u4f60\u53ef\u80fd\u611f\u5174\u8da3\u7684\u4eba\uff1b\u4f18\u9177\uff0c\u571f\u8c46\u7684\u7535\u5f71\u63a8\u8350\uff1b\u8c46\u74e3\u7684\u56fe\u4e66\u63a8\u8350\uff1b\u5927\u4ece\u70b9\u8bc4\u7684\u9910\u996e\u63a8\u8350\uff1b\u8109\u8109\u7684\u540c\u4e8b\u63a8\u8350\u7b49\u3002 [ ] \u63a8\u8350\u5f15\u64ce\u7684\u9f3b\u7956\u601d\u60f3\u6e90\u6cc9\uff1ahttp://portal.acm.org/citation.cfm?id=1070751 [ ] \u4e9a\u9a6c\u900a\u6700\u65e9\u63d0\u51fa\u57fa\u4e8d\u7269\u54c1\u7684\u534f\u540c\u8fc7\u6ee4\u63a8\u8350\u7b97\u6cd5\uff1ahttp://portal.acm.org/citation.cfm?id=372071 \u4eac\u4e1c\u7684\u63a8\u8350\uff1a","title":"1.2\u3001\u7535\u5546\u662f\u63a8\u8350\u7cfb\u7edf\u7684\u5148\u884c\u8005"},{"location":"tantan/day10/#13","text":"\u63a8\u8350\u7cfb\u7edf\u5e7f\u6cdb\u5b58\u5728\u4e8e\u5404\u7c7b\u7f51\u7ad9\u4e2d\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u5e94\u7528\u4e3a\u7528\u6237\u63d0\u4f9b\u4e2a\u6027\u5316\u7684\u63a8\u8350\u3002\u5b83\u9700\u8981\u4e00\u4e9b\u7528\u6237\u7684\u5386\u53f2\u6570\u636e\uff0c\u4e00\u822c\u7531\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a\u57fa\u7840\u6570\u636e\u3001\u63a8\u8350\u7b97\u6cd5\u7cfb\u7edf\u3001\u524d\u53f0\u5c55\u793a\u3002 \u57fa\u7840\u6570\u636e\u5305\u62ec\u5f88\u591a\u7ef4\u5ea6\uff0c\u5305\u62ec\u7528\u6237\u7684\u8bbf\u95ee\u3001\u6d4f\u89c8\u3001\u4e0b\u5355\u3001\u6536\u85cf\uff0c\u7528\u6237\u7684\u5386\u53f2\u8ba2\u5355\u4fe1\u606f\uff0c\u8bc4\u4ef7\u4fe1\u606f\u7b49\u5f88\u591a\u4fe1\u606f\uff1b \u63a8\u8350\u7b97\u6cd5\u7cfb\u7edf\u4e3b\u8981\u662f\u6839\u636e\u4e0d\u540c\u7684\u63a8\u8350\u8bc9\u6c42\u7531\u591a\u4e2a\u7b97\u6cd5\u7ec4\u6210\u7684\u63a8\u8350\u6a21\u578b\uff1b \u524d\u53f0\u5c55\u793a\u4e3b\u8981\u662f\u5bf9\u5ba2\u6237\u7aef\u7cfb\u7edf\u8fdb\u884c\u54cd\u5e94\uff0c\u8fd4\u56de\u76f8\u5173\u7684\u63a8\u8350\u4fe1\u606f\u4ee5\u4f9b\u5c55\u793a\u3002","title":"1.3\u3001\u63a8\u8350\u7cfb\u7edf\u4e1a\u52a1\u6d41\u7a0b"},{"location":"tantan/day10/#14","text":"\u8fc4\u4eca\u4e3a\u6b62\uff0c\u5728\u4e2a\u6027\u5316\u63a8\u8350\u7cfb\u7edf\u4e2d\uff0c\u534f\u540c\u8fc7\u6ee4\u6280\u672f\u662f\u5e94\u7528\u6700\u6210\u529f\u7684\u6280\u672f\u3002\u76ee\u524d\u56fd\u5185\u5916\u6709\u8bb8\u591a\u5927\u578b\u7f51\u7ad9\u5e94\u7528\u8fd9\u9879\u6280\u672f\u4e3a\u7528\u6237\u66f4\u52a0\u667a\u80fd\uff08\u4e2a\u6027\u5316\u3001\u5343\u4eba\u5343\u9762\uff09\u7684\u63a8\u8350\u5185\u5bb9\u3002 \u6838\u5fc3\u601d\u60f3\uff1a \u534f\u540c\u8fc7\u6ee4\u4e00\u822c\u662f\u5728\u6d77\u91cf\u7684\u7528\u6237\u4e2d\u53d1\u6398\u51fa\u4e00\u5c0f\u90e8\u5206\u548c\u4f60\u54c1\u4f4d\u6bd4\u8f83\u7c7b\u4f3c\u7684\uff0c\u5728\u534f\u540c\u8fc7\u6ee4\u4e2d\uff0c\u8fd9\u4e9b\u7528\u6237\u6210\u4e3a\u90bb\u5c45\uff0c\u7136\u540e\u6839\u636e\u4ed6\u4eec\u559c\u6b22\u7684\u5176\u4ed6\u4e1c\u897f\u7ec4\u7ec7\u6210\u4e00\u4e2a\u6392\u5e8f\u7684\u76ee\u5f54\u4f5c\u4e3a\u63a8\u8350\u7ed9\u4f60\u3002","title":"1.4\u3001\u534f\u540c\u8fc7\u6ee4\u63a8\u8350\u7b97\u6cd5"},{"location":"tantan/day10/#141_usercf","text":"\u5bf9\u4e8e\u7528\u6237A\uff0c\u6839\u636e\u7528\u6237\u7684\u5386\u53f2\u504f\u597d\uff0c\u8fd9\u91cc\u53ea\u8ba1\u7b97\u5f97\u5230\u4e00\u4e2a\u90bb\u5c45\u2013\u7528\u6237C\uff0c\u7136\u540e\u5c06\u7528\u6237C \u559c\u6b22\u7684\u7269\u54c1D \u63a8\u8350\u7ed9\u7528\u6237A\u3002 \u57fa\u4e8e\u7528\u6237\u7684\u534f\u540c\u8fc7\u6ee4\u7b97\u6cd5\u5148\u8ba1\u7b97\u7684\u662f\u7528\u6237\u4e0e\u7528\u6237\u7684\u76f8\u4f3c\u5ea6\uff08\u5174\u8da3\u76f8\u6295\uff0c\u7269\u4ee5\u7c7b\u805a\u4eba\u4ee5\u7fa4\u5206\uff09\uff0c\u7136\u540e\u5c06\u76f8\u4f3c\u5ea6\u6bd4\u8f83\u63a5\u8fd1\u7684\u7528\u6237A\u8d2d\u4e70\u7684\u7269\u54c1\u63a8\u8350\u7ed9\u7528\u6237B\uff0c\u4e13\u4e1a\u7684\u8bf4\u6cd5\u662f\u8be5\u7b97\u6cd5\u7528\u6700\u8fd1\u90bb\u5c45\uff08nearest-neighbor\uff09\u7b97\u6cd5\u627e\u51fa\u4e00\u4e2a\u7528\u6237\u7684\u90bb\u5c45\u96c6\u5408\uff0c\u8be5\u96c6\u5408\u7684\u7528\u6237\u548c\u8be5\u7528\u6237\u6709\u76f8\u4f3c\u7684\u559c\u597d\uff0c\u7b97\u6cd5\u6839\u636e\u90bb\u5c45\u7684\u504f\u597d\u5bf9\u8be5\u7528\u6237\u8fdb\u884c\u9884\u6d4b\u3002","title":"1.4.1\u3001\u57fa\u4e8e\u7528\u6237\u7684\u63a8\u8350 UserCF"},{"location":"tantan/day10/#142_itemcf","text":"\u57fa\u4e8eItemCF\u7684\u539f\u7406\u548c\u57fa\u4e8eUserCF\u7c7b\u4f3c\uff0c\u53ea\u662f\u5728\u8ba1\u7b97\u90bb\u5c45\u65f6\u91c7\u7528\u7269\u54c1\u672c\u8eab\uff0c\u800c\u4e0d\u662f\u4ece\u7528\u6237\u7684\u89d2\u5ea6\uff0c\u5373\u57fa\u4e8e\u7528\u6237\u5bf9\u7269\u54c1\u7684\u504f\u597d\u627e\u5230\u76f8\u4f3c\u7684\u7269\u54c1\uff0c\u7136\u540e\u6839\u636e\u7528\u6237\u7684\u5386\u53f2\u504f\u597d\uff0c\u63a8\u8350\u76f8\u4f3c\u7684\u7269\u54c1\u7ed9\u4ed6\u3002 \u4ece\u8ba1\u7b97\u7684\u89d2\u5ea6\u770b\uff0c\u5c31\u662f\u5c06\u6240\u6709\u7528\u6237\u5bf9\u67d0\u4e2a\u7269\u54c1\u7684\u504f\u597d\u4f5c\u4e3a\u4e00\u4e2a\u5411\u91cf\u6765\u8ba1\u7b97\u7269\u54c1\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\uff0c\u5f97\u5230\u7269\u54c1\u7684\u76f8\u4f3c\u7269\u54c1\u540e\uff0c\u6839\u636e\u7528\u6237\u5386\u53f2\u7684\u504f\u597d\u9884\u6d4b\u5f53\u524d\u7528\u6237\u8fd8\u6ca1\u6709\u8868\u793a\u504f\u597d\u7684\u7269\u54c1\uff0c\u8ba1\u7b97\u5f97\u5230\u4e00\u4e2a\u6392\u5e8f\u7684\u7269\u54c1\u5217\u8868\u4f5c\u4e3a\u63a8\u8350\u3002 \u89e3\u91ca\uff1a\u5bf9\u4e8e\u7269\u54c1A\uff0c\u6839\u636e\u6240\u6709\u7528\u6237\u7684\u5386\u53f2\u504f\u597d\uff0c\u559c\u6b22\u7269\u54c1A \u7684\u7528\u6237\u90fd\u559c\u6b22\u7269\u54c1C\uff0c\u5f97\u51fa\u7269\u54c1A \u548c\u7269\u54c1C \u6bd4\u8f83\u76f8\u4f3c\uff0c\u800c\u7528\u6237C \u559c\u6b22\u7269\u54c1A\uff0c\u90a3\u4e48\u53ef\u4ee5\u63a8\u65ad\u51fa\u7528\u6237C \u53ef\u80fd\u4e5f\u559c\u6b22\u7269\u54c1C\u3002","title":"1.4.2\u3001\u57fa\u4e8e\u5546\u54c1\u7684\u63a8\u8350 ItemCF"},{"location":"tantan/day10/#15als","text":"ALS \u662f\u4ea4\u66ff\u6700\u5c0f\u4e8c\u4e58 \uff08alternating least squares\uff09\u7684\u7b80\u79f0\u3002\u5728\u673a\u5668\u5b66\u4e60\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0cALS \u7279\u6307\u4f7f\u7528\u4ea4\u66ff\u6700\u5c0f\u4e8c\u4e58\u6c42\u89e3\u7684\u4e00\u4e2a\u534f\u540c\u63a8\u8350\u7b97\u6cd5\u3002\u5b83\u901a\u8fc7\u89c2\u5bdf\u5230\u7684\u6240\u6709\u7528\u6237\u7ed9\u4ea7\u54c1\u7684\u6253\u5206\uff0c\u6765\u63a8\u65ad\u6bcf\u4e2a\u7528\u6237\u7684\u559c\u597d\u5e76\u5411\u7528\u6237\u63a8\u8350\u9002\u5408\u7684\u4ea7\u54c1\u3002\u4ece\u534f\u540c\u8fc7\u6ee4\u7684\u5206\u7c7b\u6765\u8bf4\uff0cALS\u7b97\u6cd5\u5c5e\u4e8eUser-Item CF\uff0c\u4e5f\u53eb\u505a\u6df7\u5408CF\u3002\u5b83\u540c\u65f6\u8003\u8651\u4e86User\u548cItem\u4e24\u4e2a\u65b9\u9762\u3002 \u7528\u6237\u548c\u5546\u54c1\u7684\u5173\u7cfb\uff0c\u53ef\u4ee5\u62bd\u8c61\u4e3a\u5982\u4e0b\u7684\u4e09\u5143\u7ec4\uff1a \u3002\u5176\u4e2d\uff0cRating\u662f\u7528\u6237\u5bf9\u5546\u54c1\u7684\u8bc4\u5206\uff0c\u8868\u5f81\u7528\u6237\u5bf9\u8be5\u5546\u54c1\u7684\u559c\u597d\u7a0b\u5ea6\u3002\u5982\u4e0b\uff1a 196 242 3 881250949 186 302 3 891717742 22 377 1 878887116 244 51 2 880606923 166 346 1 886397596 298 474 4 884182806 115 265 2 881171488 253 465 5 891628467 305 451 3 886324817 6 86 3 883603013 62 257 2 879372434 286 1014 5 879781125 200 222 5 876042340 210 40 3 891035994 ................","title":"1.5\u3001ALS\u7b97\u6cd5"},{"location":"tantan/day10/#2","text":"\u5bf9\u4e8e\u597d\u53cb\u7684\u63a8\u8350\uff0c\u9700\u8981\u627e\u51fa\u6bcf\u4e2a\u7528\u6237\u4e4b\u95f4\u7684\u76f8\u4f3c\u6027\uff0c\u5177\u4f53\u89c4\u5219\u5982\u4e0b\uff1a \u5b57\u6bb5 \u6743\u91cd\u5206 \u5e74\u9f84\u5dee 0-2\u5c81 30\u5206 3-5 20\u5206 5-10\u5c81 10\u5206 10\u5c81\u4ee5\u4e0a 0\u5206 \u6027\u522b \u5f02\u6027 30\u5206 \u540c\u6027 0\u5206 \u4f4d\u7f6e \u540c\u57ce 20\u5206 \u4e0d\u540c 0\u5206 \u5b66\u5386 \u76f8\u540c 20\u5206 \u4e0d\u540c 0\u5206","title":"2\u3001\u597d\u53cb\u63a8\u8350"},{"location":"tantan/day10/#21","text":"","title":"2.1\u3001\u6d41\u7a0b"},{"location":"tantan/day10/#22","text":"#\u62c9\u53d6\u955c\u50cf docker pull registry.cn-hangzhou.aliyuncs.com/itcast/tanhua-spark-recommend-user:1.0.1 #\u521b\u5efa\u5bb9\u5668 docker create --name tanhua-spark-recommend-user \\ --env MONGODB_HOST = 192 .168.31.81 \\ --env MONGODB_PORT = 27017 \\ --env MONGODB_USERNAME = tanhua \\ --env MONGODB_PASSWORD = l3SCjl0HvmSkTtiSbN0Swv40spYnHhDV \\ --env MONGODB_DATABASE = tanhua \\ --env MONGODB_COLLECTION = recommend_user \\ --env JDBC_URL = \"jdbc:mysql://192.168.31.81:3306/mytanhua?useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true&useSSL=false\" \\ --env JDBC_DRIVER = com.mysql.jdbc.Driver \\ --env JDBC_USER = root \\ --env JDBC_PASSWORD = root \\ --env JDBC_TABLE = tb_user_info \\ --env SCHEDULE_PERIOD = 30 \\ registry.cn-hangzhou.aliyuncs.com/itcast/tanhua-spark-recommend-user:1.0.1 #\u53c2\u6570\u8bf4\u660e #MONGODB_HOST mongodb\u670d\u52a1\u7684\u5730\u5740 #MONGODB_PORT mongodb\u670d\u52a1\u7684\u7aef\u53e3 #MONGODB_USERNAME mongodb\u670d\u52a1\u7684\u8ba4\u8bc1\u7528\u6237\u540d #MONGODB_PASSWORD mongodb\u670d\u52a1\u7684\u8ba4\u8bc1\u5bc6\u7801 #MONGODB_DATABASE mongodb\u8fde\u63a5\u7684\u6570\u636e\u5e93 #MONGODB_COLLECTION \u64cd\u4f5c\u8868 #JDBC_URL mysql\u6570\u636e\u5e93\u8fde\u63a5\u5730\u5740 #JDBC_DRIVER jdbc\u9a71\u52a8 #JDBC_USER \u6570\u636e\u5e93\u8fde\u63a5\u7528\u6237\u540d #JDBC_PASSWORD \u6570\u636e\u5e93\u8fde\u63a5\u5bc6\u7801 #JDBC_TABLE \u6570\u636e\u5e93\u8868\u540d #SCHEDULE_PERIOD \u4e0b\u6b21\u6267\u884c\u65f6\u95f4\u95f4\u9694\uff0c\u4f46\u662f\u4e3a\u5206\uff0c\u9ed8\u8ba4\u4e3a10\u5206\u949f #\u542f\u52a8\u670d\u52a1 docker start tanhua-spark-recommend-user #\u67e5\u770b\u65e5\u5fd7 docker logs -f tanhua-spark-recommend-user \u6267\u884c\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u770b\u5230MongoDB\u4e2d\u7684recommend_user\u8868\u4e2d\u6570\u636e\u5df2\u7ecf\u91cd\u65b0\u751f\u6210\u4e86\u3002","title":"2.2\u3001\u90e8\u7f72\u597d\u53cb\u63a8\u8350\u670d\u52a1"},{"location":"tantan/day10/#3","text":"","title":"3\u3001\u5708\u5b50\u63a8\u8350"},{"location":"tantan/day10/#31","text":"\u5728\u5708\u5b50\u529f\u80fd\u4e2d\uff0c\u9488\u5bf9\u4e8e\u7528\u6237\u53d1\u5e03\u7684\u52a8\u6001\u4fe1\u606f\uff0c\u7cfb\u7edf\u53ef\u4ee5\u6839\u636e\u7528\u6237\u7684\u53d1\u5e03\u3001\u6d4f\u89c8\u3001\u70b9\u8d5e\u7b49\u64cd\u4f5c\uff0c\u5bf9\u52a8\u6001\u4fe1\u606f\u505a\u8ba1\u7b97\uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a\u7528\u6237\u8fdb\u884c\u4e0d\u540c\u7684\u63a8\u8350\u3002","title":"3.1\u3001\u529f\u80fd\u8bf4\u660e"},{"location":"tantan/day10/#32","text":"\u6d41\u7a0b\u8bf4\u660e\uff1a \u7528\u6237\u5bf9\u5708\u5b50\u7684\u52a8\u6001\u64cd\u4f5c\uff0c\u5982\uff1a\u53d1\u5e03\u3001\u6d4f\u89c8\u3001\u70b9\u8d5e\u3001\u559c\u6b22\u7b49\uff0c\u5c31\u4f1a\u7ed9RocketMQ\u8fdb\u884c\u53d1\u9001\u6d88\u606f\uff1b \u63a8\u8350\u7cfb\u7edf\u63a5\u6536\u6d88\u606f\uff0c\u5e76\u4e14\u5904\u7406\u6d88\u606f\u6570\u636e\uff0c\u5904\u7406\u4e4b\u540e\u5c06\u7ed3\u679c\u6570\u636e\u5199\u5165\u5230MongoDB\u4e2d\uff1b Spark\u7cfb\u7edf\u62c9\u53d6\u6570\u636e\uff0c\u7136\u540e\u8fdb\u884c\u63a8\u8350\u8ba1\u7b97\uff1b \u8ba1\u7b97\u4e4b\u540e\u7684\u7ed3\u679c\u6570\u636e\u5199\u5165\u5230Redis\u4e2d\uff0c\u4e3a\u6bcf\u4e2a\u7528\u6237\u90fd\u8fdb\u884c\u4e2a\u6027\u5316\u63a8\u8350\uff1b","title":"3.2\u3001\u6d41\u7a0b\u8bf4\u660e"},{"location":"tantan/day10/#33","text":"\u6d4f\u89c8 +1 \u70b9\u8d5e +5 \u559c\u6b22 +8 \u8bc4\u8bba + 10 \u53d1\u5e03\u52a8\u6001 \u6587\u5b57\u957f\u5ea6\uff1a50\u4ee5\u51851\u5206\uff0c50~100\u4e4b\u95f42\u5206\uff0c100\u4ee5\u4e0a3\u5206 \u56fe\u7247\u4e2a\u6570\uff1a\u6bcf\u4e2a\u56fe\u7247\u4e00\u5206 \u6838\u5fc3\u63a8\u8350\u903b\u8f91\uff1a \u63a8\u8350\u6a21\u578b\uff1a\u7528\u6237 | \u52a8\u6001 | \u8bc4\u5206 \u5176\u4e2d\uff0c\u8bc4\u5206\u662f\u7528\u6237\u5bf9\u52a8\u6001\u64cd\u4f5c\u7684\u5f97\u5206\u5408\u8ba1 \u4e3a\u4ec0\u4e48\u81ea\u5df1\u53d1\u5e03\u52a8\u6001\u8fd8\u8981\u8ba1\u5206\uff1f \u662f\u56e0\u4e3a\uff0c\u81ea\u5df1\u53d1\u5e03\u5c31\u76f8\u5f53\u4e8e\u81ea\u5df1\u5bf9\u6b64\u52a8\u6001\u4e5f\u611f\u5174\u8da3\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u76f8\u4f3c\u7684\u4eba\u4e4b\u95f4\u8fdb\u884c\u63a8\u8350\u4e86\u3002","title":"3.3\u3001\u52a8\u6001\u8ba1\u5206\u89c4\u5219"},{"location":"tantan/day10/#34","text":"","title":"3.4\u3001\u53d1\u9001\u6d88\u606f"},{"location":"tantan/day10/#341quanzimqservice","text":"my-tanhua-server\u589e\u52a0\u4f9d\u8d56\uff1a <!--RocketMQ\u76f8\u5173--> <dependency> <groupId> org.apache.rocketmq </groupId> <artifactId> rocketmq-spring-boot-starter </artifactId> </dependency> <dependency> <groupId> org.apache.rocketmq </groupId> <artifactId> rocketmq-client </artifactId> </dependency> \u914d\u7f6e\u6587\u4ef6\uff1a # RocketMQ\u76f8\u5173\u914d\u7f6e rocketmq.name-server = 192.168.31.81:9876 rocketmq.producer.group = tanhua package com.tanhua.server.service ; import com.alibaba.dubbo.config.annotation.Reference ; import com.tanhua.common.pojo.User ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.dubbo.server.api.QuanZiApi ; import com.tanhua.dubbo.server.pojo.Publish ; import lombok.extern.slf4j.Slf4j ; import org.apache.rocketmq.spring.core.RocketMQTemplate ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import java.util.HashMap ; import java.util.Map ; @Service @Slf4j public class QuanziMQService { @Autowired private RocketMQTemplate rocketMQTemplate ; @Reference ( version = \"1.0.0\" ) private QuanZiApi quanZiApi ; /** * \u53d1\u5e03\u52a8\u6001\u6d88\u606f * * @param publishId * @return */ public Boolean publishMsg ( String publishId ) { return this . sendMsg ( publishId , 1 ); } /** * \u6d4f\u89c8\u52a8\u6001\u6d88\u606f * * @param publishId * @return */ public Boolean queryPublishMsg ( String publishId ) { return this . sendMsg ( publishId , 2 ); } /** * \u70b9\u8d5e\u52a8\u6001\u6d88\u606f * * @param publishId * @return */ public Boolean likePublishMsg ( String publishId ) { return this . sendMsg ( publishId , 3 ); } /** * \u53d6\u6d88\u70b9\u8d5e\u52a8\u6001\u6d88\u606f * * @param publishId * @return */ public Boolean disLikePublishMsg ( String publishId ) { return this . sendMsg ( publishId , 6 ); } /** * \u559c\u6b22\u52a8\u6001\u6d88\u606f * * @param publishId * @return */ public Boolean lovePublishMsg ( String publishId ) { return this . sendMsg ( publishId , 4 ); } /** * \u53d6\u6d88\u559c\u6b22\u52a8\u6001\u6d88\u606f * * @param publishId * @return */ public Boolean disLovePublishMsg ( String publishId ) { return this . sendMsg ( publishId , 7 ); } /** * \u8bc4\u8bba\u52a8\u6001\u6d88\u606f * * @param publishId * @return */ public Boolean commentPublishMsg ( String publishId ) { return this . sendMsg ( publishId , 5 ); } /** * \u53d1\u9001\u5708\u5b50\u64cd\u4f5c\u76f8\u5173\u7684\u6d88\u606f * * @param publishId * @param type 1-\u53d1\u52a8\u6001\uff0c2-\u6d4f\u89c8\u52a8\u6001\uff0c 3-\u70b9\u8d5e\uff0c 4-\u559c\u6b22\uff0c 5-\u8bc4\u8bba\uff0c6-\u53d6\u6d88\u70b9\u8d5e\uff0c7-\u53d6\u6d88\u559c\u6b22 * @return */ private Boolean sendMsg ( String publishId , Integer type ) { try { User user = UserThreadLocal . get (); Publish publish = this . quanZiApi . queryPublishById ( publishId ); //\u6784\u5efa\u6d88\u606f Map < String , Object > msg = new HashMap <> (); msg . put ( \"userId\" , user . getId ()); msg . put ( \"date\" , System . currentTimeMillis ()); msg . put ( \"publishId\" , publishId ); msg . put ( \"pid\" , publish . getPid ()); msg . put ( \"type\" , type ); this . rocketMQTemplate . convertAndSend ( \"tanhua-quanzi\" , msg ); } catch ( Exception e ) { log . error ( \"\u53d1\u9001\u6d88\u606f\u5931\u8d25! publishId = \" + publishId + \", type = \" + type , e ); return false ; } return true ; } }","title":"3.4.1\u3001QuanziMQService"},{"location":"tantan/day10/#342quanziservice","text":"\u5728QuanZiService\u5b8c\u6210\u53d1\u9001\u6d88\u606f\u65b9\u6cd5\u8c03\u7528\u3002 package com.tanhua.server.service ; import cn.hutool.core.bean.BeanUtil ; import cn.hutool.core.collection.CollUtil ; import cn.hutool.core.convert.Convert ; import cn.hutool.core.date.DateUtil ; import cn.hutool.core.util.ObjectUtil ; import cn.hutool.core.util.StrUtil ; import com.alibaba.dubbo.config.annotation.Reference ; import com.tanhua.common.pojo.User ; import com.tanhua.common.pojo.UserInfo ; import com.tanhua.common.service.PicUploadService ; import com.tanhua.common.utils.RelativeDateFormat ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.common.vo.PicUploadResult ; import com.tanhua.dubbo.server.api.QuanZiApi ; import com.tanhua.dubbo.server.api.VisitorsApi ; import com.tanhua.dubbo.server.pojo.Comment ; import com.tanhua.dubbo.server.pojo.Publish ; import com.tanhua.dubbo.server.pojo.Visitors ; import com.tanhua.dubbo.server.vo.PageInfo ; import com.tanhua.server.vo.CommentVo ; import com.tanhua.server.vo.PageResult ; import com.tanhua.server.vo.QuanZiVo ; import com.tanhua.server.vo.VisitorsVo ; import org.apache.commons.lang3.StringUtils ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import org.springframework.web.multipart.MultipartFile ; import java.util.* ; @Service public class QuanZiService { @Reference ( version = \"1.0.0\" ) private QuanZiApi quanZiApi ; @Reference ( version = \"1.0.0\" ) private VisitorsApi visitorsApi ; @Autowired private UserService userService ; @Autowired private UserInfoService userInfoService ; @Autowired private PicUploadService picUploadService ; @Autowired private QuanziMQService quanziMQService ; public PageResult queryPublishList ( Integer page , Integer pageSize ) { //\u5206\u6790\uff1a\u901a\u8fc7dubbo\u4e2d\u7684\u670d\u52a1\u67e5\u8be2\u7528\u6237\u7684\u597d\u53cb\u52a8\u6001 //\u901a\u8fc7mysql\u67e5\u8be2\u7528\u6237\u7684\u4fe1\u606f\uff0c\u56de\u5199\u5230\u7ed3\u679c\u5bf9\u8c61\u4e2d\uff08QuanZiVo\uff09 PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); //\u76f4\u63a5\u4eceThreadLocal\u4e2d\u83b7\u53d6\u5bf9\u8c61 User user = UserThreadLocal . get (); //\u901a\u8fc7dubbo\u67e5\u8be2\u6570\u636e PageInfo < Publish > pageInfo = this . quanZiApi . queryPublishList ( user . getId (), page , pageSize ); List < Publish > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )) { return pageResult ; } pageResult . setItems ( this . fillQuanZiVo ( records )); return pageResult ; } /** * \u586b\u5145\u7528\u6237\u4fe1\u606f * * @param userInfo * @param quanZiVo */ private void fillUserInfoToQuanZiVo ( UserInfo userInfo , QuanZiVo quanZiVo ) { BeanUtil . copyProperties ( userInfo , quanZiVo , \"id\" ); quanZiVo . setGender ( userInfo . getSex (). name (). toLowerCase ()); quanZiVo . setTags ( StringUtils . split ( userInfo . getTags (), ',' )); //\u5f53\u524d\u7528\u6237 User user = UserThreadLocal . get (); quanZiVo . setCommentCount ( 0 ); //TODO \u8bc4\u8bba\u6570 quanZiVo . setDistance ( \"1.2\u516c\u91cc\" ); //TODO \u8ddd\u79bb quanZiVo . setHasLiked ( this . quanZiApi . queryUserIsLike ( user . getId (), quanZiVo . getId ()) ? 1 : 0 ); //\u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 quanZiVo . setLikeCount ( Convert . toInt ( this . quanZiApi . queryLikeCount ( quanZiVo . getId ()))); //\u70b9\u8d5e\u6570 quanZiVo . setHasLoved ( this . quanZiApi . queryUserIsLove ( user . getId (), quanZiVo . getId ()) ? 1 : 0 ); //\u662f\u5426\u559c\u6b22\uff081\u662f\uff0c0\u5426\uff09 quanZiVo . setLoveCount ( Convert . toInt ( this . quanZiApi . queryLoveCount ( quanZiVo . getId ()))); //\u559c\u6b22\u6570 } /** * \u6839\u636e\u67e5\u8be2\u5230\u7684publish\u96c6\u5408\u586b\u5145QuanZiVo\u5bf9\u8c61 * * @param records * @return */ private List < QuanZiVo > fillQuanZiVo ( List < Publish > records ) { List < QuanZiVo > quanZiVoList = new ArrayList <> (); records . forEach ( publish -> { QuanZiVo quanZiVo = new QuanZiVo (); quanZiVo . setId ( publish . getId (). toHexString ()); quanZiVo . setTextContent ( publish . getText ()); quanZiVo . setImageContent ( publish . getMedias (). toArray ( new String [] {})); quanZiVo . setUserId ( publish . getUserId ()); quanZiVo . setCreateDate ( RelativeDateFormat . format ( new Date ( publish . getCreated ()))); quanZiVoList . add ( quanZiVo ); }); //\u67e5\u8be2\u7528\u6237\u4fe1\u606f List < Object > userIds = CollUtil . getFieldValues ( records , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIds ); for ( QuanZiVo quanZiVo : quanZiVoList ) { //\u627e\u5230\u5bf9\u5e94\u7684\u7528\u6237\u4fe1\u606f for ( UserInfo userInfo : userInfoList ) { if ( quanZiVo . getUserId (). longValue () == userInfo . getUserId (). longValue ()) { this . fillUserInfoToQuanZiVo ( userInfo , quanZiVo ); break ; } } } return quanZiVoList ; } /** * \u53d1\u5e03\u52a8\u6001 * * @param textContent * @param location * @param latitude * @param longitude * @param multipartFile * @return */ public String savePublish ( String textContent , String location , String latitude , String longitude , MultipartFile [] multipartFile ) { //\u67e5\u8be2\u5f53\u524d\u7684\u767b\u5f55\u4fe1\u606f User user = UserThreadLocal . get (); Publish publish = new Publish (); publish . setUserId ( user . getId ()); publish . setText ( textContent ); publish . setLocationName ( location ); publish . setLatitude ( latitude ); publish . setLongitude ( longitude ); publish . setSeeType ( 1 ); List < String > picUrls = new ArrayList <> (); //\u56fe\u7247\u4e0a\u4f20 for ( MultipartFile file : multipartFile ) { PicUploadResult picUploadResult = this . picUploadService . upload ( file ); picUrls . add ( picUploadResult . getName ()); } publish . setMedias ( picUrls ); String publishId = this . quanZiApi . savePublish ( publish ); if ( StrUtil . isNotEmpty ( publishId )){ //\u53d1\u9001\u6d88\u606f this . quanziMQService . publishMsg ( publishId ); } return publishId ; } public PageResult queryRecommendPublishList ( Integer page , Integer pageSize ) { //\u5206\u6790\uff1a\u901a\u8fc7dubbo\u4e2d\u7684\u670d\u52a1\u67e5\u8be2\u7cfb\u7edf\u63a8\u8350\u52a8\u6001 //\u901a\u8fc7mysql\u67e5\u8be2\u7528\u6237\u7684\u4fe1\u606f\uff0c\u56de\u5199\u5230\u7ed3\u679c\u5bf9\u8c61\u4e2d\uff08QuanZiVo\uff09 PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); //\u76f4\u63a5\u4eceThreadLocal\u4e2d\u83b7\u53d6\u5bf9\u8c61 User user = UserThreadLocal . get (); //\u901a\u8fc7dubbo\u67e5\u8be2\u6570\u636e PageInfo < Publish > pageInfo = this . quanZiApi . queryRecommendPublishList ( user . getId (), page , pageSize ); List < Publish > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )) { return pageResult ; } pageResult . setItems ( this . fillQuanZiVo ( records )); return pageResult ; } /** * \u52a8\u6001\u70b9\u8d5e * @param publishId * @return */ public Long likeComment ( String publishId ) { User user = UserThreadLocal . get (); Boolean result = this . quanZiApi . likeComment ( user . getId (), publishId ); if ( result ) { //\u53d1\u6d88\u606f this . quanziMQService . likePublishMsg ( publishId ); //\u67e5\u8be2\u70b9\u8d5e\u6570 return this . quanZiApi . queryLikeCount ( publishId ); } return null ; } /** * \u52a8\u6001\u7684\u53d6\u6d88\u70b9\u8d5e * * @param publishId * @return */ public Long disLikeComment ( String publishId ) { User user = UserThreadLocal . get (); Boolean result = this . quanZiApi . disLikeComment ( user . getId (), publishId ); if ( result ) { //\u53d1\u6d88\u606f this . quanziMQService . disLikePublishMsg ( publishId ); //\u67e5\u8be2\u70b9\u8d5e\u6570 return this . quanZiApi . queryLikeCount ( publishId ); } return null ; } public Long loveComment ( String publishId ) { User user = UserThreadLocal . get (); //\u559c\u6b22 Boolean result = this . quanZiApi . loveComment ( user . getId (), publishId ); if ( result ){ //\u53d1\u6d88\u606f this . quanziMQService . lovePublishMsg ( publishId ); //\u67e5\u8be2\u559c\u6b22\u6570 return this . quanZiApi . queryLoveCount ( publishId ); } return null ; } public Long disLoveComment ( String publishId ) { User user = UserThreadLocal . get (); //\u53d6\u6d88\u559c\u6b22 Boolean result = this . quanZiApi . disLoveComment ( user . getId (), publishId ); if ( result ){ //\u53d1\u6d88\u606f this . quanziMQService . disLovePublishMsg ( publishId ); //\u67e5\u8be2\u559c\u6b22\u6570 return this . quanZiApi . queryLoveCount ( publishId ); } return null ; } public QuanZiVo queryById ( String publishId ) { Publish publish = this . quanZiApi . queryPublishById ( publishId ); if ( publish == null ) { return null ; } //\u53d1\u6d88\u606f this . quanziMQService . queryPublishMsg ( publishId ); return this . fillQuanZiVo ( Arrays . asList ( publish )). get ( 0 ); } /** * \u67e5\u8be2\u8bc4\u8bba\u5217\u8868 * * @param publishId * @param page * @param pageSize * @return */ public PageResult queryCommentList ( String publishId , Integer page , Integer pageSize ) { PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); User user = UserThreadLocal . get (); //\u67e5\u8be2\u8bc4\u8bba\u5217\u8868\u6570\u636e PageInfo < Comment > pageInfo = this . quanZiApi . queryCommentList ( publishId , page , pageSize ); List < Comment > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )){ return pageResult ; } //\u67e5\u8be2\u7528\u6237\u4fe1\u606f List < Object > userIdList = CollUtil . getFieldValues ( records , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIdList ); List < CommentVo > result = new ArrayList <> (); for ( Comment record : records ) { CommentVo commentVo = new CommentVo (); commentVo . setContent ( record . getContent ()); commentVo . setId ( record . getId (). toHexString ()); commentVo . setCreateDate ( DateUtil . format ( new Date ( record . getCreated ()), \"HH:mm\" )); //\u662f\u5426\u70b9\u8d5e commentVo . setHasLiked ( this . quanZiApi . queryUserIsLike ( user . getId (), commentVo . getId ()) ? 1 : 0 ); //\u70b9\u8d5e\u6570 commentVo . setLikeCount ( Convert . toInt ( this . quanZiApi . queryLikeCount ( commentVo . getId ()))); for ( UserInfo userInfo : userInfoList ) { if ( ObjectUtil . equals ( record . getUserId (), userInfo . getUserId ())){ commentVo . setAvatar ( userInfo . getLogo ()); commentVo . setNickname ( userInfo . getNickName ()); break ; } } result . add ( commentVo ); } pageResult . setItems ( result ); return pageResult ; } /** * \u53d1\u8868\u8bc4\u8bba * @param publishId * @param content * @return */ public Boolean saveComments ( String publishId , String content ) { User user = UserThreadLocal . get (); Boolean result = this . quanZiApi . saveComment ( user . getId (), publishId , content ); if ( result ){ //\u53d1\u6d88\u606f this . quanziMQService . commentPublishMsg ( publishId ); } return result ; } public PageResult queryAlbumList ( Long userId , Integer page , Integer pageSize ) { PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); //\u67e5\u8be2\u6570\u636e PageInfo < Publish > pageInfo = this . quanZiApi . queryAlbumList ( userId , page , pageSize ); if ( CollUtil . isEmpty ( pageInfo . getRecords ())){ return pageResult ; } //\u586b\u5145\u6570\u636e pageResult . setItems ( this . fillQuanZiVo ( pageInfo . getRecords ())); return pageResult ; } public List < VisitorsVo > queryVisitorsList () { User user = UserThreadLocal . get (); List < Visitors > visitorsList = this . visitorsApi . queryMyVisitor ( user . getId ()); if ( CollUtil . isEmpty ( visitorsList )) { return Collections . emptyList (); } List < Object > userIds = CollUtil . getFieldValues ( visitorsList , \"visitorUserId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIds ); List < VisitorsVo > visitorsVoList = new ArrayList <> (); for ( Visitors visitor : visitorsList ) { for ( UserInfo userInfo : userInfoList ) { if ( ObjectUtil . equals ( visitor . getVisitorUserId (), userInfo . getUserId ())) { VisitorsVo visitorsVo = new VisitorsVo (); visitorsVo . setAge ( userInfo . getAge ()); visitorsVo . setAvatar ( userInfo . getLogo ()); visitorsVo . setGender ( userInfo . getSex (). name (). toLowerCase ()); visitorsVo . setId ( userInfo . getUserId ()); visitorsVo . setNickname ( userInfo . getNickName ()); visitorsVo . setTags ( StringUtils . split ( userInfo . getTags (), ',' )); visitorsVo . setFateValue ( visitor . getScore (). intValue ()); visitorsVoList . add ( visitorsVo ); break ; } } } return visitorsVoList ; } }","title":"3.4.2\u3001\u4fee\u6539QuanZiService"},{"location":"tantan/day10/#35","text":"\u63a5\u6536\u6d88\u606f\u7684\u5de5\u4f5c\u9700\u8981\u65b0\u521b\u5efamy-tanhua-recommend\u5de5\u7a0b\uff0c\u5728\u6b64\u5de5\u7a0b\u4e2d\u5b8c\u6210\u76f8\u5173\u7684\u64cd\u4f5c\u3002","title":"3.5\u3001\u63a5\u6536\u6d88\u606f"},{"location":"tantan/day10/#351my-tanhua-recommend","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> my-tanhua </artifactId> <groupId> cn.itcast.tanhua </groupId> <version> 1.0-SNAPSHOT </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> my-tanhua-recommend </artifactId> <dependencies> <!--\u5f15\u5165interface\u4f9d\u8d56--> <dependency> <groupId> cn.itcast.tanhua </groupId> <artifactId> my-tanhua-dubbo-interface </artifactId> <version> 1.0-SNAPSHOT </version> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-test </artifactId> <scope> test </scope> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-redis </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-mongodb </artifactId> </dependency> <!--RocketMQ\u76f8\u5173--> <dependency> <groupId> org.apache.rocketmq </groupId> <artifactId> rocketmq-spring-boot-starter </artifactId> </dependency> <dependency> <groupId> org.apache.rocketmq </groupId> <artifactId> rocketmq-client </artifactId> </dependency> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> </dependency> <dependency> <groupId> joda-time </groupId> <artifactId> joda-time </artifactId> </dependency> <dependency> <groupId> cn.hutool </groupId> <artifactId> hutool-all </artifactId> </dependency> </dependencies> </project>","title":"3.5.1\u3001\u521b\u5efamy-tanhua-recommend\u5de5\u7a0b"},{"location":"tantan/day10/#352","text":"application.properties spring.application.name = itcast-rocketmq server.port = 18082 # RocketMQ\u76f8\u5173\u914d\u7f6e rocketmq.name-server = 192.168.31.81:9876 rocketmq.producer.group = tanhua # mongodb\u76f8\u5173\u914d\u7f6e spring.data.mongodb.username = tanhua spring.data.mongodb.password = l3SCjl0HvmSkTtiSbN0Swv40spYnHhDV spring.data.mongodb.authentication-database = admin spring.data.mongodb.database = tanhua spring.data.mongodb.port = 27017 spring.data.mongodb.host = 192.168.31.81","title":"3.5.2\u3001\u914d\u7f6e\u6587\u4ef6"},{"location":"tantan/day10/#353","text":"package com.tanhua.recommend ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @SpringBootApplication public class RecommendApplication { public static void main ( String [] args ) { SpringApplication . run ( RecommendApplication . class , args ); } }","title":"3.5.3\u3001\u542f\u52a8\u7c7b"},{"location":"tantan/day10/#354recommendquanzi","text":"\u5b58\u50a8\u5230MongoDB\u7684\u4e2d\u7684\u5b9e\u4f53\u7ed3\u6784\u3002 package com.tanhua.recommend.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.mongodb.core.mapping.Document ; @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"recommend_quanzi\" ) public class RecommendQuanZi { private ObjectId id ; private Long userId ; // \u7528\u6237id private Long publishId ; //\u52a8\u6001id\uff0c\u9700\u8981\u8f6c\u5316\u4e3aLong\u7c7b\u578b private Double score ; //\u5f97\u5206 private Long date ; //\u65f6\u95f4\u6233 }","title":"3.5.4\u3001RecommendQuanZi"},{"location":"tantan/day10/#355quanzimsgconsumer","text":"package com.tanhua.recommend.msg ; import cn.hutool.core.collection.CollUtil ; import cn.hutool.core.util.ObjectUtil ; import cn.hutool.core.util.StrUtil ; import cn.hutool.json.JSONObject ; import cn.hutool.json.JSONUtil ; import com.tanhua.dubbo.server.pojo.Publish ; import com.tanhua.recommend.pojo.RecommendQuanZi ; import lombok.extern.slf4j.Slf4j ; import org.apache.rocketmq.spring.annotation.RocketMQMessageListener ; import org.apache.rocketmq.spring.core.RocketMQListener ; import org.bson.types.ObjectId ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.mongodb.core.MongoTemplate ; import org.springframework.stereotype.Component ; @Component @RocketMQMessageListener ( topic = \"tanhua-quanzi\" , consumerGroup = \"tanhua-quanzi-consumer\" ) @Slf4j public class QuanZiMsgConsumer implements RocketMQListener < String > { @Autowired private MongoTemplate mongoTemplate ; @Override public void onMessage ( String msg ) { try { JSONObject jsonObject = JSONUtil . parseObj ( msg ); Long userId = jsonObject . getLong ( \"userId\" ); Long date = jsonObject . getLong ( \"date\" ); String publishId = jsonObject . getStr ( \"publishId\" ); Long pid = jsonObject . getLong ( \"pid\" ); Integer type = jsonObject . getInt ( \"type\" ); RecommendQuanZi recommendQuanZi = new RecommendQuanZi (); recommendQuanZi . setUserId ( userId ); recommendQuanZi . setId ( ObjectId . get ()); recommendQuanZi . setDate ( date ); recommendQuanZi . setPublishId ( pid ); //1-\u53d1\u52a8\u6001\uff0c2-\u6d4f\u89c8\u52a8\u6001\uff0c 3-\u70b9\u8d5e\uff0c 4-\u559c\u6b22\uff0c 5-\u8bc4\u8bba\uff0c6-\u53d6\u6d88\u70b9\u8d5e\uff0c7-\u53d6\u6d88\u559c\u6b22 switch ( type ) { case 1 : { Publish publish = this . mongoTemplate . findById ( new ObjectId ( publishId ), Publish . class ); if ( ObjectUtil . isNotEmpty ( publish )) { double score = 0d ; //\u83b7\u53d6\u56fe\u7247\u6570 score += CollUtil . size ( publish . getMedias ()); //\u83b7\u53d6\u6587\u672c\u7684\u957f\u5ea6 //\u6587\u5b57\u957f\u5ea6\uff1a50\u4ee5\u51851\u5206\uff0c50~100\u4e4b\u95f42\u5206\uff0c100\u4ee5\u4e0a3\u5206 int length = StrUtil . length ( publish . getText ()); if ( length >= 0 && length < 50 ) { score += 1 ; } else if ( length < 100 ) { score += 2 ; } else { score += 3 ; } recommendQuanZi . setScore ( score ); } break ; } case 2 : { recommendQuanZi . setScore ( 1d ); break ; } case 3 : { recommendQuanZi . setScore ( 5d ); break ; } case 4 : { recommendQuanZi . setScore ( 8d ); break ; } case 5 : { recommendQuanZi . setScore ( 10 d ); break ; } case 6 : { recommendQuanZi . setScore ( - 5d ); break ; } case 7 : { recommendQuanZi . setScore ( - 8d ); break ; } default : { recommendQuanZi . setScore ( 0d ); break ; } } //\u6570\u636e\u4fdd\u5b58\u5230MongoDB\u4e2d this . mongoTemplate . save ( recommendQuanZi ); } catch ( Exception e ) { log . error ( \"\u5904\u7406\u6d88\u606f\u51fa\u9519\uff01msg = \" + msg , e ); } } }","title":"3.5.5\u3001QuanZiMsgConsumer"},{"location":"tantan/day10/#17","text":"\u6d4b\u8bd5\u65b9\u6cd5\uff1a\u4f7f\u7528APP\u8fdb\u884c\u64cd\u4f5c\uff0c\u53ef\u4ee5\u770b\u5230\u5728MongoDB\u4e2d\u5df2\u7ecf\u6709\u6570\u636e\u5199\u5165\u3002","title":"1.7\u3001\u6d4b\u8bd5"},{"location":"tantan/day10/#4","text":"\u5728\u63a8\u8350\u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u5c06\u57fa\u4e8e\u524d\u9762\u5199\u5165\u5230\u63a8\u8350\u8868\u4e2d\u7684\u6570\u636e\u901a\u8fc7Spark\u8fdb\u884c\u8ba1\u7b97\uff0c\u5728Spark\u8ba1\u7b97\u5b8c\u6210\u540e\u5c06\u7ed3\u679c\u5199\u5165\u5230Redis\u4e2d\uff0c\u4ee5\u4f9b\u5728\u4e1a\u52a1\u7cfb\u7edf\u4e2d\u8fdb\u884c\u67e5\u8be2\u3002 \u63a8\u8350\u670d\u52a1\u6211\u4eec\u5c06\u57fa\u4e8edocker\u7684\u5f62\u5f0f\u8fdb\u884c\u90e8\u7f72\uff1a #\u62c9\u53d6\u955c\u50cf docker pull registry.cn-hangzhou.aliyuncs.com/itcast/tanhua-spark-quanzi:1.0 #\u521b\u5efa\u5bb9\u5668 docker create --name tanhua-spark-quanzi \\ --env MONGODB_HOST = 192 .168.31.81 \\ --env MONGODB_PORT = 27017 \\ --env MONGODB_USERNAME = tanhua \\ --env MONGODB_PASSWORD = l3SCjl0HvmSkTtiSbN0Swv40spYnHhDV \\ --env MONGODB_DATABASE = tanhua \\ --env MONGODB_COLLECTION = recommend_quanzi \\ --env SCHEDULE_PERIOD = 10 \\ --env REDIS_NODES = \"192.168.31.81:6379,192.168.31.81:6380,192.168.31.81:6381\" \\ registry.cn-hangzhou.aliyuncs.com/itcast/tanhua-spark-quanzi:1.0 #\u53c2\u6570\u8bf4\u660e #MONGODB_HOST mongodb\u670d\u52a1\u7684\u5730\u5740 #MONGODB_PORT mongodb\u670d\u52a1\u7684\u7aef\u53e3 #MONGODB_USERNAME mongodb\u670d\u52a1\u7684\u8ba4\u8bc1\u7528\u6237\u540d #MONGODB_PASSWORD mongodb\u670d\u52a1\u7684\u8ba4\u8bc1\u5bc6\u7801 #MONGODB_DATABASE mongodb\u8fde\u63a5\u7684\u6570\u636e\u5e93 #MONGODB_COLLECTION \u64cd\u4f5c\u8868 #SCHEDULE_PERIOD \u4e0b\u6b21\u6267\u884c\u65f6\u95f4\u95f4\u9694\uff0c\u4f46\u662f\u4e3a\u5206\uff0c\u9ed8\u8ba4\u4e3a10\u5206\u949f #REDIS_NODES redis\u96c6\u7fa4\u5730\u5740\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5355\u8282\u70b9 #mongodb\u5f00\u542f\u8ba4\u8bc1\u670d\u52a1 #docker create --name mongodb --restart=always -p 27017:27017 -v mongodb:/data/db mongo:4.0.3 --auth #\u542f\u52a8\u670d\u52a1\uff0c\u542f\u52a8\u4e4b\u540e\u5c31\u4f1a\u8fdb\u884c\u6267\u884c\uff0c\u5728SCHEDULE_PERIOD\u65f6\u95f4\u540e\u518d\u6b21\u6267\u884c docker start tanhua-spark-quanzi #\u67e5\u770b\u65e5\u5fd7 docker logs -f tanhua-spark-quanzi #\u6267\u884c\u5b8c\u6210\u540e\u4f1a\u5c06\u6570\u636e\u5199\u5165\u5230redis\u4e2d \u8fdb\u5165redis\u67e5\u770b\u662f\u5426\u5df2\u7ecf\u6709\u6570\u636e\uff1a","title":"4\u3001\u90e8\u7f72\u63a8\u8350\u7cfb\u7edf"},{"location":"tantan/day10/#5","text":"\u5c0f\u89c6\u9891\u7684\u63a8\u8350\u548c\u52a8\u6001\u63a8\u8350\u7684\u5b9e\u73b0\u903b\u8f91\u975e\u5e38\u7684\u7c7b\u4f3c\u3002","title":"5\u3001\u5c0f\u89c6\u9891\u63a8\u8350"},{"location":"tantan/day10/#51","text":"\u53d1\u5e03+2 \u70b9\u8d5e +5 \u8bc4\u8bba + 10","title":"5.1\u3001\u52a8\u6001\u8ba1\u5206\u89c4\u5219"},{"location":"tantan/day10/#52","text":"","title":"5.2\u3001\u53d1\u9001\u6d88\u606f"},{"location":"tantan/day10/#521videomqservice","text":"package com.tanhua.server.service ; import com.alibaba.dubbo.config.annotation.Reference ; import com.tanhua.common.pojo.User ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.dubbo.server.api.VideoApi ; import com.tanhua.dubbo.server.pojo.Video ; import lombok.extern.slf4j.Slf4j ; import org.apache.rocketmq.spring.core.RocketMQTemplate ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import java.util.HashMap ; import java.util.Map ; @Service @Slf4j public class VideoMQService { @Autowired private RocketMQTemplate rocketMQTemplate ; @Reference ( version = \"1.0.0\" ) private VideoApi videoApi ; /** * \u53d1\u5e03\u5c0f\u89c6\u9891\u6d88\u606f * * @return */ public Boolean videoMsg ( String videoId ) { return this . sendMsg ( videoId , 1 ); } /** * \u70b9\u8d5e\u5c0f\u89c6\u9891 * * @return */ public Boolean likeVideoMsg ( String videoId ) { return this . sendMsg ( videoId , 2 ); } /** * \u53d6\u6d88\u70b9\u8d5e\u5c0f\u89c6\u9891 * * @return */ public Boolean disLikeVideoMsg ( String videoId ) { return this . sendMsg ( videoId , 3 ); } /** * \u8bc4\u8bba\u5c0f\u89c6\u9891 * * @return */ public Boolean commentVideoMsg ( String videoId ) { return this . sendMsg ( videoId , 4 ); } /** * \u53d1\u9001\u5c0f\u89c6\u9891\u64cd\u4f5c\u76f8\u5173\u7684\u6d88\u606f * * @param videoId * @param type 1-\u53d1\u52a8\u6001\uff0c2-\u70b9\u8d5e\uff0c 3-\u53d6\u6d88\u70b9\u8d5e\uff0c4-\u8bc4\u8bba * @return */ private Boolean sendMsg ( String videoId , Integer type ) { try { User user = UserThreadLocal . get (); Video video = this . videoApi . queryVideoById ( videoId ); //\u6784\u5efa\u6d88\u606f Map < String , Object > msg = new HashMap <> (); msg . put ( \"userId\" , user . getId ()); msg . put ( \"date\" , System . currentTimeMillis ()); msg . put ( \"videoId\" , videoId ); msg . put ( \"vid\" , video . getVid ()); msg . put ( \"type\" , type ); this . rocketMQTemplate . convertAndSend ( \"tanhua-video\" , msg ); } catch ( Exception e ) { log . error ( \"\u53d1\u9001\u6d88\u606f\u5931\u8d25! videoId = \" + videoId + \", type = \" + type , e ); return false ; } return true ; } }","title":"5.2.1\u3001VideoMQService"},{"location":"tantan/day10/#432videoservice","text":"package com.tanhua.server.service ; import cn.hutool.core.collection.CollUtil ; import cn.hutool.core.convert.Convert ; import cn.hutool.core.util.ObjectUtil ; import cn.hutool.core.util.StrUtil ; import com.alibaba.dubbo.config.annotation.Reference ; import com.github.tobato.fastdfs.domain.conn.FdfsWebServer ; import com.github.tobato.fastdfs.domain.fdfs.StorePath ; import com.github.tobato.fastdfs.service.FastFileStorageClient ; import com.tanhua.common.pojo.User ; import com.tanhua.common.pojo.UserInfo ; import com.tanhua.common.service.PicUploadService ; import com.tanhua.common.utils.UserThreadLocal ; import com.tanhua.common.vo.PicUploadResult ; import com.tanhua.dubbo.server.api.QuanZiApi ; import com.tanhua.dubbo.server.api.VideoApi ; import com.tanhua.dubbo.server.pojo.Video ; import com.tanhua.dubbo.server.vo.PageInfo ; import com.tanhua.server.vo.PageResult ; import com.tanhua.server.vo.VideoVo ; import lombok.extern.slf4j.Slf4j ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import org.springframework.web.multipart.MultipartFile ; import java.io.IOException ; import java.util.ArrayList ; import java.util.List ; @Service @Slf4j public class VideoService { @Reference ( version = \"1.0.0\" ) private VideoApi videoApi ; @Autowired private PicUploadService picUploadService ; @Autowired protected FastFileStorageClient storageClient ; @Autowired private FdfsWebServer fdfsWebServer ; @Autowired private UserInfoService userInfoService ; @Reference ( version = \"1.0.0\" ) private QuanZiApi quanZiApi ; @Autowired private QuanZiService quanZiService ; @Autowired private VideoMQService videoMQService ; /** * \u5c0f\u89c6\u9891\u4e0a\u4f20 * * @param picFile \u5c01\u9762\u56fe\u7247 * @param videoFile \u89c6\u9891\u6587\u4ef6 * @return */ public Boolean saveVideo ( MultipartFile picFile , MultipartFile videoFile ) { User user = UserThreadLocal . get (); Video video = new Video (); video . setUserId ( user . getId ()); video . setSeeType ( 1 ); try { //\u4e0a\u4f20\u56fe\u7247\u5230\u963f\u91cc\u4e91oss PicUploadResult uploadResult = this . picUploadService . upload ( picFile ); video . setPicUrl ( uploadResult . getName ()); //\u4e0a\u4f20\u89c6\u9891\u5230FastDFS\u4e2d StorePath storePath = this . storageClient . uploadFile ( videoFile . getInputStream (), videoFile . getSize (), StrUtil . subAfter ( videoFile . getOriginalFilename (), '.' , true ), null ); video . setVideoUrl ( fdfsWebServer . getWebServerUrl () + storePath . getFullPath ()); String videoId = this . videoApi . saveVideo ( video ); if ( StrUtil . isNotEmpty ( videoId )){ //\u53d1\u9001\u6d88\u606f this . videoMQService . videoMsg ( videoId ); } return StrUtil . isNotEmpty ( videoId ); } catch ( IOException e ) { log . error ( \"\u4e0a\u4f20\u5c0f\u89c6\u9891\u51fa\u9519~ userId = \" + user . getId () + \", file = \" + videoFile . getOriginalFilename (), e ); } return null ; } public PageResult queryVideoList ( Integer page , Integer pageSize ) { User user = UserThreadLocal . get (); PageResult pageResult = new PageResult (); pageResult . setPage ( page ); pageResult . setPagesize ( pageSize ); PageInfo < Video > pageInfo = this . videoApi . queryVideoList ( user . getId (), page , pageSize ); List < Video > records = pageInfo . getRecords (); if ( CollUtil . isEmpty ( records )) { return pageResult ; } //\u67e5\u8be2\u7528\u6237\u4fe1\u606f List < Object > userIds = CollUtil . getFieldValues ( records , \"userId\" ); List < UserInfo > userInfoList = this . userInfoService . queryUserInfoByUserIdList ( userIds ); List < VideoVo > videoVoList = new ArrayList <> (); for ( Video record : records ) { VideoVo videoVo = new VideoVo (); videoVo . setUserId ( record . getUserId ()); videoVo . setCover ( record . getPicUrl ()); videoVo . setVideoUrl ( record . getVideoUrl ()); videoVo . setId ( record . getId (). toHexString ()); videoVo . setSignature ( \"\u6211\u5c31\u662f\u6211~\" ); //TODO \u7b7e\u540d videoVo . setCommentCount ( Convert . toInt ( this . quanZiApi . queryCommentCount ( videoVo . getId ()))); //\u8bc4\u8bba\u6570 videoVo . setHasFocus ( this . videoApi . isFollowUser ( user . getId (), videoVo . getUserId ()) ? 1 : 0 ); //\u662f\u5426\u5173\u6ce8 videoVo . setHasLiked ( this . quanZiApi . queryUserIsLike ( user . getId (), videoVo . getId ()) ? 1 : 0 ); //\u662f\u5426\u70b9\u8d5e\uff081\u662f\uff0c0\u5426\uff09 videoVo . setLikeCount ( Convert . toInt ( this . quanZiApi . queryLikeCount ( videoVo . getId ()))); //\u70b9\u8d5e\u6570 //\u586b\u5145\u7528\u6237\u4fe1\u606f for ( UserInfo userInfo : userInfoList ) { if ( ObjectUtil . equals ( videoVo . getUserId (), userInfo . getUserId ())) { videoVo . setNickname ( userInfo . getNickName ()); videoVo . setAvatar ( userInfo . getLogo ()); break ; } } videoVoList . add ( videoVo ); } pageResult . setItems ( videoVoList ); return pageResult ; } /** * \u70b9\u8d5e * * @param videoId * @return */ public Long likeComment ( String videoId ) { User user = UserThreadLocal . get (); Boolean result = this . quanZiApi . likeComment ( user . getId (), videoId ); if ( result ) { //\u53d1\u9001\u6d88\u606f this . videoMQService . likeVideoMsg ( videoId ); return this . quanZiApi . queryLikeCount ( videoId ); } return null ; } /** * \u53d6\u6d88\u70b9\u8d5e * * @param videoId * @return */ public Long disLikeComment ( String videoId ) { User user = UserThreadLocal . get (); Boolean result = this . quanZiApi . disLikeComment ( user . getId (), videoId ); if ( result ) { //\u53d1\u9001\u6d88\u606f this . videoMQService . disLikeVideoMsg ( videoId ); return this . quanZiApi . queryLikeCount ( videoId ); } return null ; } public Boolean saveComment ( String videoId , String content ) { Boolean result = this . quanZiService . saveComments ( videoId , content ); if ( result ){ //\u53d1\u9001\u6d88\u606f this . videoMQService . commentVideoMsg ( videoId ); } return result ; } public PageResult queryCommentList ( String videoId , Integer page , Integer pageSize ) { return this . quanZiService . queryCommentList ( videoId , page , pageSize ); } /** * \u5173\u6ce8\u7528\u6237 * * @param userId * @return */ public Boolean followUser ( Long userId ) { User user = UserThreadLocal . get (); return this . videoApi . followUser ( user . getId (), userId ); } /** * \u53d6\u6d88\u5173\u6ce8 * * @param userId * @return */ public Boolean disFollowUser ( Long userId ) { User user = UserThreadLocal . get (); return this . videoApi . disFollowUser ( user . getId (), userId ); } }","title":"4.3.2\u3001VideoService"},{"location":"tantan/day10/#53","text":"","title":"5.3\u3001\u63a5\u6536\u6d88\u606f"},{"location":"tantan/day10/#531recommendvideo","text":"package com.tanhua.recommend.pojo ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; import org.bson.types.ObjectId ; import org.springframework.data.mongodb.core.mapping.Document ; @Data @NoArgsConstructor @AllArgsConstructor @Document ( collection = \"recommend_video\" ) public class RecommendVideo { private ObjectId id ; private Long userId ; // \u7528\u6237id private Long videoId ; //\u89c6\u9891id\uff0c\u9700\u8981\u8f6c\u5316\u4e3aLong\u7c7b\u578b private Double score ; //\u5f97\u5206 private Long date ; //\u65f6\u95f4\u6233 }","title":"5.3.1\u3001RecommendVideo"},{"location":"tantan/day10/#532videomsgconsumer","text":"package com.tanhua.recommend.msg ; import cn.hutool.json.JSONObject ; import cn.hutool.json.JSONUtil ; import com.tanhua.recommend.pojo.RecommendVideo ; import lombok.extern.slf4j.Slf4j ; import org.apache.rocketmq.spring.annotation.RocketMQMessageListener ; import org.apache.rocketmq.spring.core.RocketMQListener ; import org.bson.types.ObjectId ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.data.mongodb.core.MongoTemplate ; import org.springframework.stereotype.Component ; @Component @RocketMQMessageListener ( topic = \"tanhua-video\" , consumerGroup = \"tanhua-video-consumer\" ) @Slf4j public class VideoMsgConsumer implements RocketMQListener < String > { @Autowired private MongoTemplate mongoTemplate ; @Override public void onMessage ( String msg ) { try { JSONObject jsonObject = JSONUtil . parseObj ( msg ); Long userId = jsonObject . getLong ( \"userId\" ); Long vid = jsonObject . getLong ( \"vid\" ); Integer type = jsonObject . getInt ( \"type\" ); //1-\u53d1\u52a8\u6001\uff0c2-\u70b9\u8d5e\uff0c 3-\u53d6\u6d88\u70b9\u8d5e\uff0c4-\u8bc4\u8bba RecommendVideo recommendVideo = new RecommendVideo (); recommendVideo . setUserId ( userId ); recommendVideo . setId ( ObjectId . get ()); recommendVideo . setDate ( System . currentTimeMillis ()); recommendVideo . setVideoId ( vid ); switch ( type ) { case 1 : { recommendVideo . setScore ( 2d ); break ; } case 2 : { recommendVideo . setScore ( 5d ); break ; } case 3 : { recommendVideo . setScore ( - 5d ); break ; } case 4 : { recommendVideo . setScore ( 10 d ); break ; } default : { recommendVideo . setScore ( 0d ); break ; } } this . mongoTemplate . save ( recommendVideo ); } catch ( Exception e ) { log . error ( \"\u5904\u7406\u5c0f\u89c6\u9891\u6d88\u606f\u5931\u8d25~\" + msg , e ); } } }","title":"5.3.2\u3001VideoMsgConsumer"},{"location":"tantan/day10/#533","text":"\u53ef\u4ee5\u770b\u5230\uff0c\u7528\u62371\u5bf9\u4e8e\u89c6\u9891\u6709\u70b9\u8d5e\u3001\u53d6\u6d88\u70b9\u8d5e\u3001\u8bc4\u8bba\u7b49\u64cd\u4f5c\u3002","title":"5.3.3\u3001\u6d4b\u8bd5"},{"location":"tantan/day10/#54","text":"#\u62c9\u53d6\u955c\u50cf docker pull registry.cn-hangzhou.aliyuncs.com/itcast/tanhua-spark-video:1.0 #\u521b\u5efa\u5bb9\u5668 docker create --name tanhua-spark-video \\ --env MONGODB_HOST = 192 .168.31.81 \\ --env MONGODB_PORT = 27017 \\ --env MONGODB_USERNAME = tanhua \\ --env MONGODB_PASSWORD = l3SCjl0HvmSkTtiSbN0Swv40spYnHhDV \\ --env MONGODB_DATABASE = tanhua \\ --env MONGODB_COLLECTION = recommend_video \\ --env SCHEDULE_PERIOD = 10 \\ --env REDIS_NODES = \"192.168.31.81:6379,192.168.31.81:6380,192.168.31.81:6381\" \\ registry.cn-hangzhou.aliyuncs.com/itcast/tanhua-spark-video:1.0 #\u542f\u52a8\u670d\u52a1 docker start tanhua-spark-video #\u67e5\u770b\u65e5\u5fd7 docker logs -f tanhua-spark-video \u6d4b\u8bd5\uff1a","title":"5.4\u3001\u90e8\u7f72\u63a8\u8350\u670d\u52a1"},{"location":"tantan/day10/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/","text":"\u4e86\u89e3\u63a8\u8350\u7cfb\u7edf\u7684\u539f\u7406 \u72ec\u7acb\u90e8\u7f72\u597d\u53cb\u63a8\u8350\u670d\u52a1 \u4e86\u89e3\u5708\u5b50\u63a8\u8350\u529f\u80fd\u7684\u6d41\u7a0b \u72ec\u7acb\u5b9e\u73b0\u5708\u5b50\u4e2d\u53d1\u9001\u6d88\u606f \u72ec\u7acb\u5b9e\u73b0\u5708\u5b50\u4e2d\u63a5\u6536\u6d88\u606f \u72ec\u7acb\u90e8\u7f72\u5708\u5b50\u63a8\u8350\u670d\u52a1 \u72ec\u7acb\u90e8\u7f72\u5c0f\u89c6\u9891\u63a8\u8350\u670d\u52a1","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"tantan/further/aliyun/","text":"1. \u963f\u91cc\u4e91\u77ed\u4fe1 \u00b6 1. \u6ce8\u518c\u8d26\u53f7 \u00b6 \u767e\u5ea6\u641c\u7d22\u963f\u91cc\u4e91, \u652f\u4ed8\u5b9d\u626b\u7801\u5373\u53ef(\u9700\u8981\u624b\u673a\u786e\u8ba4) 2. \u8fdb\u5165\u963f\u91cc\u4e91\u63a7\u5236\u53f0 \u00b6 3.\u7533\u8bf7\u5f00\u5934\u77ed\u4fe1\u670d\u52a1(\u79d2\u5f00) \u00b6 \u540c\u65f6,\u5145\u503c5\u6bdb\u94b1 \u5907\u7528 (\u4e5f\u53ef\u4ee5\u5145\u503c1\u6bdb,\u770b\u7ecf\u6d4e\u5b9e\u529b,\u51b2\u591a\u4e86\u6ca1\u7528) 4.\u77ed\u4fe1\u9a8c\u7b7e\u540d\u7533\u8bf7 \u00b6 5. \u77ed\u4fe1\u6a21\u677f\u7533\u8bf7 \u00b6 6\u751f\u6210\u79d8\u94a5\u53ca\u4f7f\u7528 \u00b6 7, \u53d1\u9001\u77ed\u4fe1 \u00b6 package com.tanhua.sso ; import com.aliyuncs.CommonRequest ; import com.aliyuncs.CommonResponse ; import com.aliyuncs.DefaultAcsClient ; import com.aliyuncs.IAcsClient ; import com.aliyuncs.exceptions.ClientException ; import com.aliyuncs.exceptions.ServerException ; import com.aliyuncs.http.MethodType ; import com.aliyuncs.profile.DefaultProfile ; /* pom.xml <dependency> <groupId>com.aliyun</groupId> <artifactId>aliyun-java-sdk-core</artifactId> <version>4.5.3</version> </dependency> */ public class SendSms { public static void main ( String [] args ) { DefaultProfile profile = DefaultProfile . getProfile ( \"cn-hangzhou\" , \"accessKeyId\" , \"accessSecret\" ); IAcsClient client = new DefaultAcsClient ( profile ); CommonRequest request = new CommonRequest (); request . setSysMethod ( MethodType . POST ); request . setSysDomain ( \"dysmsapi.aliyuncs.com\" ); request . setSysVersion ( \"2017-05-25\" ); request . setSysAction ( \"SendSms\" ); request . putQueryParameter ( \"RegionId\" , \"cn-hangzhou\" ); request . putQueryParameter ( \"PhoneNumbers\" , \"13288888888\" ); request . putQueryParameter ( \"SignName\" , \"\u63a2\u82b1\u5e73\u53f0\" ); request . putQueryParameter ( \"TemplateCode\" , \"SMS_204055119\" ); request . putQueryParameter ( \"TemplateParam\" , \"{\\\"code\\\":\\\"123456\\\"}\" ); try { CommonResponse response = client . getCommonResponse ( request ); System . out . println ( response . getData ()); } catch ( ServerException e ) { e . printStackTrace (); } catch ( ClientException e ) { e . printStackTrace (); } } } 8. \u9879\u76ee\u4ee3\u7801\u6539\u9020 \u00b6 SmsService.java public String sendSms ( String mobile ) { DefaultProfile profile = DefaultProfile . getProfile ( \"cn-hangzhou\" , \"<accessKeyId>\" , \"<accessSecret>\" ); IAcsClient client = new DefaultAcsClient ( profile ); CommonRequest request = new CommonRequest (); request . setSysMethod ( MethodType . POST ); request . setSysDomain ( \"dysmsapi.aliyuncs.com\" ); request . setSysVersion ( \"2017-05-25\" ); request . setSysAction ( \"SendSms\" ); request . putQueryParameter ( \"RegionId\" , \"cn-hangzhou\" ); request . putQueryParameter ( \"PhoneNumbers\" , mobile ); request . putQueryParameter ( \"SignName\" , \"\u63a2\u82b1\u5e73\u53f0\" ); request . putQueryParameter ( \"TemplateCode\" , \"SMS_204055119\" ); int code = RandomUtils . nextInt ( 100000 , 999999 ); request . putQueryParameter ( \"TemplateParam\" , \"{\\\"code\\\":\\\"123456\\\"}\" ); try { CommonResponse response = client . getCommonResponse ( request ); System . out . println ( response ); if ( response . getData () != null ){ Map < String , String > map = JSONObject . parseObject ( response . getData (), Map . class ); if ( map . get ( \"Code\" ) != null && \"OK\" . equalsIgnoreCase ( map . get ( \"Code\" ))){ return code + \"\" ; // \u5982\u679c\u53d1\u9001\u6210\u529f, \u8fd4\u56de\u9a8c\u8bc1\u7801 } } } catch ( ServerException e ) { e . printStackTrace (); } catch ( ClientException e ) { e . printStackTrace (); } return null ; } 2. \u963f\u91cc\u4e91OOS \u00b6 2.1 \u5f00\u901a\u670d\u52a1 \u00b6 2.2 \u521b\u5efa\u5b58\u50a8\u7a7a\u95f4Bucket \u00b6 2.3 \u754c\u9762\u64cd\u4f5c \u00b6 \u53ef\u4ee5\u5728\u754c\u9762\u4e0a\u64cd\u4f5c\u5220\u9664,\u66f4\u6539\u5220\u9664 2.4 \u5220\u9664 Bucket \u00b6 \u57fa\u7840\u8bbe\u7f6e-- \u6700\u4e0b\u65b9 \u5220\u9664\u5f53\u524dbucket 2.5 java \u64cd\u4f5c \u00b6 https://help.aliyun.com/document_detail/32011.html?spm=a2c4g.11186623.4.1.4f806328oUkWcJ /** * \u4e0a\u4f20 */ @Test public void testupload () throws FileNotFoundException { OSSClient ossClient = new OSSClient ( \"http://oss-cn-beijing.aliyuncs.com\" , \"LTAI4G7n11111xasfsdfvcF2nDR\" , \"zIsIdeLpUnI3xCasfasfd5ovR8Lt\" ); ossClient . putObject ( \"itcast-tanhua-hb\" , \"image/2020/01/01/00.jpg\" , new File ( \"D:\\\\arcsoft\\\\03.jpg\" )); } /** * \u5220\u9664 */ @Test public void testdelete () { OSSClient ossClient = new OSSClient ( \"http://oss-cn-beijing.aliyuncs.com\" , \"LTAI4G712312JEasfsadR\" , \"zIsIdeLpUnI3xasdfasa5ovR8Lt\" ); ossClient . deleteObject ( \"itcast-tanhua\" , \"image/2020/01/01/00.jpg\" ); } \u6ce8\u610f: \u586b\u5199\u7684\u53c2\u6570\u8981\u548c\u81ea\u5df1\u7684 bucket \u5730\u5740\u4e00\u6837","title":"day01_\u963f\u91cc\u4e91"},{"location":"tantan/further/aliyun/#1","text":"","title":"1. \u963f\u91cc\u4e91\u77ed\u4fe1"},{"location":"tantan/further/aliyun/#1_1","text":"\u767e\u5ea6\u641c\u7d22\u963f\u91cc\u4e91, \u652f\u4ed8\u5b9d\u626b\u7801\u5373\u53ef(\u9700\u8981\u624b\u673a\u786e\u8ba4)","title":"1. \u6ce8\u518c\u8d26\u53f7"},{"location":"tantan/further/aliyun/#2","text":"","title":"2. \u8fdb\u5165\u963f\u91cc\u4e91\u63a7\u5236\u53f0"},{"location":"tantan/further/aliyun/#3","text":"\u540c\u65f6,\u5145\u503c5\u6bdb\u94b1 \u5907\u7528 (\u4e5f\u53ef\u4ee5\u5145\u503c1\u6bdb,\u770b\u7ecf\u6d4e\u5b9e\u529b,\u51b2\u591a\u4e86\u6ca1\u7528)","title":"3.\u7533\u8bf7\u5f00\u5934\u77ed\u4fe1\u670d\u52a1(\u79d2\u5f00)"},{"location":"tantan/further/aliyun/#4","text":"","title":"4.\u77ed\u4fe1\u9a8c\u7b7e\u540d\u7533\u8bf7"},{"location":"tantan/further/aliyun/#5","text":"","title":"5. \u77ed\u4fe1\u6a21\u677f\u7533\u8bf7"},{"location":"tantan/further/aliyun/#6","text":"","title":"6\u751f\u6210\u79d8\u94a5\u53ca\u4f7f\u7528"},{"location":"tantan/further/aliyun/#7","text":"package com.tanhua.sso ; import com.aliyuncs.CommonRequest ; import com.aliyuncs.CommonResponse ; import com.aliyuncs.DefaultAcsClient ; import com.aliyuncs.IAcsClient ; import com.aliyuncs.exceptions.ClientException ; import com.aliyuncs.exceptions.ServerException ; import com.aliyuncs.http.MethodType ; import com.aliyuncs.profile.DefaultProfile ; /* pom.xml <dependency> <groupId>com.aliyun</groupId> <artifactId>aliyun-java-sdk-core</artifactId> <version>4.5.3</version> </dependency> */ public class SendSms { public static void main ( String [] args ) { DefaultProfile profile = DefaultProfile . getProfile ( \"cn-hangzhou\" , \"accessKeyId\" , \"accessSecret\" ); IAcsClient client = new DefaultAcsClient ( profile ); CommonRequest request = new CommonRequest (); request . setSysMethod ( MethodType . POST ); request . setSysDomain ( \"dysmsapi.aliyuncs.com\" ); request . setSysVersion ( \"2017-05-25\" ); request . setSysAction ( \"SendSms\" ); request . putQueryParameter ( \"RegionId\" , \"cn-hangzhou\" ); request . putQueryParameter ( \"PhoneNumbers\" , \"13288888888\" ); request . putQueryParameter ( \"SignName\" , \"\u63a2\u82b1\u5e73\u53f0\" ); request . putQueryParameter ( \"TemplateCode\" , \"SMS_204055119\" ); request . putQueryParameter ( \"TemplateParam\" , \"{\\\"code\\\":\\\"123456\\\"}\" ); try { CommonResponse response = client . getCommonResponse ( request ); System . out . println ( response . getData ()); } catch ( ServerException e ) { e . printStackTrace (); } catch ( ClientException e ) { e . printStackTrace (); } } }","title":"7, \u53d1\u9001\u77ed\u4fe1"},{"location":"tantan/further/aliyun/#8","text":"SmsService.java public String sendSms ( String mobile ) { DefaultProfile profile = DefaultProfile . getProfile ( \"cn-hangzhou\" , \"<accessKeyId>\" , \"<accessSecret>\" ); IAcsClient client = new DefaultAcsClient ( profile ); CommonRequest request = new CommonRequest (); request . setSysMethod ( MethodType . POST ); request . setSysDomain ( \"dysmsapi.aliyuncs.com\" ); request . setSysVersion ( \"2017-05-25\" ); request . setSysAction ( \"SendSms\" ); request . putQueryParameter ( \"RegionId\" , \"cn-hangzhou\" ); request . putQueryParameter ( \"PhoneNumbers\" , mobile ); request . putQueryParameter ( \"SignName\" , \"\u63a2\u82b1\u5e73\u53f0\" ); request . putQueryParameter ( \"TemplateCode\" , \"SMS_204055119\" ); int code = RandomUtils . nextInt ( 100000 , 999999 ); request . putQueryParameter ( \"TemplateParam\" , \"{\\\"code\\\":\\\"123456\\\"}\" ); try { CommonResponse response = client . getCommonResponse ( request ); System . out . println ( response ); if ( response . getData () != null ){ Map < String , String > map = JSONObject . parseObject ( response . getData (), Map . class ); if ( map . get ( \"Code\" ) != null && \"OK\" . equalsIgnoreCase ( map . get ( \"Code\" ))){ return code + \"\" ; // \u5982\u679c\u53d1\u9001\u6210\u529f, \u8fd4\u56de\u9a8c\u8bc1\u7801 } } } catch ( ServerException e ) { e . printStackTrace (); } catch ( ClientException e ) { e . printStackTrace (); } return null ; }","title":"8. \u9879\u76ee\u4ee3\u7801\u6539\u9020"},{"location":"tantan/further/aliyun/#2_oos","text":"","title":"2. \u963f\u91cc\u4e91OOS"},{"location":"tantan/further/aliyun/#21","text":"","title":"2.1 \u5f00\u901a\u670d\u52a1"},{"location":"tantan/further/aliyun/#22_bucket","text":"","title":"2.2 \u521b\u5efa\u5b58\u50a8\u7a7a\u95f4Bucket"},{"location":"tantan/further/aliyun/#23","text":"\u53ef\u4ee5\u5728\u754c\u9762\u4e0a\u64cd\u4f5c\u5220\u9664,\u66f4\u6539\u5220\u9664","title":"2.3 \u754c\u9762\u64cd\u4f5c"},{"location":"tantan/further/aliyun/#24_bucket","text":"\u57fa\u7840\u8bbe\u7f6e-- \u6700\u4e0b\u65b9 \u5220\u9664\u5f53\u524dbucket","title":"2.4 \u5220\u9664 Bucket"},{"location":"tantan/further/aliyun/#25_java","text":"https://help.aliyun.com/document_detail/32011.html?spm=a2c4g.11186623.4.1.4f806328oUkWcJ /** * \u4e0a\u4f20 */ @Test public void testupload () throws FileNotFoundException { OSSClient ossClient = new OSSClient ( \"http://oss-cn-beijing.aliyuncs.com\" , \"LTAI4G7n11111xasfsdfvcF2nDR\" , \"zIsIdeLpUnI3xCasfasfd5ovR8Lt\" ); ossClient . putObject ( \"itcast-tanhua-hb\" , \"image/2020/01/01/00.jpg\" , new File ( \"D:\\\\arcsoft\\\\03.jpg\" )); } /** * \u5220\u9664 */ @Test public void testdelete () { OSSClient ossClient = new OSSClient ( \"http://oss-cn-beijing.aliyuncs.com\" , \"LTAI4G712312JEasfsadR\" , \"zIsIdeLpUnI3xasdfasa5ovR8Lt\" ); ossClient . deleteObject ( \"itcast-tanhua\" , \"image/2020/01/01/00.jpg\" ); } \u6ce8\u610f: \u586b\u5199\u7684\u53c2\u6570\u8981\u548c\u81ea\u5df1\u7684 bucket \u5730\u5740\u4e00\u6837","title":"2.5 java \u64cd\u4f5c"},{"location":"tantan/further/ansy/","text":"\u5f02\u6b65 @Async \u00b6 1. @Async \u7684\u4f7f\u7528 \u00b6 Spring \u63d0\u4f9b\u4e86 \u5f02\u6b65\u6267\u884c\u7684\u4ee3\u7801\u7684\u529f\u80fd,\u80fd\u8ba9\u6211\u4eec\u4ee5\u591a\u7ebf\u7a0b\u7684\u65b9\u5f0f\u6267\u884c,\u4f46\u662fspring \u4e2d\u81ea\u5e26\u7684@Async \u6ce8\u89e3\u6267\u884c\u5f02\u6b65\u65f6\u5e76\u6ca1\u6709\u4f7f\u7528\u7ebf\u7a0b\u6c60\u7684\u6982\u5ff5, \u5bfc\u81f4\u5982\u679c\u540c\u65f6\u6267\u884c\u591a\u4e2a\u4efb\u52a1\u53ef\u80fd\u51fa\u73b0\u628a\u7cfb\u7edf\u8d44\u6e90\u8017\u5c3d\u7684\u60c5\u51b5. \u5bf9\u6b64,spingBoot \u4e00\u505a\u597d\u4e86\u4f18\u5316,\u9ed8\u8ba4\u4f7f\u7528\u7ebf\u7a0b\u6c60\u6267\u884c\u4efb\u52a1 \u5728springboot \u9879\u76ee\u4e2d\u9700\u8981\u5f02\u6b65\u6267\u884c\u7684\u4ee3\u7801\u4e0a\u52a0\u4e0a\u6ce8\u89e3 @Async,\u540c\u65f6\u5728\u542f\u52a8\u7c7b\u4e0a\u52a0\u4e0a@EnableAsync\u5373\u53ef\u5982\u4e0b @SpringBootApplication @EnableAsync public class AnsyApplication { public static void main ( String [] args ) { SpringApplication . run ( AnsyApplication . class , args ); } } @Async public void test () throws InterruptedException { Thread . sleep ( 1000 ); System . out . println ( \"\u5b50\u7ebf\u7a0b\u6267\u884c\u4e86\" ); } \u6d4b\u8bd5\u4ee3\u7801 @RunWith ( SpringRunner . class ) @SpringBootTest ( classes = AnsyApplication . class ) public class TestDemo { @Autowired AnsyService service ; @Test public void testDemo () throws Exception { service . test (); System . out . println ( \"\u4e3b\u7ebf\u7a0b\u6267\u884c\u4e86\" ); //\u963b\u585e\u5f53\u524d\u7684\u4e3b\u7ebf\u7a0b\uff0c\u7b49\u5f85\u5f02\u6b65\u6267\u884c\u7684\u7ed3\u675f Thread . sleep ( 2000 ); } 2. CompletableFuture \u00b6 \u6b64\u65f6\u4e3b\u7ebf\u7a0b\u662f\u4e0d\u77e5\u9053\u5b50\u7ebf\u7a0b\u4ec0\u4e48\u65f6\u5019\u6267\u884c\u7ed3\u675f\u7684, \u4e5f\u4e0d\u77e5\u9053\u6267\u884c\u7684\u7ed3\u679c\u662f\u4ec0\u4e48 \u5982\u679c\u60f3\u8981\u66f4\u65b9\u4fbf\u7684\u83b7\u53d6\u7ed3\u679c jdk 1.8 \u63d0\u4f9b\u4e86 CompletableFuture Service \u4ee3\u7801 \u00b6 @Service public class AnsyService { @Async public CompletableFuture < String > test2 () throws InterruptedException { Thread . sleep ( 1000 ); System . out . println ( \"\u5b50\u7ebf\u7a0b\u6267\u884c\u4e862\" + new Date () + Thread . currentThread (). getName ()); return CompletableFuture . completedFuture ( \"ok\" ); } } \u6d4b\u8bd5\u4ee3\u7801 \u00b6 @Test public void testDemo2 () throws InterruptedException { CompletableFuture < String > future = service . test2 (); future . whenComplete (( s , throwable ) -> { System . out . println ( \"\u6267\u884c\u5b8c\u6210\uff1a\" + s ); }); System . out . println ( \"\u4e3b\u7ebf\u7a0b\u6267\u884c\u4e86\" ); try { future . get (); //\u963b\u585e\u5f53\u524d\u7684\u4e3b\u7ebf\u7a0b\uff0c\u7b49\u5f85\u5f02\u6b65\u6267\u884c\u7684\u7ed3\u675f // \u6d4b\u8bd5\u65f6\u4f7f\u7528, tomcat \u4e2d\u8fd0\u884c\u7684diamante\u65e0\u9700\u52a0\u8fd9\u4e2a,\u56e0\u4e3a tomcat\u4e00\u76f4\u5728\u8fd0\u884c } catch ( Exception e ) { e . printStackTrace (); } } 3. \u7ebf\u7a0b\u6c60\u6570\u91cf \u00b6 Sprigboot \u9ed8\u8ba4\u7ebf\u7a0b\u6c60\u6570\u91cf\u662f8\u4e2a, \u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u9ed8\u8ba4\u7684\u914d\u7f6e\u5c06\u5982\u4e0b\u4ee3\u7801\u653e\u5165 \u542f\u52a8\u7c7b\u4e2d\u5373\u53ef @Bean public AsyncTaskExecutor asyncTaskExecutor () { ThreadPoolTaskExecutor asyncTaskExecutor = new ThreadPoolTaskExecutor (); asyncTaskExecutor . setCorePoolSize ( 15 ); // \u8bbe\u7f6e\u7ebf\u7a0b\u6c60\u521d\u59cb\u5927\u5c0f asyncTaskExecutor . setMaxPoolSize ( 50 ); // \u8bbe\u7f6e\u7ebf\u7a0b\u6c60\u6700\u5927\u5927\u5c0f asyncTaskExecutor . initialize (); // \u4e00\u5b9a\u4e0d\u8981\u5fd8\u4e86\u8fd9\u53e5\u4ee3\u7801,\u8fdb\u884c\u521d\u59cb\u5316 return asyncTaskExecutor ; }","title":"day04_\u591a\u7ebf\u7a0b@Ansy"},{"location":"tantan/further/ansy/#async","text":"","title":"\u5f02\u6b65  @Async"},{"location":"tantan/further/ansy/#1_async","text":"Spring \u63d0\u4f9b\u4e86 \u5f02\u6b65\u6267\u884c\u7684\u4ee3\u7801\u7684\u529f\u80fd,\u80fd\u8ba9\u6211\u4eec\u4ee5\u591a\u7ebf\u7a0b\u7684\u65b9\u5f0f\u6267\u884c,\u4f46\u662fspring \u4e2d\u81ea\u5e26\u7684@Async \u6ce8\u89e3\u6267\u884c\u5f02\u6b65\u65f6\u5e76\u6ca1\u6709\u4f7f\u7528\u7ebf\u7a0b\u6c60\u7684\u6982\u5ff5, \u5bfc\u81f4\u5982\u679c\u540c\u65f6\u6267\u884c\u591a\u4e2a\u4efb\u52a1\u53ef\u80fd\u51fa\u73b0\u628a\u7cfb\u7edf\u8d44\u6e90\u8017\u5c3d\u7684\u60c5\u51b5. \u5bf9\u6b64,spingBoot \u4e00\u505a\u597d\u4e86\u4f18\u5316,\u9ed8\u8ba4\u4f7f\u7528\u7ebf\u7a0b\u6c60\u6267\u884c\u4efb\u52a1 \u5728springboot \u9879\u76ee\u4e2d\u9700\u8981\u5f02\u6b65\u6267\u884c\u7684\u4ee3\u7801\u4e0a\u52a0\u4e0a\u6ce8\u89e3 @Async,\u540c\u65f6\u5728\u542f\u52a8\u7c7b\u4e0a\u52a0\u4e0a@EnableAsync\u5373\u53ef\u5982\u4e0b @SpringBootApplication @EnableAsync public class AnsyApplication { public static void main ( String [] args ) { SpringApplication . run ( AnsyApplication . class , args ); } } @Async public void test () throws InterruptedException { Thread . sleep ( 1000 ); System . out . println ( \"\u5b50\u7ebf\u7a0b\u6267\u884c\u4e86\" ); } \u6d4b\u8bd5\u4ee3\u7801 @RunWith ( SpringRunner . class ) @SpringBootTest ( classes = AnsyApplication . class ) public class TestDemo { @Autowired AnsyService service ; @Test public void testDemo () throws Exception { service . test (); System . out . println ( \"\u4e3b\u7ebf\u7a0b\u6267\u884c\u4e86\" ); //\u963b\u585e\u5f53\u524d\u7684\u4e3b\u7ebf\u7a0b\uff0c\u7b49\u5f85\u5f02\u6b65\u6267\u884c\u7684\u7ed3\u675f Thread . sleep ( 2000 ); }","title":"1. @Async \u7684\u4f7f\u7528"},{"location":"tantan/further/ansy/#2_completablefuture","text":"\u6b64\u65f6\u4e3b\u7ebf\u7a0b\u662f\u4e0d\u77e5\u9053\u5b50\u7ebf\u7a0b\u4ec0\u4e48\u65f6\u5019\u6267\u884c\u7ed3\u675f\u7684, \u4e5f\u4e0d\u77e5\u9053\u6267\u884c\u7684\u7ed3\u679c\u662f\u4ec0\u4e48 \u5982\u679c\u60f3\u8981\u66f4\u65b9\u4fbf\u7684\u83b7\u53d6\u7ed3\u679c jdk 1.8 \u63d0\u4f9b\u4e86 CompletableFuture","title":"2. CompletableFuture"},{"location":"tantan/further/ansy/#service","text":"@Service public class AnsyService { @Async public CompletableFuture < String > test2 () throws InterruptedException { Thread . sleep ( 1000 ); System . out . println ( \"\u5b50\u7ebf\u7a0b\u6267\u884c\u4e862\" + new Date () + Thread . currentThread (). getName ()); return CompletableFuture . completedFuture ( \"ok\" ); } }","title":"Service \u4ee3\u7801"},{"location":"tantan/further/ansy/#_1","text":"@Test public void testDemo2 () throws InterruptedException { CompletableFuture < String > future = service . test2 (); future . whenComplete (( s , throwable ) -> { System . out . println ( \"\u6267\u884c\u5b8c\u6210\uff1a\" + s ); }); System . out . println ( \"\u4e3b\u7ebf\u7a0b\u6267\u884c\u4e86\" ); try { future . get (); //\u963b\u585e\u5f53\u524d\u7684\u4e3b\u7ebf\u7a0b\uff0c\u7b49\u5f85\u5f02\u6b65\u6267\u884c\u7684\u7ed3\u675f // \u6d4b\u8bd5\u65f6\u4f7f\u7528, tomcat \u4e2d\u8fd0\u884c\u7684diamante\u65e0\u9700\u52a0\u8fd9\u4e2a,\u56e0\u4e3a tomcat\u4e00\u76f4\u5728\u8fd0\u884c } catch ( Exception e ) { e . printStackTrace (); } }","title":"\u6d4b\u8bd5\u4ee3\u7801"},{"location":"tantan/further/ansy/#3","text":"Sprigboot \u9ed8\u8ba4\u7ebf\u7a0b\u6c60\u6570\u91cf\u662f8\u4e2a, \u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u9ed8\u8ba4\u7684\u914d\u7f6e\u5c06\u5982\u4e0b\u4ee3\u7801\u653e\u5165 \u542f\u52a8\u7c7b\u4e2d\u5373\u53ef @Bean public AsyncTaskExecutor asyncTaskExecutor () { ThreadPoolTaskExecutor asyncTaskExecutor = new ThreadPoolTaskExecutor (); asyncTaskExecutor . setCorePoolSize ( 15 ); // \u8bbe\u7f6e\u7ebf\u7a0b\u6c60\u521d\u59cb\u5927\u5c0f asyncTaskExecutor . setMaxPoolSize ( 50 ); // \u8bbe\u7f6e\u7ebf\u7a0b\u6c60\u6700\u5927\u5927\u5c0f asyncTaskExecutor . initialize (); // \u4e00\u5b9a\u4e0d\u8981\u5fd8\u4e86\u8fd9\u53e5\u4ee3\u7801,\u8fdb\u884c\u521d\u59cb\u5316 return asyncTaskExecutor ; }","title":"3. \u7ebf\u7a0b\u6c60\u6570\u91cf"},{"location":"tantan/further/lombok/","text":"1, spring boot \u65e5\u5fd7\u529f\u80fd \u00b6 spring boot \u6574\u5408webmvc \u540e \u6211\u4eec\u53ef\u4ee5\u8c03\u6574\u65e5\u5fd7\u7684\u8f93\u5165\u7ea7\u522b application.yml # spring boot \u4e2d\u8f93\u5165\u65e5\u5fd7 logging : level : # com.itheima \u7684\u65e5\u5fd7\u7ea7\u522b\u4e3a debug com.itheima : info # org.springframework \u7684\u65e5\u5fd7\u7ea7\u522b\u4e3a info org.springframework : info UserController @ RestController public class UserController { Logger logger = LoggerFactory.getLogger(UserController.class); @RequestMapping(\"/hello\") public String hello(){ logger.debug(\"debug\"); logger.info(\"info\"); logger.warn(\"warn\"); return \"hello\"; } } 2) lombok \u00b6 \u9879\u76ee\u4e2d\u5927\u91cf\u6bcf\u4e2a\u7c7b\u90fd\u9700\u8981\u4f7f\u7528 \u5bf9\u8c61, \u540c\u65f6\u6211\u4eec\u7684 pojo \u7c7b\u4e2d\u9700\u8981 \u5927\u91cf\u7684\u56fa\u5b9a\u7684get,set,toString \u65b9\u6cd5 lombok \u63d2\u4ef6\u80fd\u591f\u7b80\u5316\u6211\u4eec\u7684\u4ee3\u7801 \u4f7f\u7528\u65b9\u5f0f \u200b 1) \u9996\u5148\u5b89\u88c5idea \u63d2\u4ef6 2) \u5728\u9879\u76ee\u4e2d\u5bfc\u5165\u5750\u6807 <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> </dependency> 3) \u4f7f\u7528 \u7136\u540e\u53ef\u4ee5\u5728Bean\u4e0a\u4f7f\u7528 \uff1a @Data \uff1a \u81ea\u52a8\u63d0\u4f9bgetter\u548csetter \u3001 hashCode \u3001 equals \u3001 toString\u7b49\u65b9\u6cd5 @Getter \uff1a \u81ea\u52a8\u63d0\u4f9bgetter\u65b9\u6cd5 @Setter \uff1a \u81ea\u52a8\u63d0\u4f9bsetter\u65b9\u6cd5 @Slf4j \uff1a \u81ea\u52a8\u5728bean\u4e2d\u63d0\u4f9blog\u53d8\u91cf \uff0c \u5176\u5b9e\u7528\u7684\u662fslf4j\u7684\u65e5\u5fd7\u529f\u80fd \u3002 @RestController @Slf4j public class UserController { @RequestMapping ( \"/hello\" ) public String hello (){ log . debug ( \"debug\" ); log . info ( \"info\" ); log . warn ( \"warn\" ); return \"hello\" ; } } @Data public class User { private int id ; private String username ; private String password ; }","title":"day01_lombok"},{"location":"tantan/further/lombok/#1_spring_boot","text":"spring boot \u6574\u5408webmvc \u540e \u6211\u4eec\u53ef\u4ee5\u8c03\u6574\u65e5\u5fd7\u7684\u8f93\u5165\u7ea7\u522b application.yml # spring boot \u4e2d\u8f93\u5165\u65e5\u5fd7 logging : level : # com.itheima \u7684\u65e5\u5fd7\u7ea7\u522b\u4e3a debug com.itheima : info # org.springframework \u7684\u65e5\u5fd7\u7ea7\u522b\u4e3a info org.springframework : info UserController @ RestController public class UserController { Logger logger = LoggerFactory.getLogger(UserController.class); @RequestMapping(\"/hello\") public String hello(){ logger.debug(\"debug\"); logger.info(\"info\"); logger.warn(\"warn\"); return \"hello\"; } }","title":"1, spring boot \u65e5\u5fd7\u529f\u80fd"},{"location":"tantan/further/lombok/#2_lombok","text":"\u9879\u76ee\u4e2d\u5927\u91cf\u6bcf\u4e2a\u7c7b\u90fd\u9700\u8981\u4f7f\u7528 \u5bf9\u8c61, \u540c\u65f6\u6211\u4eec\u7684 pojo \u7c7b\u4e2d\u9700\u8981 \u5927\u91cf\u7684\u56fa\u5b9a\u7684get,set,toString \u65b9\u6cd5 lombok \u63d2\u4ef6\u80fd\u591f\u7b80\u5316\u6211\u4eec\u7684\u4ee3\u7801 \u4f7f\u7528\u65b9\u5f0f \u200b 1) \u9996\u5148\u5b89\u88c5idea \u63d2\u4ef6 2) \u5728\u9879\u76ee\u4e2d\u5bfc\u5165\u5750\u6807 <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> </dependency> 3) \u4f7f\u7528 \u7136\u540e\u53ef\u4ee5\u5728Bean\u4e0a\u4f7f\u7528 \uff1a @Data \uff1a \u81ea\u52a8\u63d0\u4f9bgetter\u548csetter \u3001 hashCode \u3001 equals \u3001 toString\u7b49\u65b9\u6cd5 @Getter \uff1a \u81ea\u52a8\u63d0\u4f9bgetter\u65b9\u6cd5 @Setter \uff1a \u81ea\u52a8\u63d0\u4f9bsetter\u65b9\u6cd5 @Slf4j \uff1a \u81ea\u52a8\u5728bean\u4e2d\u63d0\u4f9blog\u53d8\u91cf \uff0c \u5176\u5b9e\u7528\u7684\u662fslf4j\u7684\u65e5\u5fd7\u529f\u80fd \u3002 @RestController @Slf4j public class UserController { @RequestMapping ( \"/hello\" ) public String hello (){ log . debug ( \"debug\" ); log . info ( \"info\" ); log . warn ( \"warn\" ); return \"hello\" ; } } @Data public class User { private int id ; private String username ; private String password ; }","title":"2) lombok"},{"location":"tantan/further/mongodb/","text":"MongoDB \u4e8b\u52a1 \u00b6 MongoDB 4.0 \u5f15\u5165\u7684\u4e8b\u52a1\u529f\u80fd\uff0c\u652f\u6301\u591a\u6587\u6863ACID\u7279\u6027\uff0c 1) \u60f3\u8981\u652f\u6301\u4e8b\u52a1,mongoDB \u5fc5\u987b\u4f7f\u7528\u96c6\u7fa4\u73af\u5883 2) \u5728\u5bb9\u5668\u4e2d\u6ce8\u518c\u4e00\u4e2a\u4e8b\u52a1\u7ba1\u7406\u5668 @Configuration public class MongoTransactionConfig { @Bean public MongoTransactionManager transactionManager ( MongoDbFactory dbFactory ) { return new MongoTransactionManager ( dbFactory ); } } 3) \u5728\u9700\u8981\u4e8b\u52a1\u63a7\u5236\u7684\u65b9\u6cd5\u4e0a\u4f7f\u7528 @Transactional \u6ce8\u89e3\u5373\u53ef","title":"day04_MongoDB"},{"location":"tantan/further/mongodb/#mongodb","text":"MongoDB 4.0 \u5f15\u5165\u7684\u4e8b\u52a1\u529f\u80fd\uff0c\u652f\u6301\u591a\u6587\u6863ACID\u7279\u6027\uff0c 1) \u60f3\u8981\u652f\u6301\u4e8b\u52a1,mongoDB \u5fc5\u987b\u4f7f\u7528\u96c6\u7fa4\u73af\u5883 2) \u5728\u5bb9\u5668\u4e2d\u6ce8\u518c\u4e00\u4e2a\u4e8b\u52a1\u7ba1\u7406\u5668 @Configuration public class MongoTransactionConfig { @Bean public MongoTransactionManager transactionManager ( MongoDbFactory dbFactory ) { return new MongoTransactionManager ( dbFactory ); } } 3) \u5728\u9700\u8981\u4e8b\u52a1\u63a7\u5236\u7684\u65b9\u6cd5\u4e0a\u4f7f\u7528 @Transactional \u6ce8\u89e3\u5373\u53ef","title":"MongoDB \u4e8b\u52a1"},{"location":"tantan/further/mybatisPlus/","text":"mybatis_plus \u8865\u5145\u77e5\u8bc6 \u00b6 1. \u679a\u4e3e \u00b6 \u6211\u4eec\u7ecf\u5e38\u51fa\u73b0\u5982\u4e0b\u573a\u666f,\u6570\u636e\u5e93\u5b58\u50a8\u7684\u6027\u522b\u4e3a\u6570\u5b57: 1 , 2 , \u800c\u6211\u4eec\u524d\u7aef\u9875\u9762\u8981\u7684\u6570\u636e\u662f ' \u7537 ' , ' \u5973 ' ,\u4e8e\u662f\u6211\u4eec\u7a0b\u5e8f\u6bcf\u6b21\u9700\u8981\u5904\u7406\u8fd9\u7c7b\u6570\u636e\u8f6c\u6362\u65f6\u6bcf\u6b21\u90fd\u9700\u8981 if else \u5224\u65ad\u8fdb\u884c\u51fa\u5177\u5904\u7406\u540e\u518d\u8fdb\u884c\u8fd4\u56de \u4e3a\u4e86\u66f4\u597d\u7684\u5b58\u50a8\u548c\u83b7\u53d6\u6b64\u7c7b\u6570\u636e mybatis_plus \u63d0\u4f9b\u4e86\u679a\u4e3e\u7279\u6027\u7684\u652f\u6301 1) \u5efa\u8868\u8bed\u53e5 CREATE TABLE ` tb_user1 ` ( ` id ` BIGINT ( 20 ) NOT NULL AUTO_INCREMENT COMMENT '\u4e3b\u952eID' , ` user_name ` VARCHAR ( 20 ) COMMENT '\u7528\u6237\u540d' , ` password ` VARCHAR ( 20 ) COMMENT '\u5bc6\u7801' , ` name ` VARCHAR ( 30 ) DEFAULT NULL COMMENT '\u59d3\u540d' , ` age ` INT ( 11 ) DEFAULT NULL COMMENT '\u5e74\u9f84' , ` sex ` INT ( 1 ) DEFAULT NULL COMMENT '\u6027\u522b' , ` email ` VARCHAR ( 50 ) DEFAULT NULL COMMENT '\u90ae\u7bb1' , created DATETIME , updated DATETIME , PRIMARY KEY ( ` id ` ) ) ENGINE = INNODB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8 \u6ce8\u610f,\u679a\u4e3e\u652f\u6301\u7684\u5b57\u6bb5\u4e0d\u80fd\u662ftinyint \u7c7b\u578b, 2) \u5b9a\u4e49\u679a\u4e3e package com.itheima.mp.enums ; import com.baomidou.mybatisplus.core.enums.IEnum ; public enum SexEnum implements IEnum < Integer > { MAN ( 1 , \"\u7537\" ), WOMAN ( 2 , \"\u5973\" ), UNKNOWN ( 3 , \"\u672a\u77e5\" ); private int value ; private String desc ; SexEnum ( int value , String desc ) { this . value = value ; this . desc = desc ; } @Override public Integer getValue () { return this . value ; } @Override public String toString () { return this . desc ; } } 3) \u521b\u5efa\u5b9e\u4f53\u7c7b\u5bf9\u8c61 //@TableName(\"tb_user\") @Data public class User1 { @TableId ( type = IdType . AUTO ) private Long id ; private String userName ; private String password ; private String name ; private Integer age ; private String email ; private SexEnum sex ; //\u6027\u522b,\u8fd9\u4e2a\u5b57\u6bb5\u4f7f\u7528\u679a\u4e3e } 3) mapper /** * \u4f7f\u7528mp\u5b9a\u4e49Mapper\uff0c\u9700\u8981\u8ba9Mapper\u63a5\u53e3\u7ee7\u627f BaseMapper\u63a5\u53e3\u3002 */ @Repository public interface User1Mapper extends BaseMapper < User1 > { } 4) \u5b9a\u4e49service @Service public class User1ServiceImpl extends ServiceImpl < User1Mapper , User1 > { } 5) \u589e\u52a0\u679a\u4e3e\u5305\u626b\u63cf\u914d\u7f6e mybatis-plus : # \u6307\u5b9a\u679a\u4e3e\u6240\u5728\u7684\u5305 type-enums-package : com.itheima.mp.enums global-config : db-config : # \u8868\u540d\u524d\u7f00 table-prefix : tb_ # id\u751f\u6210\u7b56\u7565 \u6570\u636e\u5e93\u81ea\u589e id-type : auto configuration : # \u65e5\u5fd7 log-impl : org.apache.ibatis.logging.stdout.StdOutImpl 6) \u6d4b\u8bd5 @SpringBootTest @RunWith ( SpringRunner . class ) public class User1ServiceTest { @Autowired private User1ServiceImpl userService ; @Test public void testSave (){ User1 user1 = new User1 (); user1 . setName ( \"zhangsn\" ); user1 . setSex ( SexEnum . MAN ); userService . save ( user1 ); // java \u8d4b\u503c\u4e3a\u679a\u4e3e,\u63d2\u5165\u6570\u636e\u5e93\u4e3a \u6570\u5b57\u7c7b\u578b } @Test public void test (){ QueryWrapper < User1 > wrapper = new QueryWrapper <> (); wrapper . eq ( \"id\" , \"13\" ); User1 user = userService . getOne ( wrapper ); System . out . println ( user ); // \u67e5\u8be2\u540e,tostring \u65b9\u6cd5\u5f97\u5230\u7684\u662f '\u7537',\u672a\u6765\u8f6cjson \u4e5f\u662f'\u7537' } } 2. \u5b57\u6bb5\u81ea\u52a8\u8d4b\u503c \u00b6 \u200b \u6211\u4eec\u6bcf\u4e2a\u8868\u90fd\u9700\u8981\u4e00\u4e2a createdDate ,\u548cupdateDate\u5b57\u6bb5,\u6765\u8bb0\u5f55\u6570\u636e\u521b\u5efa\u65f6\u95f4\u548c\u6570\u636e\u66f4\u65b0\u65f6\u95f4, \u4f46\u662f\u6bcf\u6b21\u6211\u4eec\u5982\u679c\u90fd\u8fd9\u4e48\u8d4b\u503c,\u4ee3\u7801\u91cd\u590d\u6027\u5f88\u591a,\u800c\u4e14\u4e00\u65e6\u5fd8\u8bb0,\u8bb2\u5bfc\u81f4\u6570\u636e\u4e0d\u51c6\u786e\u95ee\u9898\u4ea7\u751f \u200b mybatis_plus \u63d0\u4f9b\u4e86\u8fd9\u7c7b\u7684\u529f\u80fd\u652f\u6301,\u65b9\u4fbf\u6211\u4eec\u7f16\u7a0b 1) \u5b9e\u4f53\u7c7b\u4e0a\u589e\u52a0\u5b57\u6bb5 created ,\u548cupdated @Data public class User1 { @TableId ( type = IdType . AUTO ) private Long id ; private String userName ; private String password ; private String name ; private Integer age ; private String email ; private SexEnum sex ; //\u6027\u522b //\u6ce8\u89e3,fill = FieldFill.INSERT \u8868\u793a\u6267\u884c\u63d2\u5165\u65f6 \u7ed9\u8be5\u5b57\u6bb5\u8d4b\u503c,\u4f46\u662f\u66f4\u65b0\u65f6\u4e0d\u4f1a\u91cd\u65b0\u8d4b\u503c @TableField ( fill = FieldFill . INSERT ) private Date created ; //\u6ce8\u89e3,fill = FieldFill.INSERT_UPDATE \u8868\u793a\u6267\u884c\u63d2\u5165,\u66f4\u65b0\u65f6\u90fd\u4f1a(\u91cd\u65b0)\u8d4b\u503c @TableField ( fill = FieldFill . INSERT_UPDATE ) private Date updated ; } 2) \u7f16\u5199Handler package com.itheima.mp.config ; import com.baomidou.mybatisplus.core.handlers.MetaObjectHandler ; import org.apache.ibatis.reflection.MetaObject ; import org.springframework.stereotype.Component ; import java.util.Date ; @Component public class MyMetaObjectHandler implements MetaObjectHandler { @Override public void insertFill ( MetaObject metaObject ) { Object created = getFieldValByName ( \"created\" , metaObject ); if ( null == created ) { //\u5b57\u6bb5\u4e3a\u7a7a\uff0c\u53ef\u4ee5\u8fdb\u884c\u586b\u5145 setFieldValByName ( \"created\" , new Date (), metaObject ); } Object updated = getFieldValByName ( \"updated\" , metaObject ); if ( null == updated ) { //\u5b57\u6bb5\u4e3a\u7a7a\uff0c\u53ef\u4ee5\u8fdb\u884c\u586b\u5145 setFieldValByName ( \"updated\" , new Date (), metaObject ); } } @Override public void updateFill ( MetaObject metaObject ) { //\u66f4\u65b0\u6570\u636e\u65f6\uff0c\u76f4\u63a5\u66f4\u65b0\u5b57\u6bb5 setFieldValByName ( \"updated\" , new Date (), metaObject ); } } 3) \u6d4b\u8bd5,\u67e5\u770b\u6570\u636e\u5e93\u4f1a\u81ea\u52a8\u8d4b\u503c @Test public void testSave (){ User1 user1 = new User1 (); user1 . setName ( \"zhangsn\" ); user1 . setSex ( SexEnum . MAN ); userService . save ( user1 ); }","title":"day01_mybatis_plus"},{"location":"tantan/further/mybatisPlus/#mybatis_plus","text":"","title":"mybatis_plus \u8865\u5145\u77e5\u8bc6"},{"location":"tantan/further/mybatisPlus/#1","text":"\u6211\u4eec\u7ecf\u5e38\u51fa\u73b0\u5982\u4e0b\u573a\u666f,\u6570\u636e\u5e93\u5b58\u50a8\u7684\u6027\u522b\u4e3a\u6570\u5b57: 1 , 2 , \u800c\u6211\u4eec\u524d\u7aef\u9875\u9762\u8981\u7684\u6570\u636e\u662f ' \u7537 ' , ' \u5973 ' ,\u4e8e\u662f\u6211\u4eec\u7a0b\u5e8f\u6bcf\u6b21\u9700\u8981\u5904\u7406\u8fd9\u7c7b\u6570\u636e\u8f6c\u6362\u65f6\u6bcf\u6b21\u90fd\u9700\u8981 if else \u5224\u65ad\u8fdb\u884c\u51fa\u5177\u5904\u7406\u540e\u518d\u8fdb\u884c\u8fd4\u56de \u4e3a\u4e86\u66f4\u597d\u7684\u5b58\u50a8\u548c\u83b7\u53d6\u6b64\u7c7b\u6570\u636e mybatis_plus \u63d0\u4f9b\u4e86\u679a\u4e3e\u7279\u6027\u7684\u652f\u6301 1) \u5efa\u8868\u8bed\u53e5 CREATE TABLE ` tb_user1 ` ( ` id ` BIGINT ( 20 ) NOT NULL AUTO_INCREMENT COMMENT '\u4e3b\u952eID' , ` user_name ` VARCHAR ( 20 ) COMMENT '\u7528\u6237\u540d' , ` password ` VARCHAR ( 20 ) COMMENT '\u5bc6\u7801' , ` name ` VARCHAR ( 30 ) DEFAULT NULL COMMENT '\u59d3\u540d' , ` age ` INT ( 11 ) DEFAULT NULL COMMENT '\u5e74\u9f84' , ` sex ` INT ( 1 ) DEFAULT NULL COMMENT '\u6027\u522b' , ` email ` VARCHAR ( 50 ) DEFAULT NULL COMMENT '\u90ae\u7bb1' , created DATETIME , updated DATETIME , PRIMARY KEY ( ` id ` ) ) ENGINE = INNODB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8 \u6ce8\u610f,\u679a\u4e3e\u652f\u6301\u7684\u5b57\u6bb5\u4e0d\u80fd\u662ftinyint \u7c7b\u578b, 2) \u5b9a\u4e49\u679a\u4e3e package com.itheima.mp.enums ; import com.baomidou.mybatisplus.core.enums.IEnum ; public enum SexEnum implements IEnum < Integer > { MAN ( 1 , \"\u7537\" ), WOMAN ( 2 , \"\u5973\" ), UNKNOWN ( 3 , \"\u672a\u77e5\" ); private int value ; private String desc ; SexEnum ( int value , String desc ) { this . value = value ; this . desc = desc ; } @Override public Integer getValue () { return this . value ; } @Override public String toString () { return this . desc ; } } 3) \u521b\u5efa\u5b9e\u4f53\u7c7b\u5bf9\u8c61 //@TableName(\"tb_user\") @Data public class User1 { @TableId ( type = IdType . AUTO ) private Long id ; private String userName ; private String password ; private String name ; private Integer age ; private String email ; private SexEnum sex ; //\u6027\u522b,\u8fd9\u4e2a\u5b57\u6bb5\u4f7f\u7528\u679a\u4e3e } 3) mapper /** * \u4f7f\u7528mp\u5b9a\u4e49Mapper\uff0c\u9700\u8981\u8ba9Mapper\u63a5\u53e3\u7ee7\u627f BaseMapper\u63a5\u53e3\u3002 */ @Repository public interface User1Mapper extends BaseMapper < User1 > { } 4) \u5b9a\u4e49service @Service public class User1ServiceImpl extends ServiceImpl < User1Mapper , User1 > { } 5) \u589e\u52a0\u679a\u4e3e\u5305\u626b\u63cf\u914d\u7f6e mybatis-plus : # \u6307\u5b9a\u679a\u4e3e\u6240\u5728\u7684\u5305 type-enums-package : com.itheima.mp.enums global-config : db-config : # \u8868\u540d\u524d\u7f00 table-prefix : tb_ # id\u751f\u6210\u7b56\u7565 \u6570\u636e\u5e93\u81ea\u589e id-type : auto configuration : # \u65e5\u5fd7 log-impl : org.apache.ibatis.logging.stdout.StdOutImpl 6) \u6d4b\u8bd5 @SpringBootTest @RunWith ( SpringRunner . class ) public class User1ServiceTest { @Autowired private User1ServiceImpl userService ; @Test public void testSave (){ User1 user1 = new User1 (); user1 . setName ( \"zhangsn\" ); user1 . setSex ( SexEnum . MAN ); userService . save ( user1 ); // java \u8d4b\u503c\u4e3a\u679a\u4e3e,\u63d2\u5165\u6570\u636e\u5e93\u4e3a \u6570\u5b57\u7c7b\u578b } @Test public void test (){ QueryWrapper < User1 > wrapper = new QueryWrapper <> (); wrapper . eq ( \"id\" , \"13\" ); User1 user = userService . getOne ( wrapper ); System . out . println ( user ); // \u67e5\u8be2\u540e,tostring \u65b9\u6cd5\u5f97\u5230\u7684\u662f '\u7537',\u672a\u6765\u8f6cjson \u4e5f\u662f'\u7537' } }","title":"1. \u679a\u4e3e"},{"location":"tantan/further/mybatisPlus/#2","text":"\u200b \u6211\u4eec\u6bcf\u4e2a\u8868\u90fd\u9700\u8981\u4e00\u4e2a createdDate ,\u548cupdateDate\u5b57\u6bb5,\u6765\u8bb0\u5f55\u6570\u636e\u521b\u5efa\u65f6\u95f4\u548c\u6570\u636e\u66f4\u65b0\u65f6\u95f4, \u4f46\u662f\u6bcf\u6b21\u6211\u4eec\u5982\u679c\u90fd\u8fd9\u4e48\u8d4b\u503c,\u4ee3\u7801\u91cd\u590d\u6027\u5f88\u591a,\u800c\u4e14\u4e00\u65e6\u5fd8\u8bb0,\u8bb2\u5bfc\u81f4\u6570\u636e\u4e0d\u51c6\u786e\u95ee\u9898\u4ea7\u751f \u200b mybatis_plus \u63d0\u4f9b\u4e86\u8fd9\u7c7b\u7684\u529f\u80fd\u652f\u6301,\u65b9\u4fbf\u6211\u4eec\u7f16\u7a0b 1) \u5b9e\u4f53\u7c7b\u4e0a\u589e\u52a0\u5b57\u6bb5 created ,\u548cupdated @Data public class User1 { @TableId ( type = IdType . AUTO ) private Long id ; private String userName ; private String password ; private String name ; private Integer age ; private String email ; private SexEnum sex ; //\u6027\u522b //\u6ce8\u89e3,fill = FieldFill.INSERT \u8868\u793a\u6267\u884c\u63d2\u5165\u65f6 \u7ed9\u8be5\u5b57\u6bb5\u8d4b\u503c,\u4f46\u662f\u66f4\u65b0\u65f6\u4e0d\u4f1a\u91cd\u65b0\u8d4b\u503c @TableField ( fill = FieldFill . INSERT ) private Date created ; //\u6ce8\u89e3,fill = FieldFill.INSERT_UPDATE \u8868\u793a\u6267\u884c\u63d2\u5165,\u66f4\u65b0\u65f6\u90fd\u4f1a(\u91cd\u65b0)\u8d4b\u503c @TableField ( fill = FieldFill . INSERT_UPDATE ) private Date updated ; } 2) \u7f16\u5199Handler package com.itheima.mp.config ; import com.baomidou.mybatisplus.core.handlers.MetaObjectHandler ; import org.apache.ibatis.reflection.MetaObject ; import org.springframework.stereotype.Component ; import java.util.Date ; @Component public class MyMetaObjectHandler implements MetaObjectHandler { @Override public void insertFill ( MetaObject metaObject ) { Object created = getFieldValByName ( \"created\" , metaObject ); if ( null == created ) { //\u5b57\u6bb5\u4e3a\u7a7a\uff0c\u53ef\u4ee5\u8fdb\u884c\u586b\u5145 setFieldValByName ( \"created\" , new Date (), metaObject ); } Object updated = getFieldValByName ( \"updated\" , metaObject ); if ( null == updated ) { //\u5b57\u6bb5\u4e3a\u7a7a\uff0c\u53ef\u4ee5\u8fdb\u884c\u586b\u5145 setFieldValByName ( \"updated\" , new Date (), metaObject ); } } @Override public void updateFill ( MetaObject metaObject ) { //\u66f4\u65b0\u6570\u636e\u65f6\uff0c\u76f4\u63a5\u66f4\u65b0\u5b57\u6bb5 setFieldValByName ( \"updated\" , new Date (), metaObject ); } } 3) \u6d4b\u8bd5,\u67e5\u770b\u6570\u636e\u5e93\u4f1a\u81ea\u52a8\u8d4b\u503c @Test public void testSave (){ User1 user1 = new User1 (); user1 . setName ( \"zhangsn\" ); user1 . setSex ( SexEnum . MAN ); userService . save ( user1 ); }","title":"2.  \u5b57\u6bb5\u81ea\u52a8\u8d4b\u503c"},{"location":"tantan/further/nginx/","text":"Nginx\u53cd\u5411\u4ee3\u7406\u4e0e\u8d1f\u8f7d\u5747\u8861 \u00b6 1 \u53cd\u5411\u4ee3\u7406 \u00b6 1.1 \u4ec0\u4e48\u662f\u53cd\u5411\u4ee3\u7406 \u00b6 \u53cd\u5411\u4ee3\u7406\uff08Reverse Proxy\uff09\u65b9\u5f0f\u662f\u6307\u4ee5 \u4ee3\u7406\u670d\u52a1\u5668 \u6765\u63a5\u53d7internet\u4e0a\u7684\u8fde\u63a5\u8bf7\u6c42\uff0c\u7136\u540e\u5c06\u8bf7\u6c42\u8f6c\u53d1\u7ed9\u5185\u90e8\u7f51\u7edc\u4e0a\u7684\u670d\u52a1\u5668\uff0c\u5e76\u5c06\u4ece\u670d\u52a1\u5668\u4e0a\u5f97\u5230\u7684\u7ed3\u679c\u8fd4\u56de\u7ed9internet\u4e0a\u8bf7\u6c42\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\uff0c\u6b64\u65f6\u4ee3\u7406\u670d\u52a1\u5668\u5bf9\u5916\u5c31\u8868\u73b0\u4e3a\u4e00\u4e2a\u53cd\u5411\u4ee3\u7406\u670d\u52a1\u5668\u3002 \u9996\u5148\u6211\u4eec\u5148\u7406\u89e3\u6b63\u5411\u4ee3\u7406(\u4f8b\u5982VPN )\uff0c\u5982\u4e0b\u56fe\uff1a \u200b \u6b63\u5411\u4ee3\u7406\u662f\u9488\u5bf9\u4f60\u7684\u5ba2\u6237\u7aef\uff0c\u800c\u53cd\u5411\u4ee3\u7406\u662f\u9488\u5bf9\u670d\u52a1\u5668\u7684\uff0c\u5982\u4e0b\u56fe 1.2 \u914d\u7f6e\u53cd\u5411\u4ee3\u7406-\u51c6\u5907\u5de5\u4f5c \u00b6 \uff081\uff09 \u542f\u52a8spring-boot \u9879\u76ee \u7aef\u53e3\u53f78080 \uff082\uff09 \u8bbf\u95ee localhost:8080 /hello \u53ef\u4ee5\u770b\u5230\u6d88\u606f 4.1.3 \u914d\u7f6e\u53cd\u5411\u4ee3\u7406 \u00b6 \uff081\uff09\u5728Nginx\u4e3b\u673a\u4fee\u6539 Nginx\u914d\u7f6e\u6587\u4ef6 http { include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; server { listen 80; server_name localhost; error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } location / { proxy_pass http : //127.0.0.1:8080; } } } \uff082\uff09\u91cd\u65b0\u542f\u52a8Nginx \u7136\u540e\u7528\u6d4f\u89c8\u5668\u6d4b\u8bd5\uff1alocalhost 2 \u8d1f\u8f7d\u5747\u8861 \u00b6 2.1 \u4ec0\u4e48\u662f\u8d1f\u8f7d\u5747\u8861 \u00b6 \u8d1f\u8f7d\u5747\u8861 \u5efa\u7acb\u5728\u73b0\u6709\u7f51\u7edc\u7ed3\u6784\u4e4b\u4e0a\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u5ec9\u4ef7\u6709\u6548\u900f\u660e\u7684\u65b9\u6cd5\u6269\u5c55 \u7f51\u7edc\u8bbe\u5907 \u548c \u670d\u52a1\u5668 \u7684\u5e26\u5bbd\u3001\u589e\u52a0 \u541e\u5410\u91cf \u3001\u52a0\u5f3a\u7f51\u7edc\u6570\u636e\u5904\u7406\u80fd\u529b\u3001\u63d0\u9ad8\u7f51\u7edc\u7684\u7075\u6d3b\u6027\u548c\u53ef\u7528\u6027\u3002 \u8d1f\u8f7d\u5747\u8861\uff0c\u82f1\u6587\u540d\u79f0\u4e3aLoad Balance\uff0c\u5176\u610f\u601d\u5c31\u662f\u5206\u644a\u5230\u591a\u4e2a\u64cd\u4f5c\u5355\u5143\u4e0a\u8fdb\u884c\u6267\u884c\uff0c\u4f8b\u5982Web \u670d\u52a1\u5668 \u3001 FTP\u670d\u52a1\u5668 \u3001 \u4f01\u4e1a \u5173\u952e\u5e94\u7528\u670d\u52a1\u5668\u548c\u5176\u5b83\u5173\u952e\u4efb\u52a1\u670d\u52a1\u5668\u7b49\uff0c\u4ece\u800c\u5171\u540c\u5b8c\u6210\u5de5\u4f5c\u4efb\u52a1\u3002 2.2 \u914d\u7f6e\u8d1f\u8f7d\u5747\u8861-\u51c6\u5907\u5de5\u4f5c \u00b6 \uff081\uff09\u5c06\u521a\u624d\u7684\u5de5\u7a0b\u7684 \u4fee\u6539\u7aef\u53e3\u53f7 8081 .8082 \u5206\u522b \u542f\u52a8(\u540c\u65f6\u542f\u52a83\u4e2a\u5e94\u7528) \uff081\uff09\u4e3a\u4e86\u80fd\u591f\u533a\u5206\u662f\u8bbf\u95ee\u54ea\u4e2a\u670d\u52a1\u5668\u7684\u7f51\u7ad9\uff0c\u53ef\u4ee5\u5728\u8fd4\u56de\u6570\u636e\u4e0a\u52a0\u4e0a\u7aef\u53e3\u53f7\u533a\u5206 4.2.3 \u914d\u7f6e\u8d1f\u8f7d\u5747\u8861 \u00b6 \u4fee\u6539 Nginx\u914d\u7f6e\u6587\u4ef6\uff1a ```properties http { include mime.types; default_type application/octet-stream; sendfile on ; keepalive_timeout 65 ; upstream tanhua { server localhost : 8080 ; server localhost : 8081 ; server localhost : 8082 ; } server { listen 80 ; server_name localhost ; error_page 500 502 503 504 /50x.html ; location = /50x.html { root html ; } location / { proxy_pass http : // tanhua ; } } } ``` \u5730\u5740\u680f\u8f93\u5165localhost \u5237\u65b0\u89c2\u5bdf\u6bcf\u4e2a\u7f51\u9875\u7684\u6807\u9898\uff0c\u770b\u662f\u5426\u4e0d\u540c\u3002 \u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u4e09\u53f0\u670d\u52a1\u5668\u51fa\u73b0\u7684\u6982\u7387\u5404\u4e3a33.3333333%\uff0c\u4ea4\u66ff\u663e\u793a\u3002 \u5982\u679c\u5176\u4e2d\u4e00\u53f0\u670d\u52a1\u5668\u6027\u80fd\u6bd4\u8f83\u597d\uff0c\u60f3\u8ba9\u5176\u627f\u62c5\u66f4\u591a\u7684\u538b\u529b\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u6743\u91cd\u3002 \u6bd4\u5982\u60f3\u8ba9NO.1\u51fa\u73b0\u6b21\u6570\u662f\u5176\u5b83\u670d\u52a1\u5668\u76842\u500d\uff0c\u5219\u4fee\u6539\u914d\u7f6e\u5982\u4e0b\uff1a ````properties http { include mime.types; default_type application/octet-stream; sendfile on ; keepalive_timeout 65 ; upstream tanhua { server localhost : 8080 ; server localhost : 8081 weight = 2 ; server localhost : 8082 ; } server { listen 80 ; server_name localhost ; error_page 500 502 503 504 /50x.html ; location = /50x.html { root html ; } location / { proxy_pass http : // tanhua ; } } } ````","title":"day03_nginx"},{"location":"tantan/further/nginx/#nginx","text":"","title":"Nginx\u53cd\u5411\u4ee3\u7406\u4e0e\u8d1f\u8f7d\u5747\u8861"},{"location":"tantan/further/nginx/#1","text":"","title":"1 \u53cd\u5411\u4ee3\u7406"},{"location":"tantan/further/nginx/#11","text":"\u53cd\u5411\u4ee3\u7406\uff08Reverse Proxy\uff09\u65b9\u5f0f\u662f\u6307\u4ee5 \u4ee3\u7406\u670d\u52a1\u5668 \u6765\u63a5\u53d7internet\u4e0a\u7684\u8fde\u63a5\u8bf7\u6c42\uff0c\u7136\u540e\u5c06\u8bf7\u6c42\u8f6c\u53d1\u7ed9\u5185\u90e8\u7f51\u7edc\u4e0a\u7684\u670d\u52a1\u5668\uff0c\u5e76\u5c06\u4ece\u670d\u52a1\u5668\u4e0a\u5f97\u5230\u7684\u7ed3\u679c\u8fd4\u56de\u7ed9internet\u4e0a\u8bf7\u6c42\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\uff0c\u6b64\u65f6\u4ee3\u7406\u670d\u52a1\u5668\u5bf9\u5916\u5c31\u8868\u73b0\u4e3a\u4e00\u4e2a\u53cd\u5411\u4ee3\u7406\u670d\u52a1\u5668\u3002 \u9996\u5148\u6211\u4eec\u5148\u7406\u89e3\u6b63\u5411\u4ee3\u7406(\u4f8b\u5982VPN )\uff0c\u5982\u4e0b\u56fe\uff1a \u200b \u6b63\u5411\u4ee3\u7406\u662f\u9488\u5bf9\u4f60\u7684\u5ba2\u6237\u7aef\uff0c\u800c\u53cd\u5411\u4ee3\u7406\u662f\u9488\u5bf9\u670d\u52a1\u5668\u7684\uff0c\u5982\u4e0b\u56fe","title":"1.1 \u4ec0\u4e48\u662f\u53cd\u5411\u4ee3\u7406"},{"location":"tantan/further/nginx/#12_-","text":"\uff081\uff09 \u542f\u52a8spring-boot \u9879\u76ee \u7aef\u53e3\u53f78080 \uff082\uff09 \u8bbf\u95ee localhost:8080 /hello \u53ef\u4ee5\u770b\u5230\u6d88\u606f","title":"1.2 \u914d\u7f6e\u53cd\u5411\u4ee3\u7406-\u51c6\u5907\u5de5\u4f5c"},{"location":"tantan/further/nginx/#413","text":"\uff081\uff09\u5728Nginx\u4e3b\u673a\u4fee\u6539 Nginx\u914d\u7f6e\u6587\u4ef6 http { include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; server { listen 80; server_name localhost; error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } location / { proxy_pass http : //127.0.0.1:8080; } } } \uff082\uff09\u91cd\u65b0\u542f\u52a8Nginx \u7136\u540e\u7528\u6d4f\u89c8\u5668\u6d4b\u8bd5\uff1alocalhost","title":"4.1.3 \u914d\u7f6e\u53cd\u5411\u4ee3\u7406"},{"location":"tantan/further/nginx/#2","text":"","title":"2 \u8d1f\u8f7d\u5747\u8861"},{"location":"tantan/further/nginx/#21","text":"\u8d1f\u8f7d\u5747\u8861 \u5efa\u7acb\u5728\u73b0\u6709\u7f51\u7edc\u7ed3\u6784\u4e4b\u4e0a\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u5ec9\u4ef7\u6709\u6548\u900f\u660e\u7684\u65b9\u6cd5\u6269\u5c55 \u7f51\u7edc\u8bbe\u5907 \u548c \u670d\u52a1\u5668 \u7684\u5e26\u5bbd\u3001\u589e\u52a0 \u541e\u5410\u91cf \u3001\u52a0\u5f3a\u7f51\u7edc\u6570\u636e\u5904\u7406\u80fd\u529b\u3001\u63d0\u9ad8\u7f51\u7edc\u7684\u7075\u6d3b\u6027\u548c\u53ef\u7528\u6027\u3002 \u8d1f\u8f7d\u5747\u8861\uff0c\u82f1\u6587\u540d\u79f0\u4e3aLoad Balance\uff0c\u5176\u610f\u601d\u5c31\u662f\u5206\u644a\u5230\u591a\u4e2a\u64cd\u4f5c\u5355\u5143\u4e0a\u8fdb\u884c\u6267\u884c\uff0c\u4f8b\u5982Web \u670d\u52a1\u5668 \u3001 FTP\u670d\u52a1\u5668 \u3001 \u4f01\u4e1a \u5173\u952e\u5e94\u7528\u670d\u52a1\u5668\u548c\u5176\u5b83\u5173\u952e\u4efb\u52a1\u670d\u52a1\u5668\u7b49\uff0c\u4ece\u800c\u5171\u540c\u5b8c\u6210\u5de5\u4f5c\u4efb\u52a1\u3002","title":"2.1 \u4ec0\u4e48\u662f\u8d1f\u8f7d\u5747\u8861"},{"location":"tantan/further/nginx/#22_-","text":"\uff081\uff09\u5c06\u521a\u624d\u7684\u5de5\u7a0b\u7684 \u4fee\u6539\u7aef\u53e3\u53f7 8081 .8082 \u5206\u522b \u542f\u52a8(\u540c\u65f6\u542f\u52a83\u4e2a\u5e94\u7528) \uff081\uff09\u4e3a\u4e86\u80fd\u591f\u533a\u5206\u662f\u8bbf\u95ee\u54ea\u4e2a\u670d\u52a1\u5668\u7684\u7f51\u7ad9\uff0c\u53ef\u4ee5\u5728\u8fd4\u56de\u6570\u636e\u4e0a\u52a0\u4e0a\u7aef\u53e3\u53f7\u533a\u5206","title":"2.2 \u914d\u7f6e\u8d1f\u8f7d\u5747\u8861-\u51c6\u5907\u5de5\u4f5c"},{"location":"tantan/further/nginx/#423","text":"\u4fee\u6539 Nginx\u914d\u7f6e\u6587\u4ef6\uff1a ```properties http { include mime.types; default_type application/octet-stream; sendfile on ; keepalive_timeout 65 ; upstream tanhua { server localhost : 8080 ; server localhost : 8081 ; server localhost : 8082 ; } server { listen 80 ; server_name localhost ; error_page 500 502 503 504 /50x.html ; location = /50x.html { root html ; } location / { proxy_pass http : // tanhua ; } } } ``` \u5730\u5740\u680f\u8f93\u5165localhost \u5237\u65b0\u89c2\u5bdf\u6bcf\u4e2a\u7f51\u9875\u7684\u6807\u9898\uff0c\u770b\u662f\u5426\u4e0d\u540c\u3002 \u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u4e09\u53f0\u670d\u52a1\u5668\u51fa\u73b0\u7684\u6982\u7387\u5404\u4e3a33.3333333%\uff0c\u4ea4\u66ff\u663e\u793a\u3002 \u5982\u679c\u5176\u4e2d\u4e00\u53f0\u670d\u52a1\u5668\u6027\u80fd\u6bd4\u8f83\u597d\uff0c\u60f3\u8ba9\u5176\u627f\u62c5\u66f4\u591a\u7684\u538b\u529b\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u6743\u91cd\u3002 \u6bd4\u5982\u60f3\u8ba9NO.1\u51fa\u73b0\u6b21\u6570\u662f\u5176\u5b83\u670d\u52a1\u5668\u76842\u500d\uff0c\u5219\u4fee\u6539\u914d\u7f6e\u5982\u4e0b\uff1a ````properties http { include mime.types; default_type application/octet-stream; sendfile on ; keepalive_timeout 65 ; upstream tanhua { server localhost : 8080 ; server localhost : 8081 weight = 2 ; server localhost : 8082 ; } server { listen 80 ; server_name localhost ; error_page 500 502 503 504 /50x.html ; location = /50x.html { root html ; } location / { proxy_pass http : // tanhua ; } } } ````","title":"4.2.3 \u914d\u7f6e\u8d1f\u8f7d\u5747\u8861"},{"location":"tantan/further/sso/","text":"SSO \u5355\u70b9\u767b\u5f55\u53cajwt \u00b6 1. \u8de8\u57df\u8ba4\u8bc1\u7684\u95ee\u9898(\u767b\u5f55) \u00b6 \u4e92\u8054\u7f51\u670d\u52a1\u79bb\u4e0d\u5f00\u7528\u6237\u8ba4\u8bc1(\u767b\u5f55)\u3002\u4e00\u822c\u6d41\u7a0b\u662f\u4e0b\u9762\u8fd9\u6837\u3002 1 \u3001 \u7528\u6237\u5411\u670d\u52a1\u5668\u53d1\u9001\u7528\u6237\u540d\u548c\u5bc6\u7801 \u3002 2 \u3001 \u670d\u52a1\u5668\u9a8c\u8bc1\u901a\u8fc7\u540e \uff0c \u5728\u5f53\u524d\u5bf9\u8bdd \uff08 session \uff09 \u91cc\u9762\u4fdd\u5b58\u76f8\u5173\u6570\u636e \uff0c \u6bd4\u5982\u7528\u6237\u89d2\u8272 \u3001 \u767b\u5f55\u65f6\u95f4\u7b49\u7b49 \u3002 3 \u3001 \u670d\u52a1\u5668\u5411\u7528\u6237\u8fd4\u56de\u4e00\u4e2a session_id \uff0c \u5199\u5165\u7528\u6237\u7684 Cookie \u3002 4 \u3001 \u7528\u6237\u968f\u540e\u7684\u6bcf\u4e00\u6b21\u8bf7\u6c42 \uff0c \u90fd\u4f1a\u901a\u8fc7 Cookie \uff0c \u5c06 session_id \u4f20\u56de\u670d\u52a1\u5668 \u3002 5 \u3001 \u670d\u52a1\u5668\u6536\u5230 session_id \uff0c \u627e\u5230\u524d\u671f\u4fdd\u5b58\u7684\u6570\u636e \uff0c \u7531\u6b64\u5f97\u77e5\u7528\u6237\u7684\u8eab\u4efd \u3002 \u8fd9\u79cd\u6a21\u5f0f\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u6269\u5c55\u6027\uff08scaling\uff09\u4e0d\u597d\u3002\u5355\u673a\u5f53\u7136\u6ca1\u6709\u95ee\u9898\uff0c\u5982\u679c\u662f\u670d\u52a1\u5668\u96c6\u7fa4\uff0c\u6216\u8005\u662f\u8de8\u57df\u7684\u670d\u52a1\u5bfc\u5411\u67b6\u6784\uff0c\u5c31\u8981\u6c42 session \u6570\u636e\u5171\u4eab\uff0c\u6bcf\u53f0\u670d\u52a1\u5668\u90fd\u80fd\u591f\u8bfb\u53d6 session\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0cA \u7f51\u7ad9\u548c B \u7f51\u7ad9\u662f\u540c\u4e00\u5bb6\u516c\u53f8\u7684\u5173\u8054\u670d\u52a1\u3002\u73b0\u5728\u8981\u6c42\uff0c\u7528\u6237\u53ea\u8981\u5728\u5176\u4e2d\u4e00\u4e2a\u7f51\u7ad9\u767b\u5f55\uff0c\u518d\u8bbf\u95ee\u53e6\u4e00\u4e2a\u7f51\u7ad9\u5c31\u4f1a\u81ea\u52a8\u767b\u5f55\uff0c\u8bf7\u95ee\u600e\u4e48\u5b9e\u73b0\uff1f \u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u662f session \u6570\u636e\u6301\u4e45\u5316\uff0c\u5199\u5165\u6570\u636e\u5e93\u6216\u522b\u7684\u6301\u4e45\u5c42\u3002\u5404\u79cd\u670d\u52a1\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u90fd\u5411\u6301\u4e45\u5c42\u8bf7\u6c42\u6570\u636e\u3002\u8fd9\u79cd\u65b9\u6848\u7684\u4f18\u70b9\u662f\u67b6\u6784\u6e05\u6670\uff0c\u7f3a\u70b9\u662f\u5de5\u7a0b\u91cf\u6bd4\u8f83\u5927\u3002\u53e6\u5916\uff0c\u6301\u4e45\u5c42\u4e07\u4e00\u6302\u4e86\uff0c\u5c31\u4f1a\u5355\u70b9\u5931\u8d25\u3002 \u53e6\u4e00\u79cd\u65b9\u6848\u662f\u670d\u52a1\u5668\u7d22\u6027\u4e0d\u4fdd\u5b58 session \u6570\u636e\u4e86\uff0c\u6240\u6709\u6570\u636e\u90fd\u4fdd\u5b58\u5728\u5ba2\u6237\u7aef\uff0c\u6bcf\u6b21\u8bf7\u6c42\u90fd\u53d1\u56de\u670d\u52a1\u5668\u3002JWT \u5c31\u662f\u8fd9\u79cd\u65b9\u6848\u7684\u4e00\u4e2a\u4ee3\u8868\u3002 \u53e6\u4e00\u79cd\u65b9\u6848\u662f\u670d\u52a1\u5668\u7d22\u6027\u4e0d\u4fdd\u5b58 session \u6570\u636e\u4e86\uff0c\u6240\u6709\u6570\u636e\u90fd\u4fdd\u5b58\u5728\u5ba2\u6237\u7aef\uff0c\u6bcf\u6b21\u8bf7\u6c42\u90fd\u53d1\u56de\u670d\u52a1\u5668\u3002JWT \u5c31\u662f\u8fd9\u79cd\u65b9\u6848\u7684\u4e00\u4e2a\u4ee3\u8868\u3002 2 . JWT \u7684\u539f\u7406 \u00b6 JWT \u7684\u539f\u7406\u662f\uff0c\u670d\u52a1\u5668\u8ba4\u8bc1\u4ee5\u540e\uff0c\u751f\u6210\u4e00\u4e2a JSON \u5bf9\u8c61\uff0c\u53d1\u56de\u7ed9\u7528\u6237\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\u3002 { \"\u59d3\u540d\" : \"\u5f20\u4e09\" , \"\u89d2\u8272\" : \"\u7ba1\u7406\u5458\" , \"\u5230\u671f\u65f6\u95f4\" : \"2018\u5e747\u67081\u65e50\u70b90\u5206\" } \u4ee5\u540e\uff0c\u7528\u6237\u4e0e\u670d\u52a1\u7aef\u901a\u4fe1\u7684\u65f6\u5019\uff0c\u90fd\u8981\u53d1\u56de\u8fd9\u4e2a JSON \u5bf9\u8c61\u3002\u670d\u52a1\u5668\u5b8c\u5168\u53ea\u9760\u8fd9\u4e2a\u5bf9\u8c61\u8ba4\u5b9a\u7528\u6237\u8eab\u4efd\u3002\u4e3a\u4e86\u9632\u6b62\u7528\u6237\u7be1\u6539\u6570\u636e\uff0c\u670d\u52a1\u5668\u5728\u751f\u6210\u8fd9\u4e2a\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u4f1a\u52a0\u4e0a\u7b7e\u540d\uff08\u8be6\u89c1\u540e\u6587\uff09\u3002 \u670d\u52a1\u5668\u5c31\u4e0d\u4fdd\u5b58\u4efb\u4f55 session \u6570\u636e\u4e86\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u670d\u52a1\u5668\u53d8\u6210\u65e0\u72b6\u6001\u4e86\uff0c\u4ece\u800c\u6bd4\u8f83\u5bb9\u6613\u5b9e\u73b0\u6269\u5c55\u3002 3. JWT \u7684\u6570\u636e\u7ed3\u6784 \u00b6 \u5b9e\u9645\u7684 JWT \u5927\u6982\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\u3002 \u5b83\u662f\u4e00\u4e2a\u5f88\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u4e2d\u95f4\u7528\u70b9\uff08 . \uff09\u5206\u9694\u6210\u4e09\u4e2a\u90e8\u5206\u3002\u6ce8\u610f\uff0c JWT \u7684\u4e09\u4e2a\u90e8\u5206\u4f9d\u6b21\u5982\u4e0b\u3002 Header \uff08\u5934\u90e8\uff09 Payload \uff08\u8d1f\u8f7d\uff09 Signature \uff08\u7b7e\u540d\uff09 \u5199\u6210\u4e00\u884c\uff0c\u5c31\u662f\u4e0b\u9762\u7684\u6837\u5b50\u3002 javascript Header.Payload.Signature \u4e0b\u9762\u4f9d\u6b21\u4ecb\u7ecd\u8fd9\u4e09\u4e2a\u90e8\u5206\u3002 3.1 Header \u00b6 Header \u90e8\u5206\u662f\u4e00\u4e2a JSON \u5bf9\u8c61\uff0c\u63cf\u8ff0 JWT \u7684\u5143\u6570\u636e\uff0c\u901a\u5e38\u662f\u4e0b\u9762\u7684\u6837\u5b50\u3002 javascript { \"alg\": \"HS256\", \"typ\": \"JWT\" } \u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c alg \u5c5e\u6027\u8868\u793a\u7b7e\u540d\u7684\u7b97\u6cd5\uff08algorithm\uff09\uff0c\u9ed8\u8ba4\u662f HMAC SHA256\uff08\u5199\u6210 HS256\uff09\uff1b typ \u5c5e\u6027\u8868\u793a\u8fd9\u4e2a\u4ee4\u724c\uff08token\uff09\u7684\u7c7b\u578b\uff08type\uff09\uff0cJWT \u4ee4\u724c\u7edf\u4e00\u5199\u4e3a JWT \u3002 \u6700\u540e\uff0c\u5c06\u4e0a\u9762\u7684 JSON \u5bf9\u8c61\u4f7f\u7528 Base64URL \u7b97\u6cd5\uff08\u8be6\u89c1\u540e\u6587\uff09\u8f6c\u6210\u5b57\u7b26\u4e32\u3002 3.2 Payload \u00b6 Payload \u90e8\u5206\u4e5f\u662f\u4e00\u4e2a JSON \u5bf9\u8c61\uff0c\u7528\u6765\u5b58\u653e\u5b9e\u9645\u9700\u8981\u4f20\u9012\u7684\u6570\u636e\u3002JWT \u89c4\u5b9a\u4e867\u4e2a\u5b98\u65b9\u5b57\u6bb5\uff0c\u4f9b\u9009\u7528\u3002 iss (issuer)\uff1a\u7b7e\u53d1\u4eba exp (expiration time)\uff1a\u8fc7\u671f\u65f6\u95f4 sub (subject)\uff1a\u4e3b\u9898 aud (audience)\uff1a\u53d7\u4f17 nbf (Not Before)\uff1a\u751f\u6548\u65f6\u95f4 iat (Issued At)\uff1a\u7b7e\u53d1\u65f6\u95f4 jti (JWT ID)\uff1a\u7f16\u53f7 \u9664\u4e86\u5b98\u65b9\u5b57\u6bb5\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5728\u8fd9\u4e2a\u90e8\u5206\u5b9a\u4e49\u79c1\u6709\u5b57\u6bb5\uff0c\u4e0b\u9762\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002 javascript { \"sub\": \"1234567890\", \"name\": \"John Doe\", \"admin\": true } \u6ce8\u610f\uff0cJWT \u9ed8\u8ba4\u662f\u4e0d\u52a0\u5bc6\u7684\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u8bfb\u5230\uff0c\u6240\u4ee5\u4e0d\u8981\u628a\u79d8\u5bc6\u4fe1\u606f\u653e\u5728\u8fd9\u4e2a\u90e8\u5206\u3002 \u8fd9\u4e2a JSON \u5bf9\u8c61\u4e5f\u8981\u4f7f\u7528 Base64URL \u7b97\u6cd5\u8f6c\u6210\u5b57\u7b26\u4e32\u3002 3.3 Signature \u00b6 Signature \u90e8\u5206\u662f\u5bf9\u524d\u4e24\u90e8\u5206\u7684\u7b7e\u540d\uff0c\u9632\u6b62\u6570\u636e\u7be1\u6539\u3002 \u5e95\u5c42\u539f\u7406\u5982\u4e0b \u9996\u5148\uff0c\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u5bc6\u94a5\uff08secret\uff09\u3002\u8fd9\u4e2a\u5bc6\u94a5\u53ea\u6709\u670d\u52a1\u5668\u624d\u77e5\u9053\uff0c\u4e0d\u80fd\u6cc4\u9732\u7ed9\u7528\u6237\u3002\u7136\u540e\uff0c\u4f7f\u7528 Header \u91cc\u9762\u6307\u5b9a\u7684\u7b7e\u540d\u7b97\u6cd5\uff08\u9ed8\u8ba4\u662f HMAC SHA256\uff09\uff0c\u6309\u7167\u4e0b\u9762\u7684\u516c\u5f0f\u4ea7\u751f\u7b7e\u540d\u3002 javascript HMACSHA256( base64UrlEncode(header) + \".\" + base64UrlEncode(payload), secret) \u7b97\u51fa\u7b7e\u540d\u4ee5\u540e\uff0c\u628a Header\u3001Payload\u3001Signature \u4e09\u4e2a\u90e8\u5206\u62fc\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u90e8\u5206\u4e4b\u95f4\u7528\"\u70b9\"\uff08 . \uff09\u5206\u9694\uff0c\u5c31\u53ef\u4ee5\u8fd4\u56de\u7ed9\u7528\u6237\u3002 3.4 Base64URL \u00b6 \u524d\u9762\u63d0\u5230\uff0cHeader \u548c Payload \u4e32\u578b\u5316\u7684\u7b97\u6cd5\u662f Base64URL\u3002\u8fd9\u4e2a\u7b97\u6cd5\u8ddf Base64 \u7b97\u6cd5\u57fa\u672c\u7c7b\u4f3c\uff0c\u4f46\u6709\u4e00\u4e9b\u5c0f\u7684\u4e0d\u540c\u3002 JWT \u4f5c\u4e3a\u4e00\u4e2a\u4ee4\u724c\uff08token\uff09\uff0c\u6709\u4e9b\u573a\u5408\u53ef\u80fd\u4f1a\u653e\u5230 URL\uff08\u6bd4\u5982 api.example.com/?token=xxx\uff09\u3002Base64 \u6709\u4e09\u4e2a\u5b57\u7b26 + \u3001 / \u548c = \uff0c\u5728 URL \u91cc\u9762\u6709\u7279\u6b8a\u542b\u4e49\uff0c\u6240\u4ee5\u8981\u88ab\u66ff\u6362\u6389\uff1a = \u88ab\u7701\u7565\u3001 + \u66ff\u6362\u6210 - \uff0c / \u66ff\u6362\u6210 _ \u3002\u8fd9\u5c31\u662f Base64URL \u7b97\u6cd5\u3002 4. JWT \u7684\u4f7f\u7528\u65b9\u5f0f \u00b6 \u5ba2\u6237\u7aef\u6536\u5230\u670d\u52a1\u5668\u8fd4\u56de\u7684 JWT\uff0c\u53ef\u4ee5\u50a8\u5b58\u5728 Cookie \u91cc\u9762\uff0c\u4e5f\u53ef\u4ee5\u50a8\u5b58\u5728 localStorage\u3002 \u6b64\u540e\uff0c\u5ba2\u6237\u7aef\u6bcf\u6b21\u4e0e\u670d\u52a1\u5668\u901a\u4fe1\uff0c\u90fd\u8981\u5e26\u4e0a\u8fd9\u4e2a JWT\u3002\u4f60\u53ef\u4ee5\u628a\u5b83\u653e\u5728 Cookie \u91cc\u9762\u81ea\u52a8\u53d1\u9001\uff0c\u4f46\u662f\u8fd9\u6837\u4e0d\u80fd\u8de8\u57df\uff0c\u6240\u4ee5\u66f4\u597d\u7684\u505a\u6cd5\u662f\u653e\u5728 HTTP \u8bf7\u6c42\u7684\u5934\u4fe1\u606f Authorization \u5b57\u6bb5\u91cc\u9762\u3002 javascript Authorization: Bearer <token> \u53e6\u4e00\u79cd\u505a\u6cd5\u662f\uff0c\u8de8\u57df\u7684\u65f6\u5019\uff0cJWT \u5c31\u653e\u5728 POST \u8bf7\u6c42\u7684\u6570\u636e\u4f53\u91cc\u9762\u3002 5. JWT \u7684\u51e0\u4e2a\u7279\u70b9 \u00b6 \uff081\uff09JWT \u9ed8\u8ba4\u662f\u4e0d\u52a0\u5bc6\uff0c\u4f46\u4e5f\u662f\u53ef\u4ee5\u52a0\u5bc6\u7684\u3002\u751f\u6210\u539f\u59cb Token \u4ee5\u540e\uff0c\u53ef\u4ee5\u7528\u5bc6\u94a5\u518d\u52a0\u5bc6\u4e00\u6b21\u3002 \uff082\uff09JWT \u4e0d\u52a0\u5bc6\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0d\u80fd\u5c06\u79d8\u5bc6\u6570\u636e\u5199\u5165 JWT\u3002 \uff083\uff09JWT \u4e0d\u4ec5\u53ef\u4ee5\u7528\u4e8e\u8ba4\u8bc1\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u4ea4\u6362\u4fe1\u606f\u3002\u6709\u6548\u4f7f\u7528 JWT\uff0c\u53ef\u4ee5\u964d\u4f4e\u670d\u52a1\u5668\u67e5\u8be2\u6570\u636e\u5e93\u7684\u6b21\u6570\u3002 \uff084\uff09JWT \u7684\u6700\u5927\u7f3a\u70b9\u662f\uff0c\u7531\u4e8e\u670d\u52a1\u5668\u4e0d\u4fdd\u5b58 session \u72b6\u6001\uff0c\u56e0\u6b64\u65e0\u6cd5\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u5e9f\u6b62\u67d0\u4e2a token\uff0c\u6216\u8005\u66f4\u6539 token \u7684\u6743\u9650\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u65e6 JWT \u7b7e\u53d1\u4e86\uff0c\u5728\u5230\u671f\u4e4b\u524d\u5c31\u4f1a\u59cb\u7ec8\u6709\u6548\uff0c\u9664\u975e\u670d\u52a1\u5668\u90e8\u7f72\u989d\u5916\u7684\u903b\u8f91\u3002 \uff085\uff09JWT \u672c\u8eab\u5305\u542b\u4e86\u8ba4\u8bc1\u4fe1\u606f\uff0c\u4e00\u65e6\u6cc4\u9732\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u83b7\u5f97\u8be5\u4ee4\u724c\u7684\u6240\u6709\u6743\u9650\u3002\u4e3a\u4e86\u51cf\u5c11\u76d7\u7528\uff0cJWT \u7684\u6709\u6548\u671f\u5e94\u8be5\u8bbe\u7f6e\u5f97\u6bd4\u8f83\u77ed\u3002\u5bf9\u4e8e\u4e00\u4e9b\u6bd4\u8f83\u91cd\u8981\u7684\u6743\u9650\uff0c\u4f7f\u7528\u65f6\u5e94\u8be5\u518d\u6b21\u5bf9\u7528\u6237\u8fdb\u884c\u8ba4\u8bc1\u3002 \uff086\uff09\u4e3a\u4e86\u51cf\u5c11\u76d7\u7528\uff0cJWT \u4e0d\u5e94\u8be5\u4f7f\u7528 HTTP \u534f\u8bae\u660e\u7801\u4f20\u8f93\uff0c\u8981\u4f7f\u7528 HTTPS \u534f\u8bae\u4f20\u8f93\u3002 6. jwt \u7684\u4f7f\u7528 \u00b6 \u751f\u6210jwt public static void main ( String [] args ) { // \u79d8\u94a5 String secret = \"itcast\" ; // \u5b9a\u4e49 \u8377\u8f7d,\u53cajwt \u7684\u7b2c\u4e8c\u90e8\u5206\u6570\u636e Map < String , Object > claims = new HashMap < String , Object > (); claims . put ( \"mobile\" , \"12345789\" ); claims . put ( \"id\" , \"2\" ); // \u751f\u6210token String jwt = Jwts . builder () . setClaims ( claims ) //\u8bbe\u7f6e\u54cd\u5e94\u6570\u636e\u4f53 . setExpiration ( new Date ( System . currentTimeMillis () + 30 * 1000 )) // \u8d85\u65f6\u65f6\u95f4 ,30\u79d2\u540e\u5931\u6548 . signWith ( SignatureAlgorithm . HS256 , secret ) //\u8bbe\u7f6e\u52a0\u5bc6\u65b9\u6cd5\u548c\u52a0\u5bc6\u76d0 . compact (); System . out . println ( jwt ); //eyJhbGciOiJIUzI1NiJ9.eyJtb2JpbGUiOiIxMjM0NTc4OSIsImlkIjoiMiIsImV4cCI6MTYwNTg4MTkxN30.gTHkE0Eq8--r5qaFuTaWkiw20PyM0gpe8MBU5k_JDpg } jwt \u6821\u9a8c \u5982\u679c\u6821\u9a8c\u5931\u8d25\u5219 \u62a5\u9519 // jwt \u6821\u9a8c public static void main ( String [] args ) { // \u79d8\u94a5 String secret = \"itcast\" ; String jwt = \"eyJhbGciOiJIUzI1NiJ9.eyJtb2JpbGUiOiIxMjM0NTc4OSIsImlkIjoiMiIsImV4cCI6MTYwNTg4MTkxN30.gTHkE0Eq8--r5qaFuTaWkiw20PyM0gpe8MBU5k_JDpg\" ; // \u901a\u8fc7token\u89e3\u6790\u6570\u636e Map < String , Object > body = Jwts . parser () . setSigningKey ( secret ) . parseClaimsJws ( jwt ) . getBody (); System . out . println ( body ); //{mobile=12345789, id=2} } \u8bf4\u660e: jwt \u5e76\u4e0d\u662f\u5b89\u5168\u7684,\u4e0d\u8981\u5b58\u50a8\u654f\u611f\u4fe1\u606f \u4f8b\u5982\u6211\u4eec\u83b7\u5f97jwt \u7684\u4e2d\u95f4\u90e8\u5206 \u4f7f\u7528base64 \u5373\u53ef\u89e3\u5bc6 // \u89e3\u5bc6 byte [] bs = Base64 . getDecoder (). decode ( \"eyJtb2JpbGUiOiIxMjM0NTc4OSIsImlkIjoiMiIsImV4cCI6MTYwNTg4MTkxN30\" ); System . out . println ( new String ( bs ));","title":"day01_\u5355\u70b9\u767b\u5f55\u53cajwt"},{"location":"tantan/further/sso/#sso_jwt","text":"","title":"SSO \u5355\u70b9\u767b\u5f55\u53cajwt"},{"location":"tantan/further/sso/#1","text":"\u4e92\u8054\u7f51\u670d\u52a1\u79bb\u4e0d\u5f00\u7528\u6237\u8ba4\u8bc1(\u767b\u5f55)\u3002\u4e00\u822c\u6d41\u7a0b\u662f\u4e0b\u9762\u8fd9\u6837\u3002 1 \u3001 \u7528\u6237\u5411\u670d\u52a1\u5668\u53d1\u9001\u7528\u6237\u540d\u548c\u5bc6\u7801 \u3002 2 \u3001 \u670d\u52a1\u5668\u9a8c\u8bc1\u901a\u8fc7\u540e \uff0c \u5728\u5f53\u524d\u5bf9\u8bdd \uff08 session \uff09 \u91cc\u9762\u4fdd\u5b58\u76f8\u5173\u6570\u636e \uff0c \u6bd4\u5982\u7528\u6237\u89d2\u8272 \u3001 \u767b\u5f55\u65f6\u95f4\u7b49\u7b49 \u3002 3 \u3001 \u670d\u52a1\u5668\u5411\u7528\u6237\u8fd4\u56de\u4e00\u4e2a session_id \uff0c \u5199\u5165\u7528\u6237\u7684 Cookie \u3002 4 \u3001 \u7528\u6237\u968f\u540e\u7684\u6bcf\u4e00\u6b21\u8bf7\u6c42 \uff0c \u90fd\u4f1a\u901a\u8fc7 Cookie \uff0c \u5c06 session_id \u4f20\u56de\u670d\u52a1\u5668 \u3002 5 \u3001 \u670d\u52a1\u5668\u6536\u5230 session_id \uff0c \u627e\u5230\u524d\u671f\u4fdd\u5b58\u7684\u6570\u636e \uff0c \u7531\u6b64\u5f97\u77e5\u7528\u6237\u7684\u8eab\u4efd \u3002 \u8fd9\u79cd\u6a21\u5f0f\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u6269\u5c55\u6027\uff08scaling\uff09\u4e0d\u597d\u3002\u5355\u673a\u5f53\u7136\u6ca1\u6709\u95ee\u9898\uff0c\u5982\u679c\u662f\u670d\u52a1\u5668\u96c6\u7fa4\uff0c\u6216\u8005\u662f\u8de8\u57df\u7684\u670d\u52a1\u5bfc\u5411\u67b6\u6784\uff0c\u5c31\u8981\u6c42 session \u6570\u636e\u5171\u4eab\uff0c\u6bcf\u53f0\u670d\u52a1\u5668\u90fd\u80fd\u591f\u8bfb\u53d6 session\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0cA \u7f51\u7ad9\u548c B \u7f51\u7ad9\u662f\u540c\u4e00\u5bb6\u516c\u53f8\u7684\u5173\u8054\u670d\u52a1\u3002\u73b0\u5728\u8981\u6c42\uff0c\u7528\u6237\u53ea\u8981\u5728\u5176\u4e2d\u4e00\u4e2a\u7f51\u7ad9\u767b\u5f55\uff0c\u518d\u8bbf\u95ee\u53e6\u4e00\u4e2a\u7f51\u7ad9\u5c31\u4f1a\u81ea\u52a8\u767b\u5f55\uff0c\u8bf7\u95ee\u600e\u4e48\u5b9e\u73b0\uff1f \u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u662f session \u6570\u636e\u6301\u4e45\u5316\uff0c\u5199\u5165\u6570\u636e\u5e93\u6216\u522b\u7684\u6301\u4e45\u5c42\u3002\u5404\u79cd\u670d\u52a1\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u90fd\u5411\u6301\u4e45\u5c42\u8bf7\u6c42\u6570\u636e\u3002\u8fd9\u79cd\u65b9\u6848\u7684\u4f18\u70b9\u662f\u67b6\u6784\u6e05\u6670\uff0c\u7f3a\u70b9\u662f\u5de5\u7a0b\u91cf\u6bd4\u8f83\u5927\u3002\u53e6\u5916\uff0c\u6301\u4e45\u5c42\u4e07\u4e00\u6302\u4e86\uff0c\u5c31\u4f1a\u5355\u70b9\u5931\u8d25\u3002 \u53e6\u4e00\u79cd\u65b9\u6848\u662f\u670d\u52a1\u5668\u7d22\u6027\u4e0d\u4fdd\u5b58 session \u6570\u636e\u4e86\uff0c\u6240\u6709\u6570\u636e\u90fd\u4fdd\u5b58\u5728\u5ba2\u6237\u7aef\uff0c\u6bcf\u6b21\u8bf7\u6c42\u90fd\u53d1\u56de\u670d\u52a1\u5668\u3002JWT \u5c31\u662f\u8fd9\u79cd\u65b9\u6848\u7684\u4e00\u4e2a\u4ee3\u8868\u3002 \u53e6\u4e00\u79cd\u65b9\u6848\u662f\u670d\u52a1\u5668\u7d22\u6027\u4e0d\u4fdd\u5b58 session \u6570\u636e\u4e86\uff0c\u6240\u6709\u6570\u636e\u90fd\u4fdd\u5b58\u5728\u5ba2\u6237\u7aef\uff0c\u6bcf\u6b21\u8bf7\u6c42\u90fd\u53d1\u56de\u670d\u52a1\u5668\u3002JWT \u5c31\u662f\u8fd9\u79cd\u65b9\u6848\u7684\u4e00\u4e2a\u4ee3\u8868\u3002","title":"1. \u8de8\u57df\u8ba4\u8bc1\u7684\u95ee\u9898(\u767b\u5f55)"},{"location":"tantan/further/sso/#2_jwt","text":"JWT \u7684\u539f\u7406\u662f\uff0c\u670d\u52a1\u5668\u8ba4\u8bc1\u4ee5\u540e\uff0c\u751f\u6210\u4e00\u4e2a JSON \u5bf9\u8c61\uff0c\u53d1\u56de\u7ed9\u7528\u6237\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\u3002 { \"\u59d3\u540d\" : \"\u5f20\u4e09\" , \"\u89d2\u8272\" : \"\u7ba1\u7406\u5458\" , \"\u5230\u671f\u65f6\u95f4\" : \"2018\u5e747\u67081\u65e50\u70b90\u5206\" } \u4ee5\u540e\uff0c\u7528\u6237\u4e0e\u670d\u52a1\u7aef\u901a\u4fe1\u7684\u65f6\u5019\uff0c\u90fd\u8981\u53d1\u56de\u8fd9\u4e2a JSON \u5bf9\u8c61\u3002\u670d\u52a1\u5668\u5b8c\u5168\u53ea\u9760\u8fd9\u4e2a\u5bf9\u8c61\u8ba4\u5b9a\u7528\u6237\u8eab\u4efd\u3002\u4e3a\u4e86\u9632\u6b62\u7528\u6237\u7be1\u6539\u6570\u636e\uff0c\u670d\u52a1\u5668\u5728\u751f\u6210\u8fd9\u4e2a\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u4f1a\u52a0\u4e0a\u7b7e\u540d\uff08\u8be6\u89c1\u540e\u6587\uff09\u3002 \u670d\u52a1\u5668\u5c31\u4e0d\u4fdd\u5b58\u4efb\u4f55 session \u6570\u636e\u4e86\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u670d\u52a1\u5668\u53d8\u6210\u65e0\u72b6\u6001\u4e86\uff0c\u4ece\u800c\u6bd4\u8f83\u5bb9\u6613\u5b9e\u73b0\u6269\u5c55\u3002","title":"2 . JWT \u7684\u539f\u7406"},{"location":"tantan/further/sso/#3_jwt","text":"\u5b9e\u9645\u7684 JWT \u5927\u6982\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\u3002 \u5b83\u662f\u4e00\u4e2a\u5f88\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u4e2d\u95f4\u7528\u70b9\uff08 . \uff09\u5206\u9694\u6210\u4e09\u4e2a\u90e8\u5206\u3002\u6ce8\u610f\uff0c JWT \u7684\u4e09\u4e2a\u90e8\u5206\u4f9d\u6b21\u5982\u4e0b\u3002 Header \uff08\u5934\u90e8\uff09 Payload \uff08\u8d1f\u8f7d\uff09 Signature \uff08\u7b7e\u540d\uff09 \u5199\u6210\u4e00\u884c\uff0c\u5c31\u662f\u4e0b\u9762\u7684\u6837\u5b50\u3002 javascript Header.Payload.Signature \u4e0b\u9762\u4f9d\u6b21\u4ecb\u7ecd\u8fd9\u4e09\u4e2a\u90e8\u5206\u3002","title":"3. JWT \u7684\u6570\u636e\u7ed3\u6784"},{"location":"tantan/further/sso/#31_header","text":"Header \u90e8\u5206\u662f\u4e00\u4e2a JSON \u5bf9\u8c61\uff0c\u63cf\u8ff0 JWT \u7684\u5143\u6570\u636e\uff0c\u901a\u5e38\u662f\u4e0b\u9762\u7684\u6837\u5b50\u3002 javascript { \"alg\": \"HS256\", \"typ\": \"JWT\" } \u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c alg \u5c5e\u6027\u8868\u793a\u7b7e\u540d\u7684\u7b97\u6cd5\uff08algorithm\uff09\uff0c\u9ed8\u8ba4\u662f HMAC SHA256\uff08\u5199\u6210 HS256\uff09\uff1b typ \u5c5e\u6027\u8868\u793a\u8fd9\u4e2a\u4ee4\u724c\uff08token\uff09\u7684\u7c7b\u578b\uff08type\uff09\uff0cJWT \u4ee4\u724c\u7edf\u4e00\u5199\u4e3a JWT \u3002 \u6700\u540e\uff0c\u5c06\u4e0a\u9762\u7684 JSON \u5bf9\u8c61\u4f7f\u7528 Base64URL \u7b97\u6cd5\uff08\u8be6\u89c1\u540e\u6587\uff09\u8f6c\u6210\u5b57\u7b26\u4e32\u3002","title":"3.1 Header"},{"location":"tantan/further/sso/#32_payload","text":"Payload \u90e8\u5206\u4e5f\u662f\u4e00\u4e2a JSON \u5bf9\u8c61\uff0c\u7528\u6765\u5b58\u653e\u5b9e\u9645\u9700\u8981\u4f20\u9012\u7684\u6570\u636e\u3002JWT \u89c4\u5b9a\u4e867\u4e2a\u5b98\u65b9\u5b57\u6bb5\uff0c\u4f9b\u9009\u7528\u3002 iss (issuer)\uff1a\u7b7e\u53d1\u4eba exp (expiration time)\uff1a\u8fc7\u671f\u65f6\u95f4 sub (subject)\uff1a\u4e3b\u9898 aud (audience)\uff1a\u53d7\u4f17 nbf (Not Before)\uff1a\u751f\u6548\u65f6\u95f4 iat (Issued At)\uff1a\u7b7e\u53d1\u65f6\u95f4 jti (JWT ID)\uff1a\u7f16\u53f7 \u9664\u4e86\u5b98\u65b9\u5b57\u6bb5\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5728\u8fd9\u4e2a\u90e8\u5206\u5b9a\u4e49\u79c1\u6709\u5b57\u6bb5\uff0c\u4e0b\u9762\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002 javascript { \"sub\": \"1234567890\", \"name\": \"John Doe\", \"admin\": true } \u6ce8\u610f\uff0cJWT \u9ed8\u8ba4\u662f\u4e0d\u52a0\u5bc6\u7684\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u8bfb\u5230\uff0c\u6240\u4ee5\u4e0d\u8981\u628a\u79d8\u5bc6\u4fe1\u606f\u653e\u5728\u8fd9\u4e2a\u90e8\u5206\u3002 \u8fd9\u4e2a JSON \u5bf9\u8c61\u4e5f\u8981\u4f7f\u7528 Base64URL \u7b97\u6cd5\u8f6c\u6210\u5b57\u7b26\u4e32\u3002","title":"3.2 Payload"},{"location":"tantan/further/sso/#33_signature","text":"Signature \u90e8\u5206\u662f\u5bf9\u524d\u4e24\u90e8\u5206\u7684\u7b7e\u540d\uff0c\u9632\u6b62\u6570\u636e\u7be1\u6539\u3002 \u5e95\u5c42\u539f\u7406\u5982\u4e0b \u9996\u5148\uff0c\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u5bc6\u94a5\uff08secret\uff09\u3002\u8fd9\u4e2a\u5bc6\u94a5\u53ea\u6709\u670d\u52a1\u5668\u624d\u77e5\u9053\uff0c\u4e0d\u80fd\u6cc4\u9732\u7ed9\u7528\u6237\u3002\u7136\u540e\uff0c\u4f7f\u7528 Header \u91cc\u9762\u6307\u5b9a\u7684\u7b7e\u540d\u7b97\u6cd5\uff08\u9ed8\u8ba4\u662f HMAC SHA256\uff09\uff0c\u6309\u7167\u4e0b\u9762\u7684\u516c\u5f0f\u4ea7\u751f\u7b7e\u540d\u3002 javascript HMACSHA256( base64UrlEncode(header) + \".\" + base64UrlEncode(payload), secret) \u7b97\u51fa\u7b7e\u540d\u4ee5\u540e\uff0c\u628a Header\u3001Payload\u3001Signature \u4e09\u4e2a\u90e8\u5206\u62fc\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u90e8\u5206\u4e4b\u95f4\u7528\"\u70b9\"\uff08 . \uff09\u5206\u9694\uff0c\u5c31\u53ef\u4ee5\u8fd4\u56de\u7ed9\u7528\u6237\u3002","title":"3.3 Signature"},{"location":"tantan/further/sso/#34_base64url","text":"\u524d\u9762\u63d0\u5230\uff0cHeader \u548c Payload \u4e32\u578b\u5316\u7684\u7b97\u6cd5\u662f Base64URL\u3002\u8fd9\u4e2a\u7b97\u6cd5\u8ddf Base64 \u7b97\u6cd5\u57fa\u672c\u7c7b\u4f3c\uff0c\u4f46\u6709\u4e00\u4e9b\u5c0f\u7684\u4e0d\u540c\u3002 JWT \u4f5c\u4e3a\u4e00\u4e2a\u4ee4\u724c\uff08token\uff09\uff0c\u6709\u4e9b\u573a\u5408\u53ef\u80fd\u4f1a\u653e\u5230 URL\uff08\u6bd4\u5982 api.example.com/?token=xxx\uff09\u3002Base64 \u6709\u4e09\u4e2a\u5b57\u7b26 + \u3001 / \u548c = \uff0c\u5728 URL \u91cc\u9762\u6709\u7279\u6b8a\u542b\u4e49\uff0c\u6240\u4ee5\u8981\u88ab\u66ff\u6362\u6389\uff1a = \u88ab\u7701\u7565\u3001 + \u66ff\u6362\u6210 - \uff0c / \u66ff\u6362\u6210 _ \u3002\u8fd9\u5c31\u662f Base64URL \u7b97\u6cd5\u3002","title":"3.4 Base64URL"},{"location":"tantan/further/sso/#4_jwt","text":"\u5ba2\u6237\u7aef\u6536\u5230\u670d\u52a1\u5668\u8fd4\u56de\u7684 JWT\uff0c\u53ef\u4ee5\u50a8\u5b58\u5728 Cookie \u91cc\u9762\uff0c\u4e5f\u53ef\u4ee5\u50a8\u5b58\u5728 localStorage\u3002 \u6b64\u540e\uff0c\u5ba2\u6237\u7aef\u6bcf\u6b21\u4e0e\u670d\u52a1\u5668\u901a\u4fe1\uff0c\u90fd\u8981\u5e26\u4e0a\u8fd9\u4e2a JWT\u3002\u4f60\u53ef\u4ee5\u628a\u5b83\u653e\u5728 Cookie \u91cc\u9762\u81ea\u52a8\u53d1\u9001\uff0c\u4f46\u662f\u8fd9\u6837\u4e0d\u80fd\u8de8\u57df\uff0c\u6240\u4ee5\u66f4\u597d\u7684\u505a\u6cd5\u662f\u653e\u5728 HTTP \u8bf7\u6c42\u7684\u5934\u4fe1\u606f Authorization \u5b57\u6bb5\u91cc\u9762\u3002 javascript Authorization: Bearer <token> \u53e6\u4e00\u79cd\u505a\u6cd5\u662f\uff0c\u8de8\u57df\u7684\u65f6\u5019\uff0cJWT \u5c31\u653e\u5728 POST \u8bf7\u6c42\u7684\u6570\u636e\u4f53\u91cc\u9762\u3002","title":"4. JWT \u7684\u4f7f\u7528\u65b9\u5f0f"},{"location":"tantan/further/sso/#5_jwt","text":"\uff081\uff09JWT \u9ed8\u8ba4\u662f\u4e0d\u52a0\u5bc6\uff0c\u4f46\u4e5f\u662f\u53ef\u4ee5\u52a0\u5bc6\u7684\u3002\u751f\u6210\u539f\u59cb Token \u4ee5\u540e\uff0c\u53ef\u4ee5\u7528\u5bc6\u94a5\u518d\u52a0\u5bc6\u4e00\u6b21\u3002 \uff082\uff09JWT \u4e0d\u52a0\u5bc6\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0d\u80fd\u5c06\u79d8\u5bc6\u6570\u636e\u5199\u5165 JWT\u3002 \uff083\uff09JWT \u4e0d\u4ec5\u53ef\u4ee5\u7528\u4e8e\u8ba4\u8bc1\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u4ea4\u6362\u4fe1\u606f\u3002\u6709\u6548\u4f7f\u7528 JWT\uff0c\u53ef\u4ee5\u964d\u4f4e\u670d\u52a1\u5668\u67e5\u8be2\u6570\u636e\u5e93\u7684\u6b21\u6570\u3002 \uff084\uff09JWT \u7684\u6700\u5927\u7f3a\u70b9\u662f\uff0c\u7531\u4e8e\u670d\u52a1\u5668\u4e0d\u4fdd\u5b58 session \u72b6\u6001\uff0c\u56e0\u6b64\u65e0\u6cd5\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u5e9f\u6b62\u67d0\u4e2a token\uff0c\u6216\u8005\u66f4\u6539 token \u7684\u6743\u9650\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u65e6 JWT \u7b7e\u53d1\u4e86\uff0c\u5728\u5230\u671f\u4e4b\u524d\u5c31\u4f1a\u59cb\u7ec8\u6709\u6548\uff0c\u9664\u975e\u670d\u52a1\u5668\u90e8\u7f72\u989d\u5916\u7684\u903b\u8f91\u3002 \uff085\uff09JWT \u672c\u8eab\u5305\u542b\u4e86\u8ba4\u8bc1\u4fe1\u606f\uff0c\u4e00\u65e6\u6cc4\u9732\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u83b7\u5f97\u8be5\u4ee4\u724c\u7684\u6240\u6709\u6743\u9650\u3002\u4e3a\u4e86\u51cf\u5c11\u76d7\u7528\uff0cJWT \u7684\u6709\u6548\u671f\u5e94\u8be5\u8bbe\u7f6e\u5f97\u6bd4\u8f83\u77ed\u3002\u5bf9\u4e8e\u4e00\u4e9b\u6bd4\u8f83\u91cd\u8981\u7684\u6743\u9650\uff0c\u4f7f\u7528\u65f6\u5e94\u8be5\u518d\u6b21\u5bf9\u7528\u6237\u8fdb\u884c\u8ba4\u8bc1\u3002 \uff086\uff09\u4e3a\u4e86\u51cf\u5c11\u76d7\u7528\uff0cJWT \u4e0d\u5e94\u8be5\u4f7f\u7528 HTTP \u534f\u8bae\u660e\u7801\u4f20\u8f93\uff0c\u8981\u4f7f\u7528 HTTPS \u534f\u8bae\u4f20\u8f93\u3002","title":"5. JWT \u7684\u51e0\u4e2a\u7279\u70b9"},{"location":"tantan/further/sso/#6_jwt","text":"\u751f\u6210jwt public static void main ( String [] args ) { // \u79d8\u94a5 String secret = \"itcast\" ; // \u5b9a\u4e49 \u8377\u8f7d,\u53cajwt \u7684\u7b2c\u4e8c\u90e8\u5206\u6570\u636e Map < String , Object > claims = new HashMap < String , Object > (); claims . put ( \"mobile\" , \"12345789\" ); claims . put ( \"id\" , \"2\" ); // \u751f\u6210token String jwt = Jwts . builder () . setClaims ( claims ) //\u8bbe\u7f6e\u54cd\u5e94\u6570\u636e\u4f53 . setExpiration ( new Date ( System . currentTimeMillis () + 30 * 1000 )) // \u8d85\u65f6\u65f6\u95f4 ,30\u79d2\u540e\u5931\u6548 . signWith ( SignatureAlgorithm . HS256 , secret ) //\u8bbe\u7f6e\u52a0\u5bc6\u65b9\u6cd5\u548c\u52a0\u5bc6\u76d0 . compact (); System . out . println ( jwt ); //eyJhbGciOiJIUzI1NiJ9.eyJtb2JpbGUiOiIxMjM0NTc4OSIsImlkIjoiMiIsImV4cCI6MTYwNTg4MTkxN30.gTHkE0Eq8--r5qaFuTaWkiw20PyM0gpe8MBU5k_JDpg } jwt \u6821\u9a8c \u5982\u679c\u6821\u9a8c\u5931\u8d25\u5219 \u62a5\u9519 // jwt \u6821\u9a8c public static void main ( String [] args ) { // \u79d8\u94a5 String secret = \"itcast\" ; String jwt = \"eyJhbGciOiJIUzI1NiJ9.eyJtb2JpbGUiOiIxMjM0NTc4OSIsImlkIjoiMiIsImV4cCI6MTYwNTg4MTkxN30.gTHkE0Eq8--r5qaFuTaWkiw20PyM0gpe8MBU5k_JDpg\" ; // \u901a\u8fc7token\u89e3\u6790\u6570\u636e Map < String , Object > body = Jwts . parser () . setSigningKey ( secret ) . parseClaimsJws ( jwt ) . getBody (); System . out . println ( body ); //{mobile=12345789, id=2} } \u8bf4\u660e: jwt \u5e76\u4e0d\u662f\u5b89\u5168\u7684,\u4e0d\u8981\u5b58\u50a8\u654f\u611f\u4fe1\u606f \u4f8b\u5982\u6211\u4eec\u83b7\u5f97jwt \u7684\u4e2d\u95f4\u90e8\u5206 \u4f7f\u7528base64 \u5373\u53ef\u89e3\u5bc6 // \u89e3\u5bc6 byte [] bs = Base64 . getDecoder (). decode ( \"eyJtb2JpbGUiOiIxMjM0NTc4OSIsImlkIjoiMiIsImV4cCI6MTYwNTg4MTkxN30\" ); System . out . println ( new String ( bs ));","title":"6. jwt \u7684\u4f7f\u7528"},{"location":"tantan/further/threadlocal/ThreadLocal/","text":"ThreadLocal \u00b6 \u591a\u7ebf\u7a0b\u8bbf\u95ee\u540c\u4e00\u4e2a\u5171\u4eab\u53d8\u91cf\u7684\u65f6\u5019\u5bb9\u6613\u51fa\u73b0\u5e76\u53d1\u95ee\u9898,\u4e3a\u4e86\u4fdd\u8bc1\u6ca1\u6709\u5e76\u53d1\u95ee\u9898,\u6211\u4eec\u53ef\u4ee5\u8ba9\u6bcf\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u81ea\u5df1\u7684\u72ec\u6709\u7684\u53d8\u91cf,\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 \u4e00\u4e2amap \u96c6\u5408,\u6765\u4fdd\u8bc1\u6bcf\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u5f53\u524d\u7ebf\u7a0b\u72ec\u6709\u7684\u6570\u636e \u5728tomcat \u7f16\u7a0b\u4e2d\u4e3a\u4e86\u66f4\u65b9\u4fbf\u7684\u4f20\u9012\u6570\u636e,\u6211\u4eec\u5e0c\u671b\u628a\u6570\u636e\u653e\u5230\u4e00\u4e2a\u5de5\u5177\u7c7b\u5168\u5c40\u53d8\u91cf\u4e2d,\u8ba9\u540e\u4f7f\u7528\u7684\u65f6\u5019,\u4ece\u5de5\u5177\u7c7b\u7684\u5168\u5c40\u53d8\u91cf\u4e2d\u83b7\u53d6,\u8fd9\u6837\u6211\u4eec\u5c31\u4f1a\u5c11\u5f88\u591a\u53c2\u6570\u7684\u4f20\u9012,\u8fdb\u800c\u63d0\u5347\u5f00\u53d1\u6548\u7387 \u4f46\u662f \u591a\u7ebf\u7a0b\u8bbf\u95ee\u540c\u4e00\u4e2a\u5171\u4eab\u53d8\u91cf\u7684\u65f6\u5019\u5bb9\u6613\u51fa\u73b0\u5e76\u53d1\u95ee\u9898,\u4e3a\u4e86\u4fdd\u8bc1\u6ca1\u6709\u5e76\u53d1\u95ee\u9898,\u6211\u4eec\u53ef\u4ee5\u8ba9\u6bcf\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u81ea\u5df1\u7684\u72ec\u6709\u7684\u53d8\u91cf, (\u7b28\u65b9\u6cd5)\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 \u4e00\u4e2amap \u96c6\u5408,\u6765\u4fdd\u8bc1\u6bcf\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u5f53\u524d\u7ebf\u7a0b\u72ec\u6709\u7684\u6570\u636e:\u5982\u4e0b 1. \u81ea\u5b9a\u4e49Map\u96c6\u5408\u65b9\u5f0f \u00b6 public class ThreadUtil { private static final Map map = new HashMap (); // \u83b7\u53d6\u6570\u636e public static Object get ( String name ){ return map . get ( name ); } //\u8bfb\u53d6\u6570\u636e public static void set ( String key , Object obj ){ map . put ( key , obj ); } } sji //\u6570\u636e\u5b58\u653e @RestController public class HelloController { @RequestMapping ( \"/hello\" ) public String hello (){ ThreadUtil . set ( Thread . currentThread (). getName (), \"hahah\" ); System . out . println ( \"\u8bbf\u95ee1....\" ); return \"hello 8080\" ; } } // \u6570\u636e\u83b7\u53d6 @Service public class HelloService { public void test (){ System . out . println ( ThreadUtil . get ( Thread . currentThread (). getName ())); System . out . println (); } } \u4f7f\u7528\u8d77\u6765\u76f8\u5bf9\u4e0d\u662f\u5f88\u65b9\u4fbf, \u5176\u5b9e jdk \u5df2\u7ecf\u81ea\u5e26\u4e86\u4e00\u4e2a \u6bd4\u8f83\u65b9\u4fbf\u7684,\u548c\u7ebf\u7a0b\u7ed1\u5b9a\u7684 \u5bf9\u8c61 ThreadLocal 2. ThreadLocal \u00b6 public class ThreadUtil { private static final ThreadLocal thead = new ThreadLocal (); // \u83b7\u53d6\u6570\u636e public static Object get (){ return thead.get (); } //\u8bfb\u53d6\u6570\u636e public static void set ( Object obj ){ thead.set ( obj ); } } //\u6570\u636e\u5b58\u653e @RestController public class HelloController { @RequestMapping ( \"/hello\" ) public String hello (){ ThreadUtil . set ( \"hahah\" ); System . out . println ( \"\u8bbf\u95ee1....\" ); return \"hello 8080\" ; } } // \u6570\u636e\u83b7\u53d6 @Service public class HelloService { public void test (){ System . out . println ( ThreadUtil . get ()); System . out . println (); } }","title":"ThreadLocal"},{"location":"tantan/further/threadlocal/ThreadLocal/#threadlocal","text":"\u591a\u7ebf\u7a0b\u8bbf\u95ee\u540c\u4e00\u4e2a\u5171\u4eab\u53d8\u91cf\u7684\u65f6\u5019\u5bb9\u6613\u51fa\u73b0\u5e76\u53d1\u95ee\u9898,\u4e3a\u4e86\u4fdd\u8bc1\u6ca1\u6709\u5e76\u53d1\u95ee\u9898,\u6211\u4eec\u53ef\u4ee5\u8ba9\u6bcf\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u81ea\u5df1\u7684\u72ec\u6709\u7684\u53d8\u91cf,\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 \u4e00\u4e2amap \u96c6\u5408,\u6765\u4fdd\u8bc1\u6bcf\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u5f53\u524d\u7ebf\u7a0b\u72ec\u6709\u7684\u6570\u636e \u5728tomcat \u7f16\u7a0b\u4e2d\u4e3a\u4e86\u66f4\u65b9\u4fbf\u7684\u4f20\u9012\u6570\u636e,\u6211\u4eec\u5e0c\u671b\u628a\u6570\u636e\u653e\u5230\u4e00\u4e2a\u5de5\u5177\u7c7b\u5168\u5c40\u53d8\u91cf\u4e2d,\u8ba9\u540e\u4f7f\u7528\u7684\u65f6\u5019,\u4ece\u5de5\u5177\u7c7b\u7684\u5168\u5c40\u53d8\u91cf\u4e2d\u83b7\u53d6,\u8fd9\u6837\u6211\u4eec\u5c31\u4f1a\u5c11\u5f88\u591a\u53c2\u6570\u7684\u4f20\u9012,\u8fdb\u800c\u63d0\u5347\u5f00\u53d1\u6548\u7387 \u4f46\u662f \u591a\u7ebf\u7a0b\u8bbf\u95ee\u540c\u4e00\u4e2a\u5171\u4eab\u53d8\u91cf\u7684\u65f6\u5019\u5bb9\u6613\u51fa\u73b0\u5e76\u53d1\u95ee\u9898,\u4e3a\u4e86\u4fdd\u8bc1\u6ca1\u6709\u5e76\u53d1\u95ee\u9898,\u6211\u4eec\u53ef\u4ee5\u8ba9\u6bcf\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u81ea\u5df1\u7684\u72ec\u6709\u7684\u53d8\u91cf, (\u7b28\u65b9\u6cd5)\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 \u4e00\u4e2amap \u96c6\u5408,\u6765\u4fdd\u8bc1\u6bcf\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u5f53\u524d\u7ebf\u7a0b\u72ec\u6709\u7684\u6570\u636e:\u5982\u4e0b","title":"ThreadLocal"},{"location":"tantan/further/threadlocal/ThreadLocal/#1_map","text":"public class ThreadUtil { private static final Map map = new HashMap (); // \u83b7\u53d6\u6570\u636e public static Object get ( String name ){ return map . get ( name ); } //\u8bfb\u53d6\u6570\u636e public static void set ( String key , Object obj ){ map . put ( key , obj ); } } sji //\u6570\u636e\u5b58\u653e @RestController public class HelloController { @RequestMapping ( \"/hello\" ) public String hello (){ ThreadUtil . set ( Thread . currentThread (). getName (), \"hahah\" ); System . out . println ( \"\u8bbf\u95ee1....\" ); return \"hello 8080\" ; } } // \u6570\u636e\u83b7\u53d6 @Service public class HelloService { public void test (){ System . out . println ( ThreadUtil . get ( Thread . currentThread (). getName ())); System . out . println (); } } \u4f7f\u7528\u8d77\u6765\u76f8\u5bf9\u4e0d\u662f\u5f88\u65b9\u4fbf, \u5176\u5b9e jdk \u5df2\u7ecf\u81ea\u5e26\u4e86\u4e00\u4e2a \u6bd4\u8f83\u65b9\u4fbf\u7684,\u548c\u7ebf\u7a0b\u7ed1\u5b9a\u7684 \u5bf9\u8c61 ThreadLocal","title":"1. \u81ea\u5b9a\u4e49Map\u96c6\u5408\u65b9\u5f0f"},{"location":"tantan/further/threadlocal/ThreadLocal/#2_threadlocal","text":"public class ThreadUtil { private static final ThreadLocal thead = new ThreadLocal (); // \u83b7\u53d6\u6570\u636e public static Object get (){ return thead.get (); } //\u8bfb\u53d6\u6570\u636e public static void set ( Object obj ){ thead.set ( obj ); } } //\u6570\u636e\u5b58\u653e @RestController public class HelloController { @RequestMapping ( \"/hello\" ) public String hello (){ ThreadUtil . set ( \"hahah\" ); System . out . println ( \"\u8bbf\u95ee1....\" ); return \"hello 8080\" ; } } // \u6570\u636e\u83b7\u53d6 @Service public class HelloService { public void test (){ System . out . println ( ThreadUtil . get ()); System . out . println (); } }","title":"2. ThreadLocal"}]}